output file:
processed_korniafind_fundamental110.json
function:
find_fundamental
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'onnxrt', 'tvm', 'inductor', 'jit', 'openxla', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 16 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XFAIL
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
_________________ TestFindFundamental.test_smoke[cpu-float32] __________________

self = <test_fundamental.TestFindFundamental object at 0x753a05cda350>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        points1 = torch.rand(1, 8, 2, device=device, dtype=dtype)
        points2 = torch.rand(1, 8, 2, device=device, dtype=dtype)
        weights = torch.ones(1, 8, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.0604, 0.3111],
         [0.7966, 0.0102],
         [0.0148, 0.6991],
         [0.1638, 0.1058],
         [0.6898, 0.0184],
         [0.1845, 0.6565],
         [0.4077, 0.5632],
         [0.2377, 0.3645]]])
points2 = tensor([[[0.9534, 0.7641],
         [0.3371, 0.5304],
         [0.5606, 0.2483],
         [0.5480, 0.9977],
         [0.3617, 0.1487],
         [0.2020, 0.6117],
         [0.6600, 0.5754],
         [0.9737, 0.6132]]])
weights = tensor([[1., 1., 1., 1., 1., 1., 1., 1.]]), method = '8POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix using the specified method.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
            raise ValueError('At least 8 points are required to compute the fundamental matrix.')
    
        def normalize_points(points):
            mean = points.mean(dim=1, keepdim=True)
            std = points.std(dim=1, keepdim=True)
            return (points - mean) / std
        points1_normalized = normalize_points(points1)
        points2_normalized = normalize_points(points2)
    
        def construct_A(p1, p2):
            x1, y1 = (p1[:, :, 0], p1[:, :, 1])
            x2, y2 = (p2[:, :, 0], p2[:, :, 1])
            A = torch.stack([x2 * x1, x2 * y1, x2, y2 * x1, y2 * y1, y2, x1, y1, torch.ones_like(x1)], dim=-1)
            return A
        A = construct_A(points1_normalized, points2_normalized)
        W = weights.unsqueeze(-1)
        A = A * W
        U, S, Vt = torch.svd(A)
>       F = Vt[:, -1].view(B, 3, 3)
E       RuntimeError: shape '[1, 3, 3]' is invalid for input of size 8

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:49: RuntimeError
_______________ TestFindFundamental.test_shape[cpu-float32-1-8] ________________

self = <test_fundamental.TestFindFundamental object at 0x753a05cda800>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.3816, 0.5756],
         [0.9725, 0.7207],
         [0.2583, 0.0207],
         [0.9404, 0.9101],
         [0.8894, 0.6991],
         [0.2082, 0.4912],
         [0.0033, 0.8426],
         [0.2479, 0.8356]]])
points2 = tensor([[[0.7638, 0.2983],
         [0.2476, 0.0995],
         [0.5221, 0.6971],
         [0.2881, 0.4917],
         [0.0917, 0.1221],
         [0.8927, 0.0884],
         [0.9966, 0.6497],
         [0.3129, 0.7024]]])
weights = tensor([[1., 1., 1., 1., 1., 1., 1., 1.]]), method = '8POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix using the specified method.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
            raise ValueError('At least 8 points are required to compute the fundamental matrix.')
    
        def normalize_points(points):
            mean = points.mean(dim=1, keepdim=True)
            std = points.std(dim=1, keepdim=True)
            return (points - mean) / std
        points1_normalized = normalize_points(points1)
        points2_normalized = normalize_points(points2)
    
        def construct_A(p1, p2):
            x1, y1 = (p1[:, :, 0], p1[:, :, 1])
            x2, y2 = (p2[:, :, 0], p2[:, :, 1])
            A = torch.stack([x2 * x1, x2 * y1, x2, y2 * x1, y2 * y1, y2, x1, y1, torch.ones_like(x1)], dim=-1)
            return A
        A = construct_A(points1_normalized, points2_normalized)
        W = weights.unsqueeze(-1)
        A = A * W
        U, S, Vt = torch.svd(A)
>       F = Vt[:, -1].view(B, 3, 3)
E       RuntimeError: shape '[1, 3, 3]' is invalid for input of size 8

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:49: RuntimeError
_______________ TestFindFundamental.test_shape[cpu-float32-2-9] ________________

self = <test_fundamental.TestFindFundamental object at 0x753a05cda740>
batch_size = 2, num_points = 9, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: in find_fundamental
    F = denormalize_F(F, points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

F = tensor([[[-0.0350, -0.2012,  0.1401],
         [-0.9492, -0.0745,  0.0276],
         [ 0.1458, -0.0550, -0.0841]],

        [[-0.1236, -0.1681,  0.7866],
         [ 0.4782, -0.1455,  0.2517],
         [-0.1035,  0.1042,  0.0541]]])
p1 = tensor([[[0.7030, 0.5685],
         [0.0044, 0.8713],
         [0.9837, 0.7085],
         [0.5997, 0.3180],
         [... 0.9597],
         [0.0740, 0.4599],
         [0.4056, 0.1250],
         [0.0386, 0.0466],
         [0.1133, 0.5305]]])
p2 = tensor([[[0.5286, 0.9750],
         [0.2310, 0.9376],
         [0.3562, 0.7292],
         [0.8311, 0.9768],
         [... 0.5035],
         [0.1205, 0.7540],
         [0.8106, 0.6155],
         [0.0863, 0.7509],
         [0.7601, 0.9219]]])

    def denormalize_F(F, p1, p2):
        mean1, std1 = (p1.mean(dim=1, keepdim=True), p1.std(dim=1, keepdim=True))
        mean2, std2 = (p2.mean(dim=1, keepdim=True), p2.std(dim=1, keepdim=True))
>       T1 = torch.diag_embed(torch.tensor([std1[:, 0, 0], std1[:, 0, 1], torch.ones(B)]).to(F.device))
E       ValueError: only one element tensors can be converted to Python scalars

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:58: ValueError
_______________ TestFindFundamental.test_shape[cpu-float32-3-10] _______________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdaaa0>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: in find_fundamental
    F = denormalize_F(F, points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

F = tensor([[[-0.2549, -0.3448,  0.2189],
         [ 0.7389,  0.0071, -0.2049],
         [ 0.1659,  0.3280,  0.2123]],

  ...],

        [[-0.4156, -0.0130,  0.3066],
         [ 0.6573,  0.0543,  0.3064],
         [-0.0088, -0.2795, -0.3550]]])
p1 = tensor([[[0.6675, 0.1988],
         [0.1991, 0.0352],
         [0.5302, 0.3148],
         [0.7315, 0.7590],
         [... 0.7470],
         [0.4844, 0.7228],
         [0.9666, 0.2110],
         [0.8843, 0.1453],
         [0.1691, 0.2253]]])
p2 = tensor([[[0.6495, 0.7798],
         [0.5571, 0.9184],
         [0.3295, 0.4628],
         [0.4071, 0.3650],
         [... 0.1489],
         [0.3963, 0.5977],
         [0.0992, 0.0826],
         [0.0012, 0.2096],
         [0.8989, 0.6674]]])

    def denormalize_F(F, p1, p2):
        mean1, std1 = (p1.mean(dim=1, keepdim=True), p1.std(dim=1, keepdim=True))
        mean2, std2 = (p2.mean(dim=1, keepdim=True), p2.std(dim=1, keepdim=True))
>       T1 = torch.diag_embed(torch.tensor([std1[:, 0, 0], std1[:, 0, 1], torch.ones(B)]).to(F.device))
E       ValueError: only one element tensors can be converted to Python scalars

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:58: ValueError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-1-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdae30>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.2976, 0.5376],
         [0.6539, 0.2859],
         [0.2066, 0.6809],
         [0.9555, 0.9247],
         [0.0028, 0.2787],
         [0.1511, 0.0841],
         [0.4943, 0.2008],
         [0.6898, 0.5941]]])
points2 = tensor([[[0.4613, 0.4803],
         [0.1283, 0.9241],
         [0.8108, 0.7700],
         [0.6094, 0.8558],
         [0.8728, 0.7687],
         [0.1853, 0.7740],
         [0.9661, 0.9242],
         [0.7122, 0.1655]]])
weights = None, method = '8POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix using the specified method.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
            raise ValueError('At least 8 points are required to compute the fundamental matrix.')
    
        def normalize_points(points):
            mean = points.mean(dim=1, keepdim=True)
            std = points.std(dim=1, keepdim=True)
            return (points - mean) / std
        points1_normalized = normalize_points(points1)
        points2_normalized = normalize_points(points2)
    
        def construct_A(p1, p2):
            x1, y1 = (p1[:, :, 0], p1[:, :, 1])
            x2, y2 = (p2[:, :, 0], p2[:, :, 1])
            A = torch.stack([x2 * x1, x2 * y1, x2, y2 * x1, y2 * y1, y2, x1, y1, torch.ones_like(x1)], dim=-1)
            return A
        A = construct_A(points1_normalized, points2_normalized)
>       W = weights.unsqueeze(-1)
E       AttributeError: 'NoneType' object has no attribute 'unsqueeze'

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:46: AttributeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-2-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdad70>
batch_size = 2, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.9128, 0.4455],
         [0.5303, 0.8992],
         [0.7071, 0.9793],
         [0.1179, 0.6127],
         [... 0.8146],
         [0.4521, 0.2570],
         [0.9634, 0.3880],
         [0.9266, 0.0409],
         [0.1572, 0.9867]]])
points2 = tensor([[[0.5964, 0.0146],
         [0.2636, 0.4102],
         [0.7769, 0.1357],
         [0.0728, 0.2243],
         [... 0.8967],
         [0.9171, 0.7097],
         [0.8078, 0.1825],
         [0.8082, 0.6337],
         [0.5970, 0.5406]]])
weights = None, method = '8POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix using the specified method.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
            raise ValueError('At least 8 points are required to compute the fundamental matrix.')
    
        def normalize_points(points):
            mean = points.mean(dim=1, keepdim=True)
            std = points.std(dim=1, keepdim=True)
            return (points - mean) / std
        points1_normalized = normalize_points(points1)
        points2_normalized = normalize_points(points2)
    
        def construct_A(p1, p2):
            x1, y1 = (p1[:, :, 0], p1[:, :, 1])
            x2, y2 = (p2[:, :, 0], p2[:, :, 1])
            A = torch.stack([x2 * x1, x2 * y1, x2, y2 * x1, y2 * y1, y2, x1, y1, torch.ones_like(x1)], dim=-1)
            return A
        A = construct_A(points1_normalized, points2_normalized)
>       W = weights.unsqueeze(-1)
E       AttributeError: 'NoneType' object has no attribute 'unsqueeze'

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:46: AttributeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-3-10] __________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdb0d0>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.6207, 0.8880],
         [0.1410, 0.2630],
         [0.6783, 0.7184],
         [0.3764, 0.8691],
         [... 0.0881],
         [0.9244, 0.9106],
         [0.3478, 0.4065],
         [0.7484, 0.0432],
         [0.9792, 0.1165]]])
points2 = tensor([[[0.4107, 0.5131],
         [0.8362, 0.7548],
         [0.7057, 0.8343],
         [0.3894, 0.4887],
         [... 0.2685],
         [0.9740, 0.9959],
         [0.5450, 0.9544],
         [0.7446, 0.8408],
         [0.7162, 0.4669]]])
weights = None, method = '8POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix using the specified method.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
            raise ValueError('At least 8 points are required to compute the fundamental matrix.')
    
        def normalize_points(points):
            mean = points.mean(dim=1, keepdim=True)
            std = points.std(dim=1, keepdim=True)
            return (points - mean) / std
        points1_normalized = normalize_points(points1)
        points2_normalized = normalize_points(points2)
    
        def construct_A(p1, p2):
            x1, y1 = (p1[:, :, 0], p1[:, :, 1])
            x2, y2 = (p2[:, :, 0], p2[:, :, 1])
            A = torch.stack([x2 * x1, x2 * y1, x2, y2 * x1, y2 * y1, y2, x1, y1, torch.ones_like(x1)], dim=-1)
            return A
        A = construct_A(points1_normalized, points2_normalized)
>       W = weights.unsqueeze(-1)
E       AttributeError: 'NoneType' object has no attribute 'unsqueeze'

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:46: AttributeError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-1] _____________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdb460>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.1298, 0.1082],
         [0.6691, 0.6096],
         [0.8536, 0.5870],
         [0.2260, 0.4084],
         [0.0448, 0.5493],
         [0.7338, 0.3789],
         [0.5431, 0.6985]]])
points2 = tensor([[[0.7976, 0.8623],
         [0.1707, 0.3073],
         [0.6849, 0.7325],
         [0.5457, 0.3086],
         [0.9393, 0.5147],
         [0.0453, 0.4020],
         [0.3117, 0.0237]]])
weights = None, method = '7POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix using the specified method.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
>           raise ValueError('At least 8 points are required to compute the fundamental matrix.')
E           ValueError: At least 8 points are required to compute the fundamental matrix.

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: ValueError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-2] _____________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdb3a0>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.3129, 0.4511],
         [0.1112, 0.9416],
         [0.1557, 0.1493],
         [0.7056, 0.0609],
         [... 0.9481],
         [0.8109, 0.1725],
         [0.2053, 0.6694],
         [0.9587, 0.8361],
         [0.0890, 0.9120]]])
points2 = tensor([[[0.3283, 0.7617],
         [0.2000, 0.9321],
         [0.9672, 0.4319],
         [0.2058, 0.6192],
         [... 0.6895],
         [0.4927, 0.3794],
         [0.7440, 0.9870],
         [0.2658, 0.6415],
         [0.0808, 0.0958]]])
weights = None, method = '7POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix using the specified method.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
>           raise ValueError('At least 8 points are required to compute the fundamental matrix.')
E           ValueError: At least 8 points are required to compute the fundamental matrix.

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: ValueError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-3] _____________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdb6a0>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.1726, 0.5125],
         [0.8735, 0.1400],
         [0.7982, 0.1615],
         [0.4201, 0.7294],
         [... 0.4349],
         [0.8623, 0.4919],
         [0.2206, 0.6369],
         [0.0163, 0.9000],
         [0.2913, 0.6053]]])
points2 = tensor([[[0.7733, 0.5802],
         [0.9482, 0.1120],
         [0.9820, 0.1035],
         [0.9531, 0.6884],
         [... 0.9322],
         [0.9825, 0.6072],
         [0.9285, 0.9820],
         [0.8733, 0.8515],
         [0.1019, 0.7990]]])
weights = None, method = '7POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix using the specified method.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
>           raise ValueError('At least 8 points are required to compute the fundamental matrix.')
E           ValueError: At least 8 points are required to compute the fundamental matrix.

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: ValueError
_______________ TestFindFundamental.test_opencv_svd[cpu-float32] _______________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdb970>
device = device(type='cpu'), dtype = torch.float32

    def test_opencv_svd(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                    [0.2645, 0.8882],
                    [0.2411, 0.3045],
                    [0.8199, 0.4107],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                    [0.8908, 0.1233],
                    [0.2338, 0.7663],
                    [0.4466, 0.5696],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        weights = torch.ones(1, 10, device=device, dtype=dtype)
    
        # generated with OpenCV using above points
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_8POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [-0.47408533, 0.22033807, -0.00346677],
                    [0.54935973, 1.31080955, -1.25028275],
                    [-0.36690215, -1.08143769, 1.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: in find_fundamental
    F = denormalize_F(F, points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

F = tensor([[[ 0.1526, -0.5550, -0.3281],
         [-0.5558, -0.2416,  0.3012],
         [ 0.1754, -0.2515,  0.0941]]])
p1 = tensor([[[0.8569, 0.5982],
         [0.0059, 0.9649],
         [0.1968, 0.8846],
         [0.6084, 0.3467],
         [... 0.8939],
         [0.0863, 0.5133],
         [0.2645, 0.8882],
         [0.2411, 0.3045],
         [0.8199, 0.4107]]])
p2 = tensor([[[0.0928, 0.3013],
         [0.0989, 0.9649],
         [0.0341, 0.4827],
         [0.8294, 0.4469],
         [... 0.8182],
         [0.5264, 0.8869],
         [0.8908, 0.1233],
         [0.2338, 0.7663],
         [0.4466, 0.5696]]])

    def denormalize_F(F, p1, p2):
        mean1, std1 = (p1.mean(dim=1, keepdim=True), p1.std(dim=1, keepdim=True))
        mean2, std2 = (p2.mean(dim=1, keepdim=True), p2.std(dim=1, keepdim=True))
        T1 = torch.diag_embed(torch.tensor([std1[:, 0, 0], std1[:, 0, 1], torch.ones(B)]).to(F.device))
>       T1[:, 0, 2] = mean1[:, 0, 0]
E       IndexError: too many indices for tensor of dimension 2

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:59: IndexError
_____________ TestFindFundamental.test_7point_opencv[cpu-float32] ______________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdbca0>
device = device(type='cpu'), dtype = torch.float32

    def test_7point_opencv(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        # generated with OpenCV using above points
        # Fm_expected shape is 9x3
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_7POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [
                        [-2.87490907, 5.41934672, 0.73871396],
                        [0.34010174, 3.70371623, -4.65517276],
                        [-0.1809933, -0.56577107, 1.0],
                    ],
                    [
                        [0.14465888, 0.68711702, -0.65570944],
                        [0.53424758, 0.7988479, -0.75446946],
                        [-0.48201197, -1.05375511, 1.0],
                    ],
                    [
                        [-0.0901827, 1.05515785, -0.54726062],
                        [0.51914823, 1.02476892, -1.05783979],
                        [-0.45860077, -1.01580301, 1.0],
                    ],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.8569, 0.5982],
         [0.0059, 0.9649],
         [0.1968, 0.8846],
         [0.6084, 0.3467],
         [0.9633, 0.5274],
         [0.8941, 0.8939],
         [0.0863, 0.5133]]])
points2 = tensor([[[0.0928, 0.3013],
         [0.0989, 0.9649],
         [0.0341, 0.4827],
         [0.8294, 0.4469],
         [0.2230, 0.2998],
         [0.1722, 0.8182],
         [0.5264, 0.8869]]])
weights = None, method = '7POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix using the specified method.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
>           raise ValueError('At least 8 points are required to compute the fundamental matrix.')
E           ValueError: At least 8 points are required to compute the fundamental matrix.

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: ValueError
________ TestFindFundamental.test_synthetic_sampson_7point[cpu-float32] ________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdbf10>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson_7point(self, device, dtype):
        scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)
        x1 = scene["x1"][:, :7, :]
        x2 = scene["x2"][:, :7, :]
>       F_est = epi.find_fundamental(x1, x2, None, "7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:243: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[121.4746,  13.0953],
         [100.8264, -10.7780],
         [ 71.9146,  26.5506],
         [229.4330,  76.9214],
         [183.3715,  10.7248],
         [153.2257,  13.2869],
         [ 94.8865, -26.3014]]])
points2 = tensor([[[106.9337,   5.4511],
         [100.7032,  -5.9886],
         [ 87.3092,   9.6551],
         [122.8719,  17.8623],
         [126.1115,   5.5584],
         [118.6300,   6.0464],
         [104.3569,  -1.5886]]])
weights = None, method = '7POINT'

    def find_fundamental(points1, points2, weights, method):
        """
        Compute the fundamental matrix using the specified method.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
            method: The method to use for computing the fundamental matrix. Supported methods are "7POINT" and "8POINT".
    
        Returns:
            The computed fundamental matrix with shape (B, 3*m, 3), where `m` is the number of fundamental matrices.
    
        Raises:
            ValueError: If an invalid method is provided.
        """
        if method not in ['7POINT', '8POINT']:
            raise ValueError(f"Invalid method '{method}'. Supported methods are '7POINT' and '8POINT'.")
        B, N, _ = points1.shape
        if N < 8:
>           raise ValueError('At least 8 points are required to compute the fundamental matrix.')
E           ValueError: At least 8 points are required to compute the fundamental matrix.

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:31: ValueError
___________ TestFindFundamental.test_synthetic_sampson[cpu-float32] ____________

self = <test_fundamental.TestFindFundamental object at 0x753a05cdabc0>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson(self, device, dtype):
        scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)
    
        x1 = scene["x1"]
        x2 = scene["x2"]
    
        weights = torch.ones_like(x1)[..., 0]
>       F_est = epi.find_fundamental(x1, x2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: in find_fundamental
    F = denormalize_F(F, points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

F = tensor([[[ 0.3610,  0.3379, -0.1309],
         [-0.1016,  0.1640,  0.8351],
         [ 0.0253,  0.0204,  0.0512]]])
p1 = tensor([[[44.4148, 46.7609],
         [54.1753, 44.2858],
         [46.4512, 36.7938],
         [46.4772, 44.4890],
  ...,
         [24.0630, 45.6889],
         [38.7440, 35.2435],
         [44.9826, 45.0092],
         [70.4473, 37.3996]]])
p2 = tensor([[[ 96.8648,  41.2163],
         [106.7241,  38.2062],
         [ 87.9598,  30.0466],
         [ 96.0741,  37.7...   [ 74.9710,  42.8281],
         [ 80.3007,  31.9091],
         [ 96.3871,  40.2523],
         [117.3405,  25.4304]]])

    def denormalize_F(F, p1, p2):
        mean1, std1 = (p1.mean(dim=1, keepdim=True), p1.std(dim=1, keepdim=True))
        mean2, std2 = (p2.mean(dim=1, keepdim=True), p2.std(dim=1, keepdim=True))
        T1 = torch.diag_embed(torch.tensor([std1[:, 0, 0], std1[:, 0, 1], torch.ones(B)]).to(F.device))
>       T1[:, 0, 2] = mean1[:, 0, 0]
E       IndexError: too many indices for tensor of dimension 2

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:59: IndexError
___________________ TestFindFundamental.test_gradcheck[cpu] ____________________

self = <test_fundamental.TestFindFundamental object at 0x753a05b185e0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        points1 = torch.rand(1, 10, 2, device=device, dtype=torch.float64, requires_grad=True)
        points2 = torch.rand(1, 10, 2, device=device, dtype=torch.float64)
        weights = torch.ones(1, 10, device=device, dtype=torch.float64)
>       self.gradcheck(epi.find_fundamental, (points1, points2, weights))

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in find_fundamental
    return find_fundamental(points1, points2, weights, method)
../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:66: in find_fundamental
    F = denormalize_F(F, points1, points2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

F = tensor([[[ 0.2321,  0.3497,  0.6059],
         [-0.0128, -0.2254, -0.1505],
         [-0.5189, -0.3324,  0.0581]]], dtype=torch.float64,
       grad_fn=<ViewBackward0>)
p1 = tensor([[[0.5060, 0.5675],
         [0.8016, 0.7290],
         [0.2181, 0.5469],
         [0.8572, 0.3318],
         [...     [0.6024, 0.9878],
         [0.9725, 0.3800],
         [0.9211, 0.3021]]], dtype=torch.float64, requires_grad=True)
p2 = tensor([[[0.4070, 0.3102],
         [0.5393, 0.6641],
         [0.6671, 0.6501],
         [0.7007, 0.1598],
         [...     [0.7963, 0.5061],
         [0.0462, 0.6047],
         [0.1244, 0.5409]]], dtype=torch.float64, requires_grad=True)

    def denormalize_F(F, p1, p2):
        mean1, std1 = (p1.mean(dim=1, keepdim=True), p1.std(dim=1, keepdim=True))
        mean2, std2 = (p2.mean(dim=1, keepdim=True), p2.std(dim=1, keepdim=True))
        T1 = torch.diag_embed(torch.tensor([std1[:, 0, 0], std1[:, 0, 1], torch.ones(B)]).to(F.device))
>       T1[:, 0, 2] = mean1[:, 0, 0]
E       IndexError: too many indices for tensor of dimension 2

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:59: IndexError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]
======================== 15 failed, 1 xfailed in 0.70s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'jit', 'onnxrt', 'tvm', 'cudagraphs', 'inductor', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 16 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.21s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'openxla', 'onnxrt', 'tvm', 'cudagraphs', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 16 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.17s =========================
