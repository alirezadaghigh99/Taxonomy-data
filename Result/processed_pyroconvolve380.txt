output file:
processed_pyroconvolve380.json
function:
convolve
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-4] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-10]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-4] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-4]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6] FAILED', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6]', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5]', '../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-6] FAILED', 'FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
collecting ... collected 324 items

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6] FAILED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-10] FAILED

=================================== FAILURES ===================================
_________________________ test_convolve[full-(4,)-2-2] _________________________

batch_shape = (4,), m = 2, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0361,  0.0511, -0.1562,  0.0311, -0.5126,  0.2457, -0.5416,  0.0044,
        -0.6589, -0.9703, -0.4503, -1.9148, -0.6418, -1.2123, -0.7345])
b = tensor([[-0.0361,  0.0511, -0.0131],
        [-0.0777,  0.0939,  0.0940],
        [-0.2812, -0.7471,  0.1392],
        [-0.3431, -1.2123, -0.7345]])
prec = 1e-07
msg = 'tensor([-0.0361,  0.0511, -0.1562,  0.0311, -0.5126,  0.2457, -0.5416,  0.0044,\n        -0.6589, -0.9703, -0.4503, -...1],\n        [-0.0777,  0.0939,  0.0940],\n        [-0.2812, -0.7471,  0.1392],\n        [-0.3431, -1.2123, -0.7345]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0361,  0.0511, -0.1562,  0.0311, -0.5126,  0.2457, -0.5416,  0.0044,
E               -0.6589, -0.9703, -0.4503, -1.9148, -0.6418, -1.2123, -0.7345]) vs tensor([[-0.0361,  0.0511, -0.0131],
E               [-0.0777,  0.0939,  0.0940],
E               [-0.2812, -0.7471,  0.1392],
E               [-0.3431, -1.2123, -0.7345]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-2-3] _________________________

batch_shape = (4,), m = 3, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0262, -0.0459, -0.0461, -0.3684, -0.4502, -1.0974, -0.7853, -1.5871,
        -0.1837,  0.3012, -0.1246,  1.6281,  0.7337,  0.5545, -0.1224, -0.2585,
         0.2936,  0.0943,  0.1669])
b = tensor([[-0.0262, -0.0459, -0.0068, -0.2459],
        [-0.0848, -0.6562, -1.0906,  0.2036],
        [ 0.0375,  0.8908,  0.6565, -0.2870],
        [ 0.0511, -0.0527,  0.0943,  0.1669]])
prec = 1e-07
msg = 'tensor([-0.0262, -0.0459, -0.0461, -0.3684, -0.4502, -1.0974, -0.7853, -1.5871,\n        -0.1837,  0.3012, -0.1246,  ...562, -1.0906,  0.2036],\n        [ 0.0375,  0.8908,  0.6565, -0.2870],\n        [ 0.0511, -0.0527,  0.0943,  0.1669]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0262, -0.0459, -0.0461, -0.3684, -0.4502, -1.0974, -0.7853, -1.5871,
E               -0.1837,  0.3012, -0.1246,  1.6281,  0.7337,  0.5545, -0.1224, -0.2585,
E                0.2936,  0.0943,  0.1669]) vs tensor([[-0.0262, -0.0459, -0.0068, -0.2459],
E               [-0.0848, -0.6562, -1.0906,  0.2036],
E               [ 0.0375,  0.8908,  0.6565, -0.2870],
E               [ 0.0511, -0.0527,  0.0943,  0.1669]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-2-4] _________________________

batch_shape = (4,), m = 4, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0351, -0.8121, -0.5891, -1.0370, -0.7295,  0.5035, -0.7042, -0.6159,
         0.7614,  0.3897,  0.4243,  1.4063, -1.6046, -1.0409, -0.5392, -3.6113,
        -0.9454,  1.5934,  0.7603,  0.3910, -0.6660, -1.3855, -0.5604])
b = tensor([[-0.0351, -0.8121, -0.1607, -0.5763, -0.3248],
        [-0.1774, -0.2668, -0.3150,  0.2998,  0.4517],
        [ 0.0086, -0.4351,  0.1147, -1.6832,  0.3485],
        [-0.4144, -1.4135, -1.5611, -1.3855, -0.5604]])
prec = 1e-07
msg = 'tensor([-0.0351, -0.8121, -0.5891, -1.0370, -0.7295,  0.5035, -0.7042, -0.6159,\n         0.7614,  0.3897,  0.4243,  ...517],\n        [ 0.0086, -0.4351,  0.1147, -1.6832,  0.3485],\n        [-0.4144, -1.4135, -1.5611, -1.3855, -0.5604]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0351, -0.8121, -0.5891, -1.0370, -0.7295,  0.5035, -0.7042, -0.6159,
E                0.7614,  0.3897,  0.4243,  1.4063, -1.6046, -1.0409, -0.5392, -3.6113,
E               -0.9454,  1.5934,  0.7603,  0.3910, -0.6660, -1.3855, -0.5604]) vs tensor([[-0.0351, -0.8121, -0.1607, -0.5763, -0.3248],
E               [-0.1774, -0.2668, -0.3150,  0.2998,  0.4517],
E               [ 0.0086, -0.4351,  0.1147, -1.6832,  0.3485],
E               [-0.4144, -1.4135, -1.5611, -1.3855, -0.5604]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-2-5] _________________________

batch_shape = (4,), m = 5, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.6632,  1.2743, -0.3251, -0.2738,  0.0175, -3.2074,  0.5495, -1.8437,
        -0.8156,  0.9909,  1.5448,  4....52,
         2.1576,  0.5198, -2.2542,  3.6596, -4.9219, -0.5302,  0.1610, -2.7398,
         0.1570, -1.7613,  0.0969])
b = tensor([[ 0.6632,  1.2743,  0.6589,  1.0776, -0.0811, -0.9628],
        [-0.1053,  0.9908,  1.1494,  0.9250,  0.3700, ... 2.0935, -3.9172,  1.4500,  1.7106, -3.1693,  1.5408],
        [ 0.3849, -0.8810, -0.6983,  0.0474, -1.7613,  0.0969]])
prec = 1e-07
msg = 'tensor([ 0.6632,  1.2743, -0.3251, -0.2738,  0.0175, -3.2074,  0.5495, -1.8437,\n        -0.8156,  0.9909,  1.5448,  ....0935, -3.9172,  1.4500,  1.7106, -3.1693,  1.5408],\n        [ 0.3849, -0.8810, -0.6983,  0.0474, -1.7613,  0.0969]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.6632,  1.2743, -0.3251, -0.2738,  0.0175, -3.2074,  0.5495, -1.8437,
E               -0.8156,  0.9909,  1.5448,  4.5939, -6.8390,  3.4505,  2.7499, -4.3152,
E                2.1576,  0.5198, -2.2542,  3.6596, -4.9219, -0.5302,  0.1610, -2.7398,
E                0.1570, -1.7613,  0.0969]) vs tensor([[ 0.6632,  1.2743,  0.6589,  1.0776, -0.0811, -0.9628],
E               [-0.1053,  0.9908,  1.1494,  0.9250,  0.3700, -1.2405],
E               [ 2.0935, -3.9172,  1.4500,  1.7106, -3.1693,  1.5408],
E               [ 0.3849, -0.8810, -0.6983,  0.0474, -1.7613,  0.0969]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-2-6] _________________________

batch_shape = (4,), m = 6, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.9850, -1.0928,  0.8409, -1.5326,  0.6065,  1.2159,  0.6553,  0.4574,
         1.4333,  3.1730,  2.8376, -1....4, -4.0512,  1.5300, -2.9872,  2.1872,  3.0008,
         2.2829,  4.4486, -1.4020, -1.7619, -2.1871, -1.1256, -0.7411])
b = tensor([[ 0.9850, -1.0928,  0.4740, -0.4812, -0.0996, -0.2776, -0.3117],
        [ 0.1875, -0.9955,  0.8615,  1.6991, ...-1.5011, -1.9609,  0.6119,  1.8743,  0.9452],
        [-0.0390,  1.4916, -0.1128,  1.1365, -0.6305, -1.1256, -0.7411]])
prec = 1e-07
msg = 'tensor([ 0.9850, -1.0928,  0.8409, -1.5326,  0.6065,  1.2159,  0.6553,  0.4574,\n         1.4333,  3.1730,  2.8376, -....5011, -1.9609,  0.6119,  1.8743,  0.9452],\n        [-0.0390,  1.4916, -0.1128,  1.1365, -0.6305, -1.1256, -0.7411]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.9850, -1.0928,  0.8409, -1.5326,  0.6065,  1.2159,  0.6553,  0.4574,
E                1.4333,  3.1730,  2.8376, -1.5408, -1.0150, -5.2836,  3.5929,  2.7214,
E               -0.3462,  3.7381, -1.5624, -4.0512,  1.5300, -2.9872,  2.1872,  3.0008,
E                2.2829,  4.4486, -1.4020, -1.7619, -2.1871, -1.1256, -0.7411]) vs tensor([[ 0.9850, -1.0928,  0.4740, -0.4812, -0.0996, -0.2776, -0.3117],
E               [ 0.1875, -0.9955,  0.8615,  1.6991, -0.3855, -2.8288,  1.4027],
E               [ 0.4252,  1.0663, -1.5011, -1.9609,  0.6119,  1.8743,  0.9452],
E               [-0.0390,  1.4916, -0.1128,  1.1365, -0.6305, -1.1256, -0.7411]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-2-10] _________________________

batch_shape = (4,), m = 10, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.7174,  0.4131,  1.3188,  0.2931,  0.9887, -2.8179,  0.6457, -4.2104,
        -1.4229, -3.2403, -1.9154, -2....6, -1.1569, -0.1530,  5.6858, -6.9585,  1.9792,
        -7.3219, -1.7285, -9.0518,  1.0141, -0.4536, -0.3379,  1.4335])
b = tensor([[ 0.7174,  0.4131,  0.5495,  0.4925,  0.4146,  0.2984,  0.4387, -0.6852,
         -0.5797, -0.0527,  0.0183],
...
        [ 0.4168, -0.9128, -1.5055,  2.6981, -2.4352, -0.2662, -1.5544,  0.7725,
         -3.6049, -0.3379,  1.4335]])
prec = 1e-07
msg = 'tensor([ 0.7174,  0.4131,  1.3188,  0.2931,  0.9887, -2.8179,  0.6457, -4.2104,\n        -1.4229, -3.2403, -1.9154, -...       [ 0.4168, -0.9128, -1.5055,  2.6981, -2.4352, -0.2662, -1.5544,  0.7725,\n         -3.6049, -0.3379,  1.4335]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.7174,  0.4131,  1.3188,  0.2931,  0.9887, -2.8179,  0.6457, -4.2104,
E               -1.4229, -3.2403, -1.9154, -2.2573,  3.4998,  1.6730,  3.4157,  6.2393,
E               -1.8373, -2.6457, -4.6292, -5.7078, -3.0113,  2.3938, -0.1588, -2.4719,
E                4.5496,  1.6516,  2.9657,  4.7033,  0.3348, -5.5532,  0.3134, -8.6376,
E                3.0592, -4.2053,  3.9126, -1.1569, -0.1530,  5.6858, -6.9585,  1.9792,
E               -7.3219, -1.7285, -9.0518,  1.0141, -0.4536, -0.3379,  1.4335]) vs tensor([[ 0.7174,  0.4131,  0.5495,  0.4925,  0.4146,  0.2984,  0.4387, -0.6852,
E                -0.5797, -0.0527,  0.0183],
E               [-0.9967,  0.6340,  0.8130,  0.6236,  0.6513,  0.0683, -1.5106, -0.1077,
E                 1.3792, -1.0045,  0.2288],
E               [-0.0774,  2.6711, -0.4500,  3.6678, -0.4752, -5.7117, -1.4427, -6.1362,
E                 2.6430, -2.2317,  2.4987],
E               [ 0.4168, -0.9128, -1.5055,  2.6981, -2.4352, -0.2662, -1.5544,  0.7725,
E                -3.6049, -0.3379,  1.4335]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-3-2] _________________________

batch_shape = (4,), m = 2, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0361,  0.0511, -0.1562,  0.0311, -0.5126,  0.2457, -0.5416,  0.0044,
        -0.6546, -0.8762, -0.4902, -1.5871, -0.2599,  0.1112, -0.2161,  1.3032,
         1.0376,  0.7707,  0.3223])
b = tensor([[-0.0361,  0.0511, -0.0365,  0.0253],
        [ 0.1445,  0.0071, -0.3024, -0.1599],
        [-0.4223, -1.0906,  0.2498, -0.0081],
        [ 0.8616,  1.1269,  0.7707,  0.3223]])
prec = 1e-07
msg = 'tensor([-0.0361,  0.0511, -0.1562,  0.0311, -0.5126,  0.2457, -0.5416,  0.0044,\n        -0.6546, -0.8762, -0.4902, -...071, -0.3024, -0.1599],\n        [-0.4223, -1.0906,  0.2498, -0.0081],\n        [ 0.8616,  1.1269,  0.7707,  0.3223]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0361,  0.0511, -0.1562,  0.0311, -0.5126,  0.2457, -0.5416,  0.0044,
E               -0.6546, -0.8762, -0.4902, -1.5871, -0.2599,  0.1112, -0.2161,  1.3032,
E                1.0376,  0.7707,  0.3223]) vs tensor([[-0.0361,  0.0511, -0.0365,  0.0253],
E               [ 0.1445,  0.0071, -0.3024, -0.1599],
E               [-0.4223, -1.0906,  0.2498, -0.0081],
E               [ 0.8616,  1.1269,  0.7707,  0.3223]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-3-3] _________________________

batch_shape = (4,), m = 3, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0262, -0.0459, -0.0461, -0.3684, -0.4502, -1.0974, -0.7853, -1.5871,
        -0.1806,  0.1393,  0.1003,  1.1617,  0.4622, -0.7309,  0.8819, -0.6354,
        -0.5977,  1.7171,  0.5529,  0.0640, -0.5409, -0.0354,  0.3480])
b = tensor([[-0.0262, -0.0459, -0.0461, -0.2034, -0.1304],
        [-0.2339, -1.1551,  0.4628,  1.0525, -0.1854],
        [ 0.4579,  0.7707,  0.1973, -0.1169, -0.0092],
        [-0.1543,  0.3413, -0.5409, -0.0354,  0.3480]])
prec = 1e-07
msg = 'tensor([-0.0262, -0.0459, -0.0461, -0.3684, -0.4502, -1.0974, -0.7853, -1.5871,\n        -0.1806,  0.1393,  0.1003,  ...854],\n        [ 0.4579,  0.7707,  0.1973, -0.1169, -0.0092],\n        [-0.1543,  0.3413, -0.5409, -0.0354,  0.3480]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0262, -0.0459, -0.0461, -0.3684, -0.4502, -1.0974, -0.7853, -1.5871,
E               -0.1806,  0.1393,  0.1003,  1.1617,  0.4622, -0.7309,  0.8819, -0.6354,
E               -0.5977,  1.7171,  0.5529,  0.0640, -0.5409, -0.0354,  0.3480]) vs tensor([[-0.0262, -0.0459, -0.0461, -0.2034, -0.1304],
E               [-0.2339, -1.1551,  0.4628,  1.0525, -0.1854],
E               [ 0.4579,  0.7707,  0.1973, -0.1169, -0.0092],
E               [-0.1543,  0.3413, -0.5409, -0.0354,  0.3480]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-3-4] _________________________

batch_shape = (4,), m = 4, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0351, -0.8121, -0.5891, -1.0370, -0.7295,  0.5035, -0.7042, -0.6159,
        -0.1121, -0.1298,  0.7317,  0....43,
         0.1895,  0.3376,  1.9655,  0.8214, -3.0818, -2.2307, -1.2294, -0.2711,
         0.6426,  0.1630, -0.2528])
b = tensor([[-0.0351, -0.8121, -0.5891, -0.6487, -0.6235, -0.1726],
        [-0.1608, -0.1068,  0.3308,  0.7587,  0.6909, ... 0.1185,  0.2492,  0.6998,  0.8993,  0.9136, -0.2353],
        [-0.4358,  0.6598,  0.3333,  0.6426,  0.1630, -0.2528]])
prec = 1e-07
msg = 'tensor([-0.0351, -0.8121, -0.5891, -1.0370, -0.7295,  0.5035, -0.7042, -0.6159,\n        -0.1121, -0.1298,  0.7317,  ....1185,  0.2492,  0.6998,  0.8993,  0.9136, -0.2353],\n        [-0.4358,  0.6598,  0.3333,  0.6426,  0.1630, -0.2528]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0351, -0.8121, -0.5891, -1.0370, -0.7295,  0.5035, -0.7042, -0.6159,
E               -0.1121, -0.1298,  0.7317,  0.5952, -1.4950, -1.2712, -0.8192, -2.6943,
E                0.1895,  0.3376,  1.9655,  0.8214, -3.0818, -2.2307, -1.2294, -0.2711,
E                0.6426,  0.1630, -0.2528]) vs tensor([[-0.0351, -0.8121, -0.5891, -0.6487, -0.6235, -0.1726],
E               [-0.1608, -0.1068,  0.3308,  0.7587,  0.6909, -1.5045],
E               [ 0.1185,  0.2492,  0.6998,  0.8993,  0.9136, -0.2353],
E               [-0.4358,  0.6598,  0.3333,  0.6426,  0.1630, -0.2528]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-3-5] _________________________

batch_shape = (4,), m = 5, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.6632,  1.2743, -0.3251, -0.2738,  0.0175, -3.2074,  0.5495, -1.8437,
        -0.1772,  3.1129,  2.3052,  7....3,  5.9772, -6.5975,  2.2566,  1.3167, -4.7067,
         4.2951, -1.0868,  3.0198,  3.8107,  0.2357,  1.4916, -0.0834])
b = tensor([[ 0.6632,  1.2743, -0.3251,  0.9113, -0.7672, -1.3592,  0.8151],
        [-0.1269,  1.4517, -1.4908,  3.0273, ... 2.7088, -0.0778, -2.2740,  2.3582, -0.7812],
        [ 2.1126,  1.5483,  1.9314,  3.8662,  0.2357,  1.4916, -0.0834]])
prec = 1e-07
msg = 'tensor([ 0.6632,  1.2743, -0.3251, -0.2738,  0.0175, -3.2074,  0.5495, -1.8437,\n        -0.1772,  3.1129,  2.3052,  ....7088, -0.0778, -2.2740,  2.3582, -0.7812],\n        [ 2.1126,  1.5483,  1.9314,  3.8662,  0.2357,  1.4916, -0.0834]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.6632,  1.2743, -0.3251, -0.2738,  0.0175, -3.2074,  0.5495, -1.8437,
E               -0.1772,  3.1129,  2.3052,  7.2102, -6.4118,  2.5089,  2.6475, -7.2725,
E                1.9377, -2.2852,  1.4323,  5.9772, -6.5975,  2.2566,  1.3167, -4.7067,
E                4.2951, -1.0868,  3.0198,  3.8107,  0.2357,  1.4916, -0.0834]) vs tensor([[ 0.6632,  1.2743, -0.3251,  0.9113, -0.7672, -1.3592,  0.8151],
E               [-0.1269,  1.4517, -1.4908,  3.0273, -2.6557,  2.5182, -1.3180],
E               [ 0.7799, -2.8288,  2.7088, -0.0778, -2.2740,  2.3582, -0.7812],
E               [ 2.1126,  1.5483,  1.9314,  3.8662,  0.2357,  1.4916, -0.0834]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-3-6] _________________________

batch_shape = (4,), m = 6, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.9850, -1.0928,  0.8409, -1.5326,  0.6065,  1.2159,  0.6553,  0.4574,
         1.9483,  2.9126,  3.9392, -1....29,
         1.7655,  4.2190, -0.1249, -1.7777, -0.1956, -1.5727, -0.2029, -0.2473,
        -0.8580, -0.9136, -0.1905])
b = tensor([[ 0.9850, -1.0928,  0.8409, -0.4192,  0.1563, -0.1297, -0.1597,  0.0908],
        [-0.5688,  1.6210,  1.6016, ...-0.4765,  0.7667,  0.8526,  0.2417],
        [-0.5397,  1.2747, -0.0923,  1.1531,  0.1508, -0.8580, -0.9136, -0.1905]])
prec = 1e-07
msg = 'tensor([ 0.9850, -1.0928,  0.8409, -1.5326,  0.6065,  1.2159,  0.6553,  0.4574,\n         1.9483,  2.9126,  3.9392, -....4765,  0.7667,  0.8526,  0.2417],\n        [-0.5397,  1.2747, -0.0923,  1.1531,  0.1508, -0.8580, -0.9136, -0.1905]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.9850, -1.0928,  0.8409, -1.5326,  0.6065,  1.2159,  0.6553,  0.4574,
E                1.9483,  2.9126,  3.9392, -1.1936, -0.3414, -4.8052,  4.2011,  2.2453,
E               -0.0800,  3.8817, -2.0646, -4.8912,  4.2719, -3.9261,  2.0495,  3.1929,
E                1.7655,  4.2190, -0.1249, -1.7777, -0.1956, -1.5727, -0.2029, -0.2473,
E               -0.8580, -0.9136, -0.1905]) vs tensor([[ 0.9850, -1.0928,  0.8409, -0.4192,  0.1563, -0.1297, -0.1597,  0.0908],
E               [-0.5688,  1.6210,  1.6016, -4.2617, -4.0772,  4.8677,  3.4766, -2.5374],
E               [-0.0167,  0.6495, -0.0454, -1.1740, -0.4765,  0.7667,  0.8526,  0.2417],
E               [-0.5397,  1.2747, -0.0923,  1.1531,  0.1508, -0.8580, -0.9136, -0.1905]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-3-10] _________________________

batch_shape = (4,), m = 10, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.7174,  0.4131,  1.3188,  0.2931,  0.9887, -2.8179,  0.6457, -4.2104,
        -0.7605, -2.5271, -1.1344, -1....18,
        -7.5943, -1.0606, -7.7901,  2.5043,  0.6316,  1.7257,  2.9284, -0.1739,
        -0.5373, -0.2166, -0.0303])
b = tensor([[ 0.7174,  0.4131,  1.3188,  0.6225,  0.9510,  0.6083,  0.7572, -0.4948,
         -0.1867, -0.9473, -0.2394,  ...[ 0.5023,  0.5529, -0.5672,  0.8771,  0.7174,  0.8854,  0.4531,  1.5636,
          0.4759, -0.5373, -0.2166, -0.0303]])
prec = 1e-07
msg = 'tensor([ 0.7174,  0.4131,  1.3188,  0.2931,  0.9887, -2.8179,  0.6457, -4.2104,\n        -0.7605, -2.5271, -1.1344, -...0.5023,  0.5529, -0.5672,  0.8771,  0.7174,  0.8854,  0.4531,  1.5636,\n          0.4759, -0.5373, -0.2166, -0.0303]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.7174,  0.4131,  1.3188,  0.2931,  0.9887, -2.8179,  0.6457, -4.2104,
E               -0.7605, -2.5271, -1.1344, -1.5036,  4.1732,  2.1950,  4.0054,  5.8428,
E               -2.6397, -3.0428, -5.5584, -6.3051, -2.3528,  3.9865,  1.8266, -0.8450,
E                4.2081,  0.2775,  3.0562,  4.8641, -0.3475, -6.0874, -0.5764, -9.1904,
E                4.1231, -2.7852,  5.8616, -0.3894,  0.2353,  5.4583, -6.7514,  2.7418,
E               -7.5943, -1.0606, -7.7901,  2.5043,  0.6316,  1.7257,  2.9284, -0.1739,
E               -0.5373, -0.2166, -0.0303]) vs tensor([[ 0.7174,  0.4131,  1.3188,  0.6225,  0.9510,  0.6083,  0.7572, -0.4948,
E                -0.1867, -0.9473, -0.2394,  0.0484],
E               [ 0.4268, -0.2098,  3.8013, -1.1882, -4.1067, -4.3124, -3.9110, -2.0971,
E                 4.8063,  3.1051, -4.6496,  2.2317],
E               [-0.4134,  1.2640, -1.2719,  1.8307, -0.1503, -2.2357,  1.3924, -2.8242,
E                 2.7588, -1.9023,  1.5818, -0.5152],
E               [ 0.5023,  0.5529, -0.5672,  0.8771,  0.7174,  0.8854,  0.4531,  1.5636,
E                 0.4759, -0.5373, -0.2166, -0.0303]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-4-2] _________________________

batch_shape = (4,), m = 2, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.7020,  0.4812,  1.6709, -0.0529,
         1.9151,  1.4333,  1.3480,  1.5621,  3.7319,  0.3345,  4.1580,  0.6778,
         0.7297,  1.2113, -0.5123, -0.9759,  1.1408, -0.2510, -0.5485])
b = tensor([[ 0.0118,  0.0046,  0.1364, -0.1877,  0.0219],
        [ 0.0049,  0.1740,  0.2084,  0.3357,  0.1772],
        [ 2.9130, -0.8734,  1.5735, -0.7487,  0.0847],
        [-0.6421,  0.0197,  0.9888, -0.2510, -0.5485]])
prec = 1e-07
msg = 'tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.7020,  0.4812,  1.6709, -0.0529,\n         1.9151,  1.4333,  1.3480,  ...772],\n        [ 2.9130, -0.8734,  1.5735, -0.7487,  0.0847],\n        [-0.6421,  0.0197,  0.9888, -0.2510, -0.5485]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.7020,  0.4812,  1.6709, -0.0529,
E                1.9151,  1.4333,  1.3480,  1.5621,  3.7319,  0.3345,  4.1580,  0.6778,
E                0.7297,  1.2113, -0.5123, -0.9759,  1.1408, -0.2510, -0.5485]) vs tensor([[ 0.0118,  0.0046,  0.1364, -0.1877,  0.0219],
E               [ 0.0049,  0.1740,  0.2084,  0.3357,  0.1772],
E               [ 2.9130, -0.8734,  1.5735, -0.7487,  0.0847],
E               [-0.6421,  0.0197,  0.9888, -0.2510, -0.5485]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-4-3] _________________________

batch_shape = (4,), m = 3, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
         7.9018e-01,  7.3076e-01,  2.1650e+00...1.8013e-01,
        -4.4568e-02,  8.9743e-01, -6.7390e-01,  4.1678e-01, -2.7648e-01,
         2.0348e-01, -2.6320e-02])
b = tensor([[ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2132e-01,  8.5774e-03,
          2.7243e-01],
        [ 3.6469e-01,...         2.3528e-01],
        [ 7.0074e-02, -1.8226e-01,  3.9496e-01, -2.7648e-01,  2.0348e-01,
         -2.6320e-02]])
prec = 1e-07
msg = 'tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,\n         7.9018e-01,  7.3076e-01,  2.1650e+...      2.3528e-01],\n        [ 7.0074e-02, -1.8226e-01,  3.9496e-01, -2.7648e-01,  2.0348e-01,\n         -2.6320e-02]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
E                7.9018e-01,  7.3076e-01,  2.1650e+00,  1.8192e+00,  1.4398e+00,
E                1.8784e-01,  2.5114e+00, -1.3742e+00,  2.2315e-02,  1.0888e+00,
E               -9.6081e-01,  2.8571e+00, -1.6916e+00,  9.8099e-01, -1.8013e-01,
E               -4.4568e-02,  8.9743e-01, -6.7390e-01,  4.1678e-01, -2.7648e-01,
E                2.0348e-01, -2.6320e-02]) vs tensor([[ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2132e-01,  8.5774e-03,
E                 2.7243e-01],
E               [ 3.6469e-01,  2.0024e+00,  3.0019e-01, -1.5647e+00,  1.0282e+00,
E                -1.3226e-01],
E               [-6.4208e-01,  1.9746e-02,  1.2027e+00, -4.2367e-01, -7.4377e-01,
E                 2.3528e-01],
E               [ 7.0074e-02, -1.8226e-01,  3.9496e-01, -2.7648e-01,  2.0348e-01,
E                -2.6320e-02]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-4-4] _________________________

batch_shape = (4,), m = 4, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-1.3800, -0.9400,  0.0996, -1.4241, -0.8152, -0.5864, -2.0258,  1.0904,
         0.2822, -1.6237,  0.5812,  1....3, -1.1990, -2.8199,  0.2517, -1.1425, -2.4225,
         1.3094, -0.2535,  0.6221,  1.4275,  0.6060,  0.5221,  0.6006])
b = tensor([[-1.3800, -0.9400,  0.0996, -1.4241,  0.4417,  0.0750, -0.2317],
        [-0.2839, -0.1330, -0.7176,  0.6785, ... 0.9333, -0.7110,  0.6797, -0.1981,  0.0165],
        [-0.1343,  1.3628,  0.3458,  1.4275,  0.6060,  0.5221,  0.6006]])
prec = 1e-07
msg = 'tensor([-1.3800, -0.9400,  0.0996, -1.4241, -0.8152, -0.5864, -2.0258,  1.0904,\n         0.2822, -1.6237,  0.5812,  ....9333, -0.7110,  0.6797, -0.1981,  0.0165],\n        [-0.1343,  1.3628,  0.3458,  1.4275,  0.6060,  0.5221,  0.6006]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-1.3800, -0.9400,  0.0996, -1.4241, -0.8152, -0.5864, -2.0258,  1.0904,
E                0.2822, -1.6237,  0.5812,  1.5109, -4.1851,  0.6814, -1.8613,  0.8613,
E                0.3163, -0.1768, -1.2513, -1.1990, -2.8199,  0.2517, -1.1425, -2.4225,
E                1.3094, -0.2535,  0.6221,  1.4275,  0.6060,  0.5221,  0.6006]) vs tensor([[-1.3800, -0.9400,  0.0996, -1.4241,  0.4417,  0.0750, -0.2317],
E               [-0.2839, -0.1330, -0.7176,  0.6785, -0.5423,  1.1780, -0.1926],
E               [ 0.1968, -0.1674,  0.9333, -0.7110,  0.6797, -0.1981,  0.0165],
E               [-0.1343,  1.3628,  0.3458,  1.4275,  0.6060,  0.5221,  0.6006]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-4-5] _________________________

batch_shape = (4,), m = 5, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1664,  1.2481,  0.2882, -0.4668,  1.5806, -1.3000,  2.0810,  0.2739,
         0.3792, -0.1896, -0.2347,  5....12,
         1.6185, -1.1575,  4.7008, -2.0758,  4.1428,  1.0130,  0.4981,  3.4646,
         1.0652,  1.4580, -0.0840])
b = tensor([[ 0.1664,  1.2481,  0.2882, -0.4668,  0.0969, -1.9857, -0.5273,  1.1422],
        [ 0.1588, -1.6408, -0.0098, ...-2.5455,  2.6047, -0.5188, -0.8405],
        [-1.0501,  0.8361,  1.2408,  0.5578,  3.4646,  1.0652,  1.4580, -0.0840]])
prec = 1e-07
msg = 'tensor([ 0.1664,  1.2481,  0.2882, -0.4668,  1.5806, -1.3000,  2.0810,  0.2739,\n         0.3792, -0.1896, -0.2347,  ....5455,  2.6047, -0.5188, -0.8405],\n        [-1.0501,  0.8361,  1.2408,  0.5578,  3.4646,  1.0652,  1.4580, -0.0840]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1664,  1.2481,  0.2882, -0.4668,  1.5806, -1.3000,  2.0810,  0.2739,
E                0.3792, -0.1896, -0.2347,  5.2514, -7.2250,  2.2195,  3.6416,  2.2761,
E                1.0100,  1.7196, -0.7491,  0.3765,  2.9936, -1.8182, -0.2885,  7.7912,
E                1.6185, -1.1575,  4.7008, -2.0758,  4.1428,  1.0130,  0.4981,  3.4646,
E                1.0652,  1.4580, -0.0840]) vs tensor([[ 0.1664,  1.2481,  0.2882, -0.4668,  0.0969, -1.9857, -0.5273,  1.1422],
E               [ 0.1588, -1.6408, -0.0098, -3.5141,  2.1279, -1.5409,  2.4196, -0.6958],
E               [ 1.1160, -1.8304,  3.3822,  0.7179, -2.5455,  2.6047, -0.5188, -0.8405],
E               [-1.0501,  0.8361,  1.2408,  0.5578,  3.4646,  1.0652,  1.4580, -0.0840]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-4-6] _________________________

batch_shape = (4,), m = 6, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
        -2.0661,  0.7846,  3.1790,  2....3,  1.4387, -0.0403,  5.2952,  1.4339,  2.1558,
        -2.8298, -0.6012, -2.4602, -3.4844, -0.8935,  1.0358,  0.6275])
b = tensor([[ 1.4838,  0.6679,  2.6667,  0.4878,  1.7589,  0.7056,  0.4819,  0.1113,
         -0.1645],
        [ 0.2842, ...          0.4532],
        [ 0.3877,  3.1040, -0.0171,  0.9232, -1.7139, -3.4844, -0.8935,  1.0358,
          0.6275]])
prec = 1e-07
msg = 'tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,\n        -2.0661,  0.7846,  3.1790,  ...       0.4532],\n        [ 0.3877,  3.1040, -0.0171,  0.9232, -1.7139, -3.4844, -0.8935,  1.0358,\n          0.6275]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
E               -2.0661,  0.7846,  3.1790,  2.5634,  4.6126,  0.3701,  0.2115, -0.2463,
E                3.6968, -1.3269,  1.2868,  5.7276, -0.1568, -1.9376,  4.0657, -0.1390,
E               -4.7005, -1.3927,  0.5053,  1.4387, -0.0403,  5.2952,  1.4339,  2.1558,
E               -2.8298, -0.6012, -2.4602, -3.4844, -0.8935,  1.0358,  0.6275]) vs tensor([[ 1.4838,  0.6679,  2.6667,  0.4878,  1.7589,  0.7056,  0.4819,  0.1113,
E                -0.1645],
E               [ 0.2842, -0.9758,  0.4449,  0.7994, -0.9022, -1.9488,  2.8153,  0.2147,
E                -0.6436],
E               [-0.6668,  1.4594,  0.6473, -1.1499, -1.5889, -0.1936,  1.1540,  0.9805,
E                 0.4532],
E               [ 0.3877,  3.1040, -0.0171,  0.9232, -1.7139, -3.4844, -0.8935,  1.0358,
E                 0.6275]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-4-10] _________________________

batch_shape = (4,), m = 10, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.2400, -0.5350,  2.1797,  0.8751,  1.6556, -1.2248,  2.5132, -0.1940,
         2.4430, -0.9692, -0.9590,  0....7,  6.6817,  7.9023, -4.6719,  4.0238, -1.2267,
         4.1625, -2.4295,  6.4326,  2.1322,  1.0269, -0.3230, -1.2218])
b = tensor([[ 0.2400, -0.5350,  2.1797,  0.8751,  1.4776,  1.2451,  1.1852,  0.2898,
          1.8704, -1.8249, -1.7004, -...  0.7522,  3.2435, -4.1046,  3.4161, -1.7330,  4.3364, -2.1200,
          6.5801,  2.1322,  1.0269, -0.3230, -1.2218]])
prec = 1e-07
msg = 'tensor([ 0.2400, -0.5350,  2.1797,  0.8751,  1.6556, -1.2248,  2.5132, -0.1940,\n         2.4430, -0.9692, -0.9590,  ...0.7522,  3.2435, -4.1046,  3.4161, -1.7330,  4.3364, -2.1200,\n          6.5801,  2.1322,  1.0269, -0.3230, -1.2218]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.2400, -0.5350,  2.1797,  0.8751,  1.6556, -1.2248,  2.5132, -0.1940,
E                2.4430, -0.9692, -0.9590,  0.6135,  0.3676,  0.8232,  0.1898,  8.3971,
E                0.7885,  0.9105, -3.2074, -1.6426,  2.5557,  7.0530, -0.3917, -8.3361,
E                0.3434, -0.9734,  2.2153,  7.1513,  8.6825, -6.4005, -0.3193, -2.7728,
E                5.3729,  2.4641,  1.6225, -2.1307, -0.9801, 10.1750, -7.1669, 13.6814,
E                0.6806,  4.7679, -8.2297,  6.6817,  7.9023, -4.6719,  4.0238, -1.2267,
E                4.1625, -2.4295,  6.4326,  2.1322,  1.0269, -0.3230, -1.2218]) vs tensor([[ 0.2400, -0.5350,  2.1797,  0.8751,  1.4776,  1.2451,  1.1852,  0.2898,
E                 1.8704, -1.8249, -1.7004, -0.1432,  0.0518],
E               [-0.2307,  3.2872, -2.5720, -3.4412, -0.8782, -0.1938,  1.4623,  6.4272,
E                 0.3086, -6.6022,  3.2785,  0.1729, -0.6341],
E               [-0.1805, -0.4059, -0.4401, -0.6375,  0.1700,  0.9279,  1.2393,  1.2232,
E                 0.3712,  0.2218, -0.3225, -0.1320, -0.1169],
E               [-1.2653,  0.7522,  3.2435, -4.1046,  3.4161, -1.7330,  4.3364, -2.1200,
E                 6.5801,  2.1322,  1.0269, -0.3230, -1.2218]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-5-2] _________________________

batch_shape = (4,), m = 2, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.6330,  0.5479,  1.5217, -0.3923,
         1.1467,  1.7345,  0.0202, -0....34,
        -1.1478,  2.3982,  1.4392,  0.7492,  2.5384,  2.0481,  1.8735,  1.4304,
         0.6008,  0.7857,  0.3539])
b = tensor([[ 0.0118,  0.0046,  0.1364, -0.1877, -0.0457,  0.0729],
        [ 0.1449,  0.4276,  0.1980, -0.2450, -0.1827, ...-0.1724,  1.3473, -1.5012,  0.9723,  1.1691, -0.2273],
        [ 0.6837,  1.3138,  0.9608,  0.6989,  0.7857,  0.3539]])
prec = 1e-07
msg = 'tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.6330,  0.5479,  1.5217, -0.3923,\n         1.1467,  1.7345,  0.0202, -....1724,  1.3473, -1.5012,  0.9723,  1.1691, -0.2273],\n        [ 0.6837,  1.3138,  0.9608,  0.6989,  0.7857,  0.3539]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.6330,  0.5479,  1.5217, -0.3923,
E                1.1467,  1.7345,  0.0202, -0.3686,  0.1055,  1.2317, -0.8877,  0.7134,
E               -1.1478,  2.3982,  1.4392,  0.7492,  2.5384,  2.0481,  1.8735,  1.4304,
E                0.6008,  0.7857,  0.3539]) vs tensor([[ 0.0118,  0.0046,  0.1364, -0.1877, -0.0457,  0.0729],
E               [ 0.1449,  0.4276,  0.1980, -0.2450, -0.1827, -0.0204],
E               [-0.1724,  1.3473, -1.5012,  0.9723,  1.1691, -0.2273],
E               [ 0.6837,  1.3138,  0.9608,  0.6989,  0.7857,  0.3539]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-5-3] _________________________

batch_shape = (4,), m = 3, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  6.5241e-02,
         9.5254e-01,  1.6965e-01,  1.2437e+00...3.1874e-01, -4.8673e-01,
        -1.9989e+00,  2.6279e-01, -2.6320e-01,  4.5479e-01, -3.9948e-01,
        -2.9509e-01])
b = tensor([[ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2132e-01, -6.1624e-02,
          3.4824e-01, -2.3279e-01],
        ...54e-01],
        [ 5.0863e-02, -1.6121e-01,  3.7018e-01, -5.0775e-01,  4.5479e-01,
         -3.9948e-01, -2.9509e-01]])
prec = 1e-07
msg = 'tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  6.5241e-02,\n         9.5254e-01,  1.6965e-01,  1.2437e+...-01],\n        [ 5.0863e-02, -1.6121e-01,  3.7018e-01, -5.0775e-01,  4.5479e-01,\n         -3.9948e-01, -2.9509e-01]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  6.5241e-02,
E                9.5254e-01,  1.6965e-01,  1.2437e+00, -5.3384e-01,  1.0423e+00,
E                1.1412e-01,  1.1201e-01, -6.4516e-01, -1.8575e-01,  2.1034e+00,
E                9.1094e-02, -2.5588e-02,  2.3097e+00,  2.3526e+00,  1.3265e+00,
E               -1.0100e+00,  6.7326e-01, -1.9042e+00, -3.1874e-01, -4.8673e-01,
E               -1.9989e+00,  2.6279e-01, -2.6320e-01,  4.5479e-01, -3.9948e-01,
E               -2.9509e-01]) vs tensor([[ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2132e-01, -6.1624e-02,
E                 3.4824e-01, -2.3279e-01],
E               [-2.0355e-02, -1.3596e-01,  1.0992e-01,  1.3033e+00, -7.7164e-01,
E                -1.5667e+00,  2.8062e-01],
E               [ 3.6409e-02,  1.5019e+00,  1.9151e+00,  4.6993e-01,  4.3814e-01,
E                 2.1240e-01, -1.4154e-01],
E               [ 5.0863e-02, -1.6121e-01,  3.7018e-01, -5.0775e-01,  4.5479e-01,
E                -3.9948e-01, -2.9509e-01]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-5-4] _________________________

batch_shape = (4,), m = 4, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-1.3800, -0.9400,  0.0996, -1.4241,  0.0368,  0.6889, -0.3344,  0.8313,
         3.5328, -1.2784,  4.5006,  1....16,
        -0.5324, -0.9968,  1.3763, -0.4634,  1.0318,  1.2399,  1.9140,  3.2438,
         3.0120,  1.6927,  0.6681])
b = tensor([[-1.3800, -0.9400,  0.0996, -1.4241,  0.6082,  0.1031, -0.1156,  0.0671],
        [ 0.5051,  0.2878,  0.0440, ...-1.3294,  0.9358, -1.8319,  0.3501],
        [ 0.8051, -0.2720,  1.4625,  1.6538,  3.2438,  3.0120,  1.6927,  0.6681]])
prec = 1e-07
msg = 'tensor([-1.3800, -0.9400,  0.0996, -1.4241,  0.0368,  0.6889, -0.3344,  0.8313,\n         3.5328, -1.2784,  4.5006,  ....3294,  0.9358, -1.8319,  0.3501],\n        [ 0.8051, -0.2720,  1.4625,  1.6538,  3.2438,  3.0120,  1.6927,  0.6681]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-1.3800, -0.9400,  0.0996, -1.4241,  0.0368,  0.6889, -0.3344,  0.8313,
E                3.5328, -1.2784,  4.5006,  1.1491, -2.9238, -2.3950,  2.6468, -2.8165,
E                0.5693,  3.5097,  0.3701,  1.7869,  0.7760,  2.0678,  1.8444,  6.0616,
E               -0.5324, -0.9968,  1.3763, -0.4634,  1.0318,  1.2399,  1.9140,  3.2438,
E                3.0120,  1.6927,  0.6681]) vs tensor([[-1.3800, -0.9400,  0.0996, -1.4241,  0.6082,  0.1031, -0.1156,  0.0671],
E               [ 0.5051,  0.2878,  0.0440, -1.1631, -0.1248,  2.4647, -1.5124, -0.4851],
E               [-0.5232,  0.3209, -2.2411,  1.4993, -1.3294,  0.9358, -1.8319,  0.3501],
E               [ 0.8051, -0.2720,  1.4625,  1.6538,  3.2438,  3.0120,  1.6927,  0.6681]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-5-5] _________________________

batch_shape = (4,), m = 5, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1664,  1.2481,  0.2882, -0.4668,  0.3368, -2.5029,  1.5939,  0.6612,
         1.2961, -0.2507,  0.9727,  3....9,  2.5551,  3.1425,  1.6703,  4.3006, -2.8801,
         3.1257, -0.2414,  0.0430,  4.3348,  0.7156,  1.9173, -0.1084])
b = tensor([[ 0.1664,  1.2481,  0.2882, -0.4668,  0.3368, -1.9451, -0.3600,  1.2388,
         -0.1988],
        [-0.0616, ...         -0.3665],
        [ 0.1577, -1.4711,  1.0046,  1.3087,  0.0430,  4.3348,  0.7156,  1.9173,
         -0.1084]])
prec = 1e-07
msg = 'tensor([ 0.1664,  1.2481,  0.2882, -0.4668,  0.3368, -2.5029,  1.5939,  0.6612,\n         1.2961, -0.2507,  0.9727,  ...      -0.3665],\n        [ 0.1577, -1.4711,  1.0046,  1.3087,  0.0430,  4.3348,  0.7156,  1.9173,\n         -0.1084]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1664,  1.2481,  0.2882, -0.4668,  0.3368, -2.5029,  1.5939,  0.6612,
E                1.2961, -0.2507,  0.9727,  3.7378, -5.4309,  1.5579,  0.1112,  1.4731,
E                1.6261,  6.2397, -8.0355,  1.4444,  6.9559, -2.1373,  0.1998,  3.7299,
E                2.8766, -5.3225,  0.4819,  2.5551,  3.1425,  1.6703,  4.3006, -2.8801,
E                3.1257, -0.2414,  0.0430,  4.3348,  0.7156,  1.9173, -0.1084]) vs tensor([[ 0.1664,  1.2481,  0.2882, -0.4668,  0.3368, -1.9451, -0.3600,  1.2388,
E                -0.1988],
E               [-0.0616,  0.8796, -2.4235,  0.1858, -3.3992,  4.1112,  0.1512,  3.1390,
E                -2.6166],
E               [ 3.4565, -0.1088, -0.9120,  3.2371, -0.6126, -1.2262,  0.5002, -0.1668,
E                -0.3665],
E               [ 0.1577, -1.4711,  1.0046,  1.3087,  0.0430,  4.3348,  0.7156,  1.9173,
E                -0.1084]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-5-6] _________________________

batch_shape = (4,), m = 6, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  1.9369, -1.7643,  2.5678, -1.8850,
        -1.6072, -1.6935,  2.8309, -0....25,
        -0.8437,  4.8745,  0.1310, -0.2608, -2.8311, -1.6075, -0.3782,  0.7174,
         0.1023, -0.1893, -0.1028])
b = tensor([[ 1.4838,  0.6679,  2.6667,  0.4878,  1.9369,  0.7357,  0.6061,  0.1830,
         -0.0908,  0.0441],
        [... 0.0927],
        [ 1.9345, -0.5441,  0.9936, -1.0970, -1.4548, -0.3782,  0.7174,  0.1023,
         -0.1893, -0.1028]])
prec = 1e-07
msg = 'tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  1.9369, -1.7643,  2.5678, -1.8850,\n        -1.6072, -1.6935,  2.8309, -...0927],\n        [ 1.9345, -0.5441,  0.9936, -1.0970, -1.4548, -0.3782,  0.7174,  0.1023,\n         -0.1893, -0.1028]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  1.9369, -1.7643,  2.5678, -1.8850,
E               -1.6072, -1.6935,  2.8309, -0.1383,  4.9422, -0.7456, -5.8929, -4.3211,
E                9.3070,  1.2741,  2.9608,  5.3675,  2.4988, -9.0571, -1.6279, -0.1375,
E                0.1288,  1.6764,  1.1011, -0.2938, -2.1448, -3.5765, -0.3736,  5.6425,
E               -0.8437,  4.8745,  0.1310, -0.2608, -2.8311, -1.6075, -0.3782,  0.7174,
E                0.1023, -0.1893, -0.1028]) vs tensor([[ 1.4838,  0.6679,  2.6667,  0.4878,  1.9369,  0.7357,  0.6061,  0.1830,
E                -0.0908,  0.0441],
E               [-1.2771,  3.7381,  1.5277, -5.7815, -4.7018,  8.9587,  0.5072, -2.7874,
E                -1.3315,  1.0562],
E               [ 0.1264, -0.1983, -1.1215,  2.1818,  0.9011, -2.2195, -1.3489,  0.8791,
E                 1.1021,  0.0927],
E               [ 1.9345, -0.5441,  0.9936, -1.0970, -1.4548, -0.3782,  0.7174,  0.1023,
E                -0.1893, -0.1028]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-5-10] _________________________

batch_shape = (4,), m = 10, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.2400, -0.5350,  2.1797,  0.8751,  1.1160,  1.1130,  1.9233,  0.1077,
         3.2415, -2.0265, -1.3074,  0....08,
        -4.8090,  0.4944,  1.5353,  0.3425,  3.6019,  2.8323, -1.1989, -3.5976,
         0.1458,  0.8630, -0.0424])
b = tensor([[ 0.2400, -0.5350,  2.1797,  0.8751,  1.1160,  1.1840,  0.9331,  0.1441,
          1.7207, -1.9144, -1.8851,  ... -0.2192, -0.6846,  2.7584,  3.1911,  0.3532,  2.4436,
          2.5144, -1.1989, -3.5976,  0.1458,  0.8630, -0.0424]])
prec = 1e-07
msg = 'tensor([ 0.2400, -0.5350,  2.1797,  0.8751,  1.1160,  1.1130,  1.9233,  0.1077,\n         3.2415, -2.0265, -1.3074,  ...0.2192, -0.6846,  2.7584,  3.1911,  0.3532,  2.4436,\n          2.5144, -1.1989, -3.5976,  0.1458,  0.8630, -0.0424]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.2400, -0.5350,  2.1797,  0.8751,  1.1160,  1.1130,  1.9233,  0.1077,
E                3.2415, -2.0265, -1.3074,  0.0445, -2.5761, -4.1745,  1.4560,  1.2783,
E                2.2254,  3.0897, -1.5984, -1.0191,  6.6999,  4.4665, -4.4294, -2.6191,
E               -5.0270, -6.2868,  0.3807,  0.9895,  7.9435,  3.5195,  4.5630, -1.8111,
E               -0.1604,  3.7051,  2.5926, -2.0299,  0.4644, -2.8162, -2.5731,  6.1454,
E                6.0345,  1.7902, -1.4828,  3.0325, -4.5657,  0.7795, -3.5508, -2.6408,
E               -4.8090,  0.4944,  1.5353,  0.3425,  3.6019,  2.8323, -1.1989, -3.5976,
E                0.1458,  0.8630, -0.0424]) vs tensor([[ 0.2400, -0.5350,  2.1797,  0.8751,  1.1160,  1.1840,  0.9331,  0.1441,
E                 1.7207, -1.9144, -1.8851,  0.2773,  0.1729, -0.0227],
E               [ 0.0920, -1.3177,  0.3893, -0.0968,  1.9496,  2.0438,  1.1264, -1.1732,
E                -0.8302, -0.2128, -0.7916,  1.8091, -1.3596,  0.3652],
E               [-0.0262,  0.9829,  0.3935,  2.2274,  0.7281, -0.9705, -1.6007, -4.7148,
E                -1.4541, -2.6068,  0.7781,  0.0118,  0.6739,  0.2521],
E               [ 0.8137,  1.8402, -0.2192, -0.6846,  2.7584,  3.1911,  0.3532,  2.4436,
E                 2.5144, -1.1989, -3.5976,  0.1458,  0.8630, -0.0424]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-6-2] _________________________

batch_shape = (4,), m = 2, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.7020,  0.4812,  1.6709, -0.0529,
         1.5736,  1.8265,  0.0325,  1....4,  0.6915, -0.2015,  2.1829,  2.0416,  1.6028,
        -0.3817,  1.0076, -2.2250, -0.4527, -0.7745, -1.8127, -0.5701])
b = tensor([[ 0.0118,  0.0046,  0.1364, -0.1877,  0.0233,  0.0499, -0.0556],
        [ 0.0973,  0.3357, -0.0556, -0.1827, ... 0.3254,  1.8061,  0.6466,  0.2659, -0.0759],
        [ 0.4249,  0.7857, -0.2073,  0.1521, -0.9325, -1.8127, -0.5701]])
prec = 1e-07
msg = 'tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.7020,  0.4812,  1.6709, -0.0529,\n         1.5736,  1.8265,  0.0325,  ....3254,  1.8061,  0.6466,  0.2659, -0.0759],\n        [ 0.4249,  0.7857, -0.2073,  0.1521, -0.9325, -1.8127, -0.5701]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.7020,  0.4812,  1.6709, -0.0529,
E                1.5736,  1.8265,  0.0325,  1.2437, -0.5296,  1.1905,  0.1520,  0.4142,
E               -1.0544, -0.0927,  1.6454,  0.6915, -0.2015,  2.1829,  2.0416,  1.6028,
E               -0.3817,  1.0076, -2.2250, -0.4527, -0.7745, -1.8127, -0.5701]) vs tensor([[ 0.0118,  0.0046,  0.1364, -0.1877,  0.0233,  0.0499, -0.0556],
E               [ 0.0973,  0.3357, -0.0556, -0.1827, -0.0736,  0.3721,  0.2646],
E               [-0.2190, -1.5667,  0.3254,  1.8061,  0.6466,  0.2659, -0.0759],
E               [ 0.4249,  0.7857, -0.2073,  0.1521, -0.9325, -1.8127, -0.5701]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-6-3] _________________________

batch_shape = (4,), m = 3, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
         7.9018e-01,  7.3076e-01,  2.1650e+00...6e-01, -2.2417e+00, -1.4740e+00, -1.1615e+00,
        -1.3410e+00,  1.0734e+00, -6.6712e-01,  1.6816e-02, -4.1486e-01])
b = tensor([[ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2132e-01,  1.7766e-01,
          1.7645e-01,  4.6719e-01,  2.8714e-...    [-1.5502e-01,  2.1850e-01, -2.8006e-01, -7.1065e-01,  7.2960e-01,
         -6.6712e-01,  1.6816e-02, -4.1486e-01]])
prec = 1e-07
msg = 'tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,\n         7.9018e-01,  7.3076e-01,  2.1650e+...  [-1.5502e-01,  2.1850e-01, -2.8006e-01, -7.1065e-01,  7.2960e-01,\n         -6.6712e-01,  1.6816e-02, -4.1486e-01]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
E                7.9018e-01,  7.3076e-01,  2.1650e+00,  1.8724e+00,  1.1735e+00,
E                5.2682e-01,  2.2514e+00, -1.9860e+00, -1.3573e+00,  7.2400e-01,
E                1.7447e-01, -3.4378e+00,  1.0627e+00, -2.5420e+00, -5.4724e-01,
E               -2.8674e+00, -1.0178e+00, -3.3523e-02, -1.8339e+00,  5.1546e-01,
E               -5.6758e+00,  9.0286e-01, -2.2417e+00, -1.4740e+00, -1.1615e+00,
E               -1.3410e+00,  1.0734e+00, -6.6712e-01,  1.6816e-02, -4.1486e-01]) vs tensor([[ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2132e-01,  1.7766e-01,
E                 1.7645e-01,  4.6719e-01,  2.8714e-01],
E               [-3.1216e-01, -1.4022e+00,  9.8422e-01, -6.7361e-01, -1.5577e+00,
E                 6.8979e-01,  1.8061e+00, -3.1715e-01],
E               [-1.5858e+00, -1.6773e+00, -1.4870e+00, -4.3705e-01,  5.4652e-01,
E                -8.4630e-02,  6.4340e-01, -1.9581e-01],
E               [-1.5502e-01,  2.1850e-01, -2.8006e-01, -7.1065e-01,  7.2960e-01,
E                -6.6712e-01,  1.6816e-02, -4.1486e-01]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-6-4] _________________________

batch_shape = (4,), m = 4, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-1.3800, -0.9400,  0.0996, -1.4241, -0.8152, -0.5864, -2.0258,  1.0904,
         2.3534, -1.2459,  4.0324,  1....9, -1.1980, -2.7895, -0.4023,  2.5682,  0.9702,
         3.9070,  5.4081,  3.3416,  1.9430,  0.2058, -1.2031, -0.5618])
b = tensor([[-1.3800, -0.9400,  0.0996, -1.4241, -0.2439,  0.0477, -0.6948, -0.2145,
          0.0357],
        [-0.3892, ...          0.4158],
        [ 0.5632,  1.7626,  2.2369,  4.3792,  3.5604,  1.9430,  0.2058, -1.2031,
         -0.5618]])
prec = 1e-07
msg = 'tensor([-1.3800, -0.9400,  0.0996, -1.4241, -0.8152, -0.5864, -2.0258,  1.0904,\n         2.3534, -1.2459,  4.0324,  ...       0.4158],\n        [ 0.5632,  1.7626,  2.2369,  4.3792,  3.5604,  1.9430,  0.2058, -1.2031,\n         -0.5618]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-1.3800, -0.9400,  0.0996, -1.4241, -0.8152, -0.5864, -2.0258,  1.0904,
E                2.3534, -1.2459,  4.0324,  1.9771, -1.3721, -0.3153,  1.5851, -2.4862,
E                0.0583, -1.5787, -3.2909, -0.0828,  0.7379,  6.3214,  3.7033,  6.8897,
E                0.9728, -0.7074,  0.7999, -1.1980, -2.7895, -0.4023,  2.5682,  0.9702,
E                3.9070,  5.4081,  3.3416,  1.9430,  0.2058, -1.2031, -0.5618]) vs tensor([[-1.3800, -0.9400,  0.0996, -1.4241, -0.2439,  0.0477, -0.6948, -0.2145,
E                 0.0357],
E               [-0.3892, -0.1641,  0.1750,  1.7179,  1.3152, -1.4012,  0.1482, -2.1557,
E                 0.7731],
E               [-0.1864,  0.2507, -0.9929,  0.8563, -0.7018, -1.0557,  1.5318, -2.2694,
E                 0.4158],
E               [ 0.5632,  1.7626,  2.2369,  4.3792,  3.5604,  1.9430,  0.2058, -1.2031,
E                -0.5618]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-6-5] _________________________

batch_shape = (4,), m = 5, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1664,  1.2481,  0.2882, -0.4668,  1.5806, -1.3000,  2.0810,  0.2739,
         0.0321, -2.1982, -0.4795,  4....82,
         3.5756, -0.8982, -0.2451,  4.4653,  0.3283,  1.4204, -0.5201, -0.3376,
         0.1508,  0.2032, -0.0116])
b = tensor([[ 0.1664,  1.2481,  0.2882, -0.4668,  1.5806, -1.3178,  0.5778,  2.0308,
         -1.0611, -0.3455],
        [...-2.4710],
        [ 0.2072,  1.4608,  0.7722,  0.3447,  1.5832, -0.5201, -0.3376,  0.1508,
          0.2032, -0.0116]])
prec = 1e-07
msg = 'tensor([ 0.1664,  1.2481,  0.2882, -0.4668,  1.5806, -1.3000,  2.0810,  0.2739,\n         0.0321, -2.1982, -0.4795,  ...4710],\n        [ 0.2072,  1.4608,  0.7722,  0.3447,  1.5832, -0.5201, -0.3376,  0.1508,\n          0.2032, -0.0116]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1664,  1.2481,  0.2882, -0.4668,  1.5806, -1.3000,  2.0810,  0.2739,
E                0.0321, -2.1982, -0.4795,  4.0330, -6.8135,  1.8140,  3.4030,  1.6785,
E               -2.7202,  6.3612, -5.5904,  2.5692,  7.5367,  1.4566, -2.1789,  1.6630,
E                2.6127, -8.5115, -0.0695,  3.6776,  1.1351,  0.5540,  1.4006, -5.6682,
E                3.5756, -0.8982, -0.2451,  4.4653,  0.3283,  1.4204, -0.5201, -0.3376,
E                0.1508,  0.2032, -0.0116]) vs tensor([[ 0.1664,  1.2481,  0.2882, -0.4668,  1.5806, -1.3178,  0.5778,  2.0308,
E                -1.0611, -0.3455],
E               [ 0.1672, -1.8451,  1.0867, -2.4473,  5.4692, -3.1559,  2.4275, -4.3547,
E                 0.6241,  0.9553],
E               [-0.7600, -1.3315,  1.5092, -1.0524, -3.8953,  7.5464, -2.8394, -2.4279,
E                 5.0030, -2.4710],
E               [ 0.2072,  1.4608,  0.7722,  0.3447,  1.5832, -0.5201, -0.3376,  0.1508,
E                 0.2032, -0.0116]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[full-(4,)-6-6] _________________________

batch_shape = (4,), m = 6, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
        -1.4225, -1.4884,  2.9345, -0....0,  1.0634,  2.1013,  1.0602,  3.1673,  0.3019,
         1.9708, -1.2665, -1.6936, -0.6248,  0.0766, -0.2213, -0.1367])
b = tensor([[ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  0.7610, -0.1135,
         -0.1936, -0.1289, -0.1593],
...
        [ 0.0613,  0.2032,  2.3515, -0.4318,  1.6468, -1.2665, -1.6936, -0.6248,
          0.0766, -0.2213, -0.1367]])
prec = 1e-07
msg = 'tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,\n        -1.4225, -1.4884,  2.9345, -...       [ 0.0613,  0.2032,  2.3515, -0.4318,  1.6468, -1.2665, -1.6936, -0.6248,\n          0.0766, -0.2213, -0.1367]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
E               -1.4225, -1.4884,  2.9345, -0.0277,  2.8300, -4.3628, -1.6921, -4.7310,
E                3.5391,  0.3828,  0.6490,  0.1560,  6.9587, -3.0283,  1.7989, -3.2787,
E                1.0463, -2.1658,  1.1979, -2.5004, -1.7807, -0.4669,  2.5148, -3.1229,
E                0.8144, -2.3532, -1.0230,  1.0634,  2.1013,  1.0602,  3.1673,  0.3019,
E                1.9708, -1.2665, -1.6936, -0.6248,  0.0766, -0.2213, -0.1367]) vs tensor([[ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  0.7610, -0.1135,
E                -0.1936, -0.1289, -0.1593],
E               [ 0.3532, -0.5431, -1.5934,  0.1078,  3.4985,  0.5206, -2.3019, -0.9263,
E                 1.2766, -0.6108,  0.2203],
E               [-0.2959, -0.3840,  0.6938,  0.5849, -0.1957, -0.4988, -0.1599, -0.1706,
E                -0.4650, -0.3755, -0.1464],
E               [ 0.0613,  0.2032,  2.3515, -0.4318,  1.6468, -1.2665, -1.6936, -0.6248,
E                 0.0766, -0.2213, -0.1367]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-6-10] _________________________

batch_shape = (4,), m = 10, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([  0.2400,  -0.5350,   2.1797,   0.8751,   1.6556,  -1.2248,   2.5132,
         -0.1940,   3.1021,  -1.9017,  -...  -2.2893,   0.4755,  -0.6078,  -8.3805,
         -3.7000,  -3.8347,  -4.5283,  -4.1083,   0.5020,   1.9860,   0.4400])
b = tensor([[ 0.2400, -0.5350,  2.1797,  0.8751,  1.6556, -1.2248,  0.8869, -1.3816,
          0.9369, -2.8159, -2.2282, -... -3.3154, -2.1097, -2.1976, -1.1458, -6.9201,
         -3.6489, -3.8347, -4.5283, -4.1083,  0.5020,  1.9860,  0.4400]])
prec = 1e-07
msg = 'tensor([  0.2400,  -0.5350,   2.1797,   0.8751,   1.6556,  -1.2248,   2.5132,\n         -0.1940,   3.1021,  -1.9017, ...3.3154, -2.1097, -2.1976, -1.1458, -6.9201,\n         -3.6489, -3.8347, -4.5283, -4.1083,  0.5020,  1.9860,  0.4400]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([  0.2400,  -0.5350,   2.1797,   0.8751,   1.6556,  -1.2248,   2.5132,
E                -0.1940,   3.1021,  -1.9017,  -0.9438,  -1.2269,   2.4846,  -2.5301,
E                 1.8952,   4.1337,   3.1707,  -0.0725,  -1.9698,  -4.0935,   4.6189,
E                 5.9878,  -5.5748, -10.5926,  -5.6443,   0.5672,   1.1655,   4.6205,
E                 5.8639,  -3.0770,   6.4129,  -1.8195,   6.4726,  -2.8682,  -2.8430,
E                -8.0521,  -3.4636,   7.5137,   2.2191,   3.8273,   7.3109,   0.5595,
E                -0.2480,   5.8160,   1.5394,  -0.5663, -10.5542,   0.3758,  -8.8751,
E                 6.1674,   1.1111,   0.9180,  -2.2893,   0.4755,  -0.6078,  -8.3805,
E                -3.7000,  -3.8347,  -4.5283,  -4.1083,   0.5020,   1.9860,   0.4400]) vs tensor([[ 0.2400, -0.5350,  2.1797,  0.8751,  1.6556, -1.2248,  0.8869, -1.3816,
E                 0.9369, -2.8159, -2.2282, -1.6274,  2.8994,  0.8488, -0.1572],
E               [-2.1072, -0.7445,  1.0159,  4.1218,  4.3342,  4.4863, -1.8163, -4.3889,
E                -1.7917, -1.3431,  0.1957,  0.5850,  1.4199, -1.7095,  0.8215],
E               [-0.9628,  0.5220, -2.2235,  1.3651, -0.4710,  0.7010,  2.0000, -2.1162,
E                 5.4860, -2.2987,  4.3520, -2.2800,  1.4031, -1.1187, -0.0405],
E               [-0.7388, -0.5097,  0.5110, -3.3154, -2.1097, -2.1976, -1.1458, -6.9201,
E                -3.6489, -3.8347, -4.5283, -4.1083,  0.5020,  1.9860,  0.4400]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-10-2] _________________________

batch_shape = (4,), m = 2, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.7020,  0.4812,  1.6709, -0.0529,
         1.9151,  1.4333,  1.3480,  1....7, -1.3626, -2.4403, -1.7333, -0.3846, -2.1958,
         0.9924,  0.6281,  3.4180,  2.0175,  2.1884,  3.8562,  1.4390])
b = tensor([[ 0.0118,  0.0046,  0.1364, -0.1877,  0.0233,  0.0499, -0.0263,  0.0505,
          0.1826, -0.3268,  0.0366],
...
        [-0.8808, -0.8378, -0.9153, -1.2442, -0.3669, -0.6485, -0.2132,  0.2914,
          2.5873,  3.8562,  1.4390]])
prec = 1e-07
msg = 'tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.7020,  0.4812,  1.6709, -0.0529,\n         1.9151,  1.4333,  1.3480,  ...       [-0.8808, -0.8378, -0.9153, -1.2442, -0.3669, -0.6485, -0.2132,  0.2914,\n          2.5873,  3.8562,  1.4390]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.0118,  0.0046,  0.1756, -0.1048,  0.7020,  0.4812,  1.6709, -0.0529,
E                1.9151,  1.4333,  1.3480,  1.5621,  3.7319,  0.3345,  4.1580,  0.6778,
E                0.8495,  0.9759, -0.2160, -0.7090,  1.2778, -1.5402, -1.5139,  1.5469,
E               -3.3547,  0.7161,  0.4583, -0.6335, -1.3397,  1.3541, -2.2649, -0.8417,
E               -0.8385, -0.9698, -0.7767, -1.3626, -2.4403, -1.7333, -0.3846, -2.1958,
E                0.9924,  0.6281,  3.4180,  2.0175,  2.1884,  3.8562,  1.4390]) vs tensor([[ 0.0118,  0.0046,  0.1364, -0.1877,  0.0233,  0.0499, -0.0263,  0.0505,
E                 0.1826, -0.3268,  0.0366],
E               [ 0.4663,  0.1536, -0.3414,  0.0383,  0.3511, -0.1235,  0.2225, -0.0936,
E                -0.9436, -0.0412,  0.2755],
E               [-0.7252,  0.5962,  0.9974, -0.2497, -2.3978,  0.6929, -0.3908,  0.6797,
E                -0.1213, -1.0071,  0.1765],
E               [-0.8808, -0.8378, -0.9153, -1.2442, -0.3669, -0.6485, -0.2132,  0.2914,
E                 2.5873,  3.8562,  1.4390]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-10-3] _________________________

batch_shape = (4,), m = 3, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
         7.9018e-01,  7.3076e-01,  2.1650e+00...1.0494e+00, -9.8519e-01,
         3.8519e-01,  7.1535e-01,  4.3998e-02, -1.7129e-01, -9.3940e-02,
        -6.4577e-02])
b = tensor([[ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2132e-01,  1.7766e-01,
          1.7645e-01,  3.2246e-01,  5.1387e-...137e-01,
         -3.4709e-01,  6.0997e-01,  7.3346e-01, -9.5194e-03, -1.7129e-01,
         -9.3940e-02, -6.4577e-02]])
prec = 1e-07
msg = 'tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,\n         7.9018e-01,  7.3076e-01,  2.1650e+...e-01,\n         -3.4709e-01,  6.0997e-01,  7.3346e-01, -9.5194e-03, -1.7129e-01,\n         -9.3940e-02, -6.4577e-02]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
E                7.9018e-01,  7.3076e-01,  2.1650e+00,  1.8192e+00,  1.4398e+00,
E                1.8784e-01,  2.5114e+00, -1.3742e+00,  2.2315e-02,  1.0888e+00,
E               -9.6081e-01,  2.7896e+00, -1.5750e+00,  8.1036e-01, -2.9507e-01,
E               -4.0623e-01,  1.7580e+00, -5.1657e-01,  4.8192e-02,  1.4238e-01,
E                9.5204e-01, -6.9283e-01,  3.6160e-01, -8.3311e-01,  1.0248e-01,
E               -4.0752e-01, -1.0797e+00, -2.2346e+00, -9.7677e-01, -2.4349e+00,
E               -6.9145e-02, -4.8553e-01, -1.9431e+00,  4.0671e+00,  1.5759e+00,
E                2.1792e+00,  2.4054e+00, -3.9861e-01, -1.0494e+00, -9.8519e-01,
E                3.8519e-01,  7.1535e-01,  4.3998e-02, -1.7129e-01, -9.3940e-02,
E               -6.4577e-02]) vs tensor([[ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2132e-01,  1.7766e-01,
E                 1.7645e-01,  3.2246e-01,  5.1387e-01, -6.2962e-01,  3.7252e-01,
E                -3.0825e-01,  1.9704e-01],
E               [ 1.4497e-01,  5.4712e-01, -8.4039e-01,  8.2196e-01, -5.3100e-01,
E                 6.5315e-01, -3.2764e-01, -6.1686e-01,  8.1299e-01,  9.8515e-01,
E                -2.4969e-01,  1.0658e-02],
E               [-6.1238e-01, -5.5784e-01,  3.6783e-05,  9.8872e-01,  8.6700e-01,
E                -1.1846e+00, -1.5140e+00, -5.6461e-01, -8.2527e-02,  4.6725e-01,
E                 5.6313e-01, -2.0492e-01],
E               [-2.5165e-01,  3.8954e-01, -6.7556e-01, -4.3092e-01,  4.3137e-01,
E                -3.4709e-01,  6.0997e-01,  7.3346e-01, -9.5194e-03, -1.7129e-01,
E                -9.3940e-02, -6.4577e-02]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-10-4] _________________________

batch_shape = (4,), m = 4, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-1.3800e+00, -9.3995e-01,  9.9564e-02, -1.4241e+00, -8.1523e-01,
        -5.8641e-01, -2.0258e+00,  1.0904e+00...9e+00, -1.9795e+00, -4.3114e-01, -7.6235e-01,
         1.1881e+00,  3.5158e+00,  3.3101e+00,  1.8910e+00,  8.6174e-01])
b = tensor([[-1.3800, -0.9400,  0.0996, -1.4241, -0.2439,  0.0477, -1.6349, -0.2078,
         -1.1793,  0.0268, -0.2771,  ...  3.2044,  3.7441,  3.3042,  1.9696,  1.4500, -0.7976,  0.7982,
          0.8526,  3.5158,  3.3101,  1.8910,  0.8617]])
prec = 1e-07
msg = 'tensor([-1.3800e+00, -9.3995e-01,  9.9564e-02, -1.4241e+00, -8.1523e-01,\n        -5.8641e-01, -2.0258e+00,  1.0904e+...3.2044,  3.7441,  3.3042,  1.9696,  1.4500, -0.7976,  0.7982,\n          0.8526,  3.5158,  3.3101,  1.8910,  0.8617]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-1.3800e+00, -9.3995e-01,  9.9564e-02, -1.4241e+00, -8.1523e-01,
E               -5.8641e-01, -2.0258e+00,  1.0904e+00,  2.8221e-01, -1.6237e+00,
E                5.8123e-01,  1.5109e+00, -4.1851e+00,  6.8138e-01, -1.8613e+00,
E                8.6134e-01,  8.8926e-01, -2.9060e-03, -7.0771e-01, -1.8934e+00,
E               -2.4631e+00,  1.0281e+00, -8.9169e-01, -3.8984e+00,  1.3906e+00,
E               -1.8710e+00,  3.0020e+00,  2.5512e+00,  8.8819e-01,  4.0912e-01,
E                5.3817e+00, -1.7666e+00,  1.8480e+00,  1.1369e+00, -2.2750e-01,
E                7.8616e-01, -6.4594e-01, -1.1424e+00, -7.6411e-01,  8.3971e+00,
E                1.1886e+00,  1.5570e-01, -5.2383e-01,  2.5195e+00,  3.4346e-01,
E                2.8249e+00,  2.5849e+00, -1.9795e+00, -4.3114e-01, -7.6235e-01,
E                1.1881e+00,  3.5158e+00,  3.3101e+00,  1.8910e+00,  8.6174e-01]) vs tensor([[-1.3800, -0.9400,  0.0996, -1.4241, -0.2439,  0.0477, -1.6349, -0.2078,
E                -1.1793,  0.0268, -0.2771,  0.0348,  0.1569],
E               [-0.1824, -0.0837, -0.2574,  1.0499, -0.2296,  0.9015, -1.5666,  1.7949,
E                -0.6436, -1.0090, -0.2704, -0.6638,  1.1643],
E               [-0.0558, -0.3983, -0.1275, -1.0760,  0.2057,  1.9852, -1.4254,  0.6672,
E                -2.8964,  0.3505, -0.1660,  3.2872, -0.6735],
E               [ 1.9063,  3.2044,  3.7441,  3.3042,  1.9696,  1.4500, -0.7976,  0.7982,
E                 0.8526,  3.5158,  3.3101,  1.8910,  0.8617]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-10-5] _________________________

batch_shape = (4,), m = 5, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.6643e-01,  1.2481e+00,  2.8816e-01, -4.6684e-01,  1.5806e+00,
        -1.3000e+00,  2.0810e+00,  2.7387e-01...9e+00, -1.0062e+00,  2.4172e+00,  1.2972e+00,  1.5974e+00,
        -4.2929e-01, -1.3578e+00,  1.4410e-01, -3.7618e-03])
b = tensor([[ 1.6643e-01,  1.2481e+00,  2.8816e-01, -4.6684e-01,  1.5806e+00,
         -1.3178e+00,  2.1394e+00,  1.6300e+...-01,  4.4284e-01,  1.2677e+00,  1.3501e+00,  1.5974e+00,
         -4.2929e-01, -1.3578e+00,  1.4410e-01, -3.7618e-03]])
prec = 1e-07
msg = 'tensor([ 1.6643e-01,  1.2481e+00,  2.8816e-01, -4.6684e-01,  1.5806e+00,\n        -1.3000e+00,  2.0810e+00,  2.7387e-...1,  4.4284e-01,  1.2677e+00,  1.3501e+00,  1.5974e+00,\n         -4.2929e-01, -1.3578e+00,  1.4410e-01, -3.7618e-03]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.6643e-01,  1.2481e+00,  2.8816e-01, -4.6684e-01,  1.5806e+00,
E               -1.3000e+00,  2.0810e+00,  2.7387e-01,  3.7916e-01, -1.8956e-01,
E               -2.3473e-01,  5.2514e+00, -7.2250e+00,  2.2195e+00,  3.6416e+00,
E                2.2761e+00,  1.0198e+00,  2.4885e+00,  2.1156e-01,  1.1986e+00,
E                4.1335e+00, -2.5554e+00,  1.3374e+00,  7.7658e+00,  1.6574e+00,
E               -2.5754e-01,  3.5682e+00,  2.9853e-01,  4.1905e+00,  5.4522e-01,
E               -9.6790e-01,  2.5664e+00,  4.6016e+00,  8.3784e-01, -6.0326e+00,
E                8.9656e+00,  1.8857e+00,  3.4885e+00,  5.4918e+00,  2.0728e+00,
E                4.7479e-01,  2.6988e-01, -3.4327e+00, -9.2835e-01,  8.7643e-01,
E                4.0057e+00,  2.0244e+00, -4.4783e+00, -2.3770e+00, -1.0701e+00,
E               -2.3749e+00, -1.0062e+00,  2.4172e+00,  1.2972e+00,  1.5974e+00,
E               -4.2929e-01, -1.3578e+00,  1.4410e-01, -3.7618e-03]) vs tensor([[ 1.6643e-01,  1.2481e+00,  2.8816e-01, -4.6684e-01,  1.5806e+00,
E                -1.3178e+00,  2.1394e+00,  1.6300e+00,  4.4054e-01, -6.4112e-01,
E                -1.2883e+00,  3.7876e-01, -6.5656e-01,  4.5561e-01],
E               [ 1.3911e-01, -1.4027e+00, -6.2741e-01, -9.4944e-02, -1.3531e+00,
E                 1.7677e+00, -3.8704e+00,  1.3119e+00, -1.4189e+00,  2.3183e-01,
E                -8.9442e-01, -1.4154e-01,  6.9254e-01,  1.5063e-01],
E               [ 5.1004e-01, -1.5256e+00,  5.1757e+00, -4.5408e-01, -3.2891e+00,
E                 4.1854e+00,  9.7220e-01, -3.1563e+00,  2.2538e+00, -5.5049e-01,
E                -9.2921e-01,  1.6319e+00, -1.8930e+00,  6.4326e-01],
E               [ 3.3118e-02, -1.2156e+00, -1.6136e+00, -2.2331e+00, -3.3905e+00,
E                -7.0924e-01,  4.4284e-01,  1.2677e+00,  1.3501e+00,  1.5974e+00,
E                -4.2929e-01, -1.3578e+00,  1.4410e-01, -3.7618e-03]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-10-6] _________________________

batch_shape = (4,), m = 6, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
        -2.0661,  0.7846,  3.1790,  2....8, -0.2188,  1.4394, -2.0243, -5.7207, -3.9631,
        -2.9902, -1.0608, -0.4909,  3.0689,  3.7628,  2.0635,  0.3466])
b = tensor([[ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  1.4524,  0.5142,
         -0.6263,  1.8800, -0.1045,  ... -1.4288, -0.4780, -0.9236, -3.4861, -2.6847,
         -2.7797, -1.0608, -0.4909,  3.0689,  3.7628,  2.0635,  0.3466]])
prec = 1e-07
msg = 'tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,\n        -2.0661,  0.7846,  3.1790,  ...1.4288, -0.4780, -0.9236, -3.4861, -2.6847,\n         -2.7797, -1.0608, -0.4909,  3.0689,  3.7628,  2.0635,  0.3466]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
E               -2.0661,  0.7846,  3.1790,  2.5634,  4.6126,  0.3701,  0.2115, -0.2463,
E                3.9368, -1.8619,  3.4665,  6.6027,  1.4988, -3.1624,  6.5789, -0.3329,
E               -1.8014, -2.5714, -1.9686, -0.7453, 11.0795,  4.5184, -1.7962, -4.5738,
E                4.2491, -2.1847,  3.6510, -2.2162,  0.0624, -5.8492,  3.5622, -7.3212,
E                0.2664, -5.8707,  6.7252, -2.6129,  0.4749, -0.9964, -1.1485, -5.4878,
E                2.5723,  0.5844,  3.2988, -0.2188,  1.4394, -2.0243, -5.7207, -3.9631,
E               -2.9902, -1.0608, -0.4909,  3.0689,  3.7628,  2.0635,  0.3466]) vs tensor([[ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  1.4524,  0.5142,
E                -0.6263,  1.8800, -0.1045,  1.0554,  0.3338,  0.3912,  0.3820],
E               [ 0.2455, -0.0655, -1.5630,  0.1002, -0.6471, -0.9835,  2.5886,  4.2587,
E                -2.1039, -2.7194, -2.5185, -0.2899,  6.0705, -0.9080, -1.0371],
E               [ 0.1186, -1.7417,  1.9842,  2.3951, -1.4223, -3.4129, -0.4723,  1.2459,
E                 2.3370,  0.3538, -1.2335, -0.3687,  0.3269,  0.1701, -0.2253],
E               [ 1.5972, -0.9843,  3.5540, -1.4288, -0.4780, -0.9236, -3.4861, -2.6847,
E                -2.7797, -1.0608, -0.4909,  3.0689,  3.7628,  2.0635,  0.3466]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(4,)-10-10] ________________________

batch_shape = (4,), m = 10, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([  0.2400,  -0.5350,   2.1797,   0.8751,   1.6556,  -1.2248,   2.5132,
         -0.1940,   2.4430,  -0.9692,  -...6,  -3.4883,
          0.1704,  -5.9204,   1.4031,  -3.8487,   0.3773,  -3.8289,  -0.5224,
          1.8877,   0.0737])
b = tensor([[ 0.2400, -0.5350,  2.1797,  0.8751,  1.6556, -1.2248,  2.5132, -0.1940,
          2.4430, -0.9692, -0.9476, -...
         -1.9665, -3.4883,  0.1704, -5.9204,  1.4031, -3.8487,  0.3773, -3.8289,
         -0.5224,  1.8877,  0.0737]])
prec = 1e-07
msg = 'tensor([  0.2400,  -0.5350,   2.1797,   0.8751,   1.6556,  -1.2248,   2.5132,\n         -0.1940,   2.4430,  -0.9692, ...        -1.9665, -3.4883,  0.1704, -5.9204,  1.4031, -3.8487,  0.3773, -3.8289,\n         -0.5224,  1.8877,  0.0737]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([  0.2400,  -0.5350,   2.1797,   0.8751,   1.6556,  -1.2248,   2.5132,
E                -0.1940,   2.4430,  -0.9692,  -0.9590,   0.6135,   0.3676,   0.8232,
E                 0.1898,   8.3971,   1.4113,   1.6671,  -2.8307,  -1.7912,   2.4580,
E                 6.7017,   0.4238,  -9.2929,  -1.3570,   0.0883,   1.7596,   8.6930,
E                12.1102,  -3.5847,   2.9414,   0.2345,   1.9251,  -0.8340,   3.2439,
E                -3.9197,  -2.2808,   8.1933, -13.4835,  13.4527,   8.1172,   9.2104,
E                -7.7603,  12.1547,   1.0197,  -7.7288,   8.2453,  -6.0232,   3.7751,
E                -2.6738,   4.9273,   2.8215,   0.4689,   6.8173,  -0.4980,   5.1983,
E                -1.0520,  -6.5823,   7.7818,  -1.9204,   2.2613,  -0.1835,   1.4906,
E                 3.8859,  -5.7743,   9.8016,  -3.8693,  -1.1725,  -2.3106,  -3.4883,
E                 0.1704,  -5.9204,   1.4031,  -3.8487,   0.3773,  -3.8289,  -0.5224,
E                 1.8877,   0.0737]) vs tensor([[ 0.2400, -0.5350,  2.1797,  0.8751,  1.6556, -1.2248,  2.5132, -0.1940,
E                 2.4430, -0.9692, -0.9476, -0.3979,  4.2551, -0.3078, -1.5240, -0.1922,
E                -0.6182, -0.1599,  0.0326],
E               [-0.3881, -0.1141,  2.3541, -2.4553, -0.8680, -0.7624, -0.1183,  2.3332,
E                 7.2574,  2.4288, -2.1447,  1.8500, -4.0918, -1.2560, -0.8241,  2.0162,
E                 0.0130, -1.0615,  0.5734],
E               [ 0.2996,  0.0201, -0.4271,  0.2451, -1.0403, -1.2332,  2.6380, -2.1861,
E                -0.5422,  0.0693, -2.6563,  3.7275,  0.9510,  5.1926,  1.2387,  0.3472,
E                 0.1400, -1.0118, -0.3192],
E               [ 0.3222, -0.0508, -0.2249,  0.3890, -2.3603,  2.8128, -2.2299, -0.9460,
E                -1.9665, -3.4883,  0.1704, -5.9204,  1.4031, -3.8487,  0.3773, -3.8289,
E                -0.5224,  1.8877,  0.0737]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-2-2] ________________________

batch_shape = (2, 3), m = 2, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0262, -0.0459, -0.0461, -0.3684, -0.4502, -1.0974, -0.7853, -1.5871,
        -0.1806,  0.1393,  0.1003,  1.1617,  0.4622, -0.7309,  0.8819, -0.6354,
        -0.5977,  1.7171,  0.5529,  0.0640, -0.5409, -0.0354,  0.3480])
b = tensor([[[-0.0262, -0.0459,  0.0801],
         [-0.1304, -0.4444, -0.2339],
         [ 0.0462,  1.0525, -0.1854]],

        [[ 0.4579,  0.7707,  0.3223],
         [-0.0092,  0.4637, -0.1543],
         [-0.0817, -0.0354,  0.3480]]])
prec = 1e-07
msg = 'tensor([-0.0262, -0.0459, -0.0461, -0.3684, -0.4502, -1.0974, -0.7853, -1.5871,\n        -0.1806,  0.1393,  0.1003,  ...n        [[ 0.4579,  0.7707,  0.3223],\n         [-0.0092,  0.4637, -0.1543],\n         [-0.0817, -0.0354,  0.3480]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0262, -0.0459, -0.0461, -0.3684, -0.4502, -1.0974, -0.7853, -1.5871,
E               -0.1806,  0.1393,  0.1003,  1.1617,  0.4622, -0.7309,  0.8819, -0.6354,
E               -0.5977,  1.7171,  0.5529,  0.0640, -0.5409, -0.0354,  0.3480]) vs tensor([[[-0.0262, -0.0459,  0.0801],
E                [-0.1304, -0.4444, -0.2339],
E                [ 0.0462,  1.0525, -0.1854]],
E       
E               [[ 0.4579,  0.7707,  0.3223],
E                [-0.0092,  0.4637, -0.1543],
E                [-0.0817, -0.0354,  0.3480]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-2-3] ________________________

batch_shape = (2, 3), m = 3, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.8786,  0.7905,  2.0257,  1.5803, -1.0148, -0.5913, -2.9058, -3.5461,
         1.6601, -3.6827,  1.6771,  1....1, -0.9006, -0.5470,  2.2580, -3.0013,  0.8869, -3.2319,  1.9420,
         0.8884, -2.4932,  2.0892,  1.8743,  0.9452])
b = tensor([[[ 0.8786,  0.7905,  1.3624,  0.9163],
         [-0.4608, -1.3569, -0.8918,  0.1244],
         [ 1.1177,  1.14...424,  0.7434, -0.0932],
         [-0.0508,  0.7265, -2.1857,  1.3624],
         [ 0.6696,  2.6118,  1.8743,  0.9452]]])
prec = 1e-07
msg = 'tensor([ 0.8786,  0.7905,  2.0257,  1.5803, -1.0148, -0.5913, -2.9058, -3.5461,\n         1.6601, -3.6827,  1.6771,  ...,  0.7434, -0.0932],\n         [-0.0508,  0.7265, -2.1857,  1.3624],\n         [ 0.6696,  2.6118,  1.8743,  0.9452]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.8786,  0.7905,  2.0257,  1.5803, -1.0148, -0.5913, -2.9058, -3.5461,
E                1.6601, -3.6827,  1.6771,  1.6206,  2.1817,  6.1019, -4.6754,  3.8239,
E               -0.5981, -0.9006, -0.5470,  2.2580, -3.0013,  0.8869, -3.2319,  1.9420,
E                0.8884, -2.4932,  2.0892,  1.8743,  0.9452]) vs tensor([[[ 0.8786,  0.7905,  1.3624,  0.9163],
E                [-0.4608, -1.3569, -0.8918,  0.1244],
E                [ 1.1177,  1.1494,  0.9250,  1.3998]],
E       
E               [[ 1.0309, -1.8424,  0.7434, -0.0932],
E                [-0.0508,  0.7265, -2.1857,  1.3624],
E                [ 0.6696,  2.6118,  1.8743,  0.9452]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-2-4] ________________________

batch_shape = (2, 3), m = 4, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.9850, -1.0928,  0.8409, -1.5326,  0.6065,  1.2159,  0.6553,  0.4574,
         1.9483,  2.9126,  3.9392, -1....29,
         1.7655,  4.2190, -0.1249, -1.7777, -0.1956, -1.5727, -0.2029, -0.2473,
        -0.8580, -0.9136, -0.1905])
b = tensor([[[ 0.9850, -1.0928,  0.4740, -0.4812, -0.5074],
         [ 0.1519, -0.3702, -0.0881, -0.9955,  1.2949],
      ...537],
         [ 0.4026, -0.0300,  0.6368, -0.5845,  0.0302],
         [ 0.9352, -0.2642, -1.1266, -0.9136, -0.1905]]])
prec = 1e-07
msg = 'tensor([ 0.9850, -1.0928,  0.8409, -1.5326,  0.6065,  1.2159,  0.6553,  0.4574,\n         1.9483,  2.9126,  3.9392, -...],\n         [ 0.4026, -0.0300,  0.6368, -0.5845,  0.0302],\n         [ 0.9352, -0.2642, -1.1266, -0.9136, -0.1905]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.9850, -1.0928,  0.8409, -1.5326,  0.6065,  1.2159,  0.6553,  0.4574,
E                1.9483,  2.9126,  3.9392, -1.1936, -0.3414, -4.8052,  4.2011,  2.2453,
E               -0.0800,  3.8817, -2.0646, -4.8912,  4.2719, -3.9261,  2.0495,  3.1929,
E                1.7655,  4.2190, -0.1249, -1.7777, -0.1956, -1.5727, -0.2029, -0.2473,
E               -0.8580, -0.9136, -0.1905]) vs tensor([[[ 0.9850, -1.0928,  0.4740, -0.4812, -0.5074],
E                [ 0.1519, -0.3702, -0.0881, -0.9955,  1.2949],
E                [-0.7540, -1.7107,  3.4650,  3.4766, -2.5374]],
E       
E               [[-0.0167,  0.6495, -0.3884, -0.9520,  0.0537],
E                [ 0.4026, -0.0300,  0.6368, -0.5845,  0.0302],
E                [ 0.9352, -0.2642, -1.1266, -0.9136, -0.1905]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-2-5] ________________________

batch_shape = (2, 3), m = 5, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0251,  0.9547,  0.6595,  0.3981,  1.4776,  0.7380,  1.5981,  1.4299,
         1.7692, -0.2204,  3.0962, -0....29, -4.0635, -1.6134,
        -1.6382, -2.2894, -1.4858, -1.5968,  0.5361, -1.7931,  0.4473, -0.2916,
        -0.1939])
b = tensor([[[-0.0251,  0.9547,  0.1445,  0.6585,  0.3760,  0.3970],
         [ 0.1275,  0.1771, -0.7764,  0.2316,  0.1488....3472,  2.5018, -2.3777, -1.0783, -1.3624,  0.1898],
         [-0.2862, -0.4610, -0.5097,  0.3048, -0.2916, -0.1939]]])
prec = 1e-07
msg = 'tensor([-0.0251,  0.9547,  0.6595,  0.3981,  1.4776,  0.7380,  1.5981,  1.4299,\n         1.7692, -0.2204,  3.0962, -...472,  2.5018, -2.3777, -1.0783, -1.3624,  0.1898],\n         [-0.2862, -0.4610, -0.5097,  0.3048, -0.2916, -0.1939]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0251,  0.9547,  0.6595,  0.3981,  1.4776,  0.7380,  1.5981,  1.4299,
E                1.7692, -0.2204,  3.0962, -0.6438,  0.5979,  1.8253,  1.4145, -2.6674,
E               -0.7024,  1.6522, -1.9736,  1.7673,  0.2260,  1.2808,  1.5458,  0.5088,
E               -0.9880, -0.6250, -0.6240, -2.0180, -1.1439,  0.7529, -4.0635, -1.6134,
E               -1.6382, -2.2894, -1.4858, -1.5968,  0.5361, -1.7931,  0.4473, -0.2916,
E               -0.1939]) vs tensor([[[-0.0251,  0.9547,  0.1445,  0.6585,  0.3760,  0.3970],
E                [ 0.1275,  0.1771, -0.7764,  0.2316,  0.1488, -0.0218],
E                [-1.0382, -0.1036,  1.0056,  1.3406, -0.4707, -0.2444]],
E       
E               [[ 0.0392,  0.5022,  0.2826,  0.1400, -0.7970, -0.3800],
E                [ 0.3472,  2.5018, -2.3777, -1.0783, -1.3624,  0.1898],
E                [-0.2862, -0.4610, -0.5097,  0.3048, -0.2916, -0.1939]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-2-6] ________________________

batch_shape = (2, 3), m = 6, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.7000,  0.4325,  2.2678,  0.5785,  2.3014,  1.2625,  2.3826, -0.0219,
         1.2178, -4.9967, -0.5707, -4....9, -3.6930,  4.6147, -2.2621,  3.2782, -3.3855,
        -0.8515,  2.8860, -8.1364,  0.9421, -6.1831, -0.2662, -1.7050])
b = tensor([[[ 0.7000,  0.4325,  0.5412,  0.5011,  0.4164,  0.3033,  0.0778],
         [ 0.8821, -2.1175, -0.3291,  0.1804....4427, -6.1362,  2.6394, -2.1000,  2.1346],
         [ 0.7835, -1.8803, -1.8163,  2.6981, -2.4352, -0.2662, -1.7050]]])
prec = 1e-07
msg = 'tensor([ 0.7000,  0.4325,  2.2678,  0.5785,  2.3014,  1.2625,  2.3826, -0.0219,\n         1.2178, -4.9967, -0.5707, -...427, -6.1362,  2.6394, -2.1000,  2.1346],\n         [ 0.7835, -1.8803, -1.8163,  2.6981, -2.4352, -0.2662, -1.7050]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.7000,  0.4325,  2.2678,  0.5785,  2.3014,  1.2625,  2.3826, -0.0219,
E                1.2178, -4.9967, -0.5707, -4.2485, -2.7684, -1.2103,  1.4490,  0.6843,
E                4.7006,  1.4440,  1.1193,  5.0846,  0.7326, -3.0563, -3.6988, -4.3850,
E               -1.9283,  1.7233,  6.7490, -2.2623,  7.8347, -5.3810,  1.9632, -0.0194,
E                7.1180, -5.9923,  2.2969, -3.6930,  4.6147, -2.2621,  3.2782, -3.3855,
E               -0.8515,  2.8860, -8.1364,  0.9421, -6.1831, -0.2662, -1.7050]) vs tensor([[[ 0.7000,  0.4325,  0.5412,  0.5011,  0.4164,  0.3033,  0.0778],
E                [ 0.8821, -2.1175, -0.3291,  0.1804, -2.2506,  0.7430, -0.0578],
E                [ 0.8409,  1.2836,  1.3935,  0.9074, -0.9942, -1.0991, -0.2492]],
E       
E               [[ 1.0979, -1.0045,  0.3835,  1.0676, -0.5172, -1.2679,  0.5487],
E                [ 0.1675, -5.7117, -1.4427, -6.1362,  2.6394, -2.1000,  2.1346],
E                [ 0.7835, -1.8803, -1.8163,  2.6981, -2.4352, -0.2662, -1.7050]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-2-10] ________________________

batch_shape = (2, 3), m = 10, n = 2, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-3.2788e-01,  1.0455e+00, -1.0264e+00,  5.4100e-01, -1.0104e-01,
        -3.8393e-01, -1.0125e+00,  1.2015e+00...7.8587e-01, -2.5462e+00,
         1.6078e+00,  2.1129e-02, -3.6223e-01, -9.3571e-02,  1.0096e-01,
        -3.6108e-02])
b = tensor([[[-0.3279,  1.0455, -0.0426,  0.6355,  0.3078,  0.3746,  0.1050,
           0.9437, -1.1704, -0.3895,  0.0692]...       [ 0.1593, -0.1983, -1.2238,  2.1061, -0.3823,  0.9918, -0.5735,
          -0.1857,  0.1178,  0.1010, -0.0361]]])
prec = 1e-07
msg = 'tensor([-3.2788e-01,  1.0455e+00, -1.0264e+00,  5.4100e-01, -1.0104e-01,\n        -3.8393e-01, -1.0125e+00,  1.2015e+...     [ 0.1593, -0.1983, -1.2238,  2.1061, -0.3823,  0.9918, -0.5735,\n          -0.1857,  0.1178,  0.1010, -0.0361]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-3.2788e-01,  1.0455e+00, -1.0264e+00,  5.4100e-01, -1.0104e-01,
E               -3.8393e-01, -1.0125e+00,  1.2015e+00, -2.8888e+00, -5.3162e-01,
E                7.2346e-01, -3.3191e+00,  1.0296e+00,  1.4822e+00, -1.6909e+00,
E                6.8121e-01,  3.4190e+00, -4.1488e+00,  1.4973e-01,  3.5485e+00,
E               -4.9233e+00, -1.0398e+00,  2.0375e+00, -4.6664e+00,  7.1733e-01,
E                3.9224e+00, -1.9884e-02, -2.9305e+00,  4.1388e+00, -1.2240e+00,
E                2.9146e+00, -2.3451e+00,  2.4393e+00,  5.7974e-01, -2.1934e+00,
E                1.0651e+00,  7.8822e-03, -2.0037e+00,  3.3514e-01,  1.1461e+00,
E               -3.9185e+00,  2.2735e+00, -1.3743e+00, -9.7726e-01,  3.1233e+00,
E                1.1900e+00, -6.2882e+00,  6.6910e+00,  2.0329e+00, -1.6488e+00,
E                1.2312e+00,  4.3350e+00, -4.4288e+00, -3.6354e-01,  9.0387e+00,
E               -7.9344e+00,  1.1878e+00,  1.7489e+00,  9.5542e-01, -3.7009e+00,
E                3.1015e+00, -6.9732e-01, -2.8738e+00,  7.8587e-01, -2.5462e+00,
E                1.6078e+00,  2.1129e-02, -3.6223e-01, -9.3571e-02,  1.0096e-01,
E               -3.6108e-02]) vs tensor([[[-0.3279,  1.0455, -0.0426,  0.6355,  0.3078,  0.3746,  0.1050,
E                  0.9437, -1.1704, -0.3895,  0.0692],
E                [ 1.2747, -0.3580, -1.1339, -1.2071, -1.2916, -0.5796,  1.6900,
E                  0.7204, -1.4654,  0.7859, -0.0499],
E                [-0.2195,  0.4069, -0.3500,  0.5722, -0.2795,  0.4490, -0.3561,
E                  0.2629, -0.0705,  0.4766, -0.7128]],
E       
E               [[ 1.0359, -1.8995,  0.2809,  0.4934, -0.0571,  1.1549, -1.1701,
E                 -1.0817,  1.2532,  1.3763, -1.3770],
E                [ 0.6270,  1.4463,  0.8648,  0.9966,  0.5250,  1.8572,  2.5794,
E                 -3.3650, -1.1440,  1.2858,  1.3320],
E                [ 0.1593, -0.1983, -1.2238,  2.1061, -0.3823,  0.9918, -0.5735,
E                 -0.1857,  0.1178,  0.1010, -0.0361]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-3-2] ________________________

batch_shape = (2, 3), m = 2, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4663e-03,  4.9936e-02,  4.9759e-02,  5.9778e-02,  3.9615e-01,
         8.1482e-01,  7.4462e-01,  1.6695e-01...9e-01,  1.8766e+00, -3.3054e-01,  2.8602e-01,  7.4419e-01,
        -1.8623e-01,  3.7018e-01, -3.5273e-01,  2.3628e-01])
b = tensor([[[ 1.4663e-03,  4.9936e-02,  4.4896e-02, -1.0855e-01],
         [-1.8825e-02, -2.4504e-01, -1.8271e-01, -2.035... [-2.6079e-01, -3.0172e-02, -1.0216e-01,  4.7423e-02],
         [-9.8580e-02,  3.0458e-01, -3.5273e-01,  2.3628e-01]]])
prec = 1e-07
msg = 'tensor([ 1.4663e-03,  4.9936e-02,  4.9759e-02,  5.9778e-02,  3.9615e-01,\n         8.1482e-01,  7.4462e-01,  1.6695e-...-2.6079e-01, -3.0172e-02, -1.0216e-01,  4.7423e-02],\n         [-9.8580e-02,  3.0458e-01, -3.5273e-01,  2.3628e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4663e-03,  4.9936e-02,  4.9759e-02,  5.9778e-02,  3.9615e-01,
E                8.1482e-01,  7.4462e-01,  1.6695e-01,  2.5205e-01,  7.5830e-01,
E               -5.7077e-01,  2.1973e-01, -3.7951e-01,  1.8146e-01,  2.8556e+00,
E               -1.1008e+00,  1.1643e+00,  2.3117e+00,  1.5586e+00,  1.6157e+00,
E               -8.8169e-01,  1.8766e+00, -3.3054e-01,  2.8602e-01,  7.4419e-01,
E               -1.8623e-01,  3.7018e-01, -3.5273e-01,  2.3628e-01]) vs tensor([[[ 1.4663e-03,  4.9936e-02,  4.4896e-02, -1.0855e-01],
E                [-1.8825e-02, -2.4504e-01, -1.8271e-01, -2.0355e-02],
E                [-1.7237e-01,  1.3473e+00, -4.4926e-01,  3.8284e-02]],
E       
E               [[-1.3039e+00,  4.3821e-02,  1.5039e+00,  5.3086e-01],
E                [-2.6079e-01, -3.0172e-02, -1.0216e-01,  4.7423e-02],
E                [-9.8580e-02,  3.0458e-01, -3.5273e-01,  2.3628e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-3-3] ________________________

batch_shape = (2, 3), m = 3, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1310, -0.9790,  0.0276, -0.7510,  1.5548,  2.2147,  0.6433, -0.3732,
         1.2881,  0.6106,  1.1156, -0....03,
         2.9513, -2.3585,  0.3661, -0.3661, -3.1986, -2.4473, -0.2319,  0.6376,
         0.6350,  0.2581,  0.0705])
b = tensor([[[ 1.3102e-01, -9.7901e-01,  2.7645e-02, -1.4272e+00,  1.4074e-02],
         [-5.3300e-01, -1.2081e+00, -7.005...,  2.1853e-01,  2.4614e+00, -2.6655e-01],
         [ 5.4352e-01,  7.1933e-01,  6.3503e-01,  2.5809e-01,  7.0539e-02]]])
prec = 1e-07
msg = 'tensor([ 0.1310, -0.9790,  0.0276, -0.7510,  1.5548,  2.2147,  0.6433, -0.3732,\n         1.2881,  0.6106,  1.1156, -... 2.1853e-01,  2.4614e+00, -2.6655e-01],\n         [ 5.4352e-01,  7.1933e-01,  6.3503e-01,  2.5809e-01,  7.0539e-02]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1310, -0.9790,  0.0276, -0.7510,  1.5548,  2.2147,  0.6433, -0.3732,
E                1.2881,  0.6106,  1.1156, -0.2066, -5.7916, -1.0462, -7.8937,  1.4024,
E                1.3623,  3.0857,  2.0882,  2.2080,  1.8624,  3.4960, -2.6073,  0.5903,
E                2.9513, -2.3585,  0.3661, -0.3661, -3.1986, -2.4473, -0.2319,  0.6376,
E                0.6350,  0.2581,  0.0705]) vs tensor([[[ 1.3102e-01, -9.7901e-01,  2.7645e-02, -1.4272e+00,  1.4074e-02],
E                [-5.3300e-01, -1.2081e+00, -7.0053e-01, -3.1007e-02,  1.5406e-02],
E                [-2.7260e-01,  7.0183e-01, -2.7950e+00,  1.1019e+00, -2.4917e+00]],
E       
E               [[ 8.6161e-01, -7.9315e-01,  2.3160e-01, -2.0087e-02, -6.9629e-04],
E                [ 3.3410e-01, -3.5242e+00,  2.1853e-01,  2.4614e+00, -2.6655e-01],
E                [ 5.4352e-01,  7.1933e-01,  6.3503e-01,  2.5809e-01,  7.0539e-02]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-3-4] ________________________

batch_shape = (2, 3), m = 4, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4838,  0.6679,  3.2147,  2.0684,  2.5705, -0.5060,  3.3942, -1.1333,
        -0.9589, -1.5707,  0.5630, -0....40, -0.1324,  5.8749,
        -1.1023,  4.5311, -0.1586, -0.3833, -2.9548, -1.8107, -0.4127,  0.5893,
         0.2411])
b = tensor([[[ 1.4838,  0.6679,  3.2147,  1.2452,  1.6391,  0.8500],
         [ 0.3408,  0.2775, -0.5704, -1.4852, -1.4842....1841,  0.8681, -1.2504,  3.3610,  0.1311, -0.0172],
         [ 1.4537, -1.1854, -1.6580, -0.4127,  0.5893,  0.2411]]])
prec = 1e-07
msg = 'tensor([ 1.4838,  0.6679,  3.2147,  2.0684,  2.5705, -0.5060,  3.3942, -1.1333,\n        -0.9589, -1.5707,  0.5630, -...841,  0.8681, -1.2504,  3.3610,  0.1311, -0.0172],\n         [ 1.4537, -1.1854, -1.6580, -0.4127,  0.5893,  0.2411]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4838,  0.6679,  3.2147,  2.0684,  2.5705, -0.5060,  3.3942, -1.1333,
E               -0.9589, -1.5707,  0.5630, -0.9784,  7.7958,  1.9976, -7.2261, -3.4045,
E                8.2590, -0.1318,  2.9253,  6.3790,  4.5718, -6.3495, -1.5243,  1.3262,
E               -1.8525, -0.8621,  0.2565,  0.1278, -2.0448, -3.3140, -0.1324,  5.8749,
E               -1.1023,  4.5311, -0.1586, -0.3833, -2.9548, -1.8107, -0.4127,  0.5893,
E                0.2411]) vs tensor([[[ 1.4838,  0.6679,  3.2147,  1.2452,  1.6391,  0.8500],
E                [ 0.3408,  0.2775, -0.5704, -1.4852, -1.4842,  2.9073],
E                [-1.9208,  0.6241,  4.8342, -0.4831, -1.9099,  0.4505]],
E       
E               [[-0.5584,  0.5609,  0.8021, -0.4087, -0.1322,  0.0084],
E                [-1.1841,  0.8681, -1.2504,  3.3610,  0.1311, -0.0172],
E                [ 1.4537, -1.1854, -1.6580, -0.4127,  0.5893,  0.2411]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-3-5] ________________________

batch_shape = (2, 3), m = 5, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.6914,  0.6277,  0.2109, -0.2641,  0.2909, -0.4888, -0.3477, -1.9633,
        -1.8425, -1.4636, -0.7347, -1....1,  2.4268, -1.5681, -0.7963, -0.6273, -0.6670,
        -0.5906, -0.7391,  0.9238, -1.2587,  0.1012,  0.1035, -0.1175])
b = tensor([[[ 0.6914,  0.6277,  0.2109,  0.5744,  0.2428,  0.0674, -0.1480],
         [-0.2075, -0.3813,  1.0287, -0.0292....4490,  2.0095, -1.9191, -1.2707, -1.3203],
         [ 0.1105,  0.1278,  0.0658, -0.2673,  0.1012,  0.1035, -0.1175]]])
prec = 1e-07
msg = 'tensor([ 0.6914,  0.6277,  0.2109, -0.2641,  0.2909, -0.4888, -0.3477, -1.9633,\n        -1.8425, -1.4636, -0.7347, -...490,  2.0095, -1.9191, -1.2707, -1.3203],\n         [ 0.1105,  0.1278,  0.0658, -0.2673,  0.1012,  0.1035, -0.1175]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.6914,  0.6277,  0.2109, -0.2641,  0.2909, -0.4888, -0.3477, -1.9633,
E               -1.8425, -1.4636, -0.7347, -1.7654,  0.5788,  2.2057,  1.3251, -1.5356,
E                1.9393,  3.2436, -0.0527, -1.7071, -0.5799, -0.1682, -0.5165, -2.8986,
E               -4.0772,  2.0450,  2.4185,  0.6919, -1.3600,  2.5126,  1.9780,  0.6224,
E                1.8114, -0.1419,  1.8511,  2.4268, -1.5681, -0.7963, -0.6273, -0.6670,
E               -0.5906, -0.7391,  0.9238, -1.2587,  0.1012,  0.1035, -0.1175]) vs tensor([[[ 0.6914,  0.6277,  0.2109,  0.5744,  0.2428,  0.0674, -0.1480],
E                [-0.2075, -0.3813,  1.0287, -0.0292,  0.0871,  0.0705, -0.0110],
E                [ 0.5757,  0.9999, -0.5219, -1.6441, -0.9032,  0.6218,  0.1773]],
E       
E               [[-0.0272, -0.3523, -0.2569, -0.3190,  0.5148,  0.2900,  0.3773],
E                [ 0.0079,  0.0849,  0.4490,  2.0095, -1.9191, -1.2707, -1.3203],
E                [ 0.1105,  0.1278,  0.0658, -0.2673,  0.1012,  0.1035, -0.1175]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-3-6] ________________________

batch_shape = (2, 3), m = 6, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0099,  0.7689, -0.0423,  0.0224,  0.7291,  0.6656,  0.3017, -0.0137,
        -1.2050, -0.6482,  0.4872, -1....3, -2.9189, -4.9230, -2.0186,  3.3641, -3.8095,  0.5574, -2.2715,
         0.3424,  0.0980, -2.9863, -1.4486, -1.3376])
b = tensor([[[ 0.0099,  0.7689, -0.0423,  0.5087,  0.1885,  0.2480,  0.1158,
          -0.0443],
         [-0.2484,  0.883...343,
          -0.1088],
         [-0.6176, -1.3801, -1.8812, -0.8731, -0.0930, -2.9863, -1.4486,
          -1.3376]]])
prec = 1e-07
msg = 'tensor([ 0.0099,  0.7689, -0.0423,  0.0224,  0.7291,  0.6656,  0.3017, -0.0137,\n        -1.2050, -0.6482,  0.4872, -...\n          -0.1088],\n         [-0.6176, -1.3801, -1.8812, -0.8731, -0.0930, -2.9863, -1.4486,\n          -1.3376]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.0099,  0.7689, -0.0423,  0.0224,  0.7291,  0.6656,  0.3017, -0.0137,
E               -1.2050, -0.6482,  0.4872, -1.6306, -2.0500,  1.8769,  0.3817,  0.2047,
E                0.2681, -0.7513, -0.1754,  2.6961, -4.2375, -5.5022,  2.1618,  0.2843,
E               -0.7059,  2.9829,  2.6450,  0.5124, -1.4525, -2.1526, -3.1973,  1.4015,
E               -0.4510, -3.1637,  3.1484,  3.0608, -3.5518, -1.3297, -2.3837,  4.6997,
E               -1.2303, -2.9189, -4.9230, -2.0186,  3.3641, -3.8095,  0.5574, -2.2715,
E                0.3424,  0.0980, -2.9863, -1.4486, -1.3376]) vs tensor([[[ 0.0099,  0.7689, -0.0423,  0.5087,  0.1885,  0.2480,  0.1158,
E                 -0.0443],
E                [-0.2484,  0.8837, -0.2286, -0.9967,  0.4510, -0.8970, -0.6761,
E                  0.1755],
E                [-0.1965, -1.1875, -1.7433, -1.7532, -0.8009,  1.2691,  1.3077,
E                  0.3088]],
E       
E               [[-0.1013,  0.0679,  0.2291, -0.2249,  0.0577,  0.3784, -0.0290,
E                 -0.2946],
E                [-1.9253,  1.1804, -1.2489,  2.7572, -1.1439,  1.1915, -0.5343,
E                 -0.1088],
E                [-0.6176, -1.3801, -1.8812, -0.8731, -0.0930, -2.9863, -1.4486,
E                 -1.3376]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-3-10] ________________________

batch_shape = (2, 3), m = 10, n = 3, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ -0.3616,  -0.1321,   1.1167,   1.1509,   0.0341,   2.5048,  -0.0376,
          2.5710,   2.8644,   0.4186,  -...  -1.6224,  -0.8154,   0.0834,  -3.9357,
          2.5111,  -1.1577,   0.7555,   0.0903,  -0.1875,  -0.1230,   0.0882])
b = tensor([[[-0.3616, -0.1321,  1.1167,  0.0382,  0.7845,  0.4374,  0.3694,
           0.7260,  0.9091, -1.6048, -0.4671,...0.0907, -0.2964, -0.4020,  2.5472, -3.1741,  1.7133, -1.3994,
           0.9915,  0.1825, -0.1875, -0.1230,  0.0882]]])
prec = 1e-07
msg = 'tensor([ -0.3616,  -0.1321,   1.1167,   1.1509,   0.0341,   2.5048,  -0.0376,\n          2.5710,   2.8644,   0.4186, ...0907, -0.2964, -0.4020,  2.5472, -3.1741,  1.7133, -1.3994,\n           0.9915,  0.1825, -0.1875, -0.1230,  0.0882]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ -0.3616,  -0.1321,   1.1167,   1.1509,   0.0341,   2.5048,  -0.0376,
E                 2.5710,   2.8644,   0.4186,  -1.0367,   3.1057,  -2.7634,  -1.8771,
E                 2.1542,  -1.7926,   0.9167,   3.6654,  -4.8050,  -2.7058,   8.7393,
E                 2.8990,  -2.3182,   5.0380,  -5.2097,  -4.6501,   4.2043,  -6.0271,
E                -5.1958,  -0.9458,   3.0236,  -2.8974,   1.9035,  -0.4941,   3.3692,
E                -0.5742,   4.0652,  -0.3847,  -1.1229,   3.7373,   4.8230,  -3.8867,
E                -3.4324,  -1.1027,  -1.2642,  -0.0119,  -0.2340, -11.6573,  -1.3741,
E                 9.2894,  -9.7433,  -0.0281,   0.3387,  -3.3816,  -1.1326,   8.8991,
E                 0.4670,  -5.9662,  11.0631,  -4.0304,  -4.3250,   6.3624,   2.7282,
E                -0.9850,   0.8082,   2.4577,  -1.6224,  -0.8154,   0.0834,  -3.9357,
E                 2.5111,  -1.1577,   0.7555,   0.0903,  -0.1875,  -0.1230,   0.0882]) vs tensor([[[-0.3616, -0.1321,  1.1167,  0.0382,  0.7845,  0.4374,  0.3694,
E                  0.7260,  0.9091, -1.6048, -0.4671,  0.0868],
E                [-1.4418,  1.5157, -0.8274,  0.7511,  2.0355,  1.3513, -0.4620,
E                  1.6178, -0.0284, -3.3506,  2.7215, -1.0074],
E                [ 0.3695, -0.7325, -0.7762, -0.8511, -1.3985, -0.4654, -0.5485,
E                  0.3057, -0.7585, -0.6876,  1.0602,  2.5820]],
E       
E               [[-0.5021,  1.6487, -1.4310, -0.0760,  0.3518, -0.6030,  1.3736,
E                 -0.2585, -1.3741,  0.1654,  1.6359, -0.9133],
E                [-0.4822,  0.9319,  0.7636,  0.5717,  1.0615, -1.6298,  4.8698,
E                 -0.2195, -2.7938, -0.6230,  1.5631,  0.5806],
E                [ 0.0907, -0.2964, -0.4020,  2.5472, -3.1741,  1.7133, -1.3994,
E                  0.9915,  0.1825, -0.1875, -0.1230,  0.0882]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-4-2] ________________________

batch_shape = (2, 3), m = 2, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
         7.9018e-01,  7.3076e-01,  2.1650e+00...6e-01, -2.2417e+00, -1.4740e+00, -1.1615e+00,
        -1.3410e+00,  1.0734e+00, -6.6712e-01,  1.6816e-02, -4.1486e-01])
b = tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02, -8.8712e-02],
         [ 5.6070e-01,  6.5183e-01, -2.931...,  5.2827e-01,  8.9533e-02, -8.1935e-02],
         [-2.3146e-01,  7.8692e-01, -5.5193e-01,  1.6816e-02, -4.1486e-01]]])
prec = 1e-07
msg = 'tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,\n         7.9018e-01,  7.3076e-01,  2.1650e+... 5.2827e-01,  8.9533e-02, -8.1935e-02],\n         [-2.3146e-01,  7.8692e-01, -5.5193e-01,  1.6816e-02, -4.1486e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
E                7.9018e-01,  7.3076e-01,  2.1650e+00,  1.8724e+00,  1.1735e+00,
E                5.2682e-01,  2.2514e+00, -1.9860e+00, -1.3573e+00,  7.2400e-01,
E                1.7447e-01, -3.4378e+00,  1.0627e+00, -2.5420e+00, -5.4724e-01,
E               -2.8674e+00, -1.0178e+00, -3.3523e-02, -1.8339e+00,  5.1546e-01,
E               -5.6758e+00,  9.0286e-01, -2.2417e+00, -1.4740e+00, -1.1615e+00,
E               -1.3410e+00,  1.0734e+00, -6.6712e-01,  1.6816e-02, -4.1486e-01]) vs tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02, -8.8712e-02],
E                [ 5.6070e-01,  6.5183e-01, -2.9318e-01, -7.8545e-02,  1.5195e-01],
E                [-2.1897e-01, -1.5667e+00,  3.2543e-01,  1.8061e+00, -3.1715e-01]],
E       
E               [[-1.5858e+00, -1.6773e+00, -2.0153e+00, -5.8556e-01,  5.5172e-01],
E                [ 1.8694e-01, -2.5845e-01,  5.2827e-01,  8.9533e-02, -8.1935e-02],
E                [-2.3146e-01,  7.8692e-01, -5.5193e-01,  1.6816e-02, -4.1486e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-4-3] ________________________

batch_shape = (2, 3), m = 3, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,
         4.8703,  1.8499,  0.6302, -2....06,  0.9638, -3.9086,
         4.8892, -3.5206,  2.7213, -0.8432,  2.2652,  1.1539,  0.0380, -0.3755,
        -0.1464])
b = tensor([[[ 0.1310, -0.9790,  0.1842, -0.1808,  0.4437,  1.7411],
         [ 0.0237,  0.9861,  0.1077, -1.6665, -0.1867....0415,  0.4464,  0.0776, -2.8258,  5.0030, -2.4710],
         [ 0.2072,  1.4608,  0.7722,  0.0380, -0.3755, -0.1464]]])
prec = 1e-07
msg = 'tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,\n         4.8703,  1.8499,  0.6302, -...415,  0.4464,  0.0776, -2.8258,  5.0030, -2.4710],\n         [ 0.2072,  1.4608,  0.7722,  0.0380, -0.3755, -0.1464]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,
E                4.8703,  1.8499,  0.6302, -2.1118, -1.6421, -1.8386, -3.3497,  4.0960,
E               -4.8299,  0.7680, -4.2482,  9.5112, -8.4049, 11.0984, -0.4731,  2.4372,
E               -2.1223,  3.9875, -0.1267, -6.8988,  3.3764,  0.4206,  0.9638, -3.9086,
E                4.8892, -3.5206,  2.7213, -0.8432,  2.2652,  1.1539,  0.0380, -0.3755,
E               -0.1464]) vs tensor([[[ 0.1310, -0.9790,  0.1842, -0.1808,  0.4437,  1.7411],
E                [ 0.0237,  0.9861,  0.1077, -1.6665, -0.1867,  0.0447],
E                [-2.3964, -0.5130, -2.5292,  1.9032, -0.7105,  2.9527]],
E       
E               [[ 1.7021,  0.0895, -0.7398, -0.6196,  0.4199, -0.0621],
E                [-0.0415,  0.4464,  0.0776, -2.8258,  5.0030, -2.4710],
E                [ 0.2072,  1.4608,  0.7722,  0.0380, -0.3755, -0.1464]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-4-4] ________________________

batch_shape = (2, 3), m = 4, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
        -1.4225, -1.4884,  2.9345, -0....0,  1.0634,  2.1013,  1.0602,  3.1673,  0.3019,
         1.9708, -1.2665, -1.6936, -0.6248,  0.0766, -0.2213, -0.1367])
b = tensor([[[ 1.4838,  0.6679,  2.6667,  0.4878,  1.1446,  0.1657, -0.2678],
         [ 0.2303, -0.1289,  0.4111, -0.5932....5513, -0.3376,  0.1508,  0.2032, -0.0116],
         [ 1.7412, -1.3508, -1.5754, -0.6248,  0.0766, -0.2213, -0.1367]]])
prec = 1e-07
msg = 'tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,\n        -1.4225, -1.4884,  2.9345, -...513, -0.3376,  0.1508,  0.2032, -0.0116],\n         [ 1.7412, -1.3508, -1.5754, -0.6248,  0.0766, -0.2213, -0.1367]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
E               -1.4225, -1.4884,  2.9345, -0.0277,  2.8300, -4.3628, -1.6921, -4.7310,
E                3.5391,  0.3828,  0.6490,  0.1560,  6.9587, -3.0283,  1.7989, -3.2787,
E                1.0463, -2.1658,  1.1979, -2.5004, -1.7807, -0.4669,  2.5148, -3.1229,
E                0.8144, -2.3532, -1.0230,  1.0634,  2.1013,  1.0602,  3.1673,  0.3019,
E                1.9708, -1.2665, -1.6936, -0.6248,  0.0766, -0.2213, -0.1367]) vs tensor([[[ 1.4838,  0.6679,  2.6667,  0.4878,  1.1446,  0.1657, -0.2678],
E                [ 0.2303, -0.1289,  0.4111, -0.5932,  1.2283, -0.5431, -0.5941],
E                [ 0.4223,  0.6160, -1.8617, -0.9263,  1.2766, -0.6108,  0.2203]],
E       
E               [[-0.2959, -0.3840,  0.6938,  0.5849,  0.3385,  0.4720, -0.0272],
E                [-0.2193, -0.3755, -0.5513, -0.3376,  0.1508,  0.2032, -0.0116],
E                [ 1.7412, -1.3508, -1.5754, -0.6248,  0.0766, -0.2213, -0.1367]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-4-5] ________________________

batch_shape = (2, 3), m = 5, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,
        -0.0657, -2.4702, -0.4910, -0....5,  0.1221,  0.9637, -1.1945, -0.6323,  2.3659,  0.2646,  2.7099,
         0.4480,  0.5381,  0.4263, -0.2814,  0.7618])
b = tensor([[[ 0.6914,  0.6277,  2.3991,  0.7376,  1.7336,  0.8050,  0.6747,
          -0.0855],
         [ 0.0646,  0.016...083,
          -0.8500],
         [-0.0653,  0.0783,  0.3723,  1.0862,  0.5381,  0.4263, -0.2814,
           0.7618]]])
prec = 1e-07
msg = 'tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,\n        -0.0657, -2.4702, -0.4910, -...\n          -0.8500],\n         [-0.0653,  0.0783,  0.3723,  1.0862,  0.5381,  0.4263, -0.2814,\n           0.7618]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,
E               -0.0657, -2.4702, -0.4910, -0.1698, -0.6748,  2.4277,  0.5025,  1.7251,
E               -0.9125, -1.1149, -1.5141,  1.6303,  0.3040, -3.0698,  0.7755,  3.4712,
E               -3.9438, -3.1646, -6.4106, -1.3672,  2.7360, -4.1110, -0.5938,  0.2557,
E                5.1133, -1.4201, -4.2991, -0.6997, -0.8585,  2.6860, -0.5046, -2.0382,
E                2.9335,  0.1221,  0.9637, -1.1945, -0.6323,  2.3659,  0.2646,  2.7099,
E                0.4480,  0.5381,  0.4263, -0.2814,  0.7618]) vs tensor([[[ 0.6914,  0.6277,  2.3991,  0.7376,  1.7336,  0.8050,  0.6747,
E                 -0.0855],
E                [ 0.0646,  0.0167, -0.5416,  0.6553,  0.5547, -0.9251, -0.2564,
E                  0.0482],
E                [ 0.2317,  0.5819, -1.1476, -1.4808,  0.4446,  2.0629,  0.2375,
E                 -0.6457]],
E       
E               [[-0.0094, -0.1623, -0.6072, -0.3577, -0.0107,  0.9345,  0.4262,
E                  0.0859],
E                [ 0.0026,  0.0548,  0.0292, -1.6111,  2.5497, -0.4733,  0.2083,
E                 -0.8500],
E                [-0.0653,  0.0783,  0.3723,  1.0862,  0.5381,  0.4263, -0.2814,
E                  0.7618]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-4-6] ________________________

batch_shape = (2, 3), m = 6, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
         2.1745e-01,  2.7738e+00,  1.5191e+00...3e+00, -1.3033e+00, -2.8777e+00,  2.2240e+00,  3.2003e+00,
         5.9429e-02, -3.7200e-01, -1.0067e+00,  5.0449e-02])
b = tensor([[[ 0.0099,  0.7689,  0.9606,  0.8221,  0.9121,  0.7525,  0.5891,
           0.2635,  0.0356],
         [ 0.122...8333, -0.6472],
         [ 2.3288,  1.3127, -3.1394,  2.0366,  2.0639,  0.0594, -0.3720,
          -1.0067,  0.0504]]])
prec = 1e-07
msg = 'tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,\n         2.1745e-01,  2.7738e+00,  1.5191e+...3, -0.6472],\n         [ 2.3288,  1.3127, -3.1394,  2.0366,  2.0639,  0.0594, -0.3720,\n          -1.0067,  0.0504]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
E                2.1745e-01,  2.7738e+00,  1.5191e+00,  6.7704e-01, -2.8296e-02,
E                1.5153e+00, -8.8010e-01,  2.4010e+00, -1.0787e+00,  7.1814e-01,
E                2.3823e+00, -7.1204e-01, -4.6893e+00, -4.5947e-01,  1.4227e+00,
E                2.7477e+00,  2.8914e+00, -4.0222e-01,  1.7653e-01,  5.8648e+00,
E                4.2036e+00, -1.1387e+00,  2.1471e+00,  1.2705e-01, -9.7995e+00,
E               -7.0364e-01,  3.5520e+00,  1.1676e+01,  2.1850e+00,  5.7192e+00,
E               -3.5415e+00,  1.7244e+00,  2.3142e+00,  2.1950e+00, -1.4827e+00,
E                5.7051e+00,  7.4351e-01, -2.2675e+00, -3.0831e+00,  2.5926e+00,
E                5.6484e+00, -1.7853e+00, -7.7775e-01, -4.8433e+00,  5.8539e-01,
E               -1.0083e+00, -1.3033e+00, -2.8777e+00,  2.2240e+00,  3.2003e+00,
E                5.9429e-02, -3.7200e-01, -1.0067e+00,  5.0449e-02]) vs tensor([[[ 0.0099,  0.7689,  0.9606,  0.8221,  0.9121,  0.7525,  0.5891,
E                  0.2635,  0.0356],
E                [ 0.1226, -0.5731,  1.6667, -1.8249, -2.0113,  0.6672, -2.8368,
E                 -0.4983,  0.2218],
E                [-0.4239, -0.5578,  0.5722,  0.7820,  1.7604,  0.9004, -1.7186,
E                 -0.5952,  0.1335]],
E       
E               [[ 1.2516, -1.3596,  0.5866, -0.5226,  0.0169, -1.6305, -0.8684,
E                 -0.0039,  1.9698],
E                [-1.2031, -2.3935, -2.4250, -0.0414,  0.3745,  1.8167, -0.2261,
E                  0.8333, -0.6472],
E                [ 2.3288,  1.3127, -3.1394,  2.0366,  2.0639,  0.0594, -0.3720,
E                 -1.0067,  0.0504]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-4-10] ________________________

batch_shape = (2, 3), m = 10, n = 4, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ -0.3616,  -0.1321,   0.7381,  -0.1821,   1.3711,  -0.2016,   0.7039,
         -0.6227,   2.3059,  -1.3665,   ...  -1.0480,  -1.5387,   2.4051,  -0.7921,   0.8749,
         -1.7063,   0.7000,   0.2860,  -0.1245,  -0.1047,   0.0561])
b = tensor([[[-0.3616, -0.1321,  0.7381, -0.1821,  0.4941,  0.1759,  0.1496,
           0.5676,  0.6770, -1.2443, -0.1585,...0.0790, -1.4468,  1.3716,  2.1211, -1.4168,  0.8497,
          -1.3947,  0.7120,  0.2860, -0.1245, -0.1047,  0.0561]]])
prec = 1e-07
msg = 'tensor([ -0.3616,  -0.1321,   0.7381,  -0.1821,   1.3711,  -0.2016,   0.7039,\n         -0.6227,   2.3059,  -1.3665, ...0790, -1.4468,  1.3716,  2.1211, -1.4168,  0.8497,\n          -1.3947,  0.7120,  0.2860, -0.1245, -0.1047,  0.0561]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ -0.3616,  -0.1321,   0.7381,  -0.1821,   1.3711,  -0.2016,   0.7039,
E                -0.6227,   2.3059,  -1.3665,   1.7740,  -0.9877,  -1.3191,   1.7542,
E                 0.4725,   1.1778,   0.4117,   2.8802,  -6.6135,  -0.7938,  -3.2346,
E                 0.9149,   3.6864,   1.5194,  -2.9128,  -0.0434,   2.7425,   1.0515,
E                -0.6659,  -2.4652,  -7.3334,   3.9385,  -5.3766,   2.2773,   1.1501,
E                 3.6001,  -3.9865,  -0.0698,   4.6739,  -0.5347,   3.0592,  -0.8589,
E                 6.0405, -10.2184,   2.1820,   0.8185,   4.5108,  -9.3595,   0.8516,
E                -2.8532,   3.3969,  -2.6170,   2.3985,  -8.4225,   0.6933,   1.7104,
E                 0.1321,  10.4098,  -7.3745,   7.5948,  -6.2943,   6.2549,  -6.6001,
E                11.6730,  -2.0417,  -8.4340,   5.5706,   3.0146,   1.6657,  -5.7632,
E                 4.7907,  -4.8811,  -1.0480,  -1.5387,   2.4051,  -0.7921,   0.8749,
E                -1.7063,   0.7000,   0.2860,  -0.1245,  -0.1047,   0.0561]) vs tensor([[[-0.3616, -0.1321,  0.7381, -0.1821,  0.4941,  0.1759,  0.1496,
E                  0.5676,  0.6770, -1.2443, -0.1585,  0.1154, -0.0098],
E                [-1.1363,  0.9174,  0.8454,  2.0754,  0.2638, -1.4783, -3.3334,
E                 -1.5160,  0.8298,  0.5850,  1.4199, -1.7095,  0.8215],
E                [-1.3714, -0.1627, -2.1561,  0.1928, -1.5680,  0.9576, -1.0313,
E                  0.3310, -0.5669,  2.7379,  0.5611,  0.6495, -0.5394]],
E       
E               [[ 0.8198, -2.9888,  2.8040,  0.1202, -0.6812,  1.0007, -2.5647,
E                  0.6800,  2.5768, -0.5383, -3.0810,  1.7812,  0.0143],
E                [ 0.8212, -0.1157,  1.9227,  1.0453,  0.4681,  3.9440, -3.8548,
E                  5.8275, -2.5322, -1.5583,  0.1889,  1.9737,  0.0761],
E                [ 0.1525, -0.0790, -1.4468,  1.3716,  2.1211, -1.4168,  0.8497,
E                 -1.3947,  0.7120,  0.2860, -0.1245, -0.1047,  0.0561]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-5-2] ________________________

batch_shape = (2, 3), m = 2, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
         7.9018e-01,  7.3076e-01,  2.1650e+00...1.0430e+00, -6.1503e-01,
        -1.1650e+00, -1.0087e+00, -3.1045e-02,  4.5108e-01, -1.8445e-01,
        -2.5172e-01])
b = tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02,
          -1.8258e-01],
         [ 2.8714e-...     -2.9780e-02],
         [ 4.6526e-01, -8.8442e-01, -1.5082e-01,  5.2097e-01, -1.8445e-01,
          -2.5172e-01]]])
prec = 1e-07
msg = 'tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,\n         7.9018e-01,  7.3076e-01,  2.1650e+...  -2.9780e-02],\n         [ 4.6526e-01, -8.8442e-01, -1.5082e-01,  5.2097e-01, -1.8445e-01,\n          -2.5172e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
E                7.9018e-01,  7.3076e-01,  2.1650e+00,  1.8192e+00,  1.4398e+00,
E                1.8784e-01,  2.5114e+00, -1.3742e+00,  2.2315e-02,  8.4343e-01,
E               -6.0694e-01,  1.8794e+00, -1.7733e+00, -1.8574e+00,  1.3791e+00,
E               -3.3510e+00,  8.6380e-01, -1.9757e+00, -8.2177e-01, -2.0680e+00,
E               -2.2799e+00, -2.4030e+00, -3.5423e+00, -1.1676e-01, -4.1127e+00,
E               -1.0335e-01, -2.2922e+00, -2.7262e+00,  1.0430e+00, -6.1503e-01,
E               -1.1650e+00, -1.0087e+00, -3.1045e-02,  4.5108e-01, -1.8445e-01,
E               -2.5172e-01]) vs tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02,
E                 -1.8258e-01],
E                [ 2.8714e-01, -2.9318e-01, -7.8545e-02, -9.2133e-02,  3.8283e-02,
E                  1.2816e-01],
E                [ 7.2176e-01, -9.9562e-01,  9.2487e-01, -6.4746e-01, -1.9650e+00,
E                  3.5922e-01]],
E       
E               [[ 7.1051e-01, -4.2812e-02,  2.2641e-01, -2.0470e-01, -1.1198e+00,
E                 -4.2398e-01],
E                [ 6.5176e-01, -2.9193e-01,  1.9573e-01,  2.8648e-01, -2.6309e-02,
E                 -2.9780e-02],
E                [ 4.6526e-01, -8.8442e-01, -1.5082e-01,  5.2097e-01, -1.8445e-01,
E                 -2.5172e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-5-3] ________________________

batch_shape = (2, 3), m = 3, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,
         2.3631,  0.1766, -2.8123, -0....6,  0.7512, -2.2583, -0.2710, -0.6643,  1.7750,
        -2.2220,  2.0220,  1.1982,  0.2808,  0.0658,  0.1444,  0.0830])
b = tensor([[[ 0.1310, -0.9790,  0.1842, -0.1808,  0.4096,  1.7353, -0.0486],
         [ 0.9578,  0.1114, -1.6665,  0.0895....5008,  0.2006, -0.1487,  0.4432, -0.0483],
         [ 0.1395,  1.6688,  0.9383,  0.4973,  0.0658,  0.1444,  0.0830]]])
prec = 1e-07
msg = 'tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,\n         2.3631,  0.1766, -2.8123, -...008,  0.2006, -0.1487,  0.4432, -0.0483],\n         [ 0.1395,  1.6688,  0.9383,  0.4973,  0.0658,  0.1444,  0.0830]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,
E                2.3631,  0.1766, -2.8123, -0.1449,  1.8010,  1.1890, -2.7822,  3.3403,
E               -1.9863, -2.7175, -3.0352,  5.1519, -4.9727, -0.1235,  1.0562,  2.3445,
E               -2.6535,  4.6264,  1.3408,  1.4427,  2.2706,  1.8720, -2.5144, -0.1739,
E               -3.2988,  0.8294, -3.5546,  0.7512, -2.2583, -0.2710, -0.6643,  1.7750,
E               -2.2220,  2.0220,  1.1982,  0.2808,  0.0658,  0.1444,  0.0830]) vs tensor([[[ 0.1310, -0.9790,  0.1842, -0.1808,  0.4096,  1.7353, -0.0486],
E                [ 0.9578,  0.1114, -1.6665,  0.0895,  0.6702,  0.3107, -0.0456],
E                [-0.5965,  0.7298, -2.2064,  0.1293, -0.9912, -0.8828,  0.4223]],
E       
E               [[-0.8775,  0.6451, -0.3461, -0.3579, -0.6807,  0.4272, -0.0640],
E                [ 0.0248, -0.2116, -0.5008,  0.2006, -0.1487,  0.4432, -0.0483],
E                [ 0.1395,  1.6688,  0.9383,  0.4973,  0.0658,  0.1444,  0.0830]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-5-4] ________________________

batch_shape = (2, 3), m = 4, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
        -2.0661,  0.7846,  3.1790,  2....5,  1.7266,  1.1664,  3.0150, -1.9388, -0.1970, -0.8710, -2.6109,
        -1.3502, -0.5326,  1.8950,  1.8876,  0.8860])
b = tensor([[[ 1.4838,  0.6679,  2.6667,  0.4878,  1.7009,  0.2597,  0.1200,
           0.2241],
         [-0.2665,  0.126...834,
           0.0934],
         [ 1.1209, -0.4705, -1.7186, -1.4500, -0.5326,  1.8950,  1.8876,
           0.8860]]])
prec = 1e-07
msg = 'tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,\n        -2.0661,  0.7846,  3.1790,  ...\n           0.0934],\n         [ 1.1209, -0.4705, -1.7186, -1.4500, -0.5326,  1.8950,  1.8876,\n           0.8860]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
E               -2.0661,  0.7846,  3.1790,  2.5634,  4.6126,  0.3701,  0.1185,  0.0637,
E                4.3098, -0.3807,  1.7563,  5.6908, -0.2214, -2.0145,  3.6232, -1.4118,
E               -7.5535, -0.1391,  2.6479,  3.4267, -1.8355,  2.0336, -0.7179,  1.9354,
E               -2.3165, -1.2993, -2.9662,  1.5803, -1.2231,  0.0949, -2.8864, -4.9772,
E                0.1715,  1.7266,  1.1664,  3.0150, -1.9388, -0.1970, -0.8710, -2.6109,
E               -1.3502, -0.5326,  1.8950,  1.8876,  0.8860]) vs tensor([[[ 1.4838,  0.6679,  2.6667,  0.4878,  1.7009,  0.2597,  0.1200,
E                  0.2241],
E                [-0.2665,  0.1269,  0.0537,  0.8138, -0.1519, -0.7236,  1.9527,
E                 -1.7948],
E                [-0.5675, -0.6376,  1.7371, -0.6685,  1.6316,  3.7756, -2.9153,
E                  0.2253]],
E       
E               [[-0.3239,  0.6244,  0.6474, -1.0370, -1.0883,  0.5584,  0.8088,
E                 -0.0462],
E                [-0.2827, -0.2252, -0.5848,  0.0656, -0.7302, -0.2304, -1.6834,
E                  0.0934],
E                [ 1.1209, -0.4705, -1.7186, -1.4500, -0.5326,  1.8950,  1.8876,
E                  0.8860]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-5-5] ________________________

batch_shape = (2, 3), m = 5, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,
         0.0272, -2.7801, -0.3593, -0....84,
        -0.6320, -3.1107,  0.4845, -0.5882,  0.0705,  0.3586,  0.6744, -0.5177,
        -0.6179,  0.6151, -0.0287])
b = tensor([[[ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.8491,  0.8566,
           0.0196,  0.1080],
         [-0.116...2651,  0.2868],
         [-0.3885, -1.0595, -1.2350,  0.1815,  0.6744, -0.5177, -0.6179,
           0.6151, -0.0287]]])
prec = 1e-07
msg = 'tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,\n         0.0272, -2.7801, -0.3593, -...1,  0.2868],\n         [-0.3885, -1.0595, -1.2350,  0.1815,  0.6744, -0.5177, -0.6179,\n           0.6151, -0.0287]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,
E                0.0272, -2.7801, -0.3593, -0.4043, -0.6377,  3.8477,  0.7892,  2.5353,
E                1.1054, -0.6984,  1.3691,  1.8276, -0.3695, -4.6720,  0.8106, -0.1269,
E               -3.6413, -3.7503, -3.4764, -1.1472,  3.1129,  1.3251, -0.2396,  4.0400,
E               -0.9732, -2.6977, -2.1284, -3.9833, -3.0406,  0.2353,  4.1141,  0.0557,
E               -4.5767,  0.4276,  0.0311,  0.6652, -1.0641, -0.1630,  4.7894,  3.2784,
E               -0.6320, -3.1107,  0.4845, -0.5882,  0.0705,  0.3586,  0.6744, -0.5177,
E               -0.6179,  0.6151, -0.0287]) vs tensor([[[ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.8491,  0.8566,
E                  0.0196,  0.1080],
E                [-0.1166, -0.2382,  0.7427,  0.5170, -1.1700, -0.5714,  1.0212,
E                  0.2666, -0.0510],
E                [-0.9648, -0.5586,  1.1755,  0.7354,  0.5552, -0.0120,  0.5971,
E                 -1.1621,  0.3585]],
E       
E               [[-0.0040,  0.0070,  0.6784,  0.0229,  0.8076, -1.5193,  0.2790,
E                 -1.1440,  0.6359],
E                [ 0.0063, -0.1912, -1.9155,  0.1678, -0.0678,  2.4564,  1.8669,
E                  1.2651,  0.2868],
E                [-0.3885, -1.0595, -1.2350,  0.1815,  0.6744, -0.5177, -0.6179,
E                  0.6151, -0.0287]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-5-6] ________________________

batch_shape = (2, 3), m = 6, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
         2.1745e-01,  2.7738e+00,  1.5191e+00...6e+00, -3.3220e+00, -6.0931e-01, -5.7861e+00,
        -4.1136e+00, -1.8717e+00, -1.7022e+00, -3.9757e-01, -7.2641e-01])
b = tensor([[[ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
           7.9301e-01,  7.5638e-01,  3.6023...0, -6.3413e-01, -6.6661e-01, -4.9685e+00,
          -4.1136e+00, -1.8717e+00, -1.7022e+00, -3.9757e-01, -7.2641e-01]]])
prec = 1e-07
msg = 'tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,\n         2.1745e-01,  2.7738e+00,  1.5191e+... -6.3413e-01, -6.6661e-01, -4.9685e+00,\n          -4.1136e+00, -1.8717e+00, -1.7022e+00, -3.9757e-01, -7.2641e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
E                2.1745e-01,  2.7738e+00,  1.5191e+00,  6.9962e-01,  3.7108e-02,
E               -1.8742e+00, -2.9829e+00, -8.7221e-01, -2.5913e+00, -1.5880e+00,
E                1.3513e+00, -9.4555e-01, -2.9689e-01,  5.1593e+00,  2.8446e+00,
E                5.8039e+00,  4.3664e+00, -4.0428e+00, -9.9488e+00, -3.8080e+00,
E               -4.3260e+00, -6.4359e-01,  9.7268e+00, -3.7228e+00, -8.1383e+00,
E                3.4321e+00, -3.2558e-01,  4.1763e+00,  3.8730e+00,  2.5955e+00,
E               -4.7344e+00,  6.8255e-01,  1.4219e+00, -6.0225e+00, -1.2622e+00,
E               -4.3503e+00, -6.2154e+00,  1.1336e+01, -5.3492e+00, -5.1269e+00,
E               -5.6772e+00, -2.6077e+00,  2.1865e-01, -3.1113e+00,  3.9878e+00,
E               -1.1082e+01,  1.3466e+00, -3.3795e+00, -2.6576e+00,  2.5960e-01,
E               -4.7720e+00, -2.1026e+00, -3.3220e+00, -6.0931e-01, -5.7861e+00,
E               -4.1136e+00, -1.8717e+00, -1.7022e+00, -3.9757e-01, -7.2641e-01]) vs tensor([[[ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
E                  7.9301e-01,  7.5638e-01,  3.6023e-01,  1.3497e-01,  5.9393e-02],
E                [-2.9404e-01,  1.7471e+00, -1.8400e+00, -1.8736e+00,  9.9204e-01,
E                 -2.7122e+00, -5.1644e-01,  6.6048e-01, -7.9151e-02, -2.5343e-03],
E                [-2.8289e+00, -5.2000e+00, -5.4198e+00, -3.2188e+00,  3.8483e+00,
E                  5.8739e+00,  1.5203e+00, -1.0282e+00, -4.9511e-01, -2.6960e-02]],
E       
E               [[-1.6876e+00,  2.4802e+00, -1.7303e+00,  2.9198e-01,  1.2859e-01,
E                  1.8215e+00, -5.1650e-01, -9.1859e-02, -1.6893e+00,  9.5971e-01],
E                [-9.7792e-01,  1.2340e+00, -2.1904e+00,  1.6581e+00, -3.9253e+00,
E                  1.3352e+00, -2.4774e+00,  1.1780e+00, -4.7333e-01,  4.6569e-01],
E                [-2.2207e+00, -4.2780e+00, -6.3413e-01, -6.6661e-01, -4.9685e+00,
E                 -4.1136e+00, -1.8717e+00, -1.7022e+00, -3.9757e-01, -7.2641e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-5-10] ________________________

batch_shape = (2, 3), m = 10, n = 5, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.3616, -0.1321,  0.7381, -0.1821,  1.3711, -0.2016,  0.7039, -0.6227,
        -0.0206, -3.3166, -0.8212, -1....42,  1.1923, -3.5971,
         1.5031,  1.7618,  1.7702,  0.5874, -0.2030, -0.2905,  0.0919,  0.1184,
         0.0312])
b = tensor([[[-0.3616, -0.1321,  0.7381, -0.1821,  1.3711,  0.3241,  0.7611,
           0.9210,  1.0401, -1.0273,  0.2895,...0.3517,  0.8111, -1.6644,  1.1750,  1.3180,
           1.7835,  0.8214, -0.2030, -0.2905,  0.0919,  0.1184,  0.0312]]])
prec = 1e-07
msg = 'tensor([-0.3616, -0.1321,  0.7381, -0.1821,  1.3711, -0.2016,  0.7039, -0.6227,\n        -0.0206, -3.3166, -0.8212, -...3517,  0.8111, -1.6644,  1.1750,  1.3180,\n           1.7835,  0.8214, -0.2030, -0.2905,  0.0919,  0.1184,  0.0312]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.3616, -0.1321,  0.7381, -0.1821,  1.3711, -0.2016,  0.7039, -0.6227,
E               -0.0206, -3.3166, -0.8212, -1.8108, -1.0283, -0.2842,  0.3309,  3.0600,
E                5.4800,  4.8021, -2.3939, -1.5722, -2.7947, -4.1465, -3.4830, -1.3291,
E                0.7975,  6.7660, -1.7758, -1.2428, -1.6643,  4.7890,  3.4564,  5.7294,
E               -5.5756,  2.1080,  4.1676, -0.2025, -8.7432, -2.7638, -2.5421, -1.3132,
E                5.0825,  2.5998, -0.8093, -1.3975,  2.3164,  0.3948, -0.4353, -7.4527,
E               13.0403,  0.7808,  2.3625, -8.0849,  4.2595, -0.8322,  0.4542, -7.0478,
E               -4.3372,  6.7897,  2.1139,  7.6889, -5.4626, -6.6589, -3.1656,  6.1880,
E               -5.1291,  2.1292,  5.8858,  2.1156, -9.5667,  3.9581,  0.8708, -2.9966,
E               -1.5670, -0.5619,  4.1132,  0.1624,  1.8781, -6.1642,  1.1923, -3.5971,
E                1.5031,  1.7618,  1.7702,  0.5874, -0.2030, -0.2905,  0.0919,  0.1184,
E                0.0312]) vs tensor([[[-0.3616, -0.1321,  0.7381, -0.1821,  1.3711,  0.3241,  0.7611,
E                  0.9210,  1.0401, -1.0273,  0.2895, -0.9045, -0.3037,  0.0551],
E                [ 0.6812, -0.1825,  0.9244, -0.1020, -0.7804, -2.9667, -2.9918,
E                 -2.8719, -0.8849,  1.7457,  0.7751,  0.8426, -1.1700,  0.7965],
E                [ 0.2685, -0.8415, -0.7563, -1.0556, -0.3688, -0.7206,  0.8029,
E                 -0.0956,  0.1105, -1.0612,  1.8868,  2.2270,  0.2293, -1.6674]],
E       
E               [[ 0.0105, -1.7547,  0.9804,  3.3649, -2.1766, -0.0234, -1.2813,
E                 -0.4102,  4.2264, -0.6711, -4.5784,  0.4945,  2.6109, -1.2700],
E                [-0.4998, -0.2380,  0.3914, -0.3056,  1.6257, -0.9007,  1.4231,
E                  3.7571, -3.0797,  3.6715, -2.1634, -0.9911,  0.2752,  1.4745],
E                [ 0.0692, -0.0755, -0.3517,  0.8111, -1.6644,  1.1750,  1.3180,
E                  1.7835,  0.8214, -0.2030, -0.2905,  0.0919,  0.1184,  0.0312]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-6-2] ________________________

batch_shape = (2, 3), m = 2, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
         7.9018e-01,  7.3076e-01,  2.1650e+00...2.0933e+00,
         1.7074e+00,  4.1016e+00,  2.0458e-01, -1.8596e-01, -3.4709e-01,
         6.3596e-01,  7.4490e-01])
b = tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02,
          -9.5987e-02, -9.3500e-02],
      ...-02],
         [-2.5831e-02,  2.0834e-01, -3.7633e-01,  1.4348e-01, -5.5393e-01,
           6.3596e-01,  7.4490e-01]]])
prec = 1e-07
msg = 'tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,\n         7.9018e-01,  7.3076e-01,  2.1650e+...],\n         [-2.5831e-02,  2.0834e-01, -3.7633e-01,  1.4348e-01, -5.5393e-01,\n           6.3596e-01,  7.4490e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
E                7.9018e-01,  7.3076e-01,  2.1650e+00,  1.8192e+00,  1.4398e+00,
E                1.8784e-01,  2.5114e+00, -1.3742e+00,  2.2315e-02,  1.0888e+00,
E               -9.6081e-01,  2.7896e+00, -1.5750e+00,  8.1036e-01, -2.9507e-01,
E               -5.6032e-01,  1.9591e+00, -1.0810e+00, -2.1669e-01, -1.4200e+00,
E                1.3648e+00, -2.4133e+00, -1.0466e+00, -2.2869e-01, -8.9852e-01,
E               -2.5586e-01, -2.3956e+00, -2.2315e+00, -1.6823e+00,  2.1896e-02,
E               -2.0697e+00,  1.1012e+00,  4.2716e-01,  3.4187e+00,  2.0933e+00,
E                1.7074e+00,  4.1016e+00,  2.0458e-01, -1.8596e-01, -3.4709e-01,
E                6.3596e-01,  7.4490e-01]) vs tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02,
E                 -9.5987e-02, -9.3500e-02],
E                [-4.7994e-01, -7.8545e-02, -9.2133e-02,  3.8283e-02,  3.5105e-01,
E                 -1.2352e-01, -1.7464e-01],
E                [ 7.7286e-01, -6.4746e-01,  6.6934e-01, -1.8197e-01, -7.1113e-01,
E                  5.9616e-01, -8.2063e-02]],
E       
E               [[ 8.7693e-01,  6.3142e-01, -1.9950e+00, -1.2985e+00, -1.0742e-01,
E                  2.8685e-01,  3.9091e-01],
E                [ 3.5109e-03,  2.7198e-01,  2.0188e-01, -4.7064e-02,  2.4795e-01,
E                  1.1978e-01, -6.9892e-02],
E                [-2.5831e-02,  2.0834e-01, -3.7633e-01,  1.4348e-01, -5.5393e-01,
E                  6.3596e-01,  7.4490e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-6-3] ________________________

batch_shape = (2, 3), m = 3, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,
         2.3631,  0.1766, -2.8123, -0....5,  0.1926, -0.2004, -1.3627,  2.0800, -1.2867, -0.5550,  0.0118,
        -0.8009,  0.4682, -1.9118, -1.2113, -0.5380])
b = tensor([[[ 0.1310, -0.9790,  0.1842, -0.1808,  0.4096,  0.3566, -0.2816,
          -1.9678],
         [-1.0308, -1.518...599,
          -0.2164],
         [-1.1265,  0.1677,  0.4185,  0.1661, -0.9346, -1.9118, -1.2113,
          -0.5380]]])
prec = 1e-07
msg = 'tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,\n         2.3631,  0.1766, -2.8123, -...\n          -0.2164],\n         [-1.1265,  0.1677,  0.4185,  0.1661, -0.9346, -1.9118, -1.2113,\n          -0.5380]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,
E                2.3631,  0.1766, -2.8123, -0.1449,  1.8010,  1.1890, -3.4258,  5.6133,
E               -2.4312,  0.8448, -3.6510,  4.3459, -2.9160, -0.6922,  1.5742, -0.9783,
E                0.9425,  1.7265, -2.6802, -3.2118,  5.5106, -0.9606, -1.4336,  3.5706,
E                1.0532,  0.7271, -0.6253, -1.0183,  0.3732, -3.0717,  2.6677,  0.0873,
E                1.5965,  0.1926, -0.2004, -1.3627,  2.0800, -1.2867, -0.5550,  0.0118,
E               -0.8009,  0.4682, -1.9118, -1.2113, -0.5380]) vs tensor([[[ 0.1310, -0.9790,  0.1842, -0.1808,  0.4096,  0.3566, -0.2816,
E                 -1.9678],
E                [-1.0308, -1.5189,  0.0895,  0.6702, -0.0541, -0.0985,  0.5118,
E                 -0.0589],
E                [-1.4762, -0.5202, -0.2601, -2.7647,  1.1948, -1.2355, -0.4024,
E                  0.5563]],
E       
E               [[ 0.0103,  0.7977, -0.5949, -0.3569,  0.8975,  0.3141, -0.3007,
E                  0.0482],
E                [ 0.0232, -0.1472, -1.0321,  0.4557,  0.3299,  0.0827,  0.2599,
E                 -0.2164],
E                [-1.1265,  0.1677,  0.4185,  0.1661, -0.9346, -1.9118, -1.2113,
E                 -0.5380]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-6-4] ________________________

batch_shape = (2, 3), m = 4, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
        -2.0661,  0.7846,  3.1790,  2....34,
         2.4738,  2.6971,  3.6811,  2.8183,  0.9754, -1.7293, -3.5956, -0.5489,
         0.9859,  0.6318, -0.0334])
b = tensor([[[ 1.4838e+00,  6.6790e-01,  2.6667e+00,  4.8783e-01,  1.7009e+00,
          -3.8410e-01,  1.1220e-02, -2.2477...1,  1.3600e+00,  1.4472e+00, -1.8734e+00, -3.5918e+00,
          -5.4886e-01,  9.8591e-01,  6.3182e-01, -3.3417e-02]]])
prec = 1e-07
msg = 'tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,\n        -2.0661,  0.7846,  3.1790,  ...  1.3600e+00,  1.4472e+00, -1.8734e+00, -3.5918e+00,\n          -5.4886e-01,  9.8591e-01,  6.3182e-01, -3.3417e-02]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
E               -2.0661,  0.7846,  3.1790,  2.5634,  4.6126,  0.3701,  0.2115, -0.2463,
E                3.9368, -1.8619,  3.4665,  6.6027,  0.9592, -0.8246,  5.9890, -0.0312,
E               -1.6620, -2.6962, -2.3322,  0.5261,  6.4754,  0.2881, -1.1639,  1.9962,
E               -3.3243, -2.0141,  3.0332, -2.9986,  4.1899, -0.4128,  1.2214, -4.9322,
E               -1.3648,  2.9428,  6.0194, -3.1581, -2.0703, -5.2384, -4.3400, -2.1234,
E                2.4738,  2.6971,  3.6811,  2.8183,  0.9754, -1.7293, -3.5956, -0.5489,
E                0.9859,  0.6318, -0.0334]) vs tensor([[[ 1.4838e+00,  6.6790e-01,  2.6667e+00,  4.8783e-01,  1.7009e+00,
E                 -3.8410e-01,  1.1220e-02, -2.2477e-01, -2.5938e-01],
E                [ 2.8626e-01,  3.8262e-01,  6.5165e-02, -1.5195e-01, -5.2463e-01,
E                  2.4714e+00, -1.3103e+00, -6.5509e-02, -1.1230e+00],
E                [-2.9485e-01, -2.1156e+00,  2.7383e+00,  4.8318e+00, -3.8510e+00,
E                 -6.8652e-01,  9.3048e-01, -1.5256e+00,  7.2510e-01]],
E       
E               [[ 1.4050e+00, -3.6107e-01, -2.6870e+00, -5.8938e-01,  1.1026e+00,
E                 -4.8595e-01, -9.3011e-01,  2.1104e-01, -8.7494e-03],
E                [ 6.8564e-01,  5.3638e-04,  1.1401e+00, -1.8025e+00, -9.8479e-01,
E                 -3.0506e+00, -1.4775e+00, -1.7223e+00,  9.9741e-02],
E                [-3.7825e-01,  1.3600e+00,  1.4472e+00, -1.8734e+00, -3.5918e+00,
E                 -5.4886e-01,  9.8591e-01,  6.3182e-01, -3.3417e-02]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-6-5] ________________________

batch_shape = (2, 3), m = 5, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,
         0.0272, -2.7801, -0.3593, -0....26,  4.1705,  4.7553,
         0.9738,  3.6085,  1.8925,  1.3658,  0.1799,  1.3442,  0.5992, -0.3744,
         0.4137])
b = tensor([[[ 6.9142e-01,  6.2771e-01,  2.3991e+00,  7.3756e-01,  1.9946e+00,
           3.7809e-01,  7.7700e-01, -3.0883...1,  1.8291e+00,  1.4126e+00,  8.1474e-01,
           1.7988e-01,  1.3442e+00,  5.9916e-01, -3.7442e-01,  4.1372e-01]]])
prec = 1e-07
msg = 'tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,\n         0.0272, -2.7801, -0.3593, -...  1.8291e+00,  1.4126e+00,  8.1474e-01,\n           1.7988e-01,  1.3442e+00,  5.9916e-01, -3.7442e-01,  4.1372e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,
E                0.0272, -2.7801, -0.3593, -0.4043, -0.6377,  3.8477,  0.8118,  2.6007,
E                1.7556,  0.5282,  0.7845,  2.3342, -0.5673, -4.7852,  2.5110,  0.2155,
E               -3.0838, -2.9852, -3.7176, -1.5947,  5.5266,  1.0447, -3.2720, -3.1077,
E               -4.1883, -0.7300, -4.9773, -2.1827, -3.2999, -0.4758,  1.2681, -0.9074,
E                1.1049, -2.0492,  0.9593, -0.3862, -3.4485,  1.9753, -3.3405, -0.9272,
E               -0.4062, -2.1732,  3.6172, -0.6561,  0.7779, -1.6926,  4.1705,  4.7553,
E                0.9738,  3.6085,  1.8925,  1.3658,  0.1799,  1.3442,  0.5992, -0.3744,
E                0.4137]) vs tensor([[[ 6.9142e-01,  6.2771e-01,  2.3991e+00,  7.3756e-01,  1.9946e+00,
E                  3.7809e-01,  7.7700e-01, -3.0883e-01, -8.1742e-02, -1.9500e-01],
E                [ 2.4406e-03,  1.9492e-01,  3.5922e-01, -1.1403e+00, -3.8705e-01,
E                  1.5466e+00, -3.0003e-01, -9.8192e-01, -1.4950e-01,  3.6833e-02],
E                [ 1.4476e-01, -9.2869e-01,  4.9517e-01,  5.8712e-01, -1.4861e+00,
E                 -1.8880e+00,  2.4759e+00,  3.2137e+00, -4.1419e-01, -9.0484e-01]],
E       
E               [[-2.0016e-02, -2.9446e-01, -6.1191e-01, -1.7896e-01, -4.5077e-01,
E                  1.6868e+00, -4.4950e-01,  1.5696e+00, -1.4818e+00,  5.8062e-01],
E                [ 2.0679e-01,  1.3999e+00, -2.1868e+00, -7.4158e-01,  1.2493e+00,
E                 -1.3684e+00,  9.5197e-01, -1.1312e-01,  7.4925e-01, -3.8268e-02],
E                [ 2.7956e-01,  9.0083e-01,  1.8291e+00,  1.4126e+00,  8.1474e-01,
E                  1.7988e-01,  1.3442e+00,  5.9916e-01, -3.7442e-01,  4.1372e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[full-(2, 3)-6-6] ________________________

batch_shape = (2, 3), m = 6, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
         2.1745e-01,  2.7738e+00,  1.5191e+00...3.7781e+00,  2.1706e+00,
        -1.9922e+00,  4.2602e+00, -3.2398e+00,  2.0864e+00, -8.4328e-01,
         6.3966e-01])
b = tensor([[[ 0.0099,  0.7689,  0.9606,  0.8221,  1.1521,  0.2174,  0.6591,
          -0.0411, -0.0969, -0.1789, -0.1425]...       [ 2.3734,  2.2523, -3.3698,  3.1662,  3.2613, -1.9922,  4.2602,
          -3.2398,  2.0864, -0.8433,  0.6397]]])
prec = 1e-07
msg = 'tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,\n         2.1745e-01,  2.7738e+00,  1.5191e+...     [ 2.3734,  2.2523, -3.3698,  3.1662,  3.2613, -1.9922,  4.2602,\n          -3.2398,  2.0864, -0.8433,  0.6397]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
E                2.1745e-01,  2.7738e+00,  1.5191e+00,  6.9962e-01,  3.7108e-02,
E               -1.8742e+00, -2.9829e+00, -8.7221e-01, -2.5913e+00, -1.3200e+00,
E                2.7293e+00, -2.1400e+00,  8.4811e-02,  3.4149e+00,  2.4334e+00,
E                4.6242e+00,  3.7553e+00, -6.3964e+00, -9.7498e+00, -1.1448e+00,
E               -3.0426e+00,  7.4538e+00,  1.5423e+01,  2.2117e+00, -6.7187e+00,
E                5.5898e+00, -5.0481e+00,  2.8585e+00,  7.0172e+00, -4.1530e+00,
E               -2.9087e+00, -3.6525e-01,  9.3553e-01, -2.6787e+00,  1.5034e+01,
E               -2.9363e+00, -4.4558e+00,  6.5120e+00, -8.4177e+00, -3.8521e+00,
E                1.8740e+00, -3.7349e+00, -3.6821e+00,  7.8561e+00, -3.7765e+00,
E               -1.3414e+00,  6.5187e+00,  2.3973e+00, -7.9100e+00,  5.4262e+00,
E                3.0973e+00, -1.3284e+00,  8.0570e+00, -4.4688e+00,  5.6107e+00,
E                8.0999e-01,  8.8073e+00, -5.2577e+00,  3.7781e+00,  2.1706e+00,
E               -1.9922e+00,  4.2602e+00, -3.2398e+00,  2.0864e+00, -8.4328e-01,
E                6.3966e-01]) vs tensor([[[ 0.0099,  0.7689,  0.9606,  0.8221,  1.1521,  0.2174,  0.6591,
E                 -0.0411, -0.0969, -0.1789, -0.1425],
E                [ 1.0777, -2.0328, -1.8374,  0.2463, -3.7901,  1.4044,  3.4855,
E                  0.3501,  3.0155,  1.5964, -0.4671],
E                [ 0.2553,  0.8933,  1.3381,  1.4500,  0.0937, -2.2270, -2.5978,
E                 -2.0309,  0.0146,  1.8201,  0.7378]],
E       
E               [[-0.2552, -0.5698, -0.4767,  1.2189, -1.7162, -1.3795,  2.6204,
E                  0.3804, -2.6476,  0.3996,  1.4178],
E                [ 2.7295,  0.8137,  5.3613,  1.5166,  4.0558, -1.1366, -0.4071,
E                 -1.3615, -0.2590, -0.3744,  0.4137],
E                [ 2.3734,  2.2523, -3.3698,  3.1662,  3.2613, -1.9922,  4.2602,
E                 -3.2398,  2.0864, -0.8433,  0.6397]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-6-10] ________________________

batch_shape = (2, 3), m = 10, n = 6, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.3616, -0.1321,  0.7381, -0.1821,  1.3711, -0.2016,  0.7039, -0.6227,
        -0.0206, -3.3166, -0.8212, -1....8,  1.6843, -1.9910,  2.3951, -0.3043,  3.6438,
        -1.2667, -0.0306, -0.7805,  0.2170,  0.1975,  0.0360, -0.0726])
b = tensor([[[-0.3616, -0.1321,  0.7381, -0.1821,  1.3711, -0.2016,  0.6723,
           0.5544,  0.8283, -1.2449,  0.1594,....3323,  2.8723, -0.2907,
           3.5255, -1.2979, -0.0306, -0.7805,  0.2170,  0.1975,  0.0360,
          -0.0726]]])
prec = 1e-07
msg = 'tensor([-0.3616, -0.1321,  0.7381, -0.1821,  1.3711, -0.2016,  0.7039, -0.6227,\n        -0.0206, -3.3166, -0.8212, -...23,  2.8723, -0.2907,\n           3.5255, -1.2979, -0.0306, -0.7805,  0.2170,  0.1975,  0.0360,\n          -0.0726]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.3616, -0.1321,  0.7381, -0.1821,  1.3711, -0.2016,  0.7039, -0.6227,
E               -0.0206, -3.3166, -0.8212, -1.8108, -1.0283, -0.2842,  0.5156,  3.1431,
E                5.7134,  4.5379,  0.6712, -0.8872, -0.6773, -3.0333, -0.3083, -0.0908,
E                6.8683,  4.4157, -1.2423,  0.1220, -3.9516,  2.4426,  6.0729,  5.0688,
E               -3.1620,  6.7328,  0.7488,  1.0199,  3.5215,  1.2750, -6.1535, -5.5500,
E               -4.0051, -1.0585, -0.1724, -0.3951, -3.1328,  3.7340, -2.9483,  1.1568,
E                5.8158,  3.5982,  3.9096, -4.0518,  2.8736,  1.1655, -4.4662,  0.7076,
E               -3.1826,  0.4145, -2.9525,  5.4440, -5.8249, -4.2004, -5.7163, -9.1524,
E               -4.4024,  6.9875,  6.2765, -8.3980, -4.5550,  0.6350,  2.5315,  4.3541,
E               -4.3617, -2.3067,  1.0772,  2.7677, -0.7166,  2.0450,  4.3014, -1.3204,
E               -0.6741, -2.1500,  0.8928,  1.6843, -1.9910,  2.3951, -0.3043,  3.6438,
E               -1.2667, -0.0306, -0.7805,  0.2170,  0.1975,  0.0360, -0.0726]) vs tensor([[[-0.3616, -0.1321,  0.7381, -0.1821,  1.3711, -0.2016,  0.6723,
E                  0.5544,  0.8283, -1.2449,  0.1594, -1.1731,  0.3077,  0.2313,
E                 -0.0330],
E                [-0.0409,  1.5406,  0.5880, -0.0399, -2.1831, -5.2177, -3.4382,
E                  0.5817,  2.2023,  1.9228,  2.0568, -2.5173, -0.4977,  1.6152,
E                 -0.6766],
E                [-1.2287,  0.1156, -0.9467,  0.1071, -1.2944,  0.5763, -1.8556,
E                 -0.0895, -0.7857,  2.9157, -0.5916, -1.2864, -0.1414,  2.3712,
E                  0.0404]],
E       
E               [[-1.6896,  0.0868,  1.4320,  1.4736, -0.7645, -0.9979,  0.5920,
E                  2.1702,  1.9369, -2.8769, -2.4466,  0.9957,  0.9447, -2.0606,
E                 -1.1515],
E                [-1.2313, -0.1902,  0.3971, -0.2633,  0.3320, -4.2912,  3.2688,
E                  3.3925, -3.5241, -4.0277,  1.7916,  2.0880, -0.2513, -0.7715,
E                 -0.1969],
E                [ 0.0323, -0.0490,  0.0391,  0.2543, -2.3323,  2.8723, -0.2907,
E                  3.5255, -1.2979, -0.0306, -0.7805,  0.2170,  0.1975,  0.0360,
E                 -0.0726]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-10-2] ________________________

batch_shape = (2, 3), m = 2, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
         7.9018e-01,  7.3076e-01,  2.1650e+00...9.5021e-01,  9.5515e-01,
        -1.2614e+00, -7.7315e-01,  4.0868e-01,  3.0143e-01,  3.6441e-01,
        -4.1843e-01])
b = tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02,
          -9.5987e-02, -2.3823e-01,  2.2673...e-01, -3.7475e-01,
          -1.6125e-01,  1.3826e-02,  2.3257e-02,  4.1761e-01,  3.6441e-01,
          -4.1843e-01]]])
prec = 1e-07
msg = 'tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,\n         7.9018e-01,  7.3076e-01,  2.1650e+...1, -3.7475e-01,\n          -1.6125e-01,  1.3826e-02,  2.3257e-02,  4.1761e-01,  3.6441e-01,\n          -4.1843e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4663e-03,  4.9936e-02, -2.1430e-02,  2.2448e-01,  3.0453e-01,
E                7.9018e-01,  7.3076e-01,  2.1650e+00,  1.8192e+00,  1.4398e+00,
E                1.8784e-01,  2.5114e+00, -1.3742e+00,  2.2315e-02,  1.0888e+00,
E               -9.6081e-01,  2.7896e+00, -1.5750e+00,  8.1036e-01, -2.9507e-01,
E               -4.0623e-01,  1.7580e+00, -5.1657e-01,  4.8192e-02,  2.5229e-02,
E                1.2424e+00, -1.0362e+00,  5.0851e-01, -9.8580e-01,  2.7205e+00,
E                1.5892e+00,  1.4879e-01,  2.9308e+00,  1.5946e+00,  1.8472e+00,
E                9.1715e-01, -5.6655e-01,  1.8844e+00, -2.2332e+00, -4.6026e-01,
E               -2.3411e+00, -7.4139e-01, -1.8368e+00, -1.7027e+00, -1.9761e-01,
E               -2.4191e+00,  1.0895e+00, -2.6930e+00, -2.4593e+00,  1.0316e+00,
E                6.0085e-01,  1.8961e-01, -9.1885e-01,  5.7718e-01,  6.7669e-01,
E                3.8478e-01, -2.7422e-01, -2.1080e+00,  2.1841e+00,  8.6469e-01,
E                2.8246e-01,  1.3318e+00,  7.1155e-01,  9.5021e-01,  9.5515e-01,
E               -1.2614e+00, -7.7315e-01,  4.0868e-01,  3.0143e-01,  3.6441e-01,
E               -4.1843e-01]) vs tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02,
E                 -9.5987e-02, -2.3823e-01,  2.2673e-01, -1.4968e-01,  1.3890e-01,
E                 -6.4162e-02],
E                [ 2.2289e-01, -1.2352e-01,  6.4038e-02, -2.9786e-03,  7.6136e-02,
E                  9.1562e-02, -2.4015e-01, -7.2195e-04,  4.2764e-01,  1.9800e-01,
E                 -1.2244e-02],
E                [-7.5381e-01,  3.0460e-02, -1.5465e-01,  1.3473e+00, -1.5012e+00,
E                  9.7228e-01,  1.1691e+00,  6.1421e-01,  8.1657e-01,  2.6589e-01,
E                 -7.5947e-02]],
E       
E               [[ 4.2491e-01,  7.8568e-01, -2.4065e-01,  2.2641e-01, -2.0470e-01,
E                 -1.1198e+00, -2.3806e+00, -1.2985e+00, -1.0742e-01,  2.8685e-01,
E                  3.9091e-01],
E                [ 8.8882e-02,  6.8671e-01, -2.7063e-01, -2.7883e-01,  3.1859e-01,
E                  1.5760e-01, -1.3738e-01, -2.7386e-01, -3.0292e-02,  1.7860e-02,
E                  8.4687e-03],
E                [ 2.3171e-01, -4.6670e-01, -1.8115e-01,  6.8342e-01, -3.7475e-01,
E                 -1.6125e-01,  1.3826e-02,  2.3257e-02,  4.1761e-01,  3.6441e-01,
E                 -4.1843e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-10-3] ________________________

batch_shape = (2, 3), m = 3, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,
         2.3631,  0.1766, -2.8123, -0....3, -1.1021,  5.9393, -1.4604, -1.5257,  0.8122,  0.8086, -3.3680,
         1.3489, -1.6046,  0.0360, -0.0062,  0.2576])
b = tensor([[[ 1.3102e-01, -9.7901e-01,  1.8422e-01, -1.8081e-01,  4.0965e-01,
           3.5658e-01,  1.2021e+00, -1.2999...e-01,
          -6.7885e-01, -1.3608e+00, -6.4260e-01, -9.3293e-01,  3.6026e-02,
          -6.2310e-03,  2.5761e-01]]])
prec = 1e-07
msg = 'tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,\n         2.3631,  0.1766, -2.8123, -...1,\n          -6.7885e-01, -1.3608e+00, -6.4260e-01, -9.3293e-01,  3.6026e-02,\n          -6.2310e-03,  2.5761e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1310, -0.9790,  0.1842, -0.2718,  0.9966,  1.0843, -0.0393, -1.1055,
E                2.3631,  0.1766, -2.8123, -0.1449,  1.8010,  1.1890, -3.4258,  5.6133,
E               -2.4312,  0.8448, -3.6510,  4.3459, -1.9131,  0.1075,  2.7292, -2.0673,
E               -1.0240,  1.3551, -2.2234, -0.5573,  1.2704, -2.8390, -3.5579,  1.3297,
E                5.2321,  1.0457,  2.7281,  0.7857,  1.5182, -1.1341,  1.2521, -0.3785,
E                3.0797, -1.3202,  1.1285,  0.5358, -1.0611, -2.5659, -1.4800,  2.6415,
E               -5.4584,  3.2273, -4.1334,  2.1155, -0.8366, -2.9278,  0.8574, -1.0633,
E               -0.5882, -0.8879,  0.4125,  1.3478,  4.6940, -1.2132,  4.2271,  2.3595,
E                0.2113, -1.1021,  5.9393, -1.4604, -1.5257,  0.8122,  0.8086, -3.3680,
E                1.3489, -1.6046,  0.0360, -0.0062,  0.2576]) vs tensor([[[ 1.3102e-01, -9.7901e-01,  1.8422e-01, -1.8081e-01,  4.0965e-01,
E                  3.5658e-01,  1.2021e+00, -1.2999e+00,  1.7906e+00,  1.0175e-01,
E                 -6.3946e-01, -6.0856e-01],
E                [-3.6478e-01, -5.2882e-02, -3.9098e-01, -1.6126e+00,  2.6562e-01,
E                 -1.6929e-01, -1.5669e+00,  2.7626e-01,  4.1126e-01, -5.9158e-01,
E                 -6.3450e-01,  8.2126e-02],
E                [-9.3612e-01,  1.4001e-03, -1.2171e+00,  5.3185e-01, -2.7167e-01,
E                 -1.3036e-01,  6.5585e-01, -8.7625e-01,  3.1401e+00,  1.4979e+00,
E                  2.5035e+00,  2.0479e+00]],
E       
E               [[ 2.2800e-01,  4.2637e-01, -6.1110e-02, -2.4573e-01, -3.5788e-01,
E                 -6.8074e-01,  2.3999e-01, -4.7770e-01,  8.9752e-01,  3.1412e-01,
E                 -3.0069e-01,  4.8212e-02],
E                [-5.4613e-03,  4.3116e-02, -4.7290e-02,  2.2023e+00, -2.4484e+00,
E                  2.3384e+00,  1.7588e-01, -3.0260e+00,  3.4718e+00, -2.5845e+00,
E                  1.8351e+00, -1.0115e+00],
E                [ 1.7364e+00,  1.7247e+00,  5.3415e-02, -1.0736e-02,  5.3292e-01,
E                 -6.7885e-01, -1.3608e+00, -6.4260e-01, -9.3293e-01,  3.6026e-02,
E                 -6.2310e-03,  2.5761e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-10-4] ________________________

batch_shape = (2, 3), m = 4, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
        -2.0661,  0.7846,  3.1790,  2....20,
        -3.1707,  2.2996, -0.9058,  1.5710,  1.6595,  2.0335, -1.8325,  0.0936,
         0.4541,  0.1667, -0.2698])
b = tensor([[[ 1.4838,  0.6679,  2.6667,  0.4878,  1.7009, -0.3841,  0.7026,
           0.4029, -0.6921,  2.0089, -0.2314,...0.7264,  0.1995,  2.1163, -1.5002,  1.2939,  2.6919,
           1.4256, -1.8022,  0.0936,  0.4541,  0.1667, -0.2698]]])
prec = 1e-07
msg = 'tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,\n        -2.0661,  0.7846,  3.1790,  ...7264,  0.1995,  2.1163, -1.5002,  1.2939,  2.6919,\n           1.4256, -1.8022,  0.0936,  0.4541,  0.1667, -0.2698]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.4838,  0.6679,  2.6667,  0.4878,  2.3152,  0.1558,  2.2104, -0.9982,
E               -2.0661,  0.7846,  3.1790,  2.5634,  4.6126,  0.3701,  0.2115, -0.2463,
E                3.9368, -1.8619,  3.4665,  6.6027,  1.4988, -3.1624,  6.5789, -0.3329,
E               -2.4605, -1.6389, -1.9838,  1.0951,  8.9625,  7.8718, -3.5015, -0.3104,
E                3.0473, -1.9768,  1.3353,  3.8014,  1.1314, -5.1127,  1.1530,  1.0364,
E               -3.6165,  1.0044,  5.5996,  4.3323, -0.6949, -4.3442, -2.7737,  6.2565,
E                1.4757,  4.6301,  1.5066,  2.9347, -9.3540, -1.3440,  0.2544, -2.5081,
E               -1.1789, -2.1792,  0.4612,  5.3718, -6.9230,  5.7568,  4.3579, -2.1792,
E               -4.5470,  4.6622, -0.7936, -1.2779, -3.0456,  4.3829, -5.8703, -0.6820,
E               -3.1707,  2.2996, -0.9058,  1.5710,  1.6595,  2.0335, -1.8325,  0.0936,
E                0.4541,  0.1667, -0.2698]) vs tensor([[[ 1.4838,  0.6679,  2.6667,  0.4878,  1.7009, -0.3841,  0.7026,
E                  0.4029, -0.6921,  2.0089, -0.2314,  0.6727,  0.6218],
E                [ 0.1989,  0.5187,  0.5878,  0.8294, -0.5329,  0.3804, -2.4858,
E                 -0.4938,  1.7978,  0.2898,  1.9508, -2.0328, -0.9574],
E                [-0.2103,  3.1390, -4.1590, -4.9136,  7.3040, -0.4928, -0.4984,
E                  0.9629,  1.9301, -4.0283, -1.2949,  6.2002, -2.5441]],
E       
E               [[ 0.1315,  0.7444, -0.3179, -1.0583, -0.9401, -1.0883,  0.3176,
E                  0.9174,  1.0104, -0.4860, -0.9301,  0.2110, -0.0087],
E                [-0.8396,  0.2469, -1.0894,  1.3544,  1.2803,  0.4725,  3.0996,
E                  0.4040, -0.1226,  0.5756, -0.1337,  2.9601, -0.1625],
E                [-1.2477,  0.7264,  0.1995,  2.1163, -1.5002,  1.2939,  2.6919,
E                  1.4256, -1.8022,  0.0936,  0.4541,  0.1667, -0.2698]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-10-5] ________________________

batch_shape = (2, 3), m = 5, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,
         0.0272, -2.7801, -0.3593, -0....70,  2.3035,  0.2612,
        -1.2069, -0.1392, -2.3667,  0.3454, -1.0623,  0.1154, -0.2187, -0.3277,
        -0.1292])
b = tensor([[[ 6.9142e-01,  6.2771e-01,  2.3991e+00,  7.3756e-01,  1.9946e+00,
           3.7809e-01,  7.8686e-01,  4.6005...2,  1.3488e+00, -1.6158e+00,  5.1739e-01, -1.0623e+00,
           1.1538e-01, -2.1870e-01, -3.2770e-01, -1.2916e-01]]])
prec = 1e-07
msg = 'tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,\n         0.0272, -2.7801, -0.3593, -...  1.3488e+00, -1.6158e+00,  5.1739e-01, -1.0623e+00,\n           1.1538e-01, -2.1870e-01, -3.2770e-01, -1.2916e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.6914,  0.6277,  2.3991,  0.7376,  1.9946,  0.5492,  1.2665,  0.3700,
E                0.0272, -2.7801, -0.3593, -0.4043, -0.6377,  3.8477,  0.8118,  2.6007,
E                1.7556,  0.5282,  0.7845,  2.3342, -0.4090, -3.7509,  1.1851,  0.3263,
E               -4.6283, -1.7628, -4.2138, -1.9941,  4.6896,  2.4860,  0.0944, -0.9152,
E                1.4548,  1.9016,  1.5404, -6.2727,  0.0755,  1.3120,  3.2124, -8.4682,
E               -5.1929,  2.7001,  1.8068,  1.2844, -1.0147,  4.4434,  4.7265,  2.4430,
E               -3.7914, -2.7559,  1.0541,  2.4996, -4.9005, -0.0555, -0.4966,  2.7757,
E               -7.3545, -4.0607,  5.0469,  4.8428, -5.5208, -1.3959,  8.5424,  2.3892,
E               -2.5199, -8.2553,  0.6897,  0.0572, -1.7775, -3.3645,  3.2185,  1.1537,
E               -2.5820,  0.4523,  1.9511, -1.9980, -0.2562,  1.2970,  2.3035,  0.2612,
E               -1.2069, -0.1392, -2.3667,  0.3454, -1.0623,  0.1154, -0.2187, -0.3277,
E               -0.1292]) vs tensor([[[ 6.9142e-01,  6.2771e-01,  2.3991e+00,  7.3756e-01,  1.9946e+00,
E                  3.7809e-01,  7.8686e-01,  4.6005e-01, -3.1066e-02, -4.8250e-01,
E                  1.1610e-01, -2.8309e-01, -3.6268e-01, -3.3614e-01],
E                [ 1.8430e-01,  5.2542e-01, -5.9431e-01, -8.1631e-01,  2.5081e-01,
E                 -9.0779e-01,  5.5260e-01,  1.2249e+00, -1.5317e+00, -1.9972e+00,
E                 -2.1607e-01,  1.1522e+00,  2.5843e-01, -5.2707e-02],
E                [-2.4593e-01,  2.7771e-01,  7.5106e-01,  1.0440e+00, -1.4272e+00,
E                 -2.9832e+00,  2.3695e-01,  2.9043e+00,  9.7490e-01, -2.1303e+00,
E                 -4.9215e-02,  5.1694e-01,  1.3550e-01, -1.3188e-01]],
E       
E               [[ 8.3510e-02,  1.0172e+00,  3.2464e-03,  8.9542e-01, -1.8142e+00,
E                  1.0567e+00, -1.5176e+00,  2.3462e-01, -1.8946e+00,  1.3086e+00,
E                 -4.4950e-01,  1.5696e+00, -1.4818e+00,  5.8062e-01],
E                [-6.5168e-02, -2.8182e-01,  2.1208e+00,  1.2841e+00, -2.3751e+00,
E                 -3.6479e+00,  1.9778e-01,  2.9770e+00, -4.5531e-01, -3.7774e+00,
E                  1.4329e+00, -5.3440e-02,  8.1460e-01, -6.7472e-01],
E                [-2.2528e-01, -2.7699e-01,  3.4202e-03,  5.7433e-01,  4.3587e-01,
E                 -8.9718e-02,  1.3488e+00, -1.6158e+00,  5.1739e-01, -1.0623e+00,
E                  1.1538e-01, -2.1870e-01, -3.2770e-01, -1.2916e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-10-6] ________________________

batch_shape = (2, 3), m = 6, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
         2.1745e-01,  2.7738e+00,  1.5191e+00...3e+00,  1.8539e+00, -4.0722e-01,  1.9007e+00,
        -8.2058e-02,  2.6730e+00, -5.6177e-01,  1.5562e-01, -5.2728e-01])
b = tensor([[[ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
           2.1745e-01,  2.7687e+00,  1.1387...0,  2.3787e+00, -7.0753e-01,  1.9007e+00,
          -8.2058e-02,  2.6730e+00, -5.6177e-01,  1.5562e-01, -5.2728e-01]]])
prec = 1e-07
msg = 'tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,\n         2.1745e-01,  2.7738e+00,  1.5191e+...  2.3787e+00, -7.0753e-01,  1.9007e+00,\n          -8.2058e-02,  2.6730e+00, -5.6177e-01,  1.5562e-01, -5.2728e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
E                2.1745e-01,  2.7738e+00,  1.5191e+00,  6.9962e-01,  3.7108e-02,
E               -1.8742e+00, -2.9829e+00, -8.7221e-01, -2.5913e+00, -1.3200e+00,
E                2.7293e+00, -2.1400e+00,  8.4811e-02,  3.4149e+00,  2.4334e+00,
E                5.7925e+00,  3.7623e+00, -5.5627e+00, -9.3774e+00, -7.2850e-01,
E               -3.1017e+00,  6.5947e+00,  1.2600e+01, -2.1540e-01, -6.5577e+00,
E                1.1754e+00, -5.9101e+00,  5.1161e+00,  7.1884e+00,  1.1976e+00,
E               -1.4967e+00, -2.2361e+00,  1.8352e+00,  6.1434e-01,  4.1184e+00,
E               -3.7095e+00, -7.1887e+00,  8.6371e-01, -7.2007e+00, -5.9313e+00,
E               -1.7978e+00,  1.8648e+00, -1.2161e+00,  4.7400e+00,  9.4421e-01,
E                6.1578e+00,  8.6981e-01,  1.4502e-01, -7.0530e+00, -5.8663e+00,
E                1.3896e-01, -5.4955e+00,  2.6779e+00,  9.7546e+00,  3.6431e+00,
E                5.0233e+00, -3.3812e+00,  1.6835e+00, -6.9773e+00, -2.9797e+00,
E                3.2315e+00, -4.0048e+00,  1.5376e+00, -1.7525e+00,  2.2075e-01,
E                2.8115e+00, -2.9416e+00,  8.0315e-01, -1.7929e+00,  5.0811e-01,
E               -8.0245e+00, -1.6082e+00,  1.8931e+00,  2.8044e+00,  1.5442e+00,
E                1.7591e-01,  3.8890e+00,  7.0377e+00, -1.4892e+00,  3.4098e-02,
E               -1.9836e+00,  3.1773e+00,  1.8539e+00, -4.0722e-01,  1.9007e+00,
E               -8.2058e-02,  2.6730e+00, -5.6177e-01,  1.5562e-01, -5.2728e-01]) vs tensor([[[ 9.8611e-03,  7.6888e-01,  9.6063e-01,  8.2213e-01,  1.1521e+00,
E                  2.1745e-01,  2.7687e+00,  1.1387e+00,  1.1742e+00,  1.1784e+00,
E                  8.2465e-01,  7.1979e-01,  5.9590e-02, -8.7806e-02, -2.3282e-03],
E                [-1.2329e+00,  1.9209e+00,  2.9363e+00,  4.4060e-01,  2.4955e+00,
E                  1.1649e+00, -1.2190e+00, -5.6896e-01,  8.2329e-01,  1.0706e-01,
E                  1.1873e+00,  1.1515e+00, -3.1649e-02,  5.8188e-01, -1.3101e-01],
E                [ 7.3003e-01,  1.5809e+00,  1.5356e+00,  1.6090e-01, -1.5856e-01,
E                 -1.2630e+00,  9.0549e-01,  2.3859e+00, -2.9825e+00, -8.3779e-01,
E                  8.4787e-02,  3.0367e-01,  2.3041e+00, -6.8427e-01, -8.2005e-01]],
E       
E               [[ 2.3359e-01, -6.7507e-01,  1.9649e+00, -1.3304e+00,  1.4484e+00,
E                 -1.7654e-01, -2.7162e-01,  1.0638e+00, -1.0986e+00, -3.3868e+00,
E                  2.7701e+00,  3.8037e-01, -2.6476e+00,  3.9959e-01,  1.4178e+00],
E                [-1.2563e+00, -2.8887e+00, -5.5795e+00, -3.9063e+00, -2.2526e+00,
E                  6.2052e-01,  3.3055e+00,  2.4568e+00,  5.7890e+00, -7.9528e-02,
E                  2.6265e+00, -2.2674e+00,  7.5441e-01, -1.1861e+00,  2.7395e-01],
E                [-1.5982e+00, -5.7754e-01,  2.4382e+00, -1.2355e+00, -7.1185e-01,
E                 -7.2914e-02,  2.6285e+00,  2.3787e+00, -7.0753e-01,  1.9007e+00,
E                 -8.2058e-02,  2.6730e+00, -5.6177e-01,  1.5562e-01, -5.2728e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[full-(2, 3)-10-10] _______________________

batch_shape = (2, 3), m = 10, n = 10, mode = 'full'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-3.6162e-01, -1.3211e-01,  7.3806e-01, -1.8211e-01,  1.3711e+00,
        -2.0157e-01,  7.0387e-01, -6.2272e-01...5e+00, -3.9031e+00, -3.4275e+00, -7.5439e-01,  1.4546e+00,
         3.4226e-01, -4.7235e-01, -1.8516e-01,  1.3060e-02])
b = tensor([[[-0.3616, -0.1321,  0.7381, -0.1821,  1.3711, -0.2016,  0.7039,
          -0.6227, -0.0206, -3.3166, -0.9656,...2.7662,  3.9208,  7.5514, -4.9645, -3.9031, -3.4275, -0.7544,
           1.4546,  0.3423, -0.4724, -0.1852,  0.0131]]])
prec = 1e-07
msg = 'tensor([-3.6162e-01, -1.3211e-01,  7.3806e-01, -1.8211e-01,  1.3711e+00,\n        -2.0157e-01,  7.0387e-01, -6.2272e-...7662,  3.9208,  7.5514, -4.9645, -3.9031, -3.4275, -0.7544,\n           1.4546,  0.3423, -0.4724, -0.1852,  0.0131]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-3.6162e-01, -1.3211e-01,  7.3806e-01, -1.8211e-01,  1.3711e+00,
E               -2.0157e-01,  7.0387e-01, -6.2272e-01, -2.0635e-02, -3.3166e+00,
E               -8.2117e-01, -1.8108e+00, -1.0283e+00, -2.8422e-01,  5.1562e-01,
E                3.1431e+00,  5.7134e+00,  4.5379e+00,  6.7120e-01, -8.8724e-01,
E               -2.1805e+00, -1.8516e+00, -2.7797e+00,  1.5846e-01,  2.9769e+00,
E                5.4232e+00, -3.8490e+00,  2.8065e+00, -6.3779e+00,  2.7136e+00,
E                6.6797e+00,  6.1592e+00, -4.3397e+00,  4.9905e+00, -5.0330e-01,
E               -2.6072e+00,  3.3399e+00, -7.6492e-01, -6.6971e+00,  2.6901e+00,
E               -9.7393e-01, -1.9590e-02, -6.0243e+00, -1.9106e+00,  2.9065e+00,
E                1.2843e+00,  1.0022e+00, -5.6253e+00,  6.1088e+00, -8.0390e-01,
E                1.7892e+01, -1.0007e+01,  1.1632e+00, -1.0030e+00,  2.4299e+00,
E               -4.0635e+00,  5.5654e+00,  1.0367e+00, -5.5437e+00,  5.2966e+00,
E               -1.7043e+01, -1.4734e+01, -1.0819e+00, -8.5422e+00,  2.7819e+00,
E                9.1495e+00, -1.4778e+00,  9.3072e+00,  4.7117e+00,  6.9027e+00,
E               -1.4931e+01,  5.2847e-01, -2.6997e-01, -2.0106e+00,  1.2532e+01,
E               -6.5433e+00, -1.1775e+00, -1.1059e+01,  4.6234e+00,  4.5216e+00,
E               -4.7810e+00,  1.7182e+00,  5.5021e+00, -5.2057e+00, -9.3261e+00,
E                1.2069e+01,  4.1664e+00,  7.5972e-01, -5.1872e+00, -4.7597e+00,
E                2.4989e+00,  1.0004e+01,  6.6846e+00, -8.6557e+00, -7.8615e+00,
E               -8.2710e+00,  1.0251e+01,  5.3838e+00, -2.5103e+00, -4.4689e-01,
E                4.8323e+00, -2.7150e+00,  1.9698e+00,  1.6793e+00, -4.6937e+00,
E               -5.1533e+00,  2.6537e+00,  3.8706e+00,  3.8881e+00,  7.5514e+00,
E               -4.9645e+00, -3.9031e+00, -3.4275e+00, -7.5439e-01,  1.4546e+00,
E                3.4226e-01, -4.7235e-01, -1.8516e-01,  1.3060e-02]) vs tensor([[[-0.3616, -0.1321,  0.7381, -0.1821,  1.3711, -0.2016,  0.7039,
E                 -0.6227, -0.0206, -3.3166, -0.9656, -2.7246, -0.7086, -1.0503,
E                  0.7049,  0.5929,  1.4838,  0.3419, -0.0721],
E                [ 0.4199, -1.3493, -2.0392,  1.0484,  3.7203,  2.8612,  0.3741,
E                 -0.9810, -4.9175,  0.6698,  6.9971,  3.9335, -0.4506,  1.8556,
E                  0.5885, -4.0552,  1.0026,  0.6288, -0.7730],
E                [ 0.7774, -1.3017,  1.5907, -2.5675,  2.6429, -3.8060,  4.1360,
E                 -4.0613,  2.8187, -3.4443,  3.8068, -0.9304,  1.7174, -1.4375,
E                  1.4725, -0.8970,  0.6836,  1.0296, -2.0254]],
E       
E               [[ 0.7014, -1.0852, -1.7276,  1.2068,  3.3118, -1.4193, -1.3185,
E                 -1.4701, -0.8775,  5.6608,  0.3159, -4.6672,  0.8481,  2.0800,
E                 -1.8629,  0.9957,  0.9447, -2.0606, -1.1515],
E                [ 1.2882,  0.3136,  0.6243, -0.1059, -0.8885,  3.7259, -3.5378,
E                  0.9650, -0.2785,  3.8032,  0.5433,  3.2200,  2.3856, -3.3587,
E                 -3.5324,  1.8765,  2.2222,  0.2862, -0.3128],
E                [ 0.1730, -0.3416, -1.3702,  3.8835, -0.5211, -4.6072,  0.0318,
E                  2.7662,  3.9208,  7.5514, -4.9645, -3.9031, -3.4275, -0.7544,
E                  1.4546,  0.3423, -0.4724, -0.1852,  0.0131]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-2-2] __________________________

batch_shape = (), m = 2, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-0.0177]), prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0177])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0177])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-2-3] __________________________

batch_shape = (), m = 3, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([ 0.1045, -0.0552]), prec = 1e-07
msg = 'tensor([]) vs tensor([ 0.1045, -0.0552])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([ 0.1045, -0.0552])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-2-4] __________________________

batch_shape = (), m = 4, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.1674]), b = tensor([-0.1674,  0.4676,  0.2104]), prec = 1e-07
msg = 'tensor([-0.1674]) vs tensor([-0.1674,  0.4676,  0.2104])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.1674]) vs tensor([-0.1674,  0.4676,  0.2104])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-2-5] __________________________

batch_shape = (), m = 5, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1336, -0.1944]), b = tensor([ 0.1336, -0.1944,  0.3091, -0.0167])
prec = 1e-07
msg = 'tensor([ 0.1336, -0.1944]) vs tensor([ 0.1336, -0.1944,  0.3091, -0.0167])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1336, -0.1944]) vs tensor([ 0.1336, -0.1944,  0.3091, -0.0167])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-2-6] __________________________

batch_shape = (), m = 6, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0329,  0.2685,  0.5129])
b = tensor([-0.0329,  0.2685,  0.5129,  1.3454,  0.7002]), prec = 1e-07
msg = 'tensor([-0.0329,  0.2685,  0.5129]) vs tensor([-0.0329,  0.2685,  0.5129,  1.3454,  0.7002])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0329,  0.2685,  0.5129]) vs tensor([-0.0329,  0.2685,  0.5129,  1.3454,  0.7002])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-2-10] _________________________

batch_shape = (), m = 10, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212])
b = tensor([ 0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212,  0.3632,
        -0.1494])
prec = 1e-07
msg = 'tensor([ 0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212]) vs tensor([ 0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212,  0.3632,\n        -0.1494])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212]) vs tensor([ 0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212,  0.3632,
E               -0.1494])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-3-2] __________________________

batch_shape = (), m = 2, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-0.0177,  0.1045]), prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0177,  0.1045])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0177,  0.1045])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-3-3] __________________________

batch_shape = (), m = 3, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-0.0785]), prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0785])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0785])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-3-4] __________________________

batch_shape = (), m = 4, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([0.5760, 0.0934]), prec = 1e-07
msg = 'tensor([]) vs tensor([0.5760, 0.0934])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([0.5760, 0.0934])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-3-5] __________________________

batch_shape = (), m = 5, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-0.1102,  0.2182,  0.2624]), prec = 1e-07
msg = 'tensor([]) vs tensor([-0.1102,  0.2182,  0.2624])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.1102,  0.2182,  0.2624])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-3-6] __________________________

batch_shape = (), m = 6, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([0.2324, 0.5518, 1.2256, 0.6224]), prec = 1e-07
msg = 'tensor([]) vs tensor([0.2324, 0.5518, 1.2256, 0.6224])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([0.2324, 0.5518, 1.2256, 0.6224])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-3-10] _________________________

batch_shape = (), m = 10, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.1510,  0.1222, -0.2446,  0.4553])
b = tensor([-0.1510,  0.1222, -0.2446,  0.4553, -0.5676,  0.2704,  0.1348, -0.3268])
prec = 1e-07
msg = 'tensor([-0.1510,  0.1222, -0.2446,  0.4553]) vs tensor([-0.1510,  0.1222, -0.2446,  0.4553, -0.5676,  0.2704,  0.1348, -0.3268])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.1510,  0.1222, -0.2446,  0.4553]) vs tensor([-0.1510,  0.1222, -0.2446,  0.4553, -0.5676,  0.2704,  0.1348, -0.3268])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-4-2] __________________________

batch_shape = (), m = 2, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-0.0177,  0.1045, -0.1674]), prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0177,  0.1045, -0.1674])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0177,  0.1045, -0.1674])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-4-3] __________________________

batch_shape = (), m = 3, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-0.0785,  0.5760]), prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0785,  0.5760])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0785,  0.5760])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-4-4] __________________________

batch_shape = (), m = 4, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([0.1775]), prec = 1e-07
msg = 'tensor([]) vs tensor([0.1775])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([0.1775])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-4-5] __________________________

batch_shape = (), m = 5, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([0.1821, 0.3014]), prec = 1e-07
msg = 'tensor([]) vs tensor([0.1821, 0.3014])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([0.1821, 0.3014])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-4-6] __________________________

batch_shape = (), m = 6, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([0.5639, 1.2126, 0.6625]), prec = 1e-07
msg = 'tensor([]) vs tensor([0.5639, 1.2126, 0.6625])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([0.5639, 1.2126, 0.6625])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-4-10] _________________________

batch_shape = (), m = 10, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([0.0480])
b = tensor([ 0.0480, -0.1646,  0.2094, -0.7275, -0.5259,  0.2740, -0.9737])
prec = 1e-07
msg = 'tensor([0.0480]) vs tensor([ 0.0480, -0.1646,  0.2094, -0.7275, -0.5259,  0.2740, -0.9737])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([0.0480]) vs tensor([ 0.0480, -0.1646,  0.2094, -0.7275, -0.5259,  0.2740, -0.9737])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-5-2] __________________________

batch_shape = (), m = 2, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-0.0177,  0.1045, -0.1674,  0.1336]), prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0177,  0.1045, -0.1674,  0.1336])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0177,  0.1045, -0.1674,  0.1336])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-5-3] __________________________

batch_shape = (), m = 3, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-0.0785,  0.5760, -0.1102]), prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0785,  0.5760, -0.1102])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0785,  0.5760, -0.1102])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-5-4] __________________________

batch_shape = (), m = 4, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([0.1775, 0.1821]), prec = 1e-07
msg = 'tensor([]) vs tensor([0.1775, 0.1821])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([0.1775, 0.1821])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-5-5] __________________________

batch_shape = (), m = 5, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([0.3135]), prec = 1e-07
msg = 'tensor([]) vs tensor([0.3135])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([0.3135])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-5-6] __________________________

batch_shape = (), m = 6, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([1.1891, 0.6878]), prec = 1e-07
msg = 'tensor([]) vs tensor([1.1891, 0.6878])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([1.1891, 0.6878])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-5-10] _________________________

batch_shape = (), m = 10, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([-0.2039,  0.2519, -0.8579, -0.6107, -0.1483, -0.8999]), prec = 1e-07
msg = 'tensor([]) vs tensor([-0.2039,  0.2519, -0.8579, -0.6107, -0.1483, -0.8999])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.2039,  0.2519, -0.8579, -0.6107, -0.1483, -0.8999])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-6-2] __________________________

batch_shape = (), m = 2, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-0.0177,  0.1045, -0.1674,  0.1336, -0.0329])
prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0177,  0.1045, -0.1674,  0.1336, -0.0329])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0177,  0.1045, -0.1674,  0.1336, -0.0329])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-6-3] __________________________

batch_shape = (), m = 3, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-0.0785,  0.5760, -0.1102,  0.2324]), prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0785,  0.5760, -0.1102,  0.2324])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0785,  0.5760, -0.1102,  0.2324])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-6-4] __________________________

batch_shape = (), m = 4, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([0.1775, 0.1821, 0.5639]), prec = 1e-07
msg = 'tensor([]) vs tensor([0.1775, 0.1821, 0.5639])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([0.1775, 0.1821, 0.5639])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-6-5] __________________________

batch_shape = (), m = 5, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([0.3135, 1.1891]), prec = 1e-07
msg = 'tensor([]) vs tensor([0.3135, 1.1891])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([0.3135, 1.1891])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-6-6] __________________________

batch_shape = (), m = 6, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([0.7314]), prec = 1e-07
msg = 'tensor([]) vs tensor([0.7314])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([0.7314])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-6-10] _________________________

batch_shape = (), m = 10, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([ 0.1435, -0.7408, -0.9703, -0.3822, -2.0643])
prec = 1e-07
msg = 'tensor([]) vs tensor([ 0.1435, -0.7408, -0.9703, -0.3822, -2.0643])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([ 0.1435, -0.7408, -0.9703, -0.3822, -2.0643])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-10-2] _________________________

batch_shape = (), m = 2, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([-0.0177,  0.1045, -0.1674,  0.1336, -0.0329, -0.1270,  0.0511, -0.0365,
         0.0689])
prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0177,  0.1045, -0.1674,  0.1336, -0.0329, -0.1270,  0.0511, -0.0365,\n         0.0689])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0177,  0.1045, -0.1674,  0.1336, -0.0329, -0.1270,  0.0511, -0.0365,
E                0.0689])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-10-3] _________________________

batch_shape = (), m = 3, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([-0.0785,  0.5760, -0.1102,  0.2324,  0.3302, -0.1562,  0.1090, -0.1510])
prec = 1e-07
msg = 'tensor([]) vs tensor([-0.0785,  0.5760, -0.1102,  0.2324,  0.3302, -0.1562,  0.1090, -0.1510])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-0.0785,  0.5760, -0.1102,  0.2324,  0.3302, -0.1562,  0.1090, -0.1510])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-10-4] _________________________

batch_shape = (), m = 4, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([ 0.1775,  0.1821,  0.5639,  0.0253,  0.0311, -0.1249,  0.0480])
prec = 1e-07
msg = 'tensor([]) vs tensor([ 0.1775,  0.1821,  0.5639,  0.0253,  0.0311, -0.1249,  0.0480])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([ 0.1775,  0.1821,  0.5639,  0.0253,  0.0311, -0.1249,  0.0480])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-10-5] _________________________

batch_shape = (), m = 5, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([ 0.3135,  1.1891,  0.9349, -0.5126,  0.1779, -0.2039]), prec = 1e-07
msg = 'tensor([]) vs tensor([ 0.3135,  1.1891,  0.9349, -0.5126,  0.1779, -0.2039])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([ 0.3135,  1.1891,  0.9349, -0.5126,  0.1779, -0.2039])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[valid-()-10-6] _________________________

batch_shape = (), m = 6, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([ 0.7314, -0.6706,  0.2457, -0.2266,  0.1435])
prec = 1e-07
msg = 'tensor([]) vs tensor([ 0.7314, -0.6706,  0.2457, -0.2266,  0.1435])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([ 0.7314, -0.6706,  0.2457, -0.2266,  0.1435])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-()-10-10] _________________________

batch_shape = (), m = 10, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([]), b = tensor([-1.7365]), prec = 1e-07
msg = 'tensor([]) vs tensor([-1.7365])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([-1.7365])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-2-2] _________________________

batch_shape = (4,), m = 2, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.0511],
        [ 0.0939],
        [-0.7471],
        [-1.2123]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.0511],\n        [ 0.0939],\n        [-0.7471],\n        [-1.2123]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.0511],
E               [ 0.0939],
E               [-0.7471],
E               [-1.2123]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-2-3] _________________________

batch_shape = (4,), m = 3, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-0.0459, -0.0068],
        [-0.6562, -1.0906],
        [ 0.8908,  0.6565],
        [-0.0527,  0.0943]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-0.0459, -0.0068],\n        [-0.6562, -1.0906],\n        [ 0.8908,  0.6565],\n        [-0.0527,  0.0943]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-0.0459, -0.0068],
E               [-0.6562, -1.0906],
E               [ 0.8908,  0.6565],
E               [-0.0527,  0.0943]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-2-4] _________________________

batch_shape = (4,), m = 4, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-0.8121, -0.1607, -0.5763],
        [-0.2668, -0.3150,  0.2998],
        [-0.4351,  0.1147, -1.6832],
        [-1.4135, -1.5611, -1.3855]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-0.8121, -0.1607, -0.5763],\n        [-0.2668, -0.3150,  0.2998],\n        [-0.4351,  0.1147, -1.6832],\n        [-1.4135, -1.5611, -1.3855]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-0.8121, -0.1607, -0.5763],
E               [-0.2668, -0.3150,  0.2998],
E               [-0.4351,  0.1147, -1.6832],
E               [-1.4135, -1.5611, -1.3855]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-2-5] _________________________

batch_shape = (4,), m = 5, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 1.2743,  0.6589,  1.0776, -0.0811],
        [ 0.9908,  1.1494,  0.9250,  0.3700],
        [-3.9172,  1.4500,  1.7106, -3.1693],
        [-0.8810, -0.6983,  0.0474, -1.7613]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 1.2743,  0.6589,  1.0776, -0.0811],\n        [ 0.9908,  1.1494,  0.9250,  0.3700],\n        [-3.9172,  1.4500,  1.7106, -3.1693],\n        [-0.8810, -0.6983,  0.0474, -1.7613]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 1.2743,  0.6589,  1.0776, -0.0811],
E               [ 0.9908,  1.1494,  0.9250,  0.3700],
E               [-3.9172,  1.4500,  1.7106, -3.1693],
E               [-0.8810, -0.6983,  0.0474, -1.7613]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-2-6] _________________________

batch_shape = (4,), m = 6, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([0.4574, 1.4333, 3.1730])
b = tensor([[-1.0928,  0.4740, -0.4812, -0.0996, -0.2776],
        [-0.9955,  0.8615,  1.6991, -0.3855, -2.8288],
        [ 1.0663, -1.5011, -1.9609,  0.6119,  1.8743],
        [ 1.4916, -0.1128,  1.1365, -0.6305, -1.1256]])
prec = 1e-07
msg = 'tensor([0.4574, 1.4333, 3.1730]) vs tensor([[-1.0928,  0.4740, -0.4812, -0.0996, -0.2776],\n        [-0.9955,  0.8615...288],\n        [ 1.0663, -1.5011, -1.9609,  0.6119,  1.8743],\n        [ 1.4916, -0.1128,  1.1365, -0.6305, -1.1256]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([0.4574, 1.4333, 3.1730]) vs tensor([[-1.0928,  0.4740, -0.4812, -0.0996, -0.2776],
E               [-0.9955,  0.8615,  1.6991, -0.3855, -2.8288],
E               [ 1.0663, -1.5011, -1.9609,  0.6119,  1.8743],
E               [ 1.4916, -0.1128,  1.1365, -0.6305, -1.1256]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-2-10] ________________________

batch_shape = (4,), m = 10, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-4.2104, -1.4229, -3.2403, -1.9154, -2.2573,  3.4998,  1.6730,  3.4157,
         6.2393, -1.8373, -2.6457, -4.6292, -5.7078, -3.0113,  2.3938, -0.1588,
        -2.4719,  4.5496,  1.6516])
b = tensor([[ 0.4131,  0.5495,  0.4925,  0.4146,  0.2984,  0.4387, -0.6852, -0.5797,
         -0.0527],
        [ 0.6340, ...         -2.2317],
        [-0.9128, -1.5055,  2.6981, -2.4352, -0.2662, -1.5544,  0.7725, -3.6049,
         -0.3379]])
prec = 1e-07
msg = 'tensor([-4.2104, -1.4229, -3.2403, -1.9154, -2.2573,  3.4998,  1.6730,  3.4157,\n         6.2393, -1.8373, -2.6457, -...      -2.2317],\n        [-0.9128, -1.5055,  2.6981, -2.4352, -0.2662, -1.5544,  0.7725, -3.6049,\n         -0.3379]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-4.2104, -1.4229, -3.2403, -1.9154, -2.2573,  3.4998,  1.6730,  3.4157,
E                6.2393, -1.8373, -2.6457, -4.6292, -5.7078, -3.0113,  2.3938, -0.1588,
E               -2.4719,  4.5496,  1.6516]) vs tensor([[ 0.4131,  0.5495,  0.4925,  0.4146,  0.2984,  0.4387, -0.6852, -0.5797,
E                -0.0527],
E               [ 0.6340,  0.8130,  0.6236,  0.6513,  0.0683, -1.5106, -0.1077,  1.3792,
E                -1.0045],
E               [ 2.6711, -0.4500,  3.6678, -0.4752, -5.7117, -1.4427, -6.1362,  2.6430,
E                -2.2317],
E               [-0.9128, -1.5055,  2.6981, -2.4352, -0.2662, -1.5544,  0.7725, -3.6049,
E                -0.3379]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-3-2] _________________________

batch_shape = (4,), m = 2, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.0511, -0.0365],
        [ 0.0071, -0.3024],
        [-1.0906,  0.2498],
        [ 1.1269,  0.7707]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.0511, -0.0365],\n        [ 0.0071, -0.3024],\n        [-1.0906,  0.2498],\n        [ 1.1269,  0.7707]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.0511, -0.0365],
E               [ 0.0071, -0.3024],
E               [-1.0906,  0.2498],
E               [ 1.1269,  0.7707]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-3-3] _________________________

batch_shape = (4,), m = 3, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-0.0461],
        [ 0.4628],
        [ 0.1973],
        [-0.5409]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-0.0461],\n        [ 0.4628],\n        [ 0.1973],\n        [-0.5409]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-0.0461],
E               [ 0.4628],
E               [ 0.1973],
E               [-0.5409]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-3-4] _________________________

batch_shape = (4,), m = 4, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-0.5891, -0.6487],
        [ 0.3308,  0.7587],
        [ 0.6998,  0.8993],
        [ 0.3333,  0.6426]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-0.5891, -0.6487],\n        [ 0.3308,  0.7587],\n        [ 0.6998,  0.8993],\n        [ 0.3333,  0.6426]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-0.5891, -0.6487],
E               [ 0.3308,  0.7587],
E               [ 0.6998,  0.8993],
E               [ 0.3333,  0.6426]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-3-5] _________________________

batch_shape = (4,), m = 5, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-0.3251,  0.9113, -0.7672],
        [-1.4908,  3.0273, -2.6557],
        [ 2.7088, -0.0778, -2.2740],
        [ 1.9314,  3.8662,  0.2357]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-0.3251,  0.9113, -0.7672],\n        [-1.4908,  3.0273, -2.6557],\n        [ 2.7088, -0.0778, -2.2740],\n        [ 1.9314,  3.8662,  0.2357]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-0.3251,  0.9113, -0.7672],
E               [-1.4908,  3.0273, -2.6557],
E               [ 2.7088, -0.0778, -2.2740],
E               [ 1.9314,  3.8662,  0.2357]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-3-6] _________________________

batch_shape = (4,), m = 6, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.8409, -0.4192,  0.1563, -0.1297],
        [ 1.6016, -4.2617, -4.0772,  4.8677],
        [-0.0454, -1.1740, -0.4765,  0.7667],
        [-0.0923,  1.1531,  0.1508, -0.8580]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.8409, -0.4192,  0.1563, -0.1297],\n        [ 1.6016, -4.2617, -4.0772,  4.8677],\n        [-0.0454, -1.1740, -0.4765,  0.7667],\n        [-0.0923,  1.1531,  0.1508, -0.8580]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.8409, -0.4192,  0.1563, -0.1297],
E               [ 1.6016, -4.2617, -4.0772,  4.8677],
E               [-0.0454, -1.1740, -0.4765,  0.7667],
E               [-0.0923,  1.1531,  0.1508, -0.8580]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-3-10] ________________________

batch_shape = (4,), m = 10, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-1.5036,  4.1732,  2.1950,  4.0054,  5.8428, -2.6397, -3.0428])
b = tensor([[ 1.3188,  0.6225,  0.9510,  0.6083,  0.7572, -0.4948, -0.1867, -0.9473],
        [ 3.8013, -1.1882, -4.1067, ... 1.3924, -2.8242,  2.7588, -1.9023],
        [-0.5672,  0.8771,  0.7174,  0.8854,  0.4531,  1.5636,  0.4759, -0.5373]])
prec = 1e-07
msg = 'tensor([-1.5036,  4.1732,  2.1950,  4.0054,  5.8428, -2.6397, -3.0428]) vs tensor([[ 1.3188,  0.6225,  0.9510,  0.608....3924, -2.8242,  2.7588, -1.9023],\n        [-0.5672,  0.8771,  0.7174,  0.8854,  0.4531,  1.5636,  0.4759, -0.5373]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-1.5036,  4.1732,  2.1950,  4.0054,  5.8428, -2.6397, -3.0428]) vs tensor([[ 1.3188,  0.6225,  0.9510,  0.6083,  0.7572, -0.4948, -0.1867, -0.9473],
E               [ 3.8013, -1.1882, -4.1067, -4.3124, -3.9110, -2.0971,  4.8063,  3.1051],
E               [-1.2719,  1.8307, -0.1503, -2.2357,  1.3924, -2.8242,  2.7588, -1.9023],
E               [-0.5672,  0.8771,  0.7174,  0.8854,  0.4531,  1.5636,  0.4759, -0.5373]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-4-2] _________________________

batch_shape = (4,), m = 2, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.0046,  0.1364, -0.1877],
        [ 0.1740,  0.2084,  0.3357],
        [-0.8734,  1.5735, -0.7487],
        [ 0.0197,  0.9888, -0.2510]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.0046,  0.1364, -0.1877],\n        [ 0.1740,  0.2084,  0.3357],\n        [-0.8734,  1.5735, -0.7487],\n        [ 0.0197,  0.9888, -0.2510]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.0046,  0.1364, -0.1877],
E               [ 0.1740,  0.2084,  0.3357],
E               [-0.8734,  1.5735, -0.7487],
E               [ 0.0197,  0.9888, -0.2510]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-4-3] _________________________

batch_shape = (4,), m = 3, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-0.0214,  0.2213],
        [ 0.3002, -1.5647],
        [ 1.2027, -0.4237],
        [ 0.3950, -0.2765]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-0.0214,  0.2213],\n        [ 0.3002, -1.5647],\n        [ 1.2027, -0.4237],\n        [ 0.3950, -0.2765]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-0.0214,  0.2213],
E               [ 0.3002, -1.5647],
E               [ 1.2027, -0.4237],
E               [ 0.3950, -0.2765]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-4-4] _________________________

batch_shape = (4,), m = 4, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-1.4241],
        [ 0.6785],
        [-0.7110],
        [ 1.4275]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-1.4241],\n        [ 0.6785],\n        [-0.7110],\n        [ 1.4275]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-1.4241],
E               [ 0.6785],
E               [-0.7110],
E               [ 1.4275]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-4-5] _________________________

batch_shape = (4,), m = 5, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-0.4668,  0.0969],
        [-3.5141,  2.1279],
        [ 0.7179, -2.5455],
        [ 0.5578,  3.4646]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-0.4668,  0.0969],\n        [-3.5141,  2.1279],\n        [ 0.7179, -2.5455],\n        [ 0.5578,  3.4646]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-0.4668,  0.0969],
E               [-3.5141,  2.1279],
E               [ 0.7179, -2.5455],
E               [ 0.5578,  3.4646]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-4-6] _________________________

batch_shape = (4,), m = 6, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.4878,  1.7589,  0.7056],
        [ 0.7994, -0.9022, -1.9488],
        [-1.1499, -1.5889, -0.1936],
        [ 0.9232, -1.7139, -3.4844]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.4878,  1.7589,  0.7056],\n        [ 0.7994, -0.9022, -1.9488],\n        [-1.1499, -1.5889, -0.1936],\n        [ 0.9232, -1.7139, -3.4844]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.4878,  1.7589,  0.7056],
E               [ 0.7994, -0.9022, -1.9488],
E               [-1.1499, -1.5889, -0.1936],
E               [ 0.9232, -1.7139, -3.4844]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-4-10] ________________________

batch_shape = (4,), m = 10, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.8751,  1.4776,  1.2451,  1.1852,  0.2898,  1.8704, -1.8249],
        [-3.4412, -0.8782, -0.1938,  1.4623, ... 0.9279,  1.2393,  1.2232,  0.3712,  0.2218],
        [-4.1046,  3.4161, -1.7330,  4.3364, -2.1200,  6.5801,  2.1322]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.8751,  1.4776,  1.2451,  1.1852,  0.2898,  1.8704, -1.8249],\n        [-3.4412, -0.8782, -0....9279,  1.2393,  1.2232,  0.3712,  0.2218],\n        [-4.1046,  3.4161, -1.7330,  4.3364, -2.1200,  6.5801,  2.1322]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.8751,  1.4776,  1.2451,  1.1852,  0.2898,  1.8704, -1.8249],
E               [-3.4412, -0.8782, -0.1938,  1.4623,  6.4272,  0.3086, -6.6022],
E               [-0.6375,  0.1700,  0.9279,  1.2393,  1.2232,  0.3712,  0.2218],
E               [-4.1046,  3.4161, -1.7330,  4.3364, -2.1200,  6.5801,  2.1322]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-5-2] _________________________

batch_shape = (4,), m = 2, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.0046,  0.1364, -0.1877, -0.0457],
        [ 0.4276,  0.1980, -0.2450, -0.1827],
        [ 1.3473, -1.5012,  0.9723,  1.1691],
        [ 1.3138,  0.9608,  0.6989,  0.7857]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.0046,  0.1364, -0.1877, -0.0457],\n        [ 0.4276,  0.1980, -0.2450, -0.1827],\n        [ 1.3473, -1.5012,  0.9723,  1.1691],\n        [ 1.3138,  0.9608,  0.6989,  0.7857]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.0046,  0.1364, -0.1877, -0.0457],
E               [ 0.4276,  0.1980, -0.2450, -0.1827],
E               [ 1.3473, -1.5012,  0.9723,  1.1691],
E               [ 1.3138,  0.9608,  0.6989,  0.7857]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-5-3] _________________________

batch_shape = (4,), m = 3, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-0.0214,  0.2213, -0.0616],
        [ 0.1099,  1.3033, -0.7716],
        [ 1.9151,  0.4699,  0.4381],
        [ 0.3702, -0.5077,  0.4548]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-0.0214,  0.2213, -0.0616],\n        [ 0.1099,  1.3033, -0.7716],\n        [ 1.9151,  0.4699,  0.4381],\n        [ 0.3702, -0.5077,  0.4548]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-0.0214,  0.2213, -0.0616],
E               [ 0.1099,  1.3033, -0.7716],
E               [ 1.9151,  0.4699,  0.4381],
E               [ 0.3702, -0.5077,  0.4548]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-5-4] _________________________

batch_shape = (4,), m = 4, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-1.4241,  0.6082],
        [-1.1631, -0.1248],
        [ 1.4993, -1.3294],
        [ 1.6538,  3.2438]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-1.4241,  0.6082],\n        [-1.1631, -0.1248],\n        [ 1.4993, -1.3294],\n        [ 1.6538,  3.2438]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-1.4241,  0.6082],
E               [-1.1631, -0.1248],
E               [ 1.4993, -1.3294],
E               [ 1.6538,  3.2438]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-5-5] _________________________

batch_shape = (4,), m = 5, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.3368],
        [-3.3992],
        [-0.6126],
        [ 0.0430]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.3368],\n        [-3.3992],\n        [-0.6126],\n        [ 0.0430]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.3368],
E               [-3.3992],
E               [-0.6126],
E               [ 0.0430]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-5-6] _________________________

batch_shape = (4,), m = 6, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 1.9369,  0.7357],
        [-4.7018,  8.9587],
        [ 0.9011, -2.2195],
        [-1.4548, -0.3782]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 1.9369,  0.7357],\n        [-4.7018,  8.9587],\n        [ 0.9011, -2.2195],\n        [-1.4548, -0.3782]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 1.9369,  0.7357],
E               [-4.7018,  8.9587],
E               [ 0.9011, -2.2195],
E               [-1.4548, -0.3782]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-5-10] ________________________

batch_shape = (4,), m = 10, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 1.1160,  1.1840,  0.9331,  0.1441,  1.7207, -1.9144],
        [ 1.9496,  2.0438,  1.1264, -1.1732, -0.8302, ... 0.7281, -0.9705, -1.6007, -4.7148, -1.4541, -2.6068],
        [ 2.7584,  3.1911,  0.3532,  2.4436,  2.5144, -1.1989]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 1.1160,  1.1840,  0.9331,  0.1441,  1.7207, -1.9144],\n        [ 1.9496,  2.0438,  1.1264, -1....7281, -0.9705, -1.6007, -4.7148, -1.4541, -2.6068],\n        [ 2.7584,  3.1911,  0.3532,  2.4436,  2.5144, -1.1989]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 1.1160,  1.1840,  0.9331,  0.1441,  1.7207, -1.9144],
E               [ 1.9496,  2.0438,  1.1264, -1.1732, -0.8302, -0.2128],
E               [ 0.7281, -0.9705, -1.6007, -4.7148, -1.4541, -2.6068],
E               [ 2.7584,  3.1911,  0.3532,  2.4436,  2.5144, -1.1989]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-6-2] _________________________

batch_shape = (4,), m = 2, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.0046,  0.1364, -0.1877,  0.0233,  0.0499],
        [ 0.3357, -0.0556, -0.1827, -0.0736,  0.3721],
        [-1.5667,  0.3254,  1.8061,  0.6466,  0.2659],
        [ 0.7857, -0.2073,  0.1521, -0.9325, -1.8127]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.0046,  0.1364, -0.1877,  0.0233,  0.0499],\n        [ 0.3357, -0.0556, -0.1827, -0.0736,  0.3721],\n        [-1.5667,  0.3254,  1.8061,  0.6466,  0.2659],\n        [ 0.7857, -0.2073,  0.1521, -0.9325, -1.8127]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.0046,  0.1364, -0.1877,  0.0233,  0.0499],
E               [ 0.3357, -0.0556, -0.1827, -0.0736,  0.3721],
E               [-1.5667,  0.3254,  1.8061,  0.6466,  0.2659],
E               [ 0.7857, -0.2073,  0.1521, -0.9325, -1.8127]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-6-3] _________________________

batch_shape = (4,), m = 3, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-0.0214,  0.2213,  0.1777,  0.1764],
        [ 0.9842, -0.6736, -1.5577,  0.6898],
        [-1.4870, -0.4371,  0.5465, -0.0846],
        [-0.2801, -0.7106,  0.7296, -0.6671]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-0.0214,  0.2213,  0.1777,  0.1764],\n        [ 0.9842, -0.6736, -1.5577,  0.6898],\n        [-1.4870, -0.4371,  0.5465, -0.0846],\n        [-0.2801, -0.7106,  0.7296, -0.6671]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-0.0214,  0.2213,  0.1777,  0.1764],
E               [ 0.9842, -0.6736, -1.5577,  0.6898],
E               [-1.4870, -0.4371,  0.5465, -0.0846],
E               [-0.2801, -0.7106,  0.7296, -0.6671]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-6-4] _________________________

batch_shape = (4,), m = 4, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-1.4241, -0.2439,  0.0477],
        [ 1.7179,  1.3152, -1.4012],
        [ 0.8563, -0.7018, -1.0557],
        [ 4.3792,  3.5604,  1.9430]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-1.4241, -0.2439,  0.0477],\n        [ 1.7179,  1.3152, -1.4012],\n        [ 0.8563, -0.7018, -1.0557],\n        [ 4.3792,  3.5604,  1.9430]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-1.4241, -0.2439,  0.0477],
E               [ 1.7179,  1.3152, -1.4012],
E               [ 0.8563, -0.7018, -1.0557],
E               [ 4.3792,  3.5604,  1.9430]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-6-5] _________________________

batch_shape = (4,), m = 5, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 1.5806, -1.3178],
        [ 5.4692, -3.1559],
        [-3.8953,  7.5464],
        [ 1.5832, -0.5201]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 1.5806, -1.3178],\n        [ 5.4692, -3.1559],\n        [-3.8953,  7.5464],\n        [ 1.5832, -0.5201]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 1.5806, -1.3178],
E               [ 5.4692, -3.1559],
E               [-3.8953,  7.5464],
E               [ 1.5832, -0.5201]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-6-6] _________________________

batch_shape = (4,), m = 6, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.1558],
        [ 0.5206],
        [-0.4988],
        [-1.2665]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.1558],\n        [ 0.5206],\n        [-0.4988],\n        [-1.2665]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.1558],
E               [ 0.5206],
E               [-0.4988],
E               [-1.2665]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-6-10] ________________________

batch_shape = (4,), m = 10, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-1.2248,  0.8869, -1.3816,  0.9369, -2.8159],
        [ 4.4863, -1.8163, -4.3889, -1.7917, -1.3431],
        [ 0.7010,  2.0000, -2.1162,  5.4860, -2.2987],
        [-2.1976, -1.1458, -6.9201, -3.6489, -3.8347]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-1.2248,  0.8869, -1.3816,  0.9369, -2.8159],\n        [ 4.4863, -1.8163, -4.3889, -1.7917, -1.3431],\n        [ 0.7010,  2.0000, -2.1162,  5.4860, -2.2987],\n        [-2.1976, -1.1458, -6.9201, -3.6489, -3.8347]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-1.2248,  0.8869, -1.3816,  0.9369, -2.8159],
E               [ 4.4863, -1.8163, -4.3889, -1.7917, -1.3431],
E               [ 0.7010,  2.0000, -2.1162,  5.4860, -2.2987],
E               [-2.1976, -1.1458, -6.9201, -3.6489, -3.8347]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-10-2] ________________________

batch_shape = (4,), m = 2, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.0046,  0.1364, -0.1877,  0.0233,  0.0499, -0.0263,  0.0505,  0.1826,
         -0.3268],
        [ 0.1536, ...         -1.0071],
        [-0.8378, -0.9153, -1.2442, -0.3669, -0.6485, -0.2132,  0.2914,  2.5873,
          3.8562]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.0046,  0.1364, -0.1877,  0.0233,  0.0499, -0.0263,  0.0505,  0.1826,\n         -0.3268],\n ...      -1.0071],\n        [-0.8378, -0.9153, -1.2442, -0.3669, -0.6485, -0.2132,  0.2914,  2.5873,\n          3.8562]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.0046,  0.1364, -0.1877,  0.0233,  0.0499, -0.0263,  0.0505,  0.1826,
E                -0.3268],
E               [ 0.1536, -0.3414,  0.0383,  0.3511, -0.1235,  0.2225, -0.0936, -0.9436,
E                -0.0412],
E               [ 0.5962,  0.9974, -0.2497, -2.3978,  0.6929, -0.3908,  0.6797, -0.1213,
E                -1.0071],
E               [-0.8378, -0.9153, -1.2442, -0.3669, -0.6485, -0.2132,  0.2914,  2.5873,
E                 3.8562]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-10-3] ________________________

batch_shape = (4,), m = 3, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-2.1430e-02,  2.2132e-01,  1.7766e-01,  1.7645e-01,  3.2246e-01,
          5.1387e-01, -6.2962e-01,  3.7252e-...    [-6.7556e-01, -4.3092e-01,  4.3137e-01, -3.4709e-01,  6.0997e-01,
          7.3346e-01, -9.5194e-03, -1.7129e-01]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-2.1430e-02,  2.2132e-01,  1.7766e-01,  1.7645e-01,  3.2246e-01,\n          5.1387e-01, -6.296...  [-6.7556e-01, -4.3092e-01,  4.3137e-01, -3.4709e-01,  6.0997e-01,\n          7.3346e-01, -9.5194e-03, -1.7129e-01]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-2.1430e-02,  2.2132e-01,  1.7766e-01,  1.7645e-01,  3.2246e-01,
E                 5.1387e-01, -6.2962e-01,  3.7252e-01],
E               [-8.4039e-01,  8.2196e-01, -5.3100e-01,  6.5315e-01, -3.2764e-01,
E                -6.1686e-01,  8.1299e-01,  9.8515e-01],
E               [ 3.6783e-05,  9.8872e-01,  8.6700e-01, -1.1846e+00, -1.5140e+00,
E                -5.6461e-01, -8.2527e-02,  4.6725e-01],
E               [-6.7556e-01, -4.3092e-01,  4.3137e-01, -3.4709e-01,  6.0997e-01,
E                 7.3346e-01, -9.5194e-03, -1.7129e-01]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-10-4] ________________________

batch_shape = (4,), m = 4, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-1.4241, -0.2439,  0.0477, -1.6349, -0.2078, -1.1793,  0.0268],
        [ 1.0499, -0.2296,  0.9015, -1.5666, ... 1.9852, -1.4254,  0.6672, -2.8964,  0.3505],
        [ 3.3042,  1.9696,  1.4500, -0.7976,  0.7982,  0.8526,  3.5158]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-1.4241, -0.2439,  0.0477, -1.6349, -0.2078, -1.1793,  0.0268],\n        [ 1.0499, -0.2296,  0....9852, -1.4254,  0.6672, -2.8964,  0.3505],\n        [ 3.3042,  1.9696,  1.4500, -0.7976,  0.7982,  0.8526,  3.5158]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-1.4241, -0.2439,  0.0477, -1.6349, -0.2078, -1.1793,  0.0268],
E               [ 1.0499, -0.2296,  0.9015, -1.5666,  1.7949, -0.6436, -1.0090],
E               [-1.0760,  0.2057,  1.9852, -1.4254,  0.6672, -2.8964,  0.3505],
E               [ 3.3042,  1.9696,  1.4500, -0.7976,  0.7982,  0.8526,  3.5158]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-10-5] ________________________

batch_shape = (4,), m = 5, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 1.5806, -1.3178,  2.1394,  1.6300,  0.4405, -0.6411],
        [-1.3531,  1.7677, -3.8704,  1.3119, -1.4189, ...-3.2891,  4.1854,  0.9722, -3.1563,  2.2538, -0.5505],
        [-3.3905, -0.7092,  0.4428,  1.2677,  1.3501,  1.5974]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 1.5806, -1.3178,  2.1394,  1.6300,  0.4405, -0.6411],\n        [-1.3531,  1.7677, -3.8704,  1....2891,  4.1854,  0.9722, -3.1563,  2.2538, -0.5505],\n        [-3.3905, -0.7092,  0.4428,  1.2677,  1.3501,  1.5974]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 1.5806, -1.3178,  2.1394,  1.6300,  0.4405, -0.6411],
E               [-1.3531,  1.7677, -3.8704,  1.3119, -1.4189,  0.2318],
E               [-3.2891,  4.1854,  0.9722, -3.1563,  2.2538, -0.5505],
E               [-3.3905, -0.7092,  0.4428,  1.2677,  1.3501,  1.5974]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[valid-(4,)-10-6] ________________________

batch_shape = (4,), m = 6, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[ 0.1558,  1.4524,  0.5142, -0.6263,  1.8800],
        [-0.9835,  2.5886,  4.2587, -2.1039, -2.7194],
        [-3.4129, -0.4723,  1.2459,  2.3370,  0.3538],
        [-0.9236, -3.4861, -2.6847, -2.7797, -1.0608]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[ 0.1558,  1.4524,  0.5142, -0.6263,  1.8800],\n        [-0.9835,  2.5886,  4.2587, -2.1039, -2.7194],\n        [-3.4129, -0.4723,  1.2459,  2.3370,  0.3538],\n        [-0.9236, -3.4861, -2.6847, -2.7797, -1.0608]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[ 0.1558,  1.4524,  0.5142, -0.6263,  1.8800],
E               [-0.9835,  2.5886,  4.2587, -2.1039, -2.7194],
E               [-3.4129, -0.4723,  1.2459,  2.3370,  0.3538],
E               [-0.9236, -3.4861, -2.6847, -2.7797, -1.0608]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(4,)-10-10] ________________________

batch_shape = (4,), m = 10, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[-0.9692],
        [ 2.4288],
        [ 0.0693],
        [-3.4883]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[-0.9692],\n        [ 2.4288],\n        [ 0.0693],\n        [-3.4883]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[-0.9692],
E               [ 2.4288],
E               [ 0.0693],
E               [-3.4883]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-2-2] ________________________

batch_shape = (2, 3), m = 2, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[-0.0459],
         [-0.4444],
         [ 1.0525]],

        [[ 0.7707],
         [ 0.4637],
         [-0.0354]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[-0.0459],\n         [-0.4444],\n         [ 1.0525]],\n\n        [[ 0.7707],\n         [ 0.4637],\n         [-0.0354]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[-0.0459],
E                [-0.4444],
E                [ 1.0525]],
E       
E               [[ 0.7707],
E                [ 0.4637],
E                [-0.0354]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-2-3] ________________________

batch_shape = (2, 3), m = 3, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.7905,  1.3624],
         [-1.3569, -0.8918],
         [ 1.1494,  0.9250]],

        [[-1.8424,  0.7434],
         [ 0.7265, -2.1857],
         [ 2.6118,  1.8743]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.7905,  1.3624],\n         [-1.3569, -0.8918],\n         [ 1.1494,  0.9250]],\n\n        [[-1.8424,  0.7434],\n         [ 0.7265, -2.1857],\n         [ 2.6118,  1.8743]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.7905,  1.3624],
E                [-1.3569, -0.8918],
E                [ 1.1494,  0.9250]],
E       
E               [[-1.8424,  0.7434],
E                [ 0.7265, -2.1857],
E                [ 2.6118,  1.8743]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-2-4] ________________________

batch_shape = (2, 3), m = 4, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[-1.0928,  0.4740, -0.4812],
         [-0.3702, -0.0881, -0.9955],
         [-1.7107,  3.4650,  3.4766]],

        [[ 0.6495, -0.3884, -0.9520],
         [-0.0300,  0.6368, -0.5845],
         [-0.2642, -1.1266, -0.9136]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[-1.0928,  0.4740, -0.4812],\n         [-0.3702, -0.0881, -0.9955],\n         [-1.7107,  3.465...n        [[ 0.6495, -0.3884, -0.9520],\n         [-0.0300,  0.6368, -0.5845],\n         [-0.2642, -1.1266, -0.9136]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[-1.0928,  0.4740, -0.4812],
E                [-0.3702, -0.0881, -0.9955],
E                [-1.7107,  3.4650,  3.4766]],
E       
E               [[ 0.6495, -0.3884, -0.9520],
E                [-0.0300,  0.6368, -0.5845],
E                [-0.2642, -1.1266, -0.9136]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-2-5] ________________________

batch_shape = (2, 3), m = 5, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.9547,  0.1445,  0.6585,  0.3760],
         [ 0.1771, -0.7764,  0.2316,  0.1488],
         [-0.1036,  1.00...826,  0.1400, -0.7970],
         [ 2.5018, -2.3777, -1.0783, -1.3624],
         [-0.4610, -0.5097,  0.3048, -0.2916]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.9547,  0.1445,  0.6585,  0.3760],\n         [ 0.1771, -0.7764,  0.2316,  0.1488],\n       ...,  0.1400, -0.7970],\n         [ 2.5018, -2.3777, -1.0783, -1.3624],\n         [-0.4610, -0.5097,  0.3048, -0.2916]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.9547,  0.1445,  0.6585,  0.3760],
E                [ 0.1771, -0.7764,  0.2316,  0.1488],
E                [-0.1036,  1.0056,  1.3406, -0.4707]],
E       
E               [[ 0.5022,  0.2826,  0.1400, -0.7970],
E                [ 2.5018, -2.3777, -1.0783, -1.3624],
E                [-0.4610, -0.5097,  0.3048, -0.2916]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-2-6] ________________________

batch_shape = (2, 3), m = 6, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-4.2485, -2.7684, -1.2103])
b = tensor([[[ 0.4325,  0.5412,  0.5011,  0.4164,  0.3033],
         [-2.1175, -0.3291,  0.1804, -2.2506,  0.7430],
      ...679],
         [-5.7117, -1.4427, -6.1362,  2.6394, -2.1000],
         [-1.8803, -1.8163,  2.6981, -2.4352, -0.2662]]])
prec = 1e-07
msg = 'tensor([-4.2485, -2.7684, -1.2103]) vs tensor([[[ 0.4325,  0.5412,  0.5011,  0.4164,  0.3033],\n         [-2.1175, -0...],\n         [-5.7117, -1.4427, -6.1362,  2.6394, -2.1000],\n         [-1.8803, -1.8163,  2.6981, -2.4352, -0.2662]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-4.2485, -2.7684, -1.2103]) vs tensor([[[ 0.4325,  0.5412,  0.5011,  0.4164,  0.3033],
E                [-2.1175, -0.3291,  0.1804, -2.2506,  0.7430],
E                [ 1.2836,  1.3935,  0.9074, -0.9942, -1.0991]],
E       
E               [[-1.0045,  0.3835,  1.0676, -0.5172, -1.2679],
E                [-5.7117, -1.4427, -6.1362,  2.6394, -2.1000],
E                [-1.8803, -1.8163,  2.6981, -2.4352, -0.2662]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-2-10] _______________________

batch_shape = (2, 3), m = 10, n = 2, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-3.3191,  1.0296,  1.4822, -1.6909,  0.6812,  3.4190, -4.1488,  0.1497,
         3.5485, -4.9233, -1.0398,  2....99,
        -2.9305,  4.1388, -1.2240,  2.9146, -2.3451,  2.4393,  0.5797, -2.1934,
         1.0651,  0.0079, -2.0037])
b = tensor([[[ 1.0455, -0.0426,  0.6355,  0.3078,  0.3746,  0.1050,  0.9437,
          -1.1704, -0.3895],
         [-0.358...1440,  1.2858],
         [-0.1983, -1.2238,  2.1061, -0.3823,  0.9918, -0.5735, -0.1857,
           0.1178,  0.1010]]])
prec = 1e-07
msg = 'tensor([-3.3191,  1.0296,  1.4822, -1.6909,  0.6812,  3.4190, -4.1488,  0.1497,\n         3.5485, -4.9233, -1.0398,  ...0,  1.2858],\n         [-0.1983, -1.2238,  2.1061, -0.3823,  0.9918, -0.5735, -0.1857,\n           0.1178,  0.1010]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-3.3191,  1.0296,  1.4822, -1.6909,  0.6812,  3.4190, -4.1488,  0.1497,
E                3.5485, -4.9233, -1.0398,  2.0375, -4.6664,  0.7173,  3.9224, -0.0199,
E               -2.9305,  4.1388, -1.2240,  2.9146, -2.3451,  2.4393,  0.5797, -2.1934,
E                1.0651,  0.0079, -2.0037]) vs tensor([[[ 1.0455, -0.0426,  0.6355,  0.3078,  0.3746,  0.1050,  0.9437,
E                 -1.1704, -0.3895],
E                [-0.3580, -1.1339, -1.2071, -1.2916, -0.5796,  1.6900,  0.7204,
E                 -1.4654,  0.7859],
E                [ 0.4069, -0.3500,  0.5722, -0.2795,  0.4490, -0.3561,  0.2629,
E                 -0.0705,  0.4766]],
E       
E               [[-1.8995,  0.2809,  0.4934, -0.0571,  1.1549, -1.1701, -1.0817,
E                  1.2532,  1.3763],
E                [ 1.4463,  0.8648,  0.9966,  0.5250,  1.8572,  2.5794, -3.3650,
E                 -1.1440,  1.2858],
E                [-0.1983, -1.2238,  2.1061, -0.3823,  0.9918, -0.5735, -0.1857,
E                  0.1178,  0.1010]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-3-2] ________________________

batch_shape = (2, 3), m = 2, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.0499,  0.0449],
         [-0.2450, -0.1827],
         [ 1.3473, -0.4493]],

        [[ 0.0438,  1.5039],
         [-0.0302, -0.1022],
         [ 0.3046, -0.3527]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.0499,  0.0449],\n         [-0.2450, -0.1827],\n         [ 1.3473, -0.4493]],\n\n        [[ 0.0438,  1.5039],\n         [-0.0302, -0.1022],\n         [ 0.3046, -0.3527]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.0499,  0.0449],
E                [-0.2450, -0.1827],
E                [ 1.3473, -0.4493]],
E       
E               [[ 0.0438,  1.5039],
E                [-0.0302, -0.1022],
E                [ 0.3046, -0.3527]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-3-3] ________________________

batch_shape = (2, 3), m = 3, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.0276],
         [-0.7005],
         [-2.7950]],

        [[ 0.2316],
         [ 0.2185],
         [ 0.6350]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.0276],\n         [-0.7005],\n         [-2.7950]],\n\n        [[ 0.2316],\n         [ 0.2185],\n         [ 0.6350]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.0276],
E                [-0.7005],
E                [-2.7950]],
E       
E               [[ 0.2316],
E                [ 0.2185],
E                [ 0.6350]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-3-4] ________________________

batch_shape = (2, 3), m = 4, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 3.2147,  1.2452],
         [-0.5704, -1.4852],
         [ 4.8342, -0.4831]],

        [[ 0.8021, -0.4087],
         [-1.2504,  3.3610],
         [-1.6580, -0.4127]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 3.2147,  1.2452],\n         [-0.5704, -1.4852],\n         [ 4.8342, -0.4831]],\n\n        [[ 0.8021, -0.4087],\n         [-1.2504,  3.3610],\n         [-1.6580, -0.4127]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 3.2147,  1.2452],
E                [-0.5704, -1.4852],
E                [ 4.8342, -0.4831]],
E       
E               [[ 0.8021, -0.4087],
E                [-1.2504,  3.3610],
E                [-1.6580, -0.4127]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-3-5] ________________________

batch_shape = (2, 3), m = 5, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.2109,  0.5744,  0.2428],
         [ 1.0287, -0.0292,  0.0871],
         [-0.5219, -1.6441, -0.9032]],

        [[-0.2569, -0.3190,  0.5148],
         [ 0.4490,  2.0095, -1.9191],
         [ 0.0658, -0.2673,  0.1012]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.2109,  0.5744,  0.2428],\n         [ 1.0287, -0.0292,  0.0871],\n         [-0.5219, -1.644...n        [[-0.2569, -0.3190,  0.5148],\n         [ 0.4490,  2.0095, -1.9191],\n         [ 0.0658, -0.2673,  0.1012]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.2109,  0.5744,  0.2428],
E                [ 1.0287, -0.0292,  0.0871],
E                [-0.5219, -1.6441, -0.9032]],
E       
E               [[-0.2569, -0.3190,  0.5148],
E                [ 0.4490,  2.0095, -1.9191],
E                [ 0.0658, -0.2673,  0.1012]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-3-6] ________________________

batch_shape = (2, 3), m = 6, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[-0.0423,  0.5087,  0.1885,  0.2480],
         [-0.2286, -0.9967,  0.4510, -0.8970],
         [-1.7433, -1.75...249,  0.0577,  0.3784],
         [-1.2489,  2.7572, -1.1439,  1.1915],
         [-1.8812, -0.8731, -0.0930, -2.9863]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[-0.0423,  0.5087,  0.1885,  0.2480],\n         [-0.2286, -0.9967,  0.4510, -0.8970],\n       ...,  0.0577,  0.3784],\n         [-1.2489,  2.7572, -1.1439,  1.1915],\n         [-1.8812, -0.8731, -0.0930, -2.9863]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[-0.0423,  0.5087,  0.1885,  0.2480],
E                [-0.2286, -0.9967,  0.4510, -0.8970],
E                [-1.7433, -1.7532, -0.8009,  1.2691]],
E       
E               [[ 0.2291, -0.2249,  0.0577,  0.3784],
E                [-1.2489,  2.7572, -1.1439,  1.1915],
E                [-1.8812, -0.8731, -0.0930, -2.9863]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-3-10] _______________________

batch_shape = (2, 3), m = 10, n = 3, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 3.6654, -4.8050, -2.7058,  8.7393,  2.8990, -2.3182,  5.0380, -5.2097,
        -4.6501])
b = tensor([[[ 1.1167,  0.0382,  0.7845,  0.4374,  0.3694,  0.7260,  0.9091,
          -1.6048],
         [-0.8274,  0.751...938,
          -0.6230],
         [-0.4020,  2.5472, -3.1741,  1.7133, -1.3994,  0.9915,  0.1825,
          -0.1875]]])
prec = 1e-07
msg = 'tensor([ 3.6654, -4.8050, -2.7058,  8.7393,  2.8990, -2.3182,  5.0380, -5.2097,\n        -4.6501]) vs tensor([[[ 1.11...\n          -0.6230],\n         [-0.4020,  2.5472, -3.1741,  1.7133, -1.3994,  0.9915,  0.1825,\n          -0.1875]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 3.6654, -4.8050, -2.7058,  8.7393,  2.8990, -2.3182,  5.0380, -5.2097,
E               -4.6501]) vs tensor([[[ 1.1167,  0.0382,  0.7845,  0.4374,  0.3694,  0.7260,  0.9091,
E                 -1.6048],
E                [-0.8274,  0.7511,  2.0355,  1.3513, -0.4620,  1.6178, -0.0284,
E                 -3.3506],
E                [-0.7762, -0.8511, -1.3985, -0.4654, -0.5485,  0.3057, -0.7585,
E                 -0.6876]],
E       
E               [[-1.4310, -0.0760,  0.3518, -0.6030,  1.3736, -0.2585, -1.3741,
E                  0.1654],
E                [ 0.7636,  0.5717,  1.0615, -1.6298,  4.8698, -0.2195, -2.7938,
E                 -0.6230],
E                [-0.4020,  2.5472, -3.1741,  1.7133, -1.3994,  0.9915,  0.1825,
E                 -0.1875]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-4-2] ________________________

batch_shape = (2, 3), m = 2, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.0499, -0.0263,  0.0505],
         [ 0.6518, -0.2932, -0.0785],
         [-1.5667,  0.3254,  1.8061]],

        [[-1.6773, -2.0153, -0.5856],
         [-0.2584,  0.5283,  0.0895],
         [ 0.7869, -0.5519,  0.0168]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.0499, -0.0263,  0.0505],\n         [ 0.6518, -0.2932, -0.0785],\n         [-1.5667,  0.325...n        [[-1.6773, -2.0153, -0.5856],\n         [-0.2584,  0.5283,  0.0895],\n         [ 0.7869, -0.5519,  0.0168]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.0499, -0.0263,  0.0505],
E                [ 0.6518, -0.2932, -0.0785],
E                [-1.5667,  0.3254,  1.8061]],
E       
E               [[-1.6773, -2.0153, -0.5856],
E                [-0.2584,  0.5283,  0.0895],
E                [ 0.7869, -0.5519,  0.0168]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-4-3] ________________________

batch_shape = (2, 3), m = 3, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.1842, -0.1808],
         [ 0.1077, -1.6665],
         [-2.5292,  1.9032]],

        [[-0.7398, -0.6196],
         [ 0.0776, -2.8258],
         [ 0.7722,  0.0380]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.1842, -0.1808],\n         [ 0.1077, -1.6665],\n         [-2.5292,  1.9032]],\n\n        [[-0.7398, -0.6196],\n         [ 0.0776, -2.8258],\n         [ 0.7722,  0.0380]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.1842, -0.1808],
E                [ 0.1077, -1.6665],
E                [-2.5292,  1.9032]],
E       
E               [[-0.7398, -0.6196],
E                [ 0.0776, -2.8258],
E                [ 0.7722,  0.0380]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-4-4] ________________________

batch_shape = (2, 3), m = 4, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.4878],
         [-0.5932],
         [-0.9263]],

        [[ 0.5849],
         [-0.3376],
         [-0.6248]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.4878],\n         [-0.5932],\n         [-0.9263]],\n\n        [[ 0.5849],\n         [-0.3376],\n         [-0.6248]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.4878],
E                [-0.5932],
E                [-0.9263]],
E       
E               [[ 0.5849],
E                [-0.3376],
E                [-0.6248]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-4-5] ________________________

batch_shape = (2, 3), m = 5, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.7376,  1.7336],
         [ 0.6553,  0.5547],
         [-1.4808,  0.4446]],

        [[-0.3577, -0.0107],
         [-1.6111,  2.5497],
         [ 1.0862,  0.5381]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.7376,  1.7336],\n         [ 0.6553,  0.5547],\n         [-1.4808,  0.4446]],\n\n        [[-0.3577, -0.0107],\n         [-1.6111,  2.5497],\n         [ 1.0862,  0.5381]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.7376,  1.7336],
E                [ 0.6553,  0.5547],
E                [-1.4808,  0.4446]],
E       
E               [[-0.3577, -0.0107],
E                [-1.6111,  2.5497],
E                [ 1.0862,  0.5381]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-4-6] ________________________

batch_shape = (2, 3), m = 6, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.8221,  0.9121,  0.7525],
         [-1.8249, -2.0113,  0.6672],
         [ 0.7820,  1.7604,  0.9004]],

        [[-0.5226,  0.0169, -1.6305],
         [-0.0414,  0.3745,  1.8167],
         [ 2.0366,  2.0639,  0.0594]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.8221,  0.9121,  0.7525],\n         [-1.8249, -2.0113,  0.6672],\n         [ 0.7820,  1.760...n        [[-0.5226,  0.0169, -1.6305],\n         [-0.0414,  0.3745,  1.8167],\n         [ 2.0366,  2.0639,  0.0594]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.8221,  0.9121,  0.7525],
E                [-1.8249, -2.0113,  0.6672],
E                [ 0.7820,  1.7604,  0.9004]],
E       
E               [[-0.5226,  0.0169, -1.6305],
E                [-0.0414,  0.3745,  1.8167],
E                [ 2.0366,  2.0639,  0.0594]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-4-10] _______________________

batch_shape = (2, 3), m = 10, n = 4, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[-0.1821,  0.4941,  0.1759,  0.1496,  0.5676,  0.6770, -1.2443],
         [ 2.0754,  0.2638, -1.4783, -3.3334....9440, -3.8548,  5.8275, -2.5322, -1.5583],
         [ 1.3716,  2.1211, -1.4168,  0.8497, -1.3947,  0.7120,  0.2860]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[-0.1821,  0.4941,  0.1759,  0.1496,  0.5676,  0.6770, -1.2443],\n         [ 2.0754,  0.2638, ...440, -3.8548,  5.8275, -2.5322, -1.5583],\n         [ 1.3716,  2.1211, -1.4168,  0.8497, -1.3947,  0.7120,  0.2860]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[-0.1821,  0.4941,  0.1759,  0.1496,  0.5676,  0.6770, -1.2443],
E                [ 2.0754,  0.2638, -1.4783, -3.3334, -1.5160,  0.8298,  0.5850],
E                [ 0.1928, -1.5680,  0.9576, -1.0313,  0.3310, -0.5669,  2.7379]],
E       
E               [[ 0.1202, -0.6812,  1.0007, -2.5647,  0.6800,  2.5768, -0.5383],
E                [ 1.0453,  0.4681,  3.9440, -3.8548,  5.8275, -2.5322, -1.5583],
E                [ 1.3716,  2.1211, -1.4168,  0.8497, -1.3947,  0.7120,  0.2860]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-5-2] ________________________

batch_shape = (2, 3), m = 2, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.0499, -0.0263,  0.0505,  0.0804],
         [-0.2932, -0.0785, -0.0921,  0.0383],
         [-0.9956,  0.92...264, -0.2047, -1.1198],
         [-0.2919,  0.1957,  0.2865, -0.0263],
         [-0.8844, -0.1508,  0.5210, -0.1844]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.0499, -0.0263,  0.0505,  0.0804],\n         [-0.2932, -0.0785, -0.0921,  0.0383],\n       ..., -0.2047, -1.1198],\n         [-0.2919,  0.1957,  0.2865, -0.0263],\n         [-0.8844, -0.1508,  0.5210, -0.1844]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.0499, -0.0263,  0.0505,  0.0804],
E                [-0.2932, -0.0785, -0.0921,  0.0383],
E                [-0.9956,  0.9249, -0.6475, -1.9650]],
E       
E               [[-0.0428,  0.2264, -0.2047, -1.1198],
E                [-0.2919,  0.1957,  0.2865, -0.0263],
E                [-0.8844, -0.1508,  0.5210, -0.1844]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-5-3] ________________________

batch_shape = (2, 3), m = 3, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.1842, -0.1808,  0.4096],
         [-1.6665,  0.0895,  0.6702],
         [-2.2064,  0.1293, -0.9912]],

        [[-0.3461, -0.3579, -0.6807],
         [-0.5008,  0.2006, -0.1487],
         [ 0.9383,  0.4973,  0.0658]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.1842, -0.1808,  0.4096],\n         [-1.6665,  0.0895,  0.6702],\n         [-2.2064,  0.129...n        [[-0.3461, -0.3579, -0.6807],\n         [-0.5008,  0.2006, -0.1487],\n         [ 0.9383,  0.4973,  0.0658]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.1842, -0.1808,  0.4096],
E                [-1.6665,  0.0895,  0.6702],
E                [-2.2064,  0.1293, -0.9912]],
E       
E               [[-0.3461, -0.3579, -0.6807],
E                [-0.5008,  0.2006, -0.1487],
E                [ 0.9383,  0.4973,  0.0658]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-5-4] ________________________

batch_shape = (2, 3), m = 4, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.4878,  1.7009],
         [ 0.8138, -0.1519],
         [-0.6685,  1.6316]],

        [[-1.0370, -1.0883],
         [ 0.0656, -0.7302],
         [-1.4500, -0.5326]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.4878,  1.7009],\n         [ 0.8138, -0.1519],\n         [-0.6685,  1.6316]],\n\n        [[-1.0370, -1.0883],\n         [ 0.0656, -0.7302],\n         [-1.4500, -0.5326]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.4878,  1.7009],
E                [ 0.8138, -0.1519],
E                [-0.6685,  1.6316]],
E       
E               [[-1.0370, -1.0883],
E                [ 0.0656, -0.7302],
E                [-1.4500, -0.5326]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-5-5] ________________________

batch_shape = (2, 3), m = 5, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 1.9946],
         [-1.1700],
         [ 0.5552]],

        [[ 0.8076],
         [-0.0678],
         [ 0.6744]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 1.9946],\n         [-1.1700],\n         [ 0.5552]],\n\n        [[ 0.8076],\n         [-0.0678],\n         [ 0.6744]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 1.9946],
E                [-1.1700],
E                [ 0.5552]],
E       
E               [[ 0.8076],
E                [-0.0678],
E                [ 0.6744]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-5-6] ________________________

batch_shape = (2, 3), m = 6, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 1.1521,  0.7930],
         [ 0.9920, -2.7122],
         [ 3.8483,  5.8739]],

        [[ 0.1286,  1.8215],
         [-3.9253,  1.3352],
         [-4.9685, -4.1136]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 1.1521,  0.7930],\n         [ 0.9920, -2.7122],\n         [ 3.8483,  5.8739]],\n\n        [[ 0.1286,  1.8215],\n         [-3.9253,  1.3352],\n         [-4.9685, -4.1136]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 1.1521,  0.7930],
E                [ 0.9920, -2.7122],
E                [ 3.8483,  5.8739]],
E       
E               [[ 0.1286,  1.8215],
E                [-3.9253,  1.3352],
E                [-4.9685, -4.1136]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-5-10] _______________________

batch_shape = (2, 3), m = 10, n = 5, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 1.3711,  0.3241,  0.7611,  0.9210,  1.0401, -1.0273],
         [-0.7804, -2.9667, -2.9918, -2.8719, -0.8849....6257, -0.9007,  1.4231,  3.7571, -3.0797,  3.6715],
         [-1.6644,  1.1750,  1.3180,  1.7835,  0.8214, -0.2030]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 1.3711,  0.3241,  0.7611,  0.9210,  1.0401, -1.0273],\n         [-0.7804, -2.9667, -2.9918, ...257, -0.9007,  1.4231,  3.7571, -3.0797,  3.6715],\n         [-1.6644,  1.1750,  1.3180,  1.7835,  0.8214, -0.2030]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 1.3711,  0.3241,  0.7611,  0.9210,  1.0401, -1.0273],
E                [-0.7804, -2.9667, -2.9918, -2.8719, -0.8849,  1.7457],
E                [-0.3688, -0.7206,  0.8029, -0.0956,  0.1105, -1.0612]],
E       
E               [[-2.1766, -0.0234, -1.2813, -0.4102,  4.2264, -0.6711],
E                [ 1.6257, -0.9007,  1.4231,  3.7571, -3.0797,  3.6715],
E                [-1.6644,  1.1750,  1.3180,  1.7835,  0.8214, -0.2030]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-6-2] ________________________

batch_shape = (2, 3), m = 2, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.0499, -0.0263,  0.0505,  0.0804, -0.0960],
         [-0.0785, -0.0921,  0.0383,  0.3511, -0.1235],
      ...869],
         [ 0.2720,  0.2019, -0.0471,  0.2479,  0.1198],
         [ 0.2083, -0.3763,  0.1435, -0.5539,  0.6360]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.0499, -0.0263,  0.0505,  0.0804, -0.0960],\n         [-0.0785, -0.0921,  0.0383,  0.3511, ...],\n         [ 0.2720,  0.2019, -0.0471,  0.2479,  0.1198],\n         [ 0.2083, -0.3763,  0.1435, -0.5539,  0.6360]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.0499, -0.0263,  0.0505,  0.0804, -0.0960],
E                [-0.0785, -0.0921,  0.0383,  0.3511, -0.1235],
E                [-0.6475,  0.6693, -0.1820, -0.7111,  0.5962]],
E       
E               [[ 0.6314, -1.9950, -1.2985, -0.1074,  0.2869],
E                [ 0.2720,  0.2019, -0.0471,  0.2479,  0.1198],
E                [ 0.2083, -0.3763,  0.1435, -0.5539,  0.6360]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-6-3] ________________________

batch_shape = (2, 3), m = 3, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.1842, -0.1808,  0.4096,  0.3566],
         [ 0.0895,  0.6702, -0.0541, -0.0985],
         [-0.2601, -2.76...569,  0.8975,  0.3141],
         [-1.0321,  0.4557,  0.3299,  0.0827],
         [ 0.4185,  0.1661, -0.9346, -1.9118]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.1842, -0.1808,  0.4096,  0.3566],\n         [ 0.0895,  0.6702, -0.0541, -0.0985],\n       ...,  0.8975,  0.3141],\n         [-1.0321,  0.4557,  0.3299,  0.0827],\n         [ 0.4185,  0.1661, -0.9346, -1.9118]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.1842, -0.1808,  0.4096,  0.3566],
E                [ 0.0895,  0.6702, -0.0541, -0.0985],
E                [-0.2601, -2.7647,  1.1948, -1.2355]],
E       
E               [[-0.5949, -0.3569,  0.8975,  0.3141],
E                [-1.0321,  0.4557,  0.3299,  0.0827],
E                [ 0.4185,  0.1661, -0.9346, -1.9118]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-6-4] ________________________

batch_shape = (2, 3), m = 4, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.4878,  1.7009, -0.3841],
         [-0.1519, -0.5246,  2.4714],
         [ 4.8318, -3.8510, -0.6865]],

        [[-0.5894,  1.1026, -0.4860],
         [-1.8025, -0.9848, -3.0506],
         [-1.8734, -3.5918, -0.5489]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.4878,  1.7009, -0.3841],\n         [-0.1519, -0.5246,  2.4714],\n         [ 4.8318, -3.851...n        [[-0.5894,  1.1026, -0.4860],\n         [-1.8025, -0.9848, -3.0506],\n         [-1.8734, -3.5918, -0.5489]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.4878,  1.7009, -0.3841],
E                [-0.1519, -0.5246,  2.4714],
E                [ 4.8318, -3.8510, -0.6865]],
E       
E               [[-0.5894,  1.1026, -0.4860],
E                [-1.8025, -0.9848, -3.0506],
E                [-1.8734, -3.5918, -0.5489]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-6-5] ________________________

batch_shape = (2, 3), m = 5, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 1.9946,  0.3781],
         [-0.3871,  1.5466],
         [-1.4861, -1.8880]],

        [[-0.4508,  1.6868],
         [ 1.2493, -1.3684],
         [ 0.8147,  0.1799]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 1.9946,  0.3781],\n         [-0.3871,  1.5466],\n         [-1.4861, -1.8880]],\n\n        [[-0.4508,  1.6868],\n         [ 1.2493, -1.3684],\n         [ 0.8147,  0.1799]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 1.9946,  0.3781],
E                [-0.3871,  1.5466],
E                [-1.4861, -1.8880]],
E       
E               [[-0.4508,  1.6868],
E                [ 1.2493, -1.3684],
E                [ 0.8147,  0.1799]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-6-6] ________________________

batch_shape = (2, 3), m = 6, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.2174],
         [ 1.4044],
         [-2.2270]],

        [[-1.3795],
         [-1.1366],
         [-1.9922]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.2174],\n         [ 1.4044],\n         [-2.2270]],\n\n        [[-1.3795],\n         [-1.1366],\n         [-1.9922]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.2174],
E                [ 1.4044],
E                [-2.2270]],
E       
E               [[-1.3795],
E                [-1.1366],
E                [-1.9922]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-6-10] _______________________

batch_shape = (2, 3), m = 10, n = 6, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[-0.2016,  0.6723,  0.5544,  0.8283, -1.2449],
         [-5.2177, -3.4382,  0.5817,  2.2023,  1.9228],
      ...769],
         [-4.2912,  3.2688,  3.3925, -3.5241, -4.0277],
         [ 2.8723, -0.2907,  3.5255, -1.2979, -0.0306]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[-0.2016,  0.6723,  0.5544,  0.8283, -1.2449],\n         [-5.2177, -3.4382,  0.5817,  2.2023, ...],\n         [-4.2912,  3.2688,  3.3925, -3.5241, -4.0277],\n         [ 2.8723, -0.2907,  3.5255, -1.2979, -0.0306]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[-0.2016,  0.6723,  0.5544,  0.8283, -1.2449],
E                [-5.2177, -3.4382,  0.5817,  2.2023,  1.9228],
E                [ 0.5763, -1.8556, -0.0895, -0.7857,  2.9157]],
E       
E               [[-0.9979,  0.5920,  2.1702,  1.9369, -2.8769],
E                [-4.2912,  3.2688,  3.3925, -3.5241, -4.0277],
E                [ 2.8723, -0.2907,  3.5255, -1.2979, -0.0306]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-10-2] _______________________

batch_shape = (2, 3), m = 2, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02, -9.5987e-02,
          -2.3823e-01,  2.2673e-01, -1.4968...1, -1.8115e-01,  6.8342e-01, -3.7475e-01, -1.6125e-01,
           1.3826e-02,  2.3257e-02,  4.1761e-01,  3.6441e-01]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02, -9.5987e-02,\n          -2.3823e-01,  2.2... -1.8115e-01,  6.8342e-01, -3.7475e-01, -1.6125e-01,\n           1.3826e-02,  2.3257e-02,  4.1761e-01,  3.6441e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02, -9.5987e-02,
E                 -2.3823e-01,  2.2673e-01, -1.4968e-01,  1.3890e-01],
E                [-1.2352e-01,  6.4038e-02, -2.9786e-03,  7.6136e-02,  9.1562e-02,
E                 -2.4015e-01, -7.2195e-04,  4.2764e-01,  1.9800e-01],
E                [ 3.0460e-02, -1.5465e-01,  1.3473e+00, -1.5012e+00,  9.7228e-01,
E                  1.1691e+00,  6.1421e-01,  8.1657e-01,  2.6589e-01]],
E       
E               [[ 7.8568e-01, -2.4065e-01,  2.2641e-01, -2.0470e-01, -1.1198e+00,
E                 -2.3806e+00, -1.2985e+00, -1.0742e-01,  2.8685e-01],
E                [ 6.8671e-01, -2.7063e-01, -2.7883e-01,  3.1859e-01,  1.5760e-01,
E                 -1.3738e-01, -2.7386e-01, -3.0292e-02,  1.7860e-02],
E                [-4.6670e-01, -1.8115e-01,  6.8342e-01, -3.7475e-01, -1.6125e-01,
E                  1.3826e-02,  2.3257e-02,  4.1761e-01,  3.6441e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-10-3] _______________________

batch_shape = (2, 3), m = 3, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.1842, -0.1808,  0.4096,  0.3566,  1.2021, -1.2999,  1.7906,
           0.1018],
         [-0.3910, -1.612...718,
          -2.5845],
         [ 0.0534, -0.0107,  0.5329, -0.6788, -1.3608, -0.6426, -0.9329,
           0.0360]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.1842, -0.1808,  0.4096,  0.3566,  1.2021, -1.2999,  1.7906,\n           0.1018],\n        ...\n          -2.5845],\n         [ 0.0534, -0.0107,  0.5329, -0.6788, -1.3608, -0.6426, -0.9329,\n           0.0360]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.1842, -0.1808,  0.4096,  0.3566,  1.2021, -1.2999,  1.7906,
E                  0.1018],
E                [-0.3910, -1.6126,  0.2656, -0.1693, -1.5669,  0.2763,  0.4113,
E                 -0.5916],
E                [-1.2171,  0.5318, -0.2717, -0.1304,  0.6558, -0.8763,  3.1401,
E                  1.4979]],
E       
E               [[-0.0611, -0.2457, -0.3579, -0.6807,  0.2400, -0.4777,  0.8975,
E                  0.3141],
E                [-0.0473,  2.2023, -2.4484,  2.3384,  0.1759, -3.0260,  3.4718,
E                 -2.5845],
E                [ 0.0534, -0.0107,  0.5329, -0.6788, -1.3608, -0.6426, -0.9329,
E                  0.0360]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-10-4] _______________________

batch_shape = (2, 3), m = 4, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.4878,  1.7009, -0.3841,  0.7026,  0.4029, -0.6921,  2.0089],
         [ 0.8294, -0.5329,  0.3804, -2.4858....4725,  3.0996,  0.4040, -0.1226,  0.5756],
         [ 2.1163, -1.5002,  1.2939,  2.6919,  1.4256, -1.8022,  0.0936]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.4878,  1.7009, -0.3841,  0.7026,  0.4029, -0.6921,  2.0089],\n         [ 0.8294, -0.5329, ...725,  3.0996,  0.4040, -0.1226,  0.5756],\n         [ 2.1163, -1.5002,  1.2939,  2.6919,  1.4256, -1.8022,  0.0936]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.4878,  1.7009, -0.3841,  0.7026,  0.4029, -0.6921,  2.0089],
E                [ 0.8294, -0.5329,  0.3804, -2.4858, -0.4938,  1.7978,  0.2898],
E                [-4.9136,  7.3040, -0.4928, -0.4984,  0.9629,  1.9301, -4.0283]],
E       
E               [[-1.0583, -0.9401, -1.0883,  0.3176,  0.9174,  1.0104, -0.4860],
E                [ 1.3544,  1.2803,  0.4725,  3.0996,  0.4040, -0.1226,  0.5756],
E                [ 2.1163, -1.5002,  1.2939,  2.6919,  1.4256, -1.8022,  0.0936]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-10-5] _______________________

batch_shape = (2, 3), m = 5, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 1.9946,  0.3781,  0.7869,  0.4600, -0.0311, -0.4825],
         [ 0.2508, -0.9078,  0.5526,  1.2249, -1.5317....3751, -3.6479,  0.1978,  2.9770, -0.4553, -3.7774],
         [ 0.4359, -0.0897,  1.3488, -1.6158,  0.5174, -1.0623]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 1.9946,  0.3781,  0.7869,  0.4600, -0.0311, -0.4825],\n         [ 0.2508, -0.9078,  0.5526, ...751, -3.6479,  0.1978,  2.9770, -0.4553, -3.7774],\n         [ 0.4359, -0.0897,  1.3488, -1.6158,  0.5174, -1.0623]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 1.9946,  0.3781,  0.7869,  0.4600, -0.0311, -0.4825],
E                [ 0.2508, -0.9078,  0.5526,  1.2249, -1.5317, -1.9972],
E                [-1.4272, -2.9832,  0.2370,  2.9043,  0.9749, -2.1303]],
E       
E               [[-1.8142,  1.0567, -1.5176,  0.2346, -1.8946,  1.3086],
E                [-2.3751, -3.6479,  0.1978,  2.9770, -0.4553, -3.7774],
E                [ 0.4359, -0.0897,  1.3488, -1.6158,  0.5174, -1.0623]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[valid-(2, 3)-10-6] _______________________

batch_shape = (2, 3), m = 6, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[ 0.2174,  2.7687,  1.1387,  1.1742,  1.1784],
         [ 1.1649, -1.2190, -0.5690,  0.8233,  0.1071],
      ...868],
         [ 0.6205,  3.3055,  2.4568,  5.7890, -0.0795],
         [-0.0729,  2.6285,  2.3787, -0.7075,  1.9007]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[ 0.2174,  2.7687,  1.1387,  1.1742,  1.1784],\n         [ 1.1649, -1.2190, -0.5690,  0.8233, ...],\n         [ 0.6205,  3.3055,  2.4568,  5.7890, -0.0795],\n         [-0.0729,  2.6285,  2.3787, -0.7075,  1.9007]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[ 0.2174,  2.7687,  1.1387,  1.1742,  1.1784],
E                [ 1.1649, -1.2190, -0.5690,  0.8233,  0.1071],
E                [-1.2630,  0.9055,  2.3859, -2.9825, -0.8378]],
E       
E               [[-0.1765, -0.2716,  1.0638, -1.0986, -3.3868],
E                [ 0.6205,  3.3055,  2.4568,  5.7890, -0.0795],
E                [-0.0729,  2.6285,  2.3787, -0.7075,  1.9007]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
______________________ test_convolve[valid-(2, 3)-10-10] _______________________

batch_shape = (2, 3), m = 10, n = 10, mode = 'valid'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([])
b = tensor([[[-3.3166],
         [ 0.6698],
         [-3.4443]],

        [[ 5.6608],
         [ 3.8032],
         [ 7.5514]]])
prec = 1e-07
msg = 'tensor([]) vs tensor([[[-3.3166],\n         [ 0.6698],\n         [-3.4443]],\n\n        [[ 5.6608],\n         [ 3.8032],\n         [ 7.5514]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([]) vs tensor([[[-3.3166],
E                [ 0.6698],
E                [-3.4443]],
E       
E               [[ 5.6608],
E                [ 3.8032],
E                [ 7.5514]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-2-2] __________________________

batch_shape = (), m = 2, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0123, -0.0177]), b = tensor([ 0.0412, -0.0177]), prec = 1e-07
msg = 'tensor([ 0.0123, -0.0177]) vs tensor([ 0.0412, -0.0177])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([ 0.0123, -0.0177]) vs tensor([ 0.0412, -0.0177])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-2-3] __________________________

batch_shape = (), m = 3, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.4692,  0.1045, -0.0552]), b = tensor([ 0.0268,  0.1045, -0.0552])
prec = 1e-07
msg = 'tensor([ 0.4692,  0.1045, -0.0552]) vs tensor([ 0.0268,  0.1045, -0.0552])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([ 0.4692,  0.1045, -0.0552]) vs tensor([ 0.0268,  0.1045, -0.0552])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-2-4] __________________________

batch_shape = (), m = 4, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0831, -0.1674,  0.4676,  0.2104])
b = tensor([ 0.1334, -0.1674,  0.4676,  0.2104]), prec = 1e-07
msg = 'tensor([ 0.0831, -0.1674,  0.4676,  0.2104]) vs tensor([ 0.1334, -0.1674,  0.4676,  0.2104])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([ 0.0831, -0.1674,  0.4676,  0.2104]) vs tensor([ 0.1334, -0.1674,  0.4676,  0.2104])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-2-5] __________________________

batch_shape = (), m = 5, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.1405,  0.1336, -0.1944,  0.3091, -0.0167])
b = tensor([-0.0233,  0.1336, -0.1944,  0.3091, -0.0167]), prec = 1e-07
msg = 'tensor([ 1.1405,  0.1336, -0.1944,  0.3091, -0.0167]) vs tensor([-0.0233,  0.1336, -0.1944,  0.3091, -0.0167])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([ 1.1405,  0.1336, -0.1944,  0.3091, -0.0167]) vs tensor([-0.0233,  0.1336, -0.1944,  0.3091, -0.0167])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-2-6] __________________________

batch_shape = (), m = 6, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0496, -0.0329,  0.2685,  0.5129,  1.3454,  0.7002])
b = tensor([ 0.1084, -0.0329,  0.2685,  0.5129,  1.3454,  0.7002]), prec = 1e-07
msg = 'tensor([-0.0496, -0.0329,  0.2685,  0.5129,  1.3454,  0.7002]) vs tensor([ 0.1084, -0.0329,  0.2685,  0.5129,  1.3454,  0.7002])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([-0.0496, -0.0329,  0.2685,  0.5129,  1.3454,  0.7002]) vs tensor([ 0.1084, -0.0329,  0.2685,  0.5129,  1.3454,  0.7002])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
_________________________ test_convolve[same-()-2-10] __________________________

batch_shape = (), m = 10, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0190,  0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212,
         0.3632, -0.1494])
b = tensor([-0.0234,  0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212,
         0.3632, -0.1494])
prec = 1e-07
msg = 'tensor([ 0.0190,  0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212,\n         0.3632, -0.1494]) vs tensor([-0.0234,  0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212,\n         0.3632, -0.1494])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([ 0.0190,  0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212,
E                    0.3632, -0.1494]) vs tensor([-0.0234,  0.0689, -0.1248,  0.0939, -0.1578,  0.5118, -0.2863,  0.2212,
E                    0.3632, -0.1494])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-3-2] __________________________

batch_shape = (), m = 2, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.1029, -0.0177]), b = tensor([ 0.0412, -0.0177,  0.1045])
prec = 1e-07
msg = 'tensor([-0.1029, -0.0177]) vs tensor([ 0.0412, -0.0177,  0.1045])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.1029, -0.0177]) vs tensor([ 0.0412, -0.0177,  0.1045])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-3-3] __________________________

batch_shape = (), m = 3, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.4944,  0.0271, -0.0785]), b = tensor([ 0.1045, -0.0785,  0.4676])
prec = 1e-07
msg = 'tensor([ 0.4944,  0.0271, -0.0785]) vs tensor([ 0.1045, -0.0785,  0.4676])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([ 0.4944,  0.0271, -0.0785]) vs tensor([ 0.1045, -0.0785,  0.4676])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-3-4] __________________________

batch_shape = (), m = 4, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([0.4425, 0.0664, 0.5760, 0.0934])
b = tensor([-0.1674,  0.5760,  0.0934,  0.3091]), prec = 1e-07
msg = 'tensor([0.4425, 0.0664, 0.5760, 0.0934]) vs tensor([-0.1674,  0.5760,  0.0934,  0.3091])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([0.4425, 0.0664, 0.5760, 0.0934]) vs tensor([-0.1674,  0.5760,  0.0934,  0.3091])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-3-5] __________________________

batch_shape = (), m = 5, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.3220,  1.0373, -0.1102,  0.2182,  0.2624])
b = tensor([ 0.1336, -0.1102,  0.2182,  0.2624,  1.3454]), prec = 1e-07
msg = 'tensor([ 1.3220,  1.0373, -0.1102,  0.2182,  0.2624]) vs tensor([ 0.1336, -0.1102,  0.2182,  0.2624,  1.3454])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([ 1.3220,  1.0373, -0.1102,  0.2182,  0.2624]) vs tensor([ 0.1336, -0.1102,  0.2182,  0.2624,  1.3454])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-3-6] __________________________

batch_shape = (), m = 6, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.4373,  0.0349,  0.2324,  0.5518,  1.2256,  0.6224])
b = tensor([-0.0329,  0.2324,  0.5518,  1.2256,  0.6224, -0.5457]), prec = 1e-07
msg = 'tensor([-0.4373,  0.0349,  0.2324,  0.5518,  1.2256,  0.6224]) vs tensor([-0.0329,  0.2324,  0.5518,  1.2256,  0.6224, -0.5457])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([-0.4373,  0.0349,  0.2324,  0.5518,  1.2256,  0.6224]) vs tensor([-0.0329,  0.2324,  0.5518,  1.2256,  0.6224, -0.5457])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
_________________________ test_convolve[same-()-3-10] __________________________

batch_shape = (), m = 10, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0951,  0.0434, -0.1510,  0.1222, -0.2446,  0.4553, -0.5676,  0.2704,
         0.1348, -0.3268])
b = tensor([ 0.0689, -0.1510,  0.1222, -0.2446,  0.4553, -0.5676,  0.2704,  0.1348,
        -0.3268,  0.1185])
prec = 1e-07
msg = 'tensor([ 0.0951,  0.0434, -0.1510,  0.1222, -0.2446,  0.4553, -0.5676,  0.2704,\n         0.1348, -0.3268]) vs tensor([ 0.0689, -0.1510,  0.1222, -0.2446,  0.4553, -0.5676,  0.2704,  0.1348,\n        -0.3268,  0.1185])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([ 0.0951,  0.0434, -0.1510,  0.1222, -0.2446,  0.4553, -0.5676,  0.2704,
E                    0.1348, -0.3268]) vs tensor([ 0.0689, -0.1510,  0.1222, -0.2446,  0.4553, -0.5676,  0.2704,  0.1348,
E                   -0.3268,  0.1185])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-4-2] __________________________

batch_shape = (), m = 2, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0177,  0.1045]), b = tensor([ 0.0412, -0.0177,  0.1045, -0.1674])
prec = 1e-07
msg = 'tensor([-0.0177,  0.1045]) vs tensor([ 0.0412, -0.0177,  0.1045, -0.1674])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0177,  0.1045]) vs tensor([ 0.0412, -0.0177,  0.1045, -0.1674])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-4-3] __________________________

batch_shape = (), m = 3, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.1676,  0.4639, -0.0785])
b = tensor([ 0.1045, -0.0785,  0.5760, -0.1944]), prec = 1e-07
msg = 'tensor([-0.1676,  0.4639, -0.0785]) vs tensor([ 0.1045, -0.0785,  0.5760, -0.1944])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.1676,  0.4639, -0.0785]) vs tensor([ 0.1045, -0.0785,  0.5760, -0.1944])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-4-4] __________________________

batch_shape = (), m = 4, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([0.3516, 0.3455, 0.7575, 0.1775])
b = tensor([-0.1674,  0.5760,  0.1775,  0.2182]), prec = 1e-07
msg = 'tensor([0.3516, 0.3455, 0.7575, 0.1775]) vs tensor([-0.1674,  0.5760,  0.1775,  0.2182])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([0.3516, 0.3455, 0.7575, 0.1775]) vs tensor([-0.1674,  0.5760,  0.1775,  0.2182])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-4-5] __________________________

batch_shape = (), m = 5, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.2023,  0.9594, -0.4979,  0.1821,  0.3014])
b = tensor([ 0.1336, -0.1102,  0.1821,  0.3014,  1.2256]), prec = 1e-07
msg = 'tensor([ 1.2023,  0.9594, -0.4979,  0.1821,  0.3014]) vs tensor([ 0.1336, -0.1102,  0.1821,  0.3014,  1.2256])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([ 1.2023,  0.9594, -0.4979,  0.1821,  0.3014]) vs tensor([ 0.1336, -0.1102,  0.1821,  0.3014,  1.2256])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-4-6] __________________________

batch_shape = (), m = 6, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.4112,  0.1648,  0.2097,  0.5639,  1.2126,  0.6625])
b = tensor([-0.0329,  0.2324,  0.5639,  1.2126,  0.6625, -0.5196]), prec = 1e-07
msg = 'tensor([-0.4112,  0.1648,  0.2097,  0.5639,  1.2126,  0.6625]) vs tensor([-0.0329,  0.2324,  0.5639,  1.2126,  0.6625, -0.5196])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([-0.4112,  0.1648,  0.2097,  0.5639,  1.2126,  0.6625]) vs tensor([-0.0329,  0.2324,  0.5639,  1.2126,  0.6625, -0.5196])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
_________________________ test_convolve[same-()-4-10] __________________________

batch_shape = (), m = 10, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.4072,  0.2589, -0.2232,  0.0480, -0.1646,  0.2094, -0.7275, -0.5259,
         0.2740, -0.9737])
b = tensor([ 0.0689, -0.1510,  0.0480, -0.1646,  0.2094, -0.7275, -0.5259,  0.2740,
        -0.9737, -0.3838])
prec = 1e-07
msg = 'tensor([-0.4072,  0.2589, -0.2232,  0.0480, -0.1646,  0.2094, -0.7275, -0.5259,\n         0.2740, -0.9737]) vs tensor([ 0.0689, -0.1510,  0.0480, -0.1646,  0.2094, -0.7275, -0.5259,  0.2740,\n        -0.9737, -0.3838])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([-0.4072,  0.2589, -0.2232,  0.0480, -0.1646,  0.2094, -0.7275, -0.5259,
E                    0.2740, -0.9737]) vs tensor([ 0.0689, -0.1510,  0.0480, -0.1646,  0.2094, -0.7275, -0.5259,  0.2740,
E                   -0.9737, -0.3838])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-5-2] __________________________

batch_shape = (), m = 2, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0177,  0.1045])
b = tensor([ 0.0412, -0.0177,  0.1045, -0.1674,  0.1336]), prec = 1e-07
msg = 'tensor([-0.0177,  0.1045]) vs tensor([ 0.0412, -0.0177,  0.1045, -0.1674,  0.1336])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0177,  0.1045]) vs tensor([ 0.0412, -0.0177,  0.1045, -0.1674,  0.1336])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-5-3] __________________________

batch_shape = (), m = 3, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.3836, -0.0785,  0.5760])
b = tensor([ 0.1045, -0.0785,  0.5760, -0.1102,  0.2685]), prec = 1e-07
msg = 'tensor([ 0.3836, -0.0785,  0.5760]) vs tensor([ 0.1045, -0.0785,  0.5760, -0.1102,  0.2685])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.3836, -0.0785,  0.5760]) vs tensor([ 0.1045, -0.0785,  0.5760, -0.1102,  0.2685])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-5-4] __________________________

batch_shape = (), m = 4, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.6853, -0.1056,  0.4981,  0.1775])
b = tensor([-0.1674,  0.5760,  0.1775,  0.1821,  0.5518]), prec = 1e-07
msg = 'tensor([ 0.6853, -0.1056,  0.4981,  0.1775]) vs tensor([-0.1674,  0.5760,  0.1775,  0.1821,  0.5518])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.6853, -0.1056,  0.4981,  0.1775]) vs tensor([-0.1674,  0.5760,  0.1775,  0.1821,  0.5518])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-5-5] __________________________

batch_shape = (), m = 5, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.1892,  0.9995, -0.4718,  0.3120,  0.3135])
b = tensor([-0.1102,  0.1821,  0.3135,  1.2126,  0.8660]), prec = 1e-07
msg = 'tensor([ 1.1892,  0.9995, -0.4718,  0.3120,  0.3135]) vs tensor([-0.1102,  0.1821,  0.3135,  1.2126,  0.8660])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([ 1.1892,  0.9995, -0.4718,  0.3120,  0.3135]) vs tensor([-0.1102,  0.1821,  0.3135,  1.2126,  0.8660])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-5-6] __________________________

batch_shape = (), m = 6, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.4890,  0.1142, -0.0420,  0.6080,  1.1891,  0.6878])
b = tensor([ 0.2324,  0.5639,  1.1891,  0.6878, -0.5973,  0.1471]), prec = 1e-07
msg = 'tensor([-0.4890,  0.1142, -0.0420,  0.6080,  1.1891,  0.6878]) vs tensor([ 0.2324,  0.5639,  1.1891,  0.6878, -0.5973,  0.1471])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([-0.4890,  0.1142, -0.0420,  0.6080,  1.1891,  0.6878]) vs tensor([ 0.2324,  0.5639,  1.1891,  0.6878, -0.5973,  0.1471])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
_________________________ test_convolve[same-()-5-10] __________________________

batch_shape = (), m = 10, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.7503, -0.0075, -0.1089,  0.0097, -0.2039,  0.2519, -0.8579, -0.6107,
        -0.1483, -0.8999])
b = tensor([-0.1510,  0.0480, -0.2039,  0.2519, -0.8579, -0.6107, -0.1483, -0.8999,
        -0.7268, -0.0764])
prec = 1e-07
msg = 'tensor([-0.7503, -0.0075, -0.1089,  0.0097, -0.2039,  0.2519, -0.8579, -0.6107,\n        -0.1483, -0.8999]) vs tensor([-0.1510,  0.0480, -0.2039,  0.2519, -0.8579, -0.6107, -0.1483, -0.8999,\n        -0.7268, -0.0764])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([-0.7503, -0.0075, -0.1089,  0.0097, -0.2039,  0.2519, -0.8579, -0.6107,
E                   -0.1483, -0.8999]) vs tensor([-0.1510,  0.0480, -0.2039,  0.2519, -0.8579, -0.6107, -0.1483, -0.8999,
E                   -0.7268, -0.0764])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
__________________________ test_convolve[same-()-6-2] __________________________

batch_shape = (), m = 2, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1045, -0.1674])
b = tensor([ 0.0412, -0.0177,  0.1045, -0.1674,  0.1336, -0.0329]), prec = 1e-07
msg = 'tensor([ 0.1045, -0.1674]) vs tensor([ 0.0412, -0.0177,  0.1045, -0.1674,  0.1336, -0.0329])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1045, -0.1674]) vs tensor([ 0.0412, -0.0177,  0.1045, -0.1674,  0.1336, -0.0329])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-6-3] __________________________

batch_shape = (), m = 3, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.0152, -0.0785,  0.5760])
b = tensor([ 0.1045, -0.0785,  0.5760, -0.1102,  0.2324,  0.3181]), prec = 1e-07
msg = 'tensor([-0.0152, -0.0785,  0.5760]) vs tensor([ 0.1045, -0.0785,  0.5760, -0.1102,  0.2324,  0.3181])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.0152, -0.0785,  0.5760]) vs tensor([ 0.1045, -0.0785,  0.5760, -0.1102,  0.2324,  0.3181])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-6-4] __________________________

batch_shape = (), m = 4, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.2052,  0.6021,  0.1775,  0.1821])
b = tensor([-0.1674,  0.5760,  0.1775,  0.1821,  0.5639,  0.0487]), prec = 1e-07
msg = 'tensor([-0.2052,  0.6021,  0.1775,  0.1821]) vs tensor([-0.1674,  0.5760,  0.1775,  0.1821,  0.5639,  0.0487])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.2052,  0.6021,  0.1775,  0.1821]) vs tensor([-0.1674,  0.5760,  0.1775,  0.1821,  0.5639,  0.0487])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-6-5] __________________________

batch_shape = (), m = 5, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.8680, -0.3058, -0.0309, -0.0696,  0.3135])
b = tensor([-0.1102,  0.1821,  0.3135,  1.1891,  0.8913, -0.4393]), prec = 1e-07
msg = 'tensor([ 0.8680, -0.3058, -0.0309, -0.0696,  0.3135]) vs tensor([-0.1102,  0.1821,  0.3135,  1.1891,  0.8913, -0.4393])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.8680, -0.3058, -0.0309, -0.0696,  0.3135]) vs tensor([-0.1102,  0.1821,  0.3135,  1.1891,  0.8913, -0.4393])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
__________________________ test_convolve[same-()-6-6] __________________________

batch_shape = (), m = 6, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.5360,  0.2587,  0.0519,  1.0758,  1.1073,  0.7314])
b = tensor([ 0.2324,  0.5639,  1.1891,  0.7314, -0.6444,  0.2916]), prec = 1e-07
msg = 'tensor([-0.5360,  0.2587,  0.0519,  1.0758,  1.1073,  0.7314]) vs tensor([ 0.2324,  0.5639,  1.1891,  0.7314, -0.6444,  0.2916])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([-0.5360,  0.2587,  0.0519,  1.0758,  1.1073,  0.7314]) vs tensor([ 0.2324,  0.5639,  1.1891,  0.7314, -0.6444,  0.2916])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
_________________________ test_convolve[same-()-6-10] __________________________

batch_shape = (), m = 10, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.5467, -0.9535, -0.8434,  0.3248, -0.3095,  0.1435, -0.7408, -0.9703,
        -0.3822, -2.0643])
b = tensor([-0.1510,  0.0480, -0.2039,  0.1435, -0.7408, -0.9703, -0.3822, -2.0643,
        -0.5233, -1.0223])
prec = 1e-07
msg = 'tensor([-0.5467, -0.9535, -0.8434,  0.3248, -0.3095,  0.1435, -0.7408, -0.9703,\n        -0.3822, -2.0643]) vs tensor([-0.1510,  0.0480, -0.2039,  0.1435, -0.7408, -0.9703, -0.3822, -2.0643,\n        -0.5233, -1.0223])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([-0.5467, -0.9535, -0.8434,  0.3248, -0.3095,  0.1435, -0.7408, -0.9703,
E                   -0.3822, -2.0643]) vs tensor([-0.1510,  0.0480, -0.2039,  0.1435, -0.7408, -0.9703, -0.3822, -2.0643,
E                   -0.5233, -1.0223])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
_________________________ test_convolve[same-()-10-2] __________________________

batch_shape = (), m = 2, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1336, -0.0329])
b = tensor([ 0.0412, -0.0177,  0.1045, -0.1674,  0.1336, -0.0329, -0.1270,  0.0511,
        -0.0365,  0.0689])
prec = 1e-07
msg = 'tensor([ 0.1336, -0.0329]) vs tensor([ 0.0412, -0.0177,  0.1045, -0.1674,  0.1336, -0.0329, -0.1270,  0.0511,\n        -0.0365,  0.0689])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1336, -0.0329]) vs tensor([ 0.0412, -0.0177,  0.1045, -0.1674,  0.1336, -0.0329, -0.1270,  0.0511,
E               -0.0365,  0.0689])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-()-10-3] __________________________

batch_shape = (), m = 3, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.5760, -0.1102,  0.2324])
b = tensor([ 0.1045, -0.0785,  0.5760, -0.1102,  0.2324,  0.3302, -0.1562,  0.1090,
        -0.1510,  0.1728])
prec = 1e-07
msg = 'tensor([ 0.5760, -0.1102,  0.2324]) vs tensor([ 0.1045, -0.0785,  0.5760, -0.1102,  0.2324,  0.3302, -0.1562,  0.1090,\n        -0.1510,  0.1728])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.5760, -0.1102,  0.2324]) vs tensor([ 0.1045, -0.0785,  0.5760, -0.1102,  0.2324,  0.3302, -0.1562,  0.1090,
E               -0.1510,  0.1728])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-()-10-4] __________________________

batch_shape = (), m = 4, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([0.1775, 0.1821, 0.5639, 0.0253])
b = tensor([-0.1674,  0.5760,  0.1775,  0.1821,  0.5639,  0.0253,  0.0311, -0.1249,
         0.0480,  0.0872])
prec = 1e-07
msg = 'tensor([0.1775, 0.1821, 0.5639, 0.0253]) vs tensor([-0.1674,  0.5760,  0.1775,  0.1821,  0.5639,  0.0253,  0.0311, -0.1249,\n         0.0480,  0.0872])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([0.1775, 0.1821, 0.5639, 0.0253]) vs tensor([-0.1674,  0.5760,  0.1775,  0.1821,  0.5639,  0.0253,  0.0311, -0.1249,
E                0.0480,  0.0872])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-()-10-5] __________________________

batch_shape = (), m = 5, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.9913, -0.2402,  0.3135,  1.1891,  0.9349])
b = tensor([-0.1102,  0.1821,  0.3135,  1.1891,  0.9349, -0.5126,  0.1779, -0.2039,
         0.2079, -0.5716])
prec = 1e-07
msg = 'tensor([-0.9913, -0.2402,  0.3135,  1.1891,  0.9349]) vs tensor([-0.1102,  0.1821,  0.3135,  1.1891,  0.9349, -0.5126,  0.1779, -0.2039,\n         0.2079, -0.5716])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.9913, -0.2402,  0.3135,  1.1891,  0.9349]) vs tensor([-0.1102,  0.1821,  0.3135,  1.1891,  0.9349, -0.5126,  0.1779, -0.2039,
E                0.2079, -0.5716])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-()-10-6] __________________________

batch_shape = (), m = 6, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.2845, -0.5266,  1.3927,  0.7314, -0.6706,  0.2457])
b = tensor([ 0.2324,  0.5639,  1.1891,  0.7314, -0.6706,  0.2457, -0.2266,  0.1435,
        -0.5363, -1.1915])
prec = 1e-07
msg = 'tensor([-0.2845, -0.5266,  1.3927,  0.7314, -0.6706,  0.2457]) vs tensor([ 0.2324,  0.5639,  1.1891,  0.7314, -0.6706,  0.2457, -0.2266,  0.1435,\n        -0.5363, -1.1915])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.2845, -0.5266,  1.3927,  0.7314, -0.6706,  0.2457]) vs tensor([ 0.2324,  0.5639,  1.1891,  0.7314, -0.6706,  0.2457, -0.2266,  0.1435,
E               -0.5363, -1.1915])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-()-10-10] _________________________

batch_shape = (), m = 10, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.1648,  0.3701, -0.3250,  1.6280,  0.7156,  0.6313, -0.4705, -0.9633,
        -0.3758, -1.7365])
b = tensor([-0.2039,  0.1435, -0.7365, -0.8762, -0.4221, -1.7365, -0.1413,  0.3012,
        -0.1741,  1.5800])
prec = 1e-07
msg = 'tensor([-0.1648,  0.3701, -0.3250,  1.6280,  0.7156,  0.6313, -0.4705, -0.9633,\n        -0.3758, -1.7365]) vs tensor([-0.2039,  0.1435, -0.7365, -0.8762, -0.4221, -1.7365, -0.1413,  0.3012,\n        -0.1741,  1.5800])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
        assert a.size() == b.size(), msg
        if isinstance(prec, numbers.Number) and prec == 0:
            assert (a == b).all(), msg
            return
        if a.numel() == 0 and b.numel() == 0:
            return
        b = b.type_as(a)
        b = b.cuda(device=a.get_device()) if a.is_cuda else b.cpu()
        if not a.dtype.is_floating_point:
            assert (a == b).all(), msg
            return
        # check that NaNs are in the same locations
        nan_mask = a != a
        assert torch.equal(nan_mask, b != b), msg
        diff = a - b
        diff[a == b] = 0  # handle inf
        diff[nan_mask] = 0
        if diff.is_signed():
            diff = diff.abs()
        if isinstance(prec, torch.Tensor):
            assert (diff <= prec).all(), msg
        else:
            max_err = diff.max().item()
>           assert max_err <= prec, msg
E           AssertionError: tensor([-0.1648,  0.3701, -0.3250,  1.6280,  0.7156,  0.6313, -0.4705, -0.9633,
E                   -0.3758, -1.7365]) vs tensor([-0.2039,  0.1435, -0.7365, -0.8762, -0.4221, -1.7365, -0.1413,  0.3012,
E                   -0.1741,  1.5800])

../publishablew/pyro/pyro/tests/common.py:170: AssertionError
_________________________ test_convolve[same-(4,)-2-2] _________________________

batch_shape = (4,), m = 2, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.6950, -0.9192, -0.6066, -1.8837, -1.1544, -0.9666, -1.2761,  0.0044])
b = tensor([[-0.0361,  0.0511],
        [-0.0777,  0.0939],
        [-0.2812, -0.7471],
        [-0.3431, -1.2123]])
prec = 1e-07
msg = 'tensor([-0.6950, -0.9192, -0.6066, -1.8837, -1.1544, -0.9666, -1.2761,  0.0044]) vs tensor([[-0.0361,  0.0511],\n        [-0.0777,  0.0939],\n        [-0.2812, -0.7471],\n        [-0.3431, -1.2123]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.6950, -0.9192, -0.6066, -1.8837, -1.1544, -0.9666, -1.2761,  0.0044]) vs tensor([[-0.0361,  0.0511],
E               [-0.0777,  0.0939],
E               [-0.2812, -0.7471],
E               [-0.3431, -1.2123]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-2-3] _________________________

batch_shape = (4,), m = 3, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.7075,  0.5087, -0.1685, -0.6268, -0.1566, -1.0031, -0.6185, -1.5871,
        -0.1837,  0.3012, -0.1246,  1.6281])
b = tensor([[-0.0262, -0.0459, -0.0068],
        [-0.0848, -0.6562, -1.0906],
        [ 0.0375,  0.8908,  0.6565],
        [ 0.0511, -0.0527,  0.0943]])
prec = 1e-07
msg = 'tensor([ 0.7075,  0.5087, -0.1685, -0.6268, -0.1566, -1.0031, -0.6185, -1.5871,\n        -0.1837,  0.3012, -0.1246,  ...8],\n        [-0.0848, -0.6562, -1.0906],\n        [ 0.0375,  0.8908,  0.6565],\n        [ 0.0511, -0.0527,  0.0943]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.7075,  0.5087, -0.1685, -0.6268, -0.1566, -1.0031, -0.6185, -1.5871,
E               -0.1837,  0.3012, -0.1246,  1.6281]) vs tensor([[-0.0262, -0.0459, -0.0068],
E               [-0.0848, -0.6562, -1.0906],
E               [ 0.0375,  0.8908,  0.6565],
E               [ 0.0511, -0.0527,  0.0943]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-2-4] _________________________

batch_shape = (4,), m = 4, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.9806,  0.7813,  0.1712, -0.6461, -1.3955, -0.8821, -1.2646, -0.6159,
         0.7614,  0.3897,  0.4243,  1.4063, -1.6046, -1.0409, -0.5392, -3.6113])
b = tensor([[-0.0351, -0.8121, -0.1607, -0.5763],
        [-0.1774, -0.2668, -0.3150,  0.2998],
        [ 0.0086, -0.4351,  0.1147, -1.6832],
        [-0.4144, -1.4135, -1.5611, -1.3855]])
prec = 1e-07
msg = 'tensor([-0.9806,  0.7813,  0.1712, -0.6461, -1.3955, -0.8821, -1.2646, -0.6159,\n         0.7614,  0.3897,  0.4243,  ...668, -0.3150,  0.2998],\n        [ 0.0086, -0.4351,  0.1147, -1.6832],\n        [-0.4144, -1.4135, -1.5611, -1.3855]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.9806,  0.7813,  0.1712, -0.6461, -1.3955, -0.8821, -1.2646, -0.6159,
E                0.7614,  0.3897,  0.4243,  1.4063, -1.6046, -1.0409, -0.5392, -3.6113]) vs tensor([[-0.0351, -0.8121, -0.1607, -0.5763],
E               [-0.1774, -0.2668, -0.3150,  0.2998],
E               [ 0.0086, -0.4351,  0.1147, -1.6832],
E               [-0.4144, -1.4135, -1.5611, -1.3855]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-2-5] _________________________

batch_shape = (4,), m = 5, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-4.2587,  0.7442, -0.1640, -3.0137,  0.1744, -4.9687,  0.6464, -1.8437,
        -0.8156,  0.9909,  1.5448,  4.5939, -6.8390,  3.4505,  2.7499, -4.3152,
         2.1576,  0.5198, -2.2542,  3.6596])
b = tensor([[ 0.6632,  1.2743,  0.6589,  1.0776, -0.0811],
        [-0.1053,  0.9908,  1.1494,  0.9250,  0.3700],
        [ 2.0935, -3.9172,  1.4500,  1.7106, -3.1693],
        [ 0.3849, -0.8810, -0.6983,  0.0474, -1.7613]])
prec = 1e-07
msg = 'tensor([-4.2587,  0.7442, -0.1640, -3.0137,  0.1744, -4.9687,  0.6464, -1.8437,\n        -0.8156,  0.9909,  1.5448,  ...700],\n        [ 2.0935, -3.9172,  1.4500,  1.7106, -3.1693],\n        [ 0.3849, -0.8810, -0.6983,  0.0474, -1.7613]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-4.2587,  0.7442, -0.1640, -3.0137,  0.1744, -4.9687,  0.6464, -1.8437,
E               -0.8156,  0.9909,  1.5448,  4.5939, -6.8390,  3.4505,  2.7499, -4.3152,
E                2.1576,  0.5198, -2.2542,  3.6596]) vs tensor([[ 0.6632,  1.2743,  0.6589,  1.0776, -0.0811],
E               [-0.1053,  0.9908,  1.1494,  0.9250,  0.3700],
E               [ 2.0935, -3.9172,  1.4500,  1.7106, -3.1693],
E               [ 0.3849, -0.8810, -0.6983,  0.0474, -1.7613]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-2-6] _________________________

batch_shape = (4,), m = 6, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 3.2678,  3.3558, -0.5611, -3.2945, -1.5806,  0.0903, -0.0858,  0.4574,
         1.4333,  3.1730,  2.8376, -1.5408, -1.0150, -5.2836,  3.5929,  2.7214,
        -0.3462,  3.7381, -1.5624, -4.0512,  1.5300, -2.9872,  2.1872,  3.0008])
b = tensor([[ 0.9850, -1.0928,  0.4740, -0.4812, -0.0996, -0.2776],
        [ 0.1875, -0.9955,  0.8615,  1.6991, -0.3855, ... 0.4252,  1.0663, -1.5011, -1.9609,  0.6119,  1.8743],
        [-0.0390,  1.4916, -0.1128,  1.1365, -0.6305, -1.1256]])
prec = 1e-07
msg = 'tensor([ 3.2678,  3.3558, -0.5611, -3.2945, -1.5806,  0.0903, -0.0858,  0.4574,\n         1.4333,  3.1730,  2.8376, -....4252,  1.0663, -1.5011, -1.9609,  0.6119,  1.8743],\n        [-0.0390,  1.4916, -0.1128,  1.1365, -0.6305, -1.1256]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 3.2678,  3.3558, -0.5611, -3.2945, -1.5806,  0.0903, -0.0858,  0.4574,
E                1.4333,  3.1730,  2.8376, -1.5408, -1.0150, -5.2836,  3.5929,  2.7214,
E               -0.3462,  3.7381, -1.5624, -4.0512,  1.5300, -2.9872,  2.1872,  3.0008]) vs tensor([[ 0.9850, -1.0928,  0.4740, -0.4812, -0.0996, -0.2776],
E               [ 0.1875, -0.9955,  0.8615,  1.6991, -0.3855, -2.8288],
E               [ 0.4252,  1.0663, -1.5011, -1.9609,  0.6119,  1.8743],
E               [-0.0390,  1.4916, -0.1128,  1.1365, -0.6305, -1.1256]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-2-10] _________________________

batch_shape = (4,), m = 10, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-6.6045, -1.3154, -7.7330,  1.3072,  0.5351, -3.1558,  2.0792, -4.2104,
        -1.4229, -3.2403, -1.9154, -2....3,  0.3348, -5.5532,  0.3134, -8.6376,
         3.0592, -4.2053,  3.9126, -1.1569, -0.1530,  5.6858, -6.9585,  1.9792])
b = tensor([[ 0.7174,  0.4131,  0.5495,  0.4925,  0.4146,  0.2984,  0.4387, -0.6852,
         -0.5797, -0.0527],
        [...-2.2317],
        [ 0.4168, -0.9128, -1.5055,  2.6981, -2.4352, -0.2662, -1.5544,  0.7725,
         -3.6049, -0.3379]])
prec = 1e-07
msg = 'tensor([-6.6045, -1.3154, -7.7330,  1.3072,  0.5351, -3.1558,  2.0792, -4.2104,\n        -1.4229, -3.2403, -1.9154, -...2317],\n        [ 0.4168, -0.9128, -1.5055,  2.6981, -2.4352, -0.2662, -1.5544,  0.7725,\n         -3.6049, -0.3379]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-6.6045, -1.3154, -7.7330,  1.3072,  0.5351, -3.1558,  2.0792, -4.2104,
E               -1.4229, -3.2403, -1.9154, -2.2573,  3.4998,  1.6730,  3.4157,  6.2393,
E               -1.8373, -2.6457, -4.6292, -5.7078, -3.0113,  2.3938, -0.1588, -2.4719,
E                4.5496,  1.6516,  2.9657,  4.7033,  0.3348, -5.5532,  0.3134, -8.6376,
E                3.0592, -4.2053,  3.9126, -1.1569, -0.1530,  5.6858, -6.9585,  1.9792]) vs tensor([[ 0.7174,  0.4131,  0.5495,  0.4925,  0.4146,  0.2984,  0.4387, -0.6852,
E                -0.5797, -0.0527],
E               [-0.9967,  0.6340,  0.8130,  0.6236,  0.6513,  0.0683, -1.5106, -0.1077,
E                 1.3792, -1.0045],
E               [-0.0774,  2.6711, -0.4500,  3.6678, -0.4752, -5.7117, -1.4427, -6.1362,
E                 2.6430, -2.2317],
E               [ 0.4168, -0.9128, -1.5055,  2.6981, -2.4352, -0.2662, -1.5544,  0.7725,
E                -3.6049, -0.3379]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-3-2] _________________________

batch_shape = (4,), m = 2, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.3724,  1.3343,  0.5250,  1.0164, -0.2192,  0.0044, -0.6546, -0.8762])
b = tensor([[-0.0361,  0.0511, -0.0365],
        [ 0.1445,  0.0071, -0.3024],
        [-0.4223, -1.0906,  0.2498],
        [ 0.8616,  1.1269,  0.7707]])
prec = 1e-07
msg = 'tensor([-0.3724,  1.3343,  0.5250,  1.0164, -0.2192,  0.0044, -0.6546, -0.8762]) vs tensor([[-0.0361,  0.0511, -0.0365],\n        [ 0.1445,  0.0071, -0.3024],\n        [-0.4223, -1.0906,  0.2498],\n        [ 0.8616,  1.1269,  0.7707]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.3724,  1.3343,  0.5250,  1.0164, -0.2192,  0.0044, -0.6546, -0.8762]) vs tensor([[-0.0361,  0.0511, -0.0365],
E               [ 0.1445,  0.0071, -0.3024],
E               [-0.4223, -1.0906,  0.2498],
E               [ 0.8616,  1.1269,  0.7707]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-3-3] _________________________

batch_shape = (4,), m = 3, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.4360, -0.7768,  0.8358, -1.0038, -1.0479,  0.6197, -0.2324, -1.5232,
        -0.7215,  0.1039,  0.4483,  1.1617])
b = tensor([[-0.0459, -0.0461, -0.2034],
        [-1.1551,  0.4628,  1.0525],
        [ 0.7707,  0.1973, -0.1169],
        [ 0.3413, -0.5409, -0.0354]])
prec = 1e-07
msg = 'tensor([ 0.4360, -0.7768,  0.8358, -1.0038, -1.0479,  0.6197, -0.2324, -1.5232,\n        -0.7215,  0.1039,  0.4483,  ...4],\n        [-1.1551,  0.4628,  1.0525],\n        [ 0.7707,  0.1973, -0.1169],\n        [ 0.3413, -0.5409, -0.0354]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.4360, -0.7768,  0.8358, -1.0038, -1.0479,  0.6197, -0.2324, -1.5232,
E               -0.7215,  0.1039,  0.4483,  1.1617]) vs tensor([[-0.0459, -0.0461, -0.2034],
E               [-1.1551,  0.4628,  1.0525],
E               [ 0.7707,  0.1973, -0.1169],
E               [ 0.3413, -0.5409, -0.0354]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-3-4] _________________________

batch_shape = (4,), m = 4, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1544, -0.4745,  1.3763, -0.2157, -3.8113, -1.7272, -1.9336, -0.8869,
         0.5306,  0.0332,  0.4789,  0.5952, -1.4950, -1.2712, -0.8192, -2.6943])
b = tensor([[-0.8121, -0.5891, -0.6487, -0.6235],
        [-0.1068,  0.3308,  0.7587,  0.6909],
        [ 0.2492,  0.6998,  0.8993,  0.9136],
        [ 0.6598,  0.3333,  0.6426,  0.1630]])
prec = 1e-07
msg = 'tensor([ 0.1544, -0.4745,  1.3763, -0.2157, -3.8113, -1.7272, -1.9336, -0.8869,\n         0.5306,  0.0332,  0.4789,  ...308,  0.7587,  0.6909],\n        [ 0.2492,  0.6998,  0.8993,  0.9136],\n        [ 0.6598,  0.3333,  0.6426,  0.1630]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1544, -0.4745,  1.3763, -0.2157, -3.8113, -1.7272, -1.9336, -0.8869,
E                0.5306,  0.0332,  0.4789,  0.5952, -1.4950, -1.2712, -0.8192, -2.6943]) vs tensor([[-0.8121, -0.5891, -0.6487, -0.6235],
E               [-0.1068,  0.3308,  0.7587,  0.6909],
E               [ 0.2492,  0.6998,  0.8993,  0.9136],
E               [ 0.6598,  0.3333,  0.6426,  0.1630]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-3-5] _________________________

batch_shape = (4,), m = 5, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-5.9342,  3.5309,  0.9917, -4.9805,  4.3126, -4.2942,  3.5693,  1.9670,
         0.0586,  4.6045,  2.2218,  7.2102, -6.4118,  2.5089,  2.6475, -7.2725,
         1.9377, -2.2852,  1.4323,  5.9772])
b = tensor([[ 1.2743, -0.3251,  0.9113, -0.7672, -1.3592],
        [ 1.4517, -1.4908,  3.0273, -2.6557,  2.5182],
        [-2.8288,  2.7088, -0.0778, -2.2740,  2.3582],
        [ 1.5483,  1.9314,  3.8662,  0.2357,  1.4916]])
prec = 1e-07
msg = 'tensor([-5.9342,  3.5309,  0.9917, -4.9805,  4.3126, -4.2942,  3.5693,  1.9670,\n         0.0586,  4.6045,  2.2218,  ...182],\n        [-2.8288,  2.7088, -0.0778, -2.2740,  2.3582],\n        [ 1.5483,  1.9314,  3.8662,  0.2357,  1.4916]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-5.9342,  3.5309,  0.9917, -4.9805,  4.3126, -4.2942,  3.5693,  1.9670,
E                0.0586,  4.6045,  2.2218,  7.2102, -6.4118,  2.5089,  2.6475, -7.2725,
E                1.9377, -2.2852,  1.4323,  5.9772]) vs tensor([[ 1.2743, -0.3251,  0.9113, -0.7672, -1.3592],
E               [ 1.4517, -1.4908,  3.0273, -2.6557,  2.5182],
E               [-2.8288,  2.7088, -0.0778, -2.2740,  2.3582],
E               [ 1.5483,  1.9314,  3.8662,  0.2357,  1.4916]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-3-6] _________________________

batch_shape = (4,), m = 6, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 2.7504,  3.1262,  0.7160, -3.3103,  0.4110, -0.3568,  0.4523,  0.2101,
         1.0903,  1.9989,  3.7487, -1.1936, -0.3414, -4.8052,  4.2011,  2.2453,
        -0.0800,  3.8817, -2.0646, -4.8912,  4.2719, -3.9261,  2.0495,  3.1929])
b = tensor([[-1.0928,  0.8409, -0.4192,  0.1563, -0.1297, -0.1597],
        [ 1.6210,  1.6016, -4.2617, -4.0772,  4.8677, ... 0.6495, -0.0454, -1.1740, -0.4765,  0.7667,  0.8526],
        [ 1.2747, -0.0923,  1.1531,  0.1508, -0.8580, -0.9136]])
prec = 1e-07
msg = 'tensor([ 2.7504,  3.1262,  0.7160, -3.3103,  0.4110, -0.3568,  0.4523,  0.2101,\n         1.0903,  1.9989,  3.7487, -....6495, -0.0454, -1.1740, -0.4765,  0.7667,  0.8526],\n        [ 1.2747, -0.0923,  1.1531,  0.1508, -0.8580, -0.9136]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 2.7504,  3.1262,  0.7160, -3.3103,  0.4110, -0.3568,  0.4523,  0.2101,
E                1.0903,  1.9989,  3.7487, -1.1936, -0.3414, -4.8052,  4.2011,  2.2453,
E               -0.0800,  3.8817, -2.0646, -4.8912,  4.2719, -3.9261,  2.0495,  3.1929]) vs tensor([[-1.0928,  0.8409, -0.4192,  0.1563, -0.1297, -0.1597],
E               [ 1.6210,  1.6016, -4.2617, -4.0772,  4.8677,  3.4766],
E               [ 0.6495, -0.0454, -1.1740, -0.4765,  0.7667,  0.8526],
E               [ 1.2747, -0.0923,  1.1531,  0.1508, -0.8580, -0.9136]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-3-10] _________________________

batch_shape = (4,), m = 10, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-6.8769, -0.6476, -6.4713,  2.7974,  1.6203, -1.0922,  3.5741, -4.3843,
        -1.2978, -2.7437, -1.1647, -1....1, -0.3475, -6.0874, -0.5764, -9.1904,
         4.1231, -2.7852,  5.8616, -0.3894,  0.2353,  5.4583, -6.7514,  2.7418])
b = tensor([[ 0.4131,  1.3188,  0.6225,  0.9510,  0.6083,  0.7572, -0.4948, -0.1867,
         -0.9473, -0.2394],
        [... 1.5818],
        [ 0.5529, -0.5672,  0.8771,  0.7174,  0.8854,  0.4531,  1.5636,  0.4759,
         -0.5373, -0.2166]])
prec = 1e-07
msg = 'tensor([-6.8769, -0.6476, -6.4713,  2.7974,  1.6203, -1.0922,  3.5741, -4.3843,\n        -1.2978, -2.7437, -1.1647, -...5818],\n        [ 0.5529, -0.5672,  0.8771,  0.7174,  0.8854,  0.4531,  1.5636,  0.4759,\n         -0.5373, -0.2166]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-6.8769, -0.6476, -6.4713,  2.7974,  1.6203, -1.0922,  3.5741, -4.3843,
E               -1.2978, -2.7437, -1.1647, -1.5036,  4.1732,  2.1950,  4.0054,  5.8428,
E               -2.6397, -3.0428, -5.5584, -6.3051, -2.3528,  3.9865,  1.8266, -0.8450,
E                4.2081,  0.2775,  3.0562,  4.8641, -0.3475, -6.0874, -0.5764, -9.1904,
E                4.1231, -2.7852,  5.8616, -0.3894,  0.2353,  5.4583, -6.7514,  2.7418]) vs tensor([[ 0.4131,  1.3188,  0.6225,  0.9510,  0.6083,  0.7572, -0.4948, -0.1867,
E                -0.9473, -0.2394],
E               [-0.2098,  3.8013, -1.1882, -4.1067, -4.3124, -3.9110, -2.0971,  4.8063,
E                 3.1051, -4.6496],
E               [ 1.2640, -1.2719,  1.8307, -0.1503, -2.2357,  1.3924, -2.8242,  2.7588,
E                -1.9023,  1.5818],
E               [ 0.5529, -0.5672,  0.8771,  0.7174,  0.8854,  0.4531,  1.5636,  0.4759,
E                -0.5373, -0.2166]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-4-2] _________________________

batch_shape = (4,), m = 2, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.8428,  0.2302,  1.1225, -0.0529,  1.9151,  1.4333,  1.3480,  1.5621])
b = tensor([[ 0.0118,  0.0046,  0.1364, -0.1877],
        [ 0.0049,  0.1740,  0.2084,  0.3357],
        [ 2.9130, -0.8734,  1.5735, -0.7487],
        [-0.6421,  0.0197,  0.9888, -0.2510]])
prec = 1e-07
msg = 'tensor([ 1.8428,  0.2302,  1.1225, -0.0529,  1.9151,  1.4333,  1.3480,  1.5621]) vs tensor([[ 0.0118,  0.0046,  0.136...740,  0.2084,  0.3357],\n        [ 2.9130, -0.8734,  1.5735, -0.7487],\n        [-0.6421,  0.0197,  0.9888, -0.2510]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.8428,  0.2302,  1.1225, -0.0529,  1.9151,  1.4333,  1.3480,  1.5621]) vs tensor([[ 0.0118,  0.0046,  0.1364, -0.1877],
E               [ 0.0049,  0.1740,  0.2084,  0.3357],
E               [ 2.9130, -0.8734,  1.5735, -0.7487],
E               [-0.6421,  0.0197,  0.9888, -0.2510]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-4-3] _________________________

batch_shape = (4,), m = 3, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.9596,  0.0444,  0.2600,  1.6876,  0.0569,  2.5818,  1.5427,  1.6433,
         0.1615,  2.5114, -1.3742,  0.0223])
b = tensor([[ 0.0499, -0.0214,  0.2213,  0.0086],
        [ 2.0024,  0.3002, -1.5647,  1.0282],
        [ 0.0197,  1.2027, -0.4237, -0.7438],
        [-0.1823,  0.3950, -0.2765,  0.2035]])
prec = 1e-07
msg = 'tensor([ 0.9596,  0.0444,  0.2600,  1.6876,  0.0569,  2.5818,  1.5427,  1.6433,\n         0.1615,  2.5114, -1.3742,  ...002, -1.5647,  1.0282],\n        [ 0.0197,  1.2027, -0.4237, -0.7438],\n        [-0.1823,  0.3950, -0.2765,  0.2035]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.9596,  0.0444,  0.2600,  1.6876,  0.0569,  2.5818,  1.5427,  1.6433,
E                0.1615,  2.5114, -1.3742,  0.0223]) vs tensor([[ 0.0499, -0.0214,  0.2213,  0.0086],
E               [ 2.0024,  0.3002, -1.5647,  1.0282],
E               [ 0.0197,  1.2027, -0.4237, -0.7438],
E               [-0.1823,  0.3950, -0.2765,  0.2035]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-4-4] _________________________

batch_shape = (4,), m = 4, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-1.0637, -1.1167, -1.1517, -2.6231, -3.6351, -0.3348, -3.1683, -1.3321,
         1.5916, -1.8772,  1.2033,  2.9384, -3.5790,  1.2035, -1.2606,  0.8613])
b = tensor([[-0.9400,  0.0996, -1.4241,  0.4417],
        [-0.1330, -0.7176,  0.6785, -0.5423],
        [-0.1674,  0.9333, -0.7110,  0.6797],
        [ 1.3628,  0.3458,  1.4275,  0.6060]])
prec = 1e-07
msg = 'tensor([-1.0637, -1.1167, -1.1517, -2.6231, -3.6351, -0.3348, -3.1683, -1.3321,\n         1.5916, -1.8772,  1.2033,  ...176,  0.6785, -0.5423],\n        [-0.1674,  0.9333, -0.7110,  0.6797],\n        [ 1.3628,  0.3458,  1.4275,  0.6060]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-1.0637, -1.1167, -1.1517, -2.6231, -3.6351, -0.3348, -3.1683, -1.3321,
E                1.5916, -1.8772,  1.2033,  2.9384, -3.5790,  1.2035, -1.2606,  0.8613]) vs tensor([[-0.9400,  0.0996, -1.4241,  0.4417],
E               [-0.1330, -0.7176,  0.6785, -0.5423],
E               [-0.1674,  0.9333, -0.7110,  0.6797],
E               [ 1.3628,  0.3458,  1.4275,  0.6060]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-4-5] _________________________

batch_shape = (4,), m = 5, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 3.1601e+00, -5.7018e-01, -3.6889e-04,  7.3244e+00,  3.1991e+00,
        -2.4575e+00,  6.7818e+00, -1.8019e+00...0e+00, -6.1597e+00,  3.6776e+00,  3.5576e+00,
         2.2761e+00,  1.0100e+00,  1.7196e+00, -7.4907e-01,  3.7651e-01])
b = tensor([[ 1.2481,  0.2882, -0.4668,  0.0969, -1.9857],
        [-1.6408, -0.0098, -3.5141,  2.1279, -1.5409],
        [-1.8304,  3.3822,  0.7179, -2.5455,  2.6047],
        [ 0.8361,  1.2408,  0.5578,  3.4646,  1.0652]])
prec = 1e-07
msg = 'tensor([ 3.1601e+00, -5.7018e-01, -3.6889e-04,  7.3244e+00,  3.1991e+00,\n        -2.4575e+00,  6.7818e+00, -1.8019e+...409],\n        [-1.8304,  3.3822,  0.7179, -2.5455,  2.6047],\n        [ 0.8361,  1.2408,  0.5578,  3.4646,  1.0652]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 3.1601e+00, -5.7018e-01, -3.6889e-04,  7.3244e+00,  3.1991e+00,
E               -2.4575e+00,  6.7818e+00, -1.8019e+00,  4.5220e+00,  8.2344e-01,
E                2.6333e-01,  8.7160e+00, -6.1597e+00,  3.6776e+00,  3.5576e+00,
E                2.2761e+00,  1.0100e+00,  1.7196e+00, -7.4907e-01,  3.7651e-01]) vs tensor([[ 1.2481,  0.2882, -0.4668,  0.0969, -1.9857],
E               [-1.6408, -0.0098, -3.5141,  2.1279, -1.5409],
E               [-1.8304,  3.3822,  0.7179, -2.5455,  2.6047],
E               [ 0.8361,  1.2408,  0.5578,  3.4646,  1.0652]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-4-6] _________________________

batch_shape = (4,), m = 6, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-3.2167, -0.7248,  3.1720,  1.9265,  2.2749,  5.4510,  3.6444,  1.1576,
        -4.8958,  0.1834,  0.7188, -0.9210,  3.7192,  1.4060,  0.8390, -0.2463,
         3.6968, -1.3269,  1.2868,  5.7276, -0.1568, -1.9376,  4.0657, -0.1390])
b = tensor([[ 0.6679,  2.6667,  0.4878,  1.7589,  0.7056,  0.4819],
        [-0.9758,  0.4449,  0.7994, -0.9022, -1.9488, ... 1.4594,  0.6473, -1.1499, -1.5889, -0.1936,  1.1540],
        [ 3.1040, -0.0171,  0.9232, -1.7139, -3.4844, -0.8935]])
prec = 1e-07
msg = 'tensor([-3.2167, -0.7248,  3.1720,  1.9265,  2.2749,  5.4510,  3.6444,  1.1576,\n        -4.8958,  0.1834,  0.7188, -....4594,  0.6473, -1.1499, -1.5889, -0.1936,  1.1540],\n        [ 3.1040, -0.0171,  0.9232, -1.7139, -3.4844, -0.8935]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-3.2167, -0.7248,  3.1720,  1.9265,  2.2749,  5.4510,  3.6444,  1.1576,
E               -4.8958,  0.1834,  0.7188, -0.9210,  3.7192,  1.4060,  0.8390, -0.2463,
E                3.6968, -1.3269,  1.2868,  5.7276, -0.1568, -1.9376,  4.0657, -0.1390]) vs tensor([[ 0.6679,  2.6667,  0.4878,  1.7589,  0.7056,  0.4819],
E               [-0.9758,  0.4449,  0.7994, -0.9022, -1.9488,  2.8153],
E               [ 1.4594,  0.6473, -1.1499, -1.5889, -0.1936,  1.1540],
E               [ 3.1040, -0.0171,  0.9232, -1.7139, -3.4844, -0.8935]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-4-10] _________________________

batch_shape = (4,), m = 10, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.9206,  4.2329, -6.0500,  7.5569,  9.5579, -5.8967,  6.5369, -1.4207,
         6.6055, -3.3987,  5.4736,  2....3,  8.6825, -6.4005, -0.3193, -2.7728,
         5.3729,  2.4641,  1.6225, -2.1307, -0.9801, 10.1750, -7.1669, 13.6814])
b = tensor([[-0.5350,  2.1797,  0.8751,  1.4776,  1.2451,  1.1852,  0.2898,  1.8704,
         -1.8249, -1.7004],
        [...-0.3225],
        [ 0.7522,  3.2435, -4.1046,  3.4161, -1.7330,  4.3364, -2.1200,  6.5801,
          2.1322,  1.0269]])
prec = 1e-07
msg = 'tensor([ 0.9206,  4.2329, -6.0500,  7.5569,  9.5579, -5.8967,  6.5369, -1.4207,\n         6.6055, -3.3987,  5.4736,  ...3225],\n        [ 0.7522,  3.2435, -4.1046,  3.4161, -1.7330,  4.3364, -2.1200,  6.5801,\n          2.1322,  1.0269]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.9206,  4.2329, -6.0500,  7.5569,  9.5579, -5.8967,  6.5369, -1.4207,
E                6.6055, -3.3987,  5.4736,  2.7457,  1.3945,  0.5003, -1.0320,  8.3971,
E                0.7885,  0.9105, -3.2074, -1.6426,  2.5557,  7.0530, -0.3917, -8.3361,
E                0.3434, -0.9734,  2.2153,  7.1513,  8.6825, -6.4005, -0.3193, -2.7728,
E                5.3729,  2.4641,  1.6225, -2.1307, -0.9801, 10.1750, -7.1669, 13.6814]) vs tensor([[-0.5350,  2.1797,  0.8751,  1.4776,  1.2451,  1.1852,  0.2898,  1.8704,
E                -1.8249, -1.7004],
E               [ 3.2872, -2.5720, -3.4412, -0.8782, -0.1938,  1.4623,  6.4272,  0.3086,
E                -6.6022,  3.2785],
E               [-0.4059, -0.4401, -0.6375,  0.1700,  0.9279,  1.2393,  1.2232,  0.3712,
E                 0.2218, -0.3225],
E               [ 0.7522,  3.2435, -4.1046,  3.4161, -1.7330,  4.3364, -2.1200,  6.5801,
E                 2.1322,  1.0269]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-5-2] _________________________

batch_shape = (4,), m = 2, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.8756, -0.3923,  1.1467,  1.7345,  0.0202, -0.3686,  0.1055,  1.2317])
b = tensor([[ 0.0118,  0.0046,  0.1364, -0.1877, -0.0457],
        [ 0.1449,  0.4276,  0.1980, -0.2450, -0.1827],
        [-0.1724,  1.3473, -1.5012,  0.9723,  1.1691],
        [ 0.6837,  1.3138,  0.9608,  0.6989,  0.7857]])
prec = 1e-07
msg = 'tensor([ 1.8756, -0.3923,  1.1467,  1.7345,  0.0202, -0.3686,  0.1055,  1.2317]) vs tensor([[ 0.0118,  0.0046,  0.136...827],\n        [-0.1724,  1.3473, -1.5012,  0.9723,  1.1691],\n        [ 0.6837,  1.3138,  0.9608,  0.6989,  0.7857]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.8756, -0.3923,  1.1467,  1.7345,  0.0202, -0.3686,  0.1055,  1.2317]) vs tensor([[ 0.0118,  0.0046,  0.1364, -0.1877, -0.0457],
E               [ 0.1449,  0.4276,  0.1980, -0.2450, -0.1827],
E               [-0.1724,  1.3473, -1.5012,  0.9723,  1.1691],
E               [ 0.6837,  1.3138,  0.9608,  0.6989,  0.7857]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-5-3] _________________________

batch_shape = (4,), m = 3, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.4215, -1.0463,  0.4324,  0.9805, -0.0791,  0.6428, -0.1810,  0.1120,
        -0.6452, -0.1857,  2.1034,  0.0911])
b = tensor([[ 0.0499, -0.0214,  0.2213, -0.0616,  0.3482],
        [-0.1360,  0.1099,  1.3033, -0.7716, -1.5667],
        [ 1.5019,  1.9151,  0.4699,  0.4381,  0.2124],
        [-0.1612,  0.3702, -0.5077,  0.4548, -0.3995]])
prec = 1e-07
msg = 'tensor([-0.4215, -1.0463,  0.4324,  0.9805, -0.0791,  0.6428, -0.1810,  0.1120,\n        -0.6452, -0.1857,  2.1034,  ...667],\n        [ 1.5019,  1.9151,  0.4699,  0.4381,  0.2124],\n        [-0.1612,  0.3702, -0.5077,  0.4548, -0.3995]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.4215, -1.0463,  0.4324,  0.9805, -0.0791,  0.6428, -0.1810,  0.1120,
E               -0.6452, -0.1857,  2.1034,  0.0911]) vs tensor([[ 0.0499, -0.0214,  0.2213, -0.0616,  0.3482],
E               [-0.1360,  0.1099,  1.3033, -0.7716, -1.5667],
E               [ 1.5019,  1.9151,  0.4699,  0.4381,  0.2124],
E               [-0.1612,  0.3702, -0.5077,  0.4548, -0.3995]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-5-4] _________________________

batch_shape = (4,), m = 4, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.9439,  4.6375, -0.4955, -0.3079,  1.0419,  0.3679,  4.5646, -0.0385,
         6.4146,  4.3928,  0.0882, -0.7023,  3.3149, -2.8165,  0.5693,  3.5097])
b = tensor([[-0.9400,  0.0996, -1.4241,  0.6082,  0.1031],
        [ 0.2878,  0.0440, -1.1631, -0.1248,  2.4647],
        [ 0.3209, -2.2411,  1.4993, -1.3294,  0.9358],
        [-0.2720,  1.4625,  1.6538,  3.2438,  3.0120]])
prec = 1e-07
msg = 'tensor([ 1.9439,  4.6375, -0.4955, -0.3079,  1.0419,  0.3679,  4.5646, -0.0385,\n         6.4146,  4.3928,  0.0882, -...647],\n        [ 0.3209, -2.2411,  1.4993, -1.3294,  0.9358],\n        [-0.2720,  1.4625,  1.6538,  3.2438,  3.0120]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.9439,  4.6375, -0.4955, -0.3079,  1.0419,  0.3679,  4.5646, -0.0385,
E                6.4146,  4.3928,  0.0882, -0.7023,  3.3149, -2.8165,  0.5693,  3.5097]) vs tensor([[-0.9400,  0.0996, -1.4241,  0.6082,  0.1031],
E               [ 0.2878,  0.0440, -1.1631, -0.1248,  2.4647],
E               [ 0.3209, -2.2411,  1.4993, -1.3294,  0.9358],
E               [-0.2720,  1.4625,  1.6538,  3.2438,  3.0120]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-5-5] _________________________

batch_shape = (4,), m = 5, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 7.1223, -0.8892,  0.4880,  3.2631,  3.2135, -7.8254,  2.0758,  3.2163,
         4.4385,  1.4197,  5.2733,  0.8578, -2.3052,  1.3165,  0.1541,  5.8079,
         2.3416,  8.1570, -8.1439,  1.4444])
b = tensor([[ 0.2882, -0.4668,  0.3368, -1.9451, -0.3600],
        [-2.4235,  0.1858, -3.3992,  4.1112,  0.1512],
        [-0.9120,  3.2371, -0.6126, -1.2262,  0.5002],
        [ 1.0046,  1.3087,  0.0430,  4.3348,  0.7156]])
prec = 1e-07
msg = 'tensor([ 7.1223, -0.8892,  0.4880,  3.2631,  3.2135, -7.8254,  2.0758,  3.2163,\n         4.4385,  1.4197,  5.2733,  ...512],\n        [-0.9120,  3.2371, -0.6126, -1.2262,  0.5002],\n        [ 1.0046,  1.3087,  0.0430,  4.3348,  0.7156]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 7.1223, -0.8892,  0.4880,  3.2631,  3.2135, -7.8254,  2.0758,  3.2163,
E                4.4385,  1.4197,  5.2733,  0.8578, -2.3052,  1.3165,  0.1541,  5.8079,
E                2.3416,  8.1570, -8.1439,  1.4444]) vs tensor([[ 0.2882, -0.4668,  0.3368, -1.9451, -0.3600],
E               [-2.4235,  0.1858, -3.3992,  4.1112,  0.1512],
E               [-0.9120,  3.2371, -0.6126, -1.2262,  0.5002],
E               [ 1.0046,  1.3087,  0.0430,  4.3348,  0.7156]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-5-6] _________________________

batch_shape = (4,), m = 6, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.6126,  2.3443,  3.7679,  0.1940, -0.2079, -5.3407,  2.1943,  3.7575,
        -2.4508,  3.1810,  2.9618, -0.3990,  2.1112, -2.3531, -6.2712, -3.6037,
         9.4094,  1.0848,  2.8580,  5.3675,  2.4988, -9.0571, -1.6279, -0.1375])
b = tensor([[ 2.6667,  0.4878,  1.9369,  0.7357,  0.6061,  0.1830],
        [ 1.5277, -5.7815, -4.7018,  8.9587,  0.5072, ...-1.1215,  2.1818,  0.9011, -2.2195, -1.3489,  0.8791],
        [ 0.9936, -1.0970, -1.4548, -0.3782,  0.7174,  0.1023]])
prec = 1e-07
msg = 'tensor([ 1.6126,  2.3443,  3.7679,  0.1940, -0.2079, -5.3407,  2.1943,  3.7575,\n        -2.4508,  3.1810,  2.9618, -....1215,  2.1818,  0.9011, -2.2195, -1.3489,  0.8791],\n        [ 0.9936, -1.0970, -1.4548, -0.3782,  0.7174,  0.1023]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.6126,  2.3443,  3.7679,  0.1940, -0.2079, -5.3407,  2.1943,  3.7575,
E               -2.4508,  3.1810,  2.9618, -0.3990,  2.1112, -2.3531, -6.2712, -3.6037,
E                9.4094,  1.0848,  2.8580,  5.3675,  2.4988, -9.0571, -1.6279, -0.1375]) vs tensor([[ 2.6667,  0.4878,  1.9369,  0.7357,  0.6061,  0.1830],
E               [ 1.5277, -5.7815, -4.7018,  8.9587,  0.5072, -2.7874],
E               [-1.1215,  2.1818,  0.9011, -2.2195, -1.3489,  0.8791],
E               [ 0.9936, -1.0970, -1.4548, -0.3782,  0.7174,  0.1023]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-5-10] _________________________

batch_shape = (4,), m = 10, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 6.2745,  1.2552,  0.6969,  3.9077, -3.4498,  1.8924, -1.6275, -2.5331,
        -1.5675, -1.5321,  0.2279,  0....5,  7.9435,  3.5195,  4.5630, -1.8111,
        -0.1604,  3.7051,  2.5926, -2.0299,  0.4644, -2.8162, -2.5731,  6.1454])
b = tensor([[ 2.1797,  0.8751,  1.1160,  1.1840,  0.9331,  0.1441,  1.7207, -1.9144,
         -1.8851,  0.2773],
        [... 0.0118],
        [-0.2192, -0.6846,  2.7584,  3.1911,  0.3532,  2.4436,  2.5144, -1.1989,
         -3.5976,  0.1458]])
prec = 1e-07
msg = 'tensor([ 6.2745,  1.2552,  0.6969,  3.9077, -3.4498,  1.8924, -1.6275, -2.5331,\n        -1.5675, -1.5321,  0.2279,  ...0118],\n        [-0.2192, -0.6846,  2.7584,  3.1911,  0.3532,  2.4436,  2.5144, -1.1989,\n         -3.5976,  0.1458]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 6.2745,  1.2552,  0.6969,  3.9077, -3.4498,  1.8924, -1.6275, -2.5331,
E               -1.5675, -1.5321,  0.2279,  0.3870,  1.0258, -1.3423,  0.2571, -2.3194,
E                2.3712,  3.9528, -1.6408, -1.0191,  6.6999,  4.4665, -4.4294, -2.6191,
E               -5.0270, -6.2868,  0.3807,  0.9895,  7.9435,  3.5195,  4.5630, -1.8111,
E               -0.1604,  3.7051,  2.5926, -2.0299,  0.4644, -2.8162, -2.5731,  6.1454]) vs tensor([[ 2.1797,  0.8751,  1.1160,  1.1840,  0.9331,  0.1441,  1.7207, -1.9144,
E                -1.8851,  0.2773],
E               [ 0.3893, -0.0968,  1.9496,  2.0438,  1.1264, -1.1732, -0.8302, -0.2128,
E                -0.7916,  1.8091],
E               [ 0.3935,  2.2274,  0.7281, -0.9705, -1.6007, -4.7148, -1.4541, -2.6068,
E                 0.7781,  0.0118],
E               [-0.2192, -0.6846,  2.7584,  3.1911,  0.3532,  2.4436,  2.5144, -1.1989,
E                -3.5976,  0.1458]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-6-2] _________________________

batch_shape = (4,), m = 2, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.5736,  1.8265,  0.0325,  1.2437, -0.5296,  1.1905,  0.1520,  0.4142])
b = tensor([[ 0.0118,  0.0046,  0.1364, -0.1877,  0.0233,  0.0499],
        [ 0.0973,  0.3357, -0.0556, -0.1827, -0.0736, ...-0.2190, -1.5667,  0.3254,  1.8061,  0.6466,  0.2659],
        [ 0.4249,  0.7857, -0.2073,  0.1521, -0.9325, -1.8127]])
prec = 1e-07
msg = 'tensor([ 1.5736,  1.8265,  0.0325,  1.2437, -0.5296,  1.1905,  0.1520,  0.4142]) vs tensor([[ 0.0118,  0.0046,  0.136....2190, -1.5667,  0.3254,  1.8061,  0.6466,  0.2659],\n        [ 0.4249,  0.7857, -0.2073,  0.1521, -0.9325, -1.8127]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.5736,  1.8265,  0.0325,  1.2437, -0.5296,  1.1905,  0.1520,  0.4142]) vs tensor([[ 0.0118,  0.0046,  0.1364, -0.1877,  0.0233,  0.0499],
E               [ 0.0973,  0.3357, -0.0556, -0.1827, -0.0736,  0.3721],
E               [-0.2190, -1.5667,  0.3254,  1.8061,  0.6466,  0.2659],
E               [ 0.4249,  0.7857, -0.2073,  0.1521, -0.9325, -1.8127]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-6-3] _________________________

batch_shape = (4,), m = 3, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.6102,  3.2384,  1.2052,  1.1903,  0.1120,  2.2514, -1.9860, -1.3573,
         0.7240,  0.1745, -3.4378,  1.0627])
b = tensor([[ 0.0499, -0.0214,  0.2213,  0.1777,  0.1764,  0.4672],
        [-1.4022,  0.9842, -0.6736, -1.5577,  0.6898, ...-1.6773, -1.4870, -0.4371,  0.5465, -0.0846,  0.6434],
        [ 0.2185, -0.2801, -0.7106,  0.7296, -0.6671,  0.0168]])
prec = 1e-07
msg = 'tensor([-0.6102,  3.2384,  1.2052,  1.1903,  0.1120,  2.2514, -1.9860, -1.3573,\n         0.7240,  0.1745, -3.4378,  ....6773, -1.4870, -0.4371,  0.5465, -0.0846,  0.6434],\n        [ 0.2185, -0.2801, -0.7106,  0.7296, -0.6671,  0.0168]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.6102,  3.2384,  1.2052,  1.1903,  0.1120,  2.2514, -1.9860, -1.3573,
E                0.7240,  0.1745, -3.4378,  1.0627]) vs tensor([[ 0.0499, -0.0214,  0.2213,  0.1777,  0.1764,  0.4672],
E               [-1.4022,  0.9842, -0.6736, -1.5577,  0.6898,  1.8061],
E               [-1.6773, -1.4870, -0.4371,  0.5465, -0.0846,  0.6434],
E               [ 0.2185, -0.2801, -0.7106,  0.7296, -0.6671,  0.0168]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-6-4] _________________________

batch_shape = (4,), m = 4, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-3.6047, -0.9887,  0.5424,  2.0605,  6.2605,  4.1622,  7.3741,  3.9201,
        -1.1663, -1.5184,  1.0233, -2.4862,  0.0583, -1.5787, -3.2909, -0.0828])
b = tensor([[-0.9400,  0.0996, -1.4241, -0.2439,  0.0477, -0.6948],
        [-0.1641,  0.1750,  1.7179,  1.3152, -1.4012, ... 0.2507, -0.9929,  0.8563, -0.7018, -1.0557,  1.5318],
        [ 1.7626,  2.2369,  4.3792,  3.5604,  1.9430,  0.2058]])
prec = 1e-07
msg = 'tensor([-3.6047, -0.9887,  0.5424,  2.0605,  6.2605,  4.1622,  7.3741,  3.9201,\n        -1.1663, -1.5184,  1.0233, -....2507, -0.9929,  0.8563, -0.7018, -1.0557,  1.5318],\n        [ 1.7626,  2.2369,  4.3792,  3.5604,  1.9430,  0.2058]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-3.6047, -0.9887,  0.5424,  2.0605,  6.2605,  4.1622,  7.3741,  3.9201,
E               -1.1663, -1.5184,  1.0233, -2.4862,  0.0583, -1.5787, -3.2909, -0.0828]) vs tensor([[-0.9400,  0.0996, -1.4241, -0.2439,  0.0477, -0.6948],
E               [-0.1641,  0.1750,  1.7179,  1.3152, -1.4012,  0.1482],
E               [ 0.2507, -0.9929,  0.8563, -0.7018, -1.0557,  1.5318],
E               [ 1.7626,  2.2369,  4.3792,  3.5604,  1.9430,  0.2058]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-6-5] _________________________

batch_shape = (4,), m = 5, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.2187,  3.2108,  2.7157, -0.7459,  3.4816, -5.3943,  3.6077, -3.0964,
        -0.7245,  8.4983, -6.4853,  3.2343,  2.8829,  1.3409, -2.5693,  6.5644,
        -5.6020,  2.5692,  7.5367,  1.4566])
b = tensor([[ 0.2882, -0.4668,  1.5806, -1.3178,  0.5778,  2.0308],
        [ 1.0867, -2.4473,  5.4692, -3.1559,  2.4275, ... 1.5092, -1.0524, -3.8953,  7.5464, -2.8394, -2.4279],
        [ 0.7722,  0.3447,  1.5832, -0.5201, -0.3376,  0.1508]])
prec = 1e-07
msg = 'tensor([ 0.2187,  3.2108,  2.7157, -0.7459,  3.4816, -5.3943,  3.6077, -3.0964,\n        -0.7245,  8.4983, -6.4853,  ....5092, -1.0524, -3.8953,  7.5464, -2.8394, -2.4279],\n        [ 0.7722,  0.3447,  1.5832, -0.5201, -0.3376,  0.1508]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.2187,  3.2108,  2.7157, -0.7459,  3.4816, -5.3943,  3.6077, -3.0964,
E               -0.7245,  8.4983, -6.4853,  3.2343,  2.8829,  1.3409, -2.5693,  6.5644,
E               -5.6020,  2.5692,  7.5367,  1.4566]) vs tensor([[ 0.2882, -0.4668,  1.5806, -1.3178,  0.5778,  2.0308],
E               [ 1.0867, -2.4473,  5.4692, -3.1559,  2.4275, -4.3547],
E               [ 1.5092, -1.0524, -3.8953,  7.5464, -2.8394, -2.4279],
E               [ 0.7722,  0.3447,  1.5832, -0.5201, -0.3376,  0.1508]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_________________________ test_convolve[same-(4,)-6-6] _________________________

batch_shape = (4,), m = 6, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 2.5300, -1.4979,  3.8646, -2.0125,  0.5344, -0.3111,  4.7253, -4.1211,
        -0.6081, -3.8415,  1.9115,  1.0357,  4.9314, -3.3026,  1.4753, -4.4291,
         5.5099, -0.8838, -1.0445, -0.4688,  7.0352, -3.2496,  1.6622, -3.2787])
b = tensor([[ 2.6667,  0.4878,  2.3152,  0.1558,  0.7610, -0.1135],
        [-1.5934,  0.1078,  3.4985,  0.5206, -2.3019, ... 0.6938,  0.5849, -0.1957, -0.4988, -0.1599, -0.1706],
        [ 2.3515, -0.4318,  1.6468, -1.2665, -1.6936, -0.6248]])
prec = 1e-07
msg = 'tensor([ 2.5300, -1.4979,  3.8646, -2.0125,  0.5344, -0.3111,  4.7253, -4.1211,\n        -0.6081, -3.8415,  1.9115,  ....6938,  0.5849, -0.1957, -0.4988, -0.1599, -0.1706],\n        [ 2.3515, -0.4318,  1.6468, -1.2665, -1.6936, -0.6248]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 2.5300, -1.4979,  3.8646, -2.0125,  0.5344, -0.3111,  4.7253, -4.1211,
E               -0.6081, -3.8415,  1.9115,  1.0357,  4.9314, -3.3026,  1.4753, -4.4291,
E                5.5099, -0.8838, -1.0445, -0.4688,  7.0352, -3.2496,  1.6622, -3.2787]) vs tensor([[ 2.6667,  0.4878,  2.3152,  0.1558,  0.7610, -0.1135],
E               [-1.5934,  0.1078,  3.4985,  0.5206, -2.3019, -0.9263],
E               [ 0.6938,  0.5849, -0.1957, -0.4988, -0.1599, -0.1706],
E               [ 2.3515, -0.4318,  1.6468, -1.2665, -1.6936, -0.6248]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-6-10] _________________________

batch_shape = (4,), m = 10, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([  7.5509,   0.0244,   1.9317,   6.6911,   3.1950,  -1.7911,  -8.0411,
          0.1818,  -5.7730,   4.2657,   ...  -3.0770,   6.4129,  -1.8195,   6.4726,  -2.8682,  -2.8430,
         -8.0521,  -3.4636,   7.5137,   2.2191,   3.8273])
b = tensor([[ 2.1797,  0.8751,  1.6556, -1.2248,  0.8869, -1.3816,  0.9369, -2.8159,
         -2.2282, -1.6274],
        [...-2.2800],
        [ 0.5110, -3.3154, -2.1097, -2.1976, -1.1458, -6.9201, -3.6489, -3.8347,
         -4.5283, -4.1083]])
prec = 1e-07
msg = 'tensor([  7.5509,   0.0244,   1.9317,   6.6911,   3.1950,  -1.7911,  -8.0411,\n          0.1818,  -5.7730,   4.2657, ...2800],\n        [ 0.5110, -3.3154, -2.1097, -2.1976, -1.1458, -6.9201, -3.6489, -3.8347,\n         -4.5283, -4.1083]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([  7.5509,   0.0244,   1.9317,   6.6911,   3.1950,  -1.7911,  -8.0411,
E                 0.1818,  -5.7730,   4.2657,   0.1673,  -0.3089,   0.1953,  -2.0546,
E                 1.2873,  -4.2468,  -0.5293,  -3.9071,  -6.4981,  -8.2018,   5.1209,
E                 7.9738,  -5.1348, -10.5926,  -5.6443,   0.5672,   1.1655,   4.6205,
E                 5.8639,  -3.0770,   6.4129,  -1.8195,   6.4726,  -2.8682,  -2.8430,
E                -8.0521,  -3.4636,   7.5137,   2.2191,   3.8273]) vs tensor([[ 2.1797,  0.8751,  1.6556, -1.2248,  0.8869, -1.3816,  0.9369, -2.8159,
E                -2.2282, -1.6274],
E               [ 1.0159,  4.1218,  4.3342,  4.4863, -1.8163, -4.3889, -1.7917, -1.3431,
E                 0.1957,  0.5850],
E               [-2.2235,  1.3651, -0.4710,  0.7010,  2.0000, -2.1162,  5.4860, -2.2987,
E                 4.3520, -2.2800],
E               [ 0.5110, -3.3154, -2.1097, -2.1976, -1.1458, -6.9201, -3.6489, -3.8347,
E                -4.5283, -4.1083]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-10-2] _________________________

batch_shape = (4,), m = 2, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.8495,  0.9759, -0.2160, -0.7090,  1.2778, -1.5402, -1.5139,  1.5469])
b = tensor([[ 0.0118,  0.0046,  0.1364, -0.1877,  0.0233,  0.0499, -0.0263,  0.0505,
          0.1826, -0.3268],
        [...-1.0071],
        [-0.8808, -0.8378, -0.9153, -1.2442, -0.3669, -0.6485, -0.2132,  0.2914,
          2.5873,  3.8562]])
prec = 1e-07
msg = 'tensor([ 0.8495,  0.9759, -0.2160, -0.7090,  1.2778, -1.5402, -1.5139,  1.5469]) vs tensor([[ 0.0118,  0.0046,  0.136...0071],\n        [-0.8808, -0.8378, -0.9153, -1.2442, -0.3669, -0.6485, -0.2132,  0.2914,\n          2.5873,  3.8562]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.8495,  0.9759, -0.2160, -0.7090,  1.2778, -1.5402, -1.5139,  1.5469]) vs tensor([[ 0.0118,  0.0046,  0.1364, -0.1877,  0.0233,  0.0499, -0.0263,  0.0505,
E                 0.1826, -0.3268],
E               [ 0.4663,  0.1536, -0.3414,  0.0383,  0.3511, -0.1235,  0.2225, -0.0936,
E                -0.9436, -0.0412],
E               [-0.7252,  0.5962,  0.9974, -0.2497, -2.3978,  0.6929, -0.3908,  0.6797,
E                -0.1213, -1.0071],
E               [-0.8808, -0.8378, -0.9153, -1.2442, -0.3669, -0.6485, -0.2132,  0.2914,
E                 2.5873,  3.8562]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-10-3] _________________________

batch_shape = (4,), m = 3, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.0888, -0.9608,  2.7896, -1.5750,  0.8104, -0.2951, -0.4062,  1.7580,
        -0.5166,  0.0482,  0.1424,  0.9520])
b = tensor([[ 4.9936e-02, -2.1430e-02,  2.2132e-01,  1.7766e-01,  1.7645e-01,
          3.2246e-01,  5.1387e-01, -6.2962e-...-01, -4.3092e-01,  4.3137e-01, -3.4709e-01,
          6.0997e-01,  7.3346e-01, -9.5194e-03, -1.7129e-01, -9.3940e-02]])
prec = 1e-07
msg = 'tensor([ 1.0888, -0.9608,  2.7896, -1.5750,  0.8104, -0.2951, -0.4062,  1.7580,\n        -0.5166,  0.0482,  0.1424,  ...1, -4.3092e-01,  4.3137e-01, -3.4709e-01,\n          6.0997e-01,  7.3346e-01, -9.5194e-03, -1.7129e-01, -9.3940e-02]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.0888, -0.9608,  2.7896, -1.5750,  0.8104, -0.2951, -0.4062,  1.7580,
E               -0.5166,  0.0482,  0.1424,  0.9520]) vs tensor([[ 4.9936e-02, -2.1430e-02,  2.2132e-01,  1.7766e-01,  1.7645e-01,
E                 3.2246e-01,  5.1387e-01, -6.2962e-01,  3.7252e-01, -3.0825e-01],
E               [ 5.4712e-01, -8.4039e-01,  8.2196e-01, -5.3100e-01,  6.5315e-01,
E                -3.2764e-01, -6.1686e-01,  8.1299e-01,  9.8515e-01, -2.4969e-01],
E               [-5.5784e-01,  3.6783e-05,  9.8872e-01,  8.6700e-01, -1.1846e+00,
E                -1.5140e+00, -5.6461e-01, -8.2527e-02,  4.6725e-01,  5.6313e-01],
E               [ 3.8954e-01, -6.7556e-01, -4.3092e-01,  4.3137e-01, -3.4709e-01,
E                 6.0997e-01,  7.3346e-01, -9.5194e-03, -1.7129e-01, -9.3940e-02]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-10-4] _________________________

batch_shape = (4,), m = 4, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-8.7498e-01,  2.5724e+00, -9.9953e-01,  8.6134e-01,  8.8926e-01,
        -2.9060e-03, -7.0771e-01, -1.8934e+00, -2.4631e+00,  1.0281e+00,
        -8.9169e-01, -3.8984e+00,  1.3906e+00, -1.8710e+00,  3.0020e+00,
         2.5512e+00])
b = tensor([[-0.9400,  0.0996, -1.4241, -0.2439,  0.0477, -1.6349, -0.2078, -1.1793,
          0.0268, -0.2771],
        [...-0.1660],
        [ 3.2044,  3.7441,  3.3042,  1.9696,  1.4500, -0.7976,  0.7982,  0.8526,
          3.5158,  3.3101]])
prec = 1e-07
msg = 'tensor([-8.7498e-01,  2.5724e+00, -9.9953e-01,  8.6134e-01,  8.8926e-01,\n        -2.9060e-03, -7.0771e-01, -1.8934e+...1660],\n        [ 3.2044,  3.7441,  3.3042,  1.9696,  1.4500, -0.7976,  0.7982,  0.8526,\n          3.5158,  3.3101]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-8.7498e-01,  2.5724e+00, -9.9953e-01,  8.6134e-01,  8.8926e-01,
E               -2.9060e-03, -7.0771e-01, -1.8934e+00, -2.4631e+00,  1.0281e+00,
E               -8.9169e-01, -3.8984e+00,  1.3906e+00, -1.8710e+00,  3.0020e+00,
E                2.5512e+00]) vs tensor([[-0.9400,  0.0996, -1.4241, -0.2439,  0.0477, -1.6349, -0.2078, -1.1793,
E                 0.0268, -0.2771],
E               [-0.0837, -0.2574,  1.0499, -0.2296,  0.9015, -1.5666,  1.7949, -0.6436,
E                -1.0090, -0.2704],
E               [-0.3983, -0.1275, -1.0760,  0.2057,  1.9852, -1.4254,  0.6672, -2.8964,
E                 0.3505, -0.1660],
E               [ 3.2044,  3.7441,  3.3042,  1.9696,  1.4500, -0.7976,  0.7982,  0.8526,
E                 3.5158,  3.3101]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-10-5] _________________________

batch_shape = (4,), m = 5, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-2.6096,  4.2452, -4.8077,  3.5168,  5.2390,  1.8468, -0.3380,  2.6326,
         0.2078,  1.1986,  4.1335, -2.5554,  1.3374,  7.7658,  1.6574, -0.2575,
         3.5682,  0.2985,  4.1905,  0.5452])
b = tensor([[ 0.2882, -0.4668,  1.5806, -1.3178,  2.1394,  1.6300,  0.4405, -0.6411,
         -1.2883,  0.3788],
        [... 1.6319],
        [-1.6136, -2.2331, -3.3905, -0.7092,  0.4428,  1.2677,  1.3501,  1.5974,
         -0.4293, -1.3578]])
prec = 1e-07
msg = 'tensor([-2.6096,  4.2452, -4.8077,  3.5168,  5.2390,  1.8468, -0.3380,  2.6326,\n         0.2078,  1.1986,  4.1335, -...6319],\n        [-1.6136, -2.2331, -3.3905, -0.7092,  0.4428,  1.2677,  1.3501,  1.5974,\n         -0.4293, -1.3578]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-2.6096,  4.2452, -4.8077,  3.5168,  5.2390,  1.8468, -0.3380,  2.6326,
E                0.2078,  1.1986,  4.1335, -2.5554,  1.3374,  7.7658,  1.6574, -0.2575,
E                3.5682,  0.2985,  4.1905,  0.5452]) vs tensor([[ 0.2882, -0.4668,  1.5806, -1.3178,  2.1394,  1.6300,  0.4405, -0.6411,
E                -1.2883,  0.3788],
E               [-0.6274, -0.0949, -1.3531,  1.7677, -3.8704,  1.3119, -1.4189,  0.2318,
E                -0.8944, -0.1415],
E               [ 5.1757, -0.4541, -3.2891,  4.1854,  0.9722, -3.1563,  2.2538, -0.5505,
E                -0.9292,  1.6319],
E               [-1.6136, -2.2331, -3.3905, -0.7092,  0.4428,  1.2677,  1.3501,  1.5974,
E                -0.4293, -1.3578]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-10-6] _________________________

batch_shape = (4,), m = 6, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.5062,  1.3690,  6.4778,  2.3447,  6.0520, -1.6541, -5.5092, -4.2094,
         0.9465, -2.9228,  2.9756,  9.6716,  5.2616, -1.0989,  6.9255, -0.3329,
        -1.8014, -2.5714, -1.9686, -0.7453, 11.0795,  4.5184, -1.7962, -4.5738])
b = tensor([[ 2.6667,  0.4878,  2.3152,  0.1558,  1.4524,  0.5142, -0.6263,  1.8800,
         -0.1045,  1.0554],
        [...-0.3687],
        [ 3.5540, -1.4288, -0.4780, -0.9236, -3.4861, -2.6847, -2.7797, -1.0608,
         -0.4909,  3.0689]])
prec = 1e-07
msg = 'tensor([ 0.5062,  1.3690,  6.4778,  2.3447,  6.0520, -1.6541, -5.5092, -4.2094,\n         0.9465, -2.9228,  2.9756,  ...3687],\n        [ 3.5540, -1.4288, -0.4780, -0.9236, -3.4861, -2.6847, -2.7797, -1.0608,\n         -0.4909,  3.0689]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.5062,  1.3690,  6.4778,  2.3447,  6.0520, -1.6541, -5.5092, -4.2094,
E                0.9465, -2.9228,  2.9756,  9.6716,  5.2616, -1.0989,  6.9255, -0.3329,
E               -1.8014, -2.5714, -1.9686, -0.7453, 11.0795,  4.5184, -1.7962, -4.5738]) vs tensor([[ 2.6667,  0.4878,  2.3152,  0.1558,  1.4524,  0.5142, -0.6263,  1.8800,
E                -0.1045,  1.0554],
E               [-1.5630,  0.1002, -0.6471, -0.9835,  2.5886,  4.2587, -2.1039, -2.7194,
E                -2.5185, -0.2899],
E               [ 1.9842,  2.3951, -1.4223, -3.4129, -0.4723,  1.2459,  2.3370,  0.3538,
E                -1.2335, -0.3687],
E               [ 3.5540, -1.4288, -0.4780, -0.9236, -3.4861, -2.6847, -2.7797, -1.0608,
E                -0.4909,  3.0689]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(4,)-10-10] ________________________

batch_shape = (4,), m = 10, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([  8.3572,   8.6754,  -5.5806,  13.0298,   2.6754,  -8.9536,  10.7584,
         -6.2172,   6.2180,  -3.6430,   ...  -7.0730,   3.1118,  -5.6859,   3.3283,  -4.6827,   3.6212,
         -7.7486,  -2.8032,  10.0810, -13.4098,  13.4527])
b = tensor([[ 1.6556, -1.2248,  2.5132, -0.1940,  2.4430, -0.9692, -0.9476, -0.3979,
          4.2551, -0.3078],
        [... 5.1926],
        [-2.3603,  2.8128, -2.2299, -0.9460, -1.9665, -3.4883,  0.1704, -5.9204,
          1.4031, -3.8487]])
prec = 1e-07
msg = 'tensor([  8.3572,   8.6754,  -5.5806,  13.0298,   2.6754,  -8.9536,  10.7584,\n         -6.2172,   6.2180,  -3.6430, ...1926],\n        [-2.3603,  2.8128, -2.2299, -0.9460, -1.9665, -3.4883,  0.1704, -5.9204,\n          1.4031, -3.8487]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([  8.3572,   8.6754,  -5.5806,  13.0298,   2.6754,  -8.9536,  10.7584,
E                -6.2172,   6.2180,  -3.6430,   3.9683,   3.4350,   0.8365,   7.6406,
E                -0.3082,  13.5954,   0.3593,  -4.9153,   4.9511,  -3.7116,   4.7193,
E                 6.5182,   1.9144,  -5.4070,  -7.1313,   9.8899,  -2.1097,   7.5205,
E                 9.7996,  -7.0730,   3.1118,  -5.6859,   3.3283,  -4.6827,   3.6212,
E                -7.7486,  -2.8032,  10.0810, -13.4098,  13.4527]) vs tensor([[ 1.6556, -1.2248,  2.5132, -0.1940,  2.4430, -0.9692, -0.9476, -0.3979,
E                 4.2551, -0.3078],
E               [-0.8680, -0.7624, -0.1183,  2.3332,  7.2574,  2.4288, -2.1447,  1.8500,
E                -4.0918, -1.2560],
E               [-1.0403, -1.2332,  2.6380, -2.1861, -0.5422,  0.0693, -2.6563,  3.7275,
E                 0.9510,  5.1926],
E               [-2.3603,  2.8128, -2.2299, -0.9460, -1.9665, -3.4883,  0.1704, -5.9204,
E                 1.4031, -3.8487]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-2-2] ________________________

batch_shape = (2, 3), m = 2, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.4360, -0.7768,  0.8358, -1.0038, -1.0479,  0.6197, -0.2324, -1.5232,
        -0.7215,  0.1039,  0.4483,  1.1617])
b = tensor([[[-0.0262, -0.0459],
         [-0.1304, -0.4444],
         [ 0.0462,  1.0525]],

        [[ 0.4579,  0.7707],
         [-0.0092,  0.4637],
         [-0.0817, -0.0354]]])
prec = 1e-07
msg = 'tensor([ 0.4360, -0.7768,  0.8358, -1.0038, -1.0479,  0.6197, -0.2324, -1.5232,\n        -0.7215,  0.1039,  0.4483,  ...    [ 0.0462,  1.0525]],\n\n        [[ 0.4579,  0.7707],\n         [-0.0092,  0.4637],\n         [-0.0817, -0.0354]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.4360, -0.7768,  0.8358, -1.0038, -1.0479,  0.6197, -0.2324, -1.5232,
E               -0.7215,  0.1039,  0.4483,  1.1617]) vs tensor([[[-0.0262, -0.0459],
E                [-0.1304, -0.4444],
E                [ 0.0462,  1.0525]],
E       
E               [[ 0.4579,  0.7707],
E                [-0.0092,  0.4637],
E                [-0.0817, -0.0354]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-2-3] ________________________

batch_shape = (2, 3), m = 3, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.3315,  3.0485, -0.9756,  2.4673, -4.2466,  1.3507, -2.0174, -6.0393,
         3.7494, -1.8085,  2.6222,  1.6206,  2.1817,  6.1019, -4.6754,  3.8239,
        -0.5981, -0.9006])
b = tensor([[[ 0.8786,  0.7905,  1.3624],
         [-0.4608, -1.3569, -0.8918],
         [ 1.1177,  1.1494,  0.9250]],

        [[ 1.0309, -1.8424,  0.7434],
         [-0.0508,  0.7265, -2.1857],
         [ 0.6696,  2.6118,  1.8743]]])
prec = 1e-07
msg = 'tensor([ 0.3315,  3.0485, -0.9756,  2.4673, -4.2466,  1.3507, -2.0174, -6.0393,\n         3.7494, -1.8085,  2.6222,  ...n        [[ 1.0309, -1.8424,  0.7434],\n         [-0.0508,  0.7265, -2.1857],\n         [ 0.6696,  2.6118,  1.8743]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.3315,  3.0485, -0.9756,  2.4673, -4.2466,  1.3507, -2.0174, -6.0393,
E                3.7494, -1.8085,  2.6222,  1.6206,  2.1817,  6.1019, -4.6754,  3.8239,
E               -0.5981, -0.9006]) vs tensor([[[ 0.8786,  0.7905,  1.3624],
E                [-0.4608, -1.3569, -0.8918],
E                [ 1.1177,  1.1494,  0.9250]],
E       
E               [[ 1.0309, -1.8424,  0.7434],
E                [-0.0508,  0.7265, -2.1857],
E                [ 0.6696,  2.6118,  1.8743]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-2-4] ________________________

batch_shape = (2, 3), m = 4, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 2.7504,  3.1262,  0.7160, -3.3103,  0.4110, -0.3568,  0.4523,  0.2101,
         1.0903,  1.9989,  3.7487, -1.1936, -0.3414, -4.8052,  4.2011,  2.2453,
        -0.0800,  3.8817, -2.0646, -4.8912,  4.2719, -3.9261,  2.0495,  3.1929])
b = tensor([[[ 0.9850, -1.0928,  0.4740, -0.4812],
         [ 0.1519, -0.3702, -0.0881, -0.9955],
         [-0.7540, -1.71...495, -0.3884, -0.9520],
         [ 0.4026, -0.0300,  0.6368, -0.5845],
         [ 0.9352, -0.2642, -1.1266, -0.9136]]])
prec = 1e-07
msg = 'tensor([ 2.7504,  3.1262,  0.7160, -3.3103,  0.4110, -0.3568,  0.4523,  0.2101,\n         1.0903,  1.9989,  3.7487, -..., -0.3884, -0.9520],\n         [ 0.4026, -0.0300,  0.6368, -0.5845],\n         [ 0.9352, -0.2642, -1.1266, -0.9136]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 2.7504,  3.1262,  0.7160, -3.3103,  0.4110, -0.3568,  0.4523,  0.2101,
E                1.0903,  1.9989,  3.7487, -1.1936, -0.3414, -4.8052,  4.2011,  2.2453,
E               -0.0800,  3.8817, -2.0646, -4.8912,  4.2719, -3.9261,  2.0495,  3.1929]) vs tensor([[[ 0.9850, -1.0928,  0.4740, -0.4812],
E                [ 0.1519, -0.3702, -0.0881, -0.9955],
E                [-0.7540, -1.7107,  3.4650,  3.4766]],
E       
E               [[-0.0167,  0.6495, -0.3884, -0.9520],
E                [ 0.4026, -0.0300,  0.6368, -0.5845],
E                [ 0.9352, -0.2642, -1.1266, -0.9136]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-2-5] ________________________

batch_shape = (2, 3), m = 5, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-4.0886, -0.6588, -0.9787, -1.8914, -0.0082, -0.8588,  2.1342, -0.3632,
         2.2165, -0.5120,  2.9023, -0....2, -1.9736,  1.7673,  0.2260,  1.2808,  1.5458,  0.5088,
        -0.9880, -0.6250, -0.6240, -2.0180, -1.1439,  0.7529])
b = tensor([[[-0.0251,  0.9547,  0.1445,  0.6585,  0.3760],
         [ 0.1275,  0.1771, -0.7764,  0.2316,  0.1488],
      ...970],
         [ 0.3472,  2.5018, -2.3777, -1.0783, -1.3624],
         [-0.2862, -0.4610, -0.5097,  0.3048, -0.2916]]])
prec = 1e-07
msg = 'tensor([-4.0886, -0.6588, -0.9787, -1.8914, -0.0082, -0.8588,  2.1342, -0.3632,\n         2.2165, -0.5120,  2.9023, -...],\n         [ 0.3472,  2.5018, -2.3777, -1.0783, -1.3624],\n         [-0.2862, -0.4610, -0.5097,  0.3048, -0.2916]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-4.0886, -0.6588, -0.9787, -1.8914, -0.0082, -0.8588,  2.1342, -0.3632,
E                2.2165, -0.5120,  2.9023, -0.6438,  0.5979,  1.8253,  1.4145, -2.6674,
E               -0.7024,  1.6522, -1.9736,  1.7673,  0.2260,  1.2808,  1.5458,  0.5088,
E               -0.9880, -0.6250, -0.6240, -2.0180, -1.1439,  0.7529]) vs tensor([[[-0.0251,  0.9547,  0.1445,  0.6585,  0.3760],
E                [ 0.1275,  0.1771, -0.7764,  0.2316,  0.1488],
E                [-1.0382, -0.1036,  1.0056,  1.3406, -0.4707]],
E       
E               [[ 0.0392,  0.5022,  0.2826,  0.1400, -0.7970],
E                [ 0.3472,  2.5018, -2.3777, -1.0783, -1.3624],
E                [-0.2862, -0.4610, -0.5097,  0.3048, -0.2916]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-2-6] ________________________

batch_shape = (2, 3), m = 6, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 5.3147, -1.8296,  5.5460, -2.8071,  1.4499,  4.1485, -5.7538,  0.9202,
        -4.9653, -5.2629, -2.2756, -4....   -1.9283,  1.7233,  6.7490, -2.2623,  7.8347, -5.3810,  1.9632, -0.0194,
         7.1180, -5.9923,  2.2969, -3.6930])
b = tensor([[[ 0.7000,  0.4325,  0.5412,  0.5011,  0.4164,  0.3033],
         [ 0.8821, -2.1175, -0.3291,  0.1804, -2.2506....1675, -5.7117, -1.4427, -6.1362,  2.6394, -2.1000],
         [ 0.7835, -1.8803, -1.8163,  2.6981, -2.4352, -0.2662]]])
prec = 1e-07
msg = 'tensor([ 5.3147, -1.8296,  5.5460, -2.8071,  1.4499,  4.1485, -5.7538,  0.9202,\n        -4.9653, -5.2629, -2.2756, -...675, -5.7117, -1.4427, -6.1362,  2.6394, -2.1000],\n         [ 0.7835, -1.8803, -1.8163,  2.6981, -2.4352, -0.2662]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 5.3147, -1.8296,  5.5460, -2.8071,  1.4499,  4.1485, -5.7538,  0.9202,
E               -4.9653, -5.2629, -2.2756, -4.2485, -2.7684, -1.2103,  1.4490,  0.6843,
E                4.7006,  1.4440,  1.1193,  5.0846,  0.7326, -3.0563, -3.6988, -4.3850,
E               -1.9283,  1.7233,  6.7490, -2.2623,  7.8347, -5.3810,  1.9632, -0.0194,
E                7.1180, -5.9923,  2.2969, -3.6930]) vs tensor([[[ 0.7000,  0.4325,  0.5412,  0.5011,  0.4164,  0.3033],
E                [ 0.8821, -2.1175, -0.3291,  0.1804, -2.2506,  0.7430],
E                [ 0.8409,  1.2836,  1.3935,  0.9074, -0.9942, -1.0991]],
E       
E               [[ 1.0979, -1.0045,  0.3835,  1.0676, -0.5172, -1.2679],
E                [ 0.1675, -5.7117, -1.4427, -6.1362,  2.6394, -2.1000],
E                [ 0.7835, -1.8803, -1.8163,  2.6981, -2.4352, -0.2662]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-2-10] ________________________

batch_shape = (2, 3), m = 10, n = 2, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 2.7736e+00,  3.4814e-01, -3.9002e+00,  1.3269e+00, -2.6472e+00,
         1.2239e+00, -9.9138e-01,  8.3931e-01...0e+00, -4.4288e+00, -3.6354e-01,  9.0387e+00,
        -7.9344e+00,  1.1878e+00,  1.7489e+00,  9.5542e-01, -3.7009e+00])
b = tensor([[[-0.3279,  1.0455, -0.0426,  0.6355,  0.3078,  0.3746,  0.1050,
           0.9437, -1.1704, -0.3895],
       ...2858],
         [ 0.1593, -0.1983, -1.2238,  2.1061, -0.3823,  0.9918, -0.5735,
          -0.1857,  0.1178,  0.1010]]])
prec = 1e-07
msg = 'tensor([ 2.7736e+00,  3.4814e-01, -3.9002e+00,  1.3269e+00, -2.6472e+00,\n         1.2239e+00, -9.9138e-01,  8.3931e-...8],\n         [ 0.1593, -0.1983, -1.2238,  2.1061, -0.3823,  0.9918, -0.5735,\n          -0.1857,  0.1178,  0.1010]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 2.7736e+00,  3.4814e-01, -3.9002e+00,  1.3269e+00, -2.6472e+00,
E                1.2239e+00, -9.9138e-01,  8.3931e-01, -2.9824e+00, -4.3066e-01,
E                6.8736e-01, -3.3191e+00,  1.0296e+00,  1.4822e+00, -1.6909e+00,
E                6.8121e-01,  3.4190e+00, -4.1488e+00,  1.4973e-01,  3.5485e+00,
E               -4.9233e+00, -1.0398e+00,  2.0375e+00, -4.6664e+00,  7.1733e-01,
E                3.9224e+00, -1.9884e-02, -2.9305e+00,  4.1388e+00, -1.2240e+00,
E                2.9146e+00, -2.3451e+00,  2.4393e+00,  5.7974e-01, -2.1934e+00,
E                1.0651e+00,  7.8822e-03, -2.0037e+00,  3.3514e-01,  1.1461e+00,
E               -3.9185e+00,  2.2735e+00, -1.3743e+00, -9.7726e-01,  3.1233e+00,
E                1.1900e+00, -6.2882e+00,  6.6910e+00,  2.0329e+00, -1.6488e+00,
E                1.2312e+00,  4.3350e+00, -4.4288e+00, -3.6354e-01,  9.0387e+00,
E               -7.9344e+00,  1.1878e+00,  1.7489e+00,  9.5542e-01, -3.7009e+00]) vs tensor([[[-0.3279,  1.0455, -0.0426,  0.6355,  0.3078,  0.3746,  0.1050,
E                  0.9437, -1.1704, -0.3895],
E                [ 1.2747, -0.3580, -1.1339, -1.2071, -1.2916, -0.5796,  1.6900,
E                  0.7204, -1.4654,  0.7859],
E                [-0.2195,  0.4069, -0.3500,  0.5722, -0.2795,  0.4490, -0.3561,
E                  0.2629, -0.0705,  0.4766]],
E       
E               [[ 1.0359, -1.8995,  0.2809,  0.4934, -0.0571,  1.1549, -1.1701,
E                 -1.0817,  1.2532,  1.3763],
E                [ 0.6270,  1.4463,  0.8648,  0.9966,  0.5250,  1.8572,  2.5794,
E                 -3.3650, -1.1440,  1.2858],
E                [ 0.1593, -0.1983, -1.2238,  2.1061, -0.3823,  0.9918, -0.5735,
E                 -0.1857,  0.1178,  0.1010]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-3-2] ________________________

batch_shape = (2, 3), m = 2, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.9364,  0.0656,  1.1008,  1.4888, -0.0193,  0.6222,  0.4056, -0.3345,
         0.2197, -0.3795,  0.1815,  2.8556])
b = tensor([[[ 1.4663e-03,  4.9936e-02,  4.4896e-02],
         [-1.8825e-02, -2.4504e-01, -1.8271e-01],
         [-1.7237e...02,  1.5039e+00],
         [-2.6079e-01, -3.0172e-02, -1.0216e-01],
         [-9.8580e-02,  3.0458e-01, -3.5273e-01]]])
prec = 1e-07
msg = 'tensor([ 1.9364,  0.0656,  1.1008,  1.4888, -0.0193,  0.6222,  0.4056, -0.3345,\n         0.2197, -0.3795,  0.1815,  ...  1.5039e+00],\n         [-2.6079e-01, -3.0172e-02, -1.0216e-01],\n         [-9.8580e-02,  3.0458e-01, -3.5273e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.9364,  0.0656,  1.1008,  1.4888, -0.0193,  0.6222,  0.4056, -0.3345,
E                0.2197, -0.3795,  0.1815,  2.8556]) vs tensor([[[ 1.4663e-03,  4.9936e-02,  4.4896e-02],
E                [-1.8825e-02, -2.4504e-01, -1.8271e-01],
E                [-1.7237e-01,  1.3473e+00, -4.4926e-01]],
E       
E               [[-1.3039e+00,  4.3821e-02,  1.5039e+00],
E                [-2.6079e-01, -3.0172e-02, -1.0216e-01],
E                [-9.8580e-02,  3.0458e-01, -3.5273e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-3-3] ________________________

batch_shape = (2, 3), m = 3, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 2.2192,  1.2290,  1.8901,  2.7450, -1.0525,  2.8050,  3.5946, -2.7316,
         1.6542,  0.2445, -2.0830, -2.6539, -6.0236, -0.4086, -7.2587,  1.6605,
         1.4329,  3.0857])
b = tensor([[[-0.9790,  0.0276, -1.4272],
         [-1.2081, -0.7005, -0.0310],
         [ 0.7018, -2.7950,  1.1019]],

        [[-0.7932,  0.2316, -0.0201],
         [-3.5242,  0.2185,  2.4614],
         [ 0.7193,  0.6350,  0.2581]]])
prec = 1e-07
msg = 'tensor([ 2.2192,  1.2290,  1.8901,  2.7450, -1.0525,  2.8050,  3.5946, -2.7316,\n         1.6542,  0.2445, -2.0830, -...n        [[-0.7932,  0.2316, -0.0201],\n         [-3.5242,  0.2185,  2.4614],\n         [ 0.7193,  0.6350,  0.2581]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 2.2192,  1.2290,  1.8901,  2.7450, -1.0525,  2.8050,  3.5946, -2.7316,
E                1.6542,  0.2445, -2.0830, -2.6539, -6.0236, -0.4086, -7.2587,  1.6605,
E                1.4329,  3.0857]) vs tensor([[[-0.9790,  0.0276, -1.4272],
E                [-1.2081, -0.7005, -0.0310],
E                [ 0.7018, -2.7950,  1.1019]],
E       
E               [[-0.7932,  0.2316, -0.0201],
E                [-3.5242,  0.2185,  2.4614],
E                [ 0.7193,  0.6350,  0.2581]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-3-4] ________________________

batch_shape = (2, 3), m = 4, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.3688, -0.1943,  3.4712,  2.1962,  0.5257, -3.8199,  3.2618,  4.7416,
        -2.0612,  2.9604,  0.4043, -1.3617,  4.8410,  0.1869, -7.6388, -2.8152,
         8.5000, -0.1318,  2.9253,  6.3790,  4.5718, -6.3495, -1.5243,  1.3262])
b = tensor([[[ 0.6679,  3.2147,  1.2452,  1.6391],
         [ 0.2775, -0.5704, -1.4852, -1.4842],
         [ 0.6241,  4.83...021, -0.4087, -0.1322],
         [ 0.8681, -1.2504,  3.3610,  0.1311],
         [-1.1854, -1.6580, -0.4127,  0.5893]]])
prec = 1e-07
msg = 'tensor([-0.3688, -0.1943,  3.4712,  2.1962,  0.5257, -3.8199,  3.2618,  4.7416,\n        -2.0612,  2.9604,  0.4043, -..., -0.4087, -0.1322],\n         [ 0.8681, -1.2504,  3.3610,  0.1311],\n         [-1.1854, -1.6580, -0.4127,  0.5893]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.3688, -0.1943,  3.4712,  2.1962,  0.5257, -3.8199,  3.2618,  4.7416,
E               -2.0612,  2.9604,  0.4043, -1.3617,  4.8410,  0.1869, -7.6388, -2.8152,
E                8.5000, -0.1318,  2.9253,  6.3790,  4.5718, -6.3495, -1.5243,  1.3262]) vs tensor([[[ 0.6679,  3.2147,  1.2452,  1.6391],
E                [ 0.2775, -0.5704, -1.4852, -1.4842],
E                [ 0.6241,  4.8342, -0.4831, -1.9099]],
E       
E               [[ 0.5609,  0.8021, -0.4087, -0.1322],
E                [ 0.8681, -1.2504,  3.3610,  0.1311],
E                [-1.1854, -1.6580, -0.4127,  0.5893]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-3-5] ________________________

batch_shape = (2, 3), m = 5, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 2.6694,  1.2501,  2.0222, -0.4060,  2.1420,  1.9380, -1.9158, -2.7596,
        -2.4698, -2.1306, -1.3253, -2....6, -0.0527, -1.7071, -0.5799, -0.1682, -0.5165, -2.8986,
        -4.0772,  2.0450,  2.4185,  0.6919, -1.3600,  2.5126])
b = tensor([[[ 0.6277,  0.2109,  0.5744,  0.2428,  0.0674],
         [-0.3813,  1.0287, -0.0292,  0.0871,  0.0705],
      ...900],
         [ 0.0849,  0.4490,  2.0095, -1.9191, -1.2707],
         [ 0.1278,  0.0658, -0.2673,  0.1012,  0.1035]]])
prec = 1e-07
msg = 'tensor([ 2.6694,  1.2501,  2.0222, -0.4060,  2.1420,  1.9380, -1.9158, -2.7596,\n        -2.4698, -2.1306, -1.3253, -...],\n         [ 0.0849,  0.4490,  2.0095, -1.9191, -1.2707],\n         [ 0.1278,  0.0658, -0.2673,  0.1012,  0.1035]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 2.6694,  1.2501,  2.0222, -0.4060,  2.1420,  1.9380, -1.9158, -2.7596,
E               -2.4698, -2.1306, -1.3253, -2.5045,  1.5026,  0.9470,  1.4263, -1.4321,
E                1.8218,  3.2436, -0.0527, -1.7071, -0.5799, -0.1682, -0.5165, -2.8986,
E               -4.0772,  2.0450,  2.4185,  0.6919, -1.3600,  2.5126]) vs tensor([[[ 0.6277,  0.2109,  0.5744,  0.2428,  0.0674],
E                [-0.3813,  1.0287, -0.0292,  0.0871,  0.0705],
E                [ 0.9999, -0.5219, -1.6441, -0.9032,  0.6218]],
E       
E               [[-0.3523, -0.2569, -0.3190,  0.5148,  0.2900],
E                [ 0.0849,  0.4490,  2.0095, -1.9191, -1.2707],
E                [ 0.1278,  0.0658, -0.2673,  0.1012,  0.1035]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-3-6] ________________________

batch_shape = (2, 3), m = 6, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-3.5419, -0.5609, -2.4260,  4.7222, -0.5012, -2.2533, -4.6213, -2.0323,
         2.1591, -4.4577,  1.0446, -3....   -0.7059,  2.9829,  2.6450,  0.5124, -1.4525, -2.1526, -3.1973,  1.4015,
        -0.4510, -3.1637,  3.1484,  3.0608])
b = tensor([[[ 0.7689, -0.0423,  0.5087,  0.1885,  0.2480,  0.1158],
         [ 0.8837, -0.2286, -0.9967,  0.4510, -0.8970....1804, -1.2489,  2.7572, -1.1439,  1.1915, -0.5343],
         [-1.3801, -1.8812, -0.8731, -0.0930, -2.9863, -1.4486]]])
prec = 1e-07
msg = 'tensor([-3.5419, -0.5609, -2.4260,  4.7222, -0.5012, -2.2533, -4.6213, -2.0323,\n         2.1591, -4.4577,  1.0446, -...804, -1.2489,  2.7572, -1.1439,  1.1915, -0.5343],\n         [-1.3801, -1.8812, -0.8731, -0.0930, -2.9863, -1.4486]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-3.5419, -0.5609, -2.4260,  4.7222, -0.5012, -2.2533, -4.6213, -2.0323,
E                2.1591, -4.4577,  1.0446, -3.9021, -1.7075,  1.9749, -2.6046, -1.2439,
E               -1.0695, -0.7513, -0.1754,  2.6961, -4.2375, -5.5022,  2.1618,  0.2843,
E               -0.7059,  2.9829,  2.6450,  0.5124, -1.4525, -2.1526, -3.1973,  1.4015,
E               -0.4510, -3.1637,  3.1484,  3.0608]) vs tensor([[[ 0.7689, -0.0423,  0.5087,  0.1885,  0.2480,  0.1158],
E                [ 0.8837, -0.2286, -0.9967,  0.4510, -0.8970, -0.6761],
E                [-1.1875, -1.7433, -1.7532, -0.8009,  1.2691,  1.3077]],
E       
E               [[ 0.0679,  0.2291, -0.2249,  0.0577,  0.3784, -0.0290],
E                [ 1.1804, -1.2489,  2.7572, -1.1439,  1.1915, -0.5343],
E                [-1.3801, -1.8812, -0.8731, -0.0930, -2.9863, -1.4486]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-3-10] ________________________

batch_shape = (2, 3), m = 10, n = 3, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ -4.6866,   6.2303,   3.8448,   0.1659,   0.8423,   4.9625,  -1.6600,
          1.7556,   2.9478,  -3.5171,   ...   9.2894,  -9.7433,  -0.0281,   0.3387,  -3.3816,  -1.1326,   8.8991,
          0.4670,  -5.9662,  11.0631,  -4.0304])
b = tensor([[[-0.1321,  1.1167,  0.0382,  0.7845,  0.4374,  0.3694,  0.7260,
           0.9091, -1.6048, -0.4671],
       ...5631],
         [-0.2964, -0.4020,  2.5472, -3.1741,  1.7133, -1.3994,  0.9915,
           0.1825, -0.1875, -0.1230]]])
prec = 1e-07
msg = 'tensor([ -4.6866,   6.2303,   3.8448,   0.1659,   0.8423,   4.9625,  -1.6600,\n          1.7556,   2.9478,  -3.5171, ...1],\n         [-0.2964, -0.4020,  2.5472, -3.1741,  1.7133, -1.3994,  0.9915,\n           0.1825, -0.1875, -0.1230]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ -4.6866,   6.2303,   3.8448,   0.1659,   0.8423,   4.9625,  -1.6600,
E                 1.7556,   2.9478,  -3.5171,   1.4745,   1.9480,  -2.0079,  -1.7868,
E                 1.9666,  -1.9155,   1.0050,   3.6654,  -4.8050,  -2.7058,   8.7393,
E                 2.8990,  -2.3182,   5.0380,  -5.2097,  -4.6501,   4.2043,  -6.0271,
E                -5.1958,  -0.9458,   3.0236,  -2.8974,   1.9035,  -0.4941,   3.3692,
E                -0.5742,   4.0652,  -0.3847,  -1.1229,   3.7373,   4.8230,  -3.8867,
E                -3.4324,  -1.1027,  -1.2642,  -0.0119,  -0.2340, -11.6573,  -1.3741,
E                 9.2894,  -9.7433,  -0.0281,   0.3387,  -3.3816,  -1.1326,   8.8991,
E                 0.4670,  -5.9662,  11.0631,  -4.0304]) vs tensor([[[-0.1321,  1.1167,  0.0382,  0.7845,  0.4374,  0.3694,  0.7260,
E                  0.9091, -1.6048, -0.4671],
E                [ 1.5157, -0.8274,  0.7511,  2.0355,  1.3513, -0.4620,  1.6178,
E                 -0.0284, -3.3506,  2.7215],
E                [-0.7325, -0.7762, -0.8511, -1.3985, -0.4654, -0.5485,  0.3057,
E                 -0.7585, -0.6876,  1.0602]],
E       
E               [[ 1.6487, -1.4310, -0.0760,  0.3518, -0.6030,  1.3736, -0.2585,
E                 -1.3741,  0.1654,  1.6359],
E                [ 0.9319,  0.7636,  0.5717,  1.0615, -1.6298,  4.8698, -0.2195,
E                 -2.7938, -0.6230,  1.5631],
E                [-0.2964, -0.4020,  2.5472, -3.1741,  1.7133, -1.3994,  0.9915,
E                  0.1825, -0.1875, -0.1230]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-4-2] ________________________

batch_shape = (2, 3), m = 2, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.6102,  3.2384,  1.2052,  1.1903,  0.1120,  2.2514, -1.9860, -1.3573,
         0.7240,  0.1745, -3.4378,  1.0627])
b = tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02],
         [ 5.6070e-01,  6.5183e-01, -2.9318e-01, -7.854... [ 1.8694e-01, -2.5845e-01,  5.2827e-01,  8.9533e-02],
         [-2.3146e-01,  7.8692e-01, -5.5193e-01,  1.6816e-02]]])
prec = 1e-07
msg = 'tensor([-0.6102,  3.2384,  1.2052,  1.1903,  0.1120,  2.2514, -1.9860, -1.3573,\n         0.7240,  0.1745, -3.4378,  ... 1.8694e-01, -2.5845e-01,  5.2827e-01,  8.9533e-02],\n         [-2.3146e-01,  7.8692e-01, -5.5193e-01,  1.6816e-02]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.6102,  3.2384,  1.2052,  1.1903,  0.1120,  2.2514, -1.9860, -1.3573,
E                0.7240,  0.1745, -3.4378,  1.0627]) vs tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02],
E                [ 5.6070e-01,  6.5183e-01, -2.9318e-01, -7.8545e-02],
E                [-2.1897e-01, -1.5667e+00,  3.2543e-01,  1.8061e+00]],
E       
E               [[-1.5858e+00, -1.6773e+00, -2.0153e+00, -5.8556e-01],
E                [ 1.8694e-01, -2.5845e-01,  5.2827e-01,  8.9533e-02],
E                [-2.3146e-01,  7.8692e-01, -5.5193e-01,  1.6816e-02]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-4-3] ________________________

batch_shape = (2, 3), m = 3, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-7.1706,  4.3731,  1.5050,  0.9245, -5.0141,  9.7595, -1.6707,  3.3514,
        -2.9550,  0.6231, -0.6847, -3.3117,  3.7205, -4.9763,  0.7680, -4.2482,
         9.5112, -8.4049])
b = tensor([[[-0.9790,  0.1842, -0.1808,  0.4437],
         [ 0.9861,  0.1077, -1.6665, -0.1867],
         [-0.5130, -2.52...398, -0.6196,  0.4199],
         [ 0.4464,  0.0776, -2.8258,  5.0030],
         [ 1.4608,  0.7722,  0.0380, -0.3755]]])
prec = 1e-07
msg = 'tensor([-7.1706,  4.3731,  1.5050,  0.9245, -5.0141,  9.7595, -1.6707,  3.3514,\n        -2.9550,  0.6231, -0.6847, -..., -0.6196,  0.4199],\n         [ 0.4464,  0.0776, -2.8258,  5.0030],\n         [ 1.4608,  0.7722,  0.0380, -0.3755]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-7.1706,  4.3731,  1.5050,  0.9245, -5.0141,  9.7595, -1.6707,  3.3514,
E               -2.9550,  0.6231, -0.6847, -3.3117,  3.7205, -4.9763,  0.7680, -4.2482,
E                9.5112, -8.4049]) vs tensor([[[-0.9790,  0.1842, -0.1808,  0.4437],
E                [ 0.9861,  0.1077, -1.6665, -0.1867],
E                [-0.5130, -2.5292,  1.9032, -0.7105]],
E       
E               [[ 0.0895, -0.7398, -0.6196,  0.4199],
E                [ 0.4464,  0.0776, -2.8258,  5.0030],
E                [ 1.4608,  0.7722,  0.0380, -0.3755]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-4-4] ________________________

batch_shape = (2, 3), m = 4, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 2.5300, -1.4979,  3.8646, -2.0125,  0.5344, -0.3111,  4.7253, -4.1211,
        -0.6081, -3.8415,  1.9115,  1.0357,  4.9314, -3.3026,  1.4753, -4.4291,
         5.5099, -0.8838, -1.0445, -0.4688,  7.0352, -3.2496,  1.6622, -3.2787])
b = tensor([[[ 0.6679,  2.6667,  0.4878,  1.1446],
         [-0.1289,  0.4111, -0.5932,  1.2283],
         [ 0.6160, -1.86...938,  0.5849,  0.3385],
         [-0.3755, -0.5513, -0.3376,  0.1508],
         [-1.3508, -1.5754, -0.6248,  0.0766]]])
prec = 1e-07
msg = 'tensor([ 2.5300, -1.4979,  3.8646, -2.0125,  0.5344, -0.3111,  4.7253, -4.1211,\n        -0.6081, -3.8415,  1.9115,  ...,  0.5849,  0.3385],\n         [-0.3755, -0.5513, -0.3376,  0.1508],\n         [-1.3508, -1.5754, -0.6248,  0.0766]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 2.5300, -1.4979,  3.8646, -2.0125,  0.5344, -0.3111,  4.7253, -4.1211,
E               -0.6081, -3.8415,  1.9115,  1.0357,  4.9314, -3.3026,  1.4753, -4.4291,
E                5.5099, -0.8838, -1.0445, -0.4688,  7.0352, -3.2496,  1.6622, -3.2787]) vs tensor([[[ 0.6679,  2.6667,  0.4878,  1.1446],
E                [-0.1289,  0.4111, -0.5932,  1.2283],
E                [ 0.6160, -1.8617, -0.9263,  1.2766]],
E       
E               [[-0.3840,  0.6938,  0.5849,  0.3385],
E                [-0.3755, -0.5513, -0.3376,  0.1508],
E                [-1.3508, -1.5754, -0.6248,  0.0766]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-4-5] ________________________

batch_shape = (2, 3), m = 5, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0976,  0.8834,  7.5124, -0.6826, -2.3045, -0.1504,  0.4080,  3.0560,
        -0.5703, -4.5084,  2.4426, -0....0, -1.0661,  2.1684,  0.7302, -3.3512,  1.5374,  3.4712,
        -3.9438, -3.1646, -6.4106, -1.3672,  2.7360, -4.1110])
b = tensor([[[ 0.6277,  2.3991,  0.7376,  1.7336,  0.8050],
         [ 0.0167, -0.5416,  0.6553,  0.5547, -0.9251],
      ...345],
         [ 0.0548,  0.0292, -1.6111,  2.5497, -0.4733],
         [ 0.0783,  0.3723,  1.0862,  0.5381,  0.4263]]])
prec = 1e-07
msg = 'tensor([ 0.0976,  0.8834,  7.5124, -0.6826, -2.3045, -0.1504,  0.4080,  3.0560,\n        -0.5703, -4.5084,  2.4426, -...],\n         [ 0.0548,  0.0292, -1.6111,  2.5497, -0.4733],\n         [ 0.0783,  0.3723,  1.0862,  0.5381,  0.4263]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.0976,  0.8834,  7.5124, -0.6826, -2.3045, -0.1504,  0.4080,  3.0560,
E               -0.5703, -4.5084,  2.4426, -0.0477,  0.2889,  1.2332, -0.1298,  4.0911,
E               -0.6479,  1.5950, -1.0661,  2.1684,  0.7302, -3.3512,  1.5374,  3.4712,
E               -3.9438, -3.1646, -6.4106, -1.3672,  2.7360, -4.1110]) vs tensor([[[ 0.6277,  2.3991,  0.7376,  1.7336,  0.8050],
E                [ 0.0167, -0.5416,  0.6553,  0.5547, -0.9251],
E                [ 0.5819, -1.1476, -1.4808,  0.4446,  2.0629]],
E       
E               [[-0.1623, -0.6072, -0.3577, -0.0107,  0.9345],
E                [ 0.0548,  0.0292, -1.6111,  2.5497, -0.4733],
E                [ 0.0783,  0.3723,  1.0862,  0.5381,  0.4263]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-4-6] ________________________

batch_shape = (2, 3), m = 6, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.7342,  3.0831,  3.1556, -0.6606,  6.8573,  0.9610,  0.5063, -1.5640,
         3.2696,  5.6201, -0.2701, -1....    5.8648,  4.2036, -1.1387,  2.1471,  0.1271, -9.7995, -0.7036,  3.5520,
        11.6764,  2.1850,  5.7192, -3.5415])
b = tensor([[[ 0.7689,  0.9606,  0.8221,  0.9121,  0.7525,  0.5891],
         [-0.5731,  1.6667, -1.8249, -2.0113,  0.6672....3935, -2.4250, -0.0414,  0.3745,  1.8167, -0.2261],
         [ 1.3127, -3.1394,  2.0366,  2.0639,  0.0594, -0.3720]]])
prec = 1e-07
msg = 'tensor([ 1.7342,  3.0831,  3.1556, -0.6606,  6.8573,  0.9610,  0.5063, -1.5640,\n         3.2696,  5.6201, -0.2701, -...935, -2.4250, -0.0414,  0.3745,  1.8167, -0.2261],\n         [ 1.3127, -3.1394,  2.0366,  2.0639,  0.0594, -0.3720]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.7342,  3.0831,  3.1556, -0.6606,  6.8573,  0.9610,  0.5063, -1.5640,
E                3.2696,  5.6201, -0.2701, -1.6579, -2.4423, -0.4933, -0.2902,  1.0790,
E               -3.5898, -2.4653,  2.7408,  1.4822,  2.3757,  1.8847, -0.3518,  0.1765,
E                5.8648,  4.2036, -1.1387,  2.1471,  0.1271, -9.7995, -0.7036,  3.5520,
E               11.6764,  2.1850,  5.7192, -3.5415]) vs tensor([[[ 0.7689,  0.9606,  0.8221,  0.9121,  0.7525,  0.5891],
E                [-0.5731,  1.6667, -1.8249, -2.0113,  0.6672, -2.8368],
E                [-0.5578,  0.5722,  0.7820,  1.7604,  0.9004, -1.7186]],
E       
E               [[-1.3596,  0.5866, -0.5226,  0.0169, -1.6305, -0.8684],
E                [-2.3935, -2.4250, -0.0414,  0.3745,  1.8167, -0.2261],
E                [ 1.3127, -3.1394,  2.0366,  2.0639,  0.0594, -0.3720]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-4-10] ________________________

batch_shape = (2, 3), m = 10, n = 4, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ -6.6559,   6.1228,  -5.8620,  11.4909,  -0.6706,  -8.6356,   6.2744,
          2.3919,   3.9716,  -7.1297,   ...  -2.8532,   3.3969,  -2.6170,   2.3985,  -8.4225,   0.6933,   1.7104,
          0.1321,  10.4098,  -7.3745,   7.5948])
b = tensor([[[-0.1321,  0.7381, -0.1821,  0.4941,  0.1759,  0.1496,  0.5676,
           0.6770, -1.2443, -0.1585],
       ...1889],
         [-0.0790, -1.4468,  1.3716,  2.1211, -1.4168,  0.8497, -1.3947,
           0.7120,  0.2860, -0.1245]]])
prec = 1e-07
msg = 'tensor([ -6.6559,   6.1228,  -5.8620,  11.4909,  -0.6706,  -8.6356,   6.2744,\n          2.3919,   3.9716,  -7.1297, ...9],\n         [-0.0790, -1.4468,  1.3716,  2.1211, -1.4168,  0.8497, -1.3947,\n           0.7120,  0.2860, -0.1245]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ -6.6559,   6.1228,  -5.8620,  11.4909,  -0.6706,  -8.6356,   6.2744,
E                 2.3919,   3.9716,  -7.1297,   6.5647,  -5.8689,  -2.3670,   0.2155,
E                 2.8776,   0.3858,   1.2867,   1.1740,  -5.9136,  -0.5079,  -3.3591,
E                 0.8102,   3.7425,   1.5194,  -2.9128,  -0.0434,   2.7425,   1.0515,
E                -0.6659,  -2.4652,  -7.3334,   3.9385,  -5.3766,   2.2773,   1.1501,
E                 3.6001,  -3.9865,  -0.0698,   4.6739,  -0.5347,   3.0592,  -0.8589,
E                 6.0405, -10.2184,   2.1820,   0.8185,   4.5108,  -9.3595,   0.8516,
E                -2.8532,   3.3969,  -2.6170,   2.3985,  -8.4225,   0.6933,   1.7104,
E                 0.1321,  10.4098,  -7.3745,   7.5948]) vs tensor([[[-0.1321,  0.7381, -0.1821,  0.4941,  0.1759,  0.1496,  0.5676,
E                  0.6770, -1.2443, -0.1585],
E                [ 0.9174,  0.8454,  2.0754,  0.2638, -1.4783, -3.3334, -1.5160,
E                  0.8298,  0.5850,  1.4199],
E                [-0.1627, -2.1561,  0.1928, -1.5680,  0.9576, -1.0313,  0.3310,
E                 -0.5669,  2.7379,  0.5611]],
E       
E               [[-2.9888,  2.8040,  0.1202, -0.6812,  1.0007, -2.5647,  0.6800,
E                  2.5768, -0.5383, -3.0810],
E                [-0.1157,  1.9227,  1.0453,  0.4681,  3.9440, -3.8548,  5.8275,
E                 -2.5322, -1.5583,  0.1889],
E                [-0.0790, -1.4468,  1.3716,  2.1211, -1.4168,  0.8497, -1.3947,
E                  0.7120,  0.2860, -0.1245]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-5-2] ________________________

batch_shape = (2, 3), m = 2, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.2554, -0.0639,  2.5114, -1.3742,  0.0223,  0.8434, -0.6069,  1.8794,
        -1.7733, -1.8574,  1.3791, -3.3510])
b = tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02],
         [ 2.8714e-01, -2.9318e-01, -7.854...,  1.9573e-01,  2.8648e-01, -2.6309e-02],
         [ 4.6526e-01, -8.8442e-01, -1.5082e-01,  5.2097e-01, -1.8445e-01]]])
prec = 1e-07
msg = 'tensor([ 1.2554, -0.0639,  2.5114, -1.3742,  0.0223,  0.8434, -0.6069,  1.8794,\n        -1.7733, -1.8574,  1.3791, -... 1.9573e-01,  2.8648e-01, -2.6309e-02],\n         [ 4.6526e-01, -8.8442e-01, -1.5082e-01,  5.2097e-01, -1.8445e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.2554, -0.0639,  2.5114, -1.3742,  0.0223,  0.8434, -0.6069,  1.8794,
E               -1.7733, -1.8574,  1.3791, -3.3510]) vs tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02],
E                [ 2.8714e-01, -2.9318e-01, -7.8545e-02, -9.2133e-02,  3.8283e-02],
E                [ 7.2176e-01, -9.9562e-01,  9.2487e-01, -6.4746e-01, -1.9650e+00]],
E       
E               [[ 7.1051e-01, -4.2812e-02,  2.2641e-01, -2.0470e-01, -1.1198e+00],
E                [ 6.5176e-01, -2.9193e-01,  1.9573e-01,  2.8648e-01, -2.6309e-02],
E                [ 4.6526e-01, -8.8442e-01, -1.5082e-01,  5.2097e-01, -1.8445e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-5-3] ________________________

batch_shape = (2, 3), m = 3, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-2.2976, -1.3765,  1.6988,  1.9516, -5.0343,  1.8771,  2.9992,  1.4698,
        -2.7164,  3.4847, -1.9033, -2.7175, -3.0352,  5.1519, -4.9727, -0.1235,
         1.0562,  2.3445])
b = tensor([[[-0.9790,  0.1842, -0.1808,  0.4096,  1.7353],
         [ 0.1114, -1.6665,  0.0895,  0.6702,  0.3107],
      ...272],
         [-0.2116, -0.5008,  0.2006, -0.1487,  0.4432],
         [ 1.6688,  0.9383,  0.4973,  0.0658,  0.1444]]])
prec = 1e-07
msg = 'tensor([-2.2976, -1.3765,  1.6988,  1.9516, -5.0343,  1.8771,  2.9992,  1.4698,\n        -2.7164,  3.4847, -1.9033, -...],\n         [-0.2116, -0.5008,  0.2006, -0.1487,  0.4432],\n         [ 1.6688,  0.9383,  0.4973,  0.0658,  0.1444]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-2.2976, -1.3765,  1.6988,  1.9516, -5.0343,  1.8771,  2.9992,  1.4698,
E               -2.7164,  3.4847, -1.9033, -2.7175, -3.0352,  5.1519, -4.9727, -0.1235,
E                1.0562,  2.3445]) vs tensor([[[-0.9790,  0.1842, -0.1808,  0.4096,  1.7353],
E                [ 0.1114, -1.6665,  0.0895,  0.6702,  0.3107],
E                [ 0.7298, -2.2064,  0.1293, -0.9912, -0.8828]],
E       
E               [[ 0.6451, -0.3461, -0.3579, -0.6807,  0.4272],
E                [-0.2116, -0.5008,  0.2006, -0.1487,  0.4432],
E                [ 1.6688,  0.9383,  0.4973,  0.0658,  0.1444]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-5-4] ________________________

batch_shape = (2, 3), m = 4, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.8114, -0.6511,  1.7362,  0.9873, -0.9033, -4.9524, -4.1926,  3.3505,
         4.2900,  5.7790,  3.3852, -1.8203, -0.1334,  3.4389, -2.9916,  0.4060,
         5.1582,  1.6736, -0.1269,  4.5092, -1.4118, -7.5535, -0.1391,  2.6479])
b = tensor([[[ 0.6679,  2.6667,  0.4878,  1.7009,  0.2597],
         [ 0.1269,  0.0537,  0.8138, -0.1519, -0.7236],
      ...584],
         [-0.2252, -0.5848,  0.0656, -0.7302, -0.2304],
         [-0.4705, -1.7186, -1.4500, -0.5326,  1.8950]]])
prec = 1e-07
msg = 'tensor([-0.8114, -0.6511,  1.7362,  0.9873, -0.9033, -4.9524, -4.1926,  3.3505,\n         4.2900,  5.7790,  3.3852, -...],\n         [-0.2252, -0.5848,  0.0656, -0.7302, -0.2304],\n         [-0.4705, -1.7186, -1.4500, -0.5326,  1.8950]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.8114, -0.6511,  1.7362,  0.9873, -0.9033, -4.9524, -4.1926,  3.3505,
E                4.2900,  5.7790,  3.3852, -1.8203, -0.1334,  3.4389, -2.9916,  0.4060,
E                5.1582,  1.6736, -0.1269,  4.5092, -1.4118, -7.5535, -0.1391,  2.6479]) vs tensor([[[ 0.6679,  2.6667,  0.4878,  1.7009,  0.2597],
E                [ 0.1269,  0.0537,  0.8138, -0.1519, -0.7236],
E                [-0.6376,  1.7371, -0.6685,  1.6316,  3.7756]],
E       
E               [[ 0.6244,  0.6474, -1.0370, -1.0883,  0.5584],
E                [-0.2252, -0.5848,  0.0656, -0.7302, -0.2304],
E                [-0.4705, -1.7186, -1.4500, -0.5326,  1.8950]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-5-5] ________________________

batch_shape = (2, 3), m = 5, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.4518,  4.6677,  1.4259, -1.9601, -0.1338, -3.4340, -1.7741,  0.6053,
         4.1413, -2.7243, -4.9360,  0....0,  0.7370, -1.2831,  0.1150, -5.2603,  0.8810,  0.2317,
        -2.9669, -4.2680, -4.0943, -0.5321,  3.0841,  1.3251])
b = tensor([[[ 2.3991,  0.7376,  1.9946,  0.8491,  0.8566],
         [ 0.7427,  0.5170, -1.1700, -0.5714,  1.0212],
      ...790],
         [-1.9155,  0.1678, -0.0678,  2.4564,  1.8669],
         [-1.2350,  0.1815,  0.6744, -0.5177, -0.6179]]])
prec = 1e-07
msg = 'tensor([ 0.4518,  4.6677,  1.4259, -1.9601, -0.1338, -3.4340, -1.7741,  0.6053,\n         4.1413, -2.7243, -4.9360,  ...],\n         [-1.9155,  0.1678, -0.0678,  2.4564,  1.8669],\n         [-1.2350,  0.1815,  0.6744, -0.5177, -0.6179]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.4518,  4.6677,  1.4259, -1.9601, -0.1338, -3.4340, -1.7741,  0.6053,
E                4.1413, -2.7243, -4.9360,  0.0233, -0.6066,  4.5128, -0.2749,  2.3724,
E                5.8948,  2.5800,  0.7370, -1.2831,  0.1150, -5.2603,  0.8810,  0.2317,
E               -2.9669, -4.2680, -4.0943, -0.5321,  3.0841,  1.3251]) vs tensor([[[ 2.3991,  0.7376,  1.9946,  0.8491,  0.8566],
E                [ 0.7427,  0.5170, -1.1700, -0.5714,  1.0212],
E                [ 1.1755,  0.7354,  0.5552, -0.0120,  0.5971]],
E       
E               [[ 0.6784,  0.0229,  0.8076, -1.5193,  0.2790],
E                [-1.9155,  0.1678, -0.0678,  2.4564,  1.8669],
E                [-1.2350,  0.1815,  0.6744, -0.5177, -0.6179]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-5-6] ________________________

batch_shape = (2, 3), m = 6, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([  0.6924,   2.1907,  -5.0619,  -0.4401,  -3.1982,  -5.9980,  14.1101,
         -3.8300,  -4.4273,  -5.6401,  -...7,  -2.3458,   9.3293,
         -4.4492,  -8.1383,   3.4321,  -0.3256,   4.1763,   3.8730,   2.5955,
         -4.7344])
b = tensor([[[ 0.9606,  0.8221,  1.1521,  0.7930,  0.7564,  0.3602],
         [-1.8400, -1.8736,  0.9920, -2.7122, -0.5164....1904,  1.6581, -3.9253,  1.3352, -2.4774,  1.1780],
         [-0.6341, -0.6666, -4.9685, -4.1136, -1.8717, -1.7022]]])
prec = 1e-07
msg = 'tensor([  0.6924,   2.1907,  -5.0619,  -0.4401,  -3.1982,  -5.9980,  14.1101,\n         -3.8300,  -4.4273,  -5.6401, ...904,  1.6581, -3.9253,  1.3352, -2.4774,  1.1780],\n         [-0.6341, -0.6666, -4.9685, -4.1136, -1.8717, -1.7022]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([  0.6924,   2.1907,  -5.0619,  -0.4401,  -3.1982,  -5.9980,  14.1101,
E                -3.8300,  -4.4273,  -5.6401,  -4.4819,  -2.7643,  -3.9835,   1.3965,
E               -12.6702,   2.6979,  -4.3250,  -2.9545,   5.4189,  -1.9275,   3.7013,
E                 1.0444,  -4.6521, -15.7349,  -7.9217,  -6.1977,  -2.3458,   9.3293,
E                -4.4492,  -8.1383,   3.4321,  -0.3256,   4.1763,   3.8730,   2.5955,
E                -4.7344]) vs tensor([[[ 0.9606,  0.8221,  1.1521,  0.7930,  0.7564,  0.3602],
E                [-1.8400, -1.8736,  0.9920, -2.7122, -0.5164,  0.6605],
E                [-5.4198, -3.2188,  3.8483,  5.8739,  1.5203, -1.0282]],
E       
E               [[-1.7303,  0.2920,  0.1286,  1.8215, -0.5165, -0.0919],
E                [-2.1904,  1.6581, -3.9253,  1.3352, -2.4774,  1.1780],
E                [-0.6341, -0.6666, -4.9685, -4.1136, -1.8717, -1.7022]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-5-10] ________________________

batch_shape = (2, 3), m = 10, n = 5, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-5.8242, -6.7910, -2.4275,  6.0059, -3.7580,  1.9276,  6.5896,  1.4928,
        -9.5873,  0.6415,  0.0496, -4....   13.0403,  0.7808,  2.3625, -8.0849,  4.2595, -0.8322,  0.4542, -7.0478,
        -4.3372,  6.7897,  2.1139,  7.6889])
b = tensor([[[ 0.7381, -0.1821,  1.3711,  0.3241,  0.7611,  0.9210,  1.0401,
          -1.0273,  0.2895, -0.9045],
       ...9911],
         [-0.3517,  0.8111, -1.6644,  1.1750,  1.3180,  1.7835,  0.8214,
          -0.2030, -0.2905,  0.0919]]])
prec = 1e-07
msg = 'tensor([-5.8242, -6.7910, -2.4275,  6.0059, -3.7580,  1.9276,  6.5896,  1.4928,\n        -9.5873,  0.6415,  0.0496, -...1],\n         [-0.3517,  0.8111, -1.6644,  1.1750,  1.3180,  1.7835,  0.8214,\n          -0.2030, -0.2905,  0.0919]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-5.8242, -6.7910, -2.4275,  6.0059, -3.7580,  1.9276,  6.5896,  1.4928,
E               -9.5873,  0.6415,  0.0496, -4.8074, -2.5952, -0.8462,  4.4441,  3.2225,
E                7.3581, -1.3621, -1.2016, -5.1693, -1.2915, -2.3847, -1.7128, -0.7417,
E                0.5945,  6.4755, -1.6838, -1.1245, -1.6331,  4.7890,  3.4564,  5.7294,
E               -5.5756,  2.1080,  4.1676, -0.2025, -8.7432, -2.7638, -2.5421, -1.3132,
E                5.0825,  2.5998, -0.8093, -1.3975,  2.3164,  0.3948, -0.4353, -7.4527,
E               13.0403,  0.7808,  2.3625, -8.0849,  4.2595, -0.8322,  0.4542, -7.0478,
E               -4.3372,  6.7897,  2.1139,  7.6889]) vs tensor([[[ 0.7381, -0.1821,  1.3711,  0.3241,  0.7611,  0.9210,  1.0401,
E                 -1.0273,  0.2895, -0.9045],
E                [ 0.9244, -0.1020, -0.7804, -2.9667, -2.9918, -2.8719, -0.8849,
E                  1.7457,  0.7751,  0.8426],
E                [-0.7563, -1.0556, -0.3688, -0.7206,  0.8029, -0.0956,  0.1105,
E                 -1.0612,  1.8868,  2.2270]],
E       
E               [[ 0.9804,  3.3649, -2.1766, -0.0234, -1.2813, -0.4102,  4.2264,
E                 -0.6711, -4.5784,  0.4945],
E                [ 0.3914, -0.3056,  1.6257, -0.9007,  1.4231,  3.7571, -3.0797,
E                  3.6715, -2.1634, -0.9911],
E                [-0.3517,  0.8111, -1.6644,  1.1750,  1.3180,  1.7835,  0.8214,
E                 -0.2030, -0.2905,  0.0919]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-6-2] ________________________

batch_shape = (2, 3), m = 2, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-1.3742,  0.0223,  1.0888, -0.9608,  2.7896, -1.5750,  0.8104, -0.2951,
        -0.5603,  1.9591, -1.0810, -0.2167])
b = tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02,
          -9.5987e-02],
         [-4.7994e-...      1.1978e-01],
         [-2.5831e-02,  2.0834e-01, -3.7633e-01,  1.4348e-01, -5.5393e-01,
           6.3596e-01]]])
prec = 1e-07
msg = 'tensor([-1.3742,  0.0223,  1.0888, -0.9608,  2.7896, -1.5750,  0.8104, -0.2951,\n        -0.5603,  1.9591, -1.0810, -...   1.1978e-01],\n         [-2.5831e-02,  2.0834e-01, -3.7633e-01,  1.4348e-01, -5.5393e-01,\n           6.3596e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-1.3742,  0.0223,  1.0888, -0.9608,  2.7896, -1.5750,  0.8104, -0.2951,
E               -0.5603,  1.9591, -1.0810, -0.2167]) vs tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02,
E                 -9.5987e-02],
E                [-4.7994e-01, -7.8545e-02, -9.2133e-02,  3.8283e-02,  3.5105e-01,
E                 -1.2352e-01],
E                [ 7.7286e-01, -6.4746e-01,  6.6934e-01, -1.8197e-01, -7.1113e-01,
E                  5.9616e-01]],
E       
E               [[ 8.7693e-01,  6.3142e-01, -1.9950e+00, -1.2985e+00, -1.0742e-01,
E                  2.8685e-01],
E                [ 3.5109e-03,  2.7198e-01,  2.0188e-01, -4.7064e-02,  2.4795e-01,
E                  1.1978e-01],
E                [-2.5831e-02,  2.0834e-01, -3.7633e-01,  1.4348e-01, -5.5393e-01,
E                  6.3596e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-6-3] ________________________

batch_shape = (2, 3), m = 3, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-1.1102, -3.3673, -0.1331,  1.0001,  1.6572, -5.3376,  4.4020, -2.9692,
         0.8448, -3.6510,  4.3459, -2.9160, -0.6922,  1.5742, -0.9783,  0.9425,
         1.7265, -2.6802])
b = tensor([[[-0.9790,  0.1842, -0.1808,  0.4096,  0.3566, -0.2816],
         [-1.5189,  0.0895,  0.6702, -0.0541, -0.0985....1472, -1.0321,  0.4557,  0.3299,  0.0827,  0.2599],
         [ 0.1677,  0.4185,  0.1661, -0.9346, -1.9118, -1.2113]]])
prec = 1e-07
msg = 'tensor([-1.1102, -3.3673, -0.1331,  1.0001,  1.6572, -5.3376,  4.4020, -2.9692,\n         0.8448, -3.6510,  4.3459, -...472, -1.0321,  0.4557,  0.3299,  0.0827,  0.2599],\n         [ 0.1677,  0.4185,  0.1661, -0.9346, -1.9118, -1.2113]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-1.1102, -3.3673, -0.1331,  1.0001,  1.6572, -5.3376,  4.4020, -2.9692,
E                0.8448, -3.6510,  4.3459, -2.9160, -0.6922,  1.5742, -0.9783,  0.9425,
E                1.7265, -2.6802]) vs tensor([[[-0.9790,  0.1842, -0.1808,  0.4096,  0.3566, -0.2816],
E                [-1.5189,  0.0895,  0.6702, -0.0541, -0.0985,  0.5118],
E                [-0.5202, -0.2601, -2.7647,  1.1948, -1.2355, -0.4024]],
E       
E               [[ 0.7977, -0.5949, -0.3569,  0.8975,  0.3141, -0.3007],
E                [-0.1472, -1.0321,  0.4557,  0.3299,  0.0827,  0.2599],
E                [ 0.1677,  0.4185,  0.1661, -0.9346, -1.9118, -1.2113]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-6-4] ________________________

batch_shape = (2, 3), m = 4, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 8.2299, -4.1563, -4.1364, -4.4538, -1.1610,  0.4400,  7.0864,  3.0672,
         3.8926,  2.5721,  4.9122, -3.5912, -0.1291,  6.0539,  1.9451, -0.1928,
         5.9556, -0.0312, -1.6620, -2.6962, -2.3322,  0.5261,  6.4754,  0.2881])
b = tensor([[[ 6.6790e-01,  2.6667e+00,  4.8783e-01,  1.7009e+00, -3.8410e-01,
           1.1220e-02],
         [ 3.8262e-...     -1.4775e+00],
         [ 1.3600e+00,  1.4472e+00, -1.8734e+00, -3.5918e+00, -5.4886e-01,
           9.8591e-01]]])
prec = 1e-07
msg = 'tensor([ 8.2299, -4.1563, -4.1364, -4.4538, -1.1610,  0.4400,  7.0864,  3.0672,\n         3.8926,  2.5721,  4.9122, -...  -1.4775e+00],\n         [ 1.3600e+00,  1.4472e+00, -1.8734e+00, -3.5918e+00, -5.4886e-01,\n           9.8591e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 8.2299, -4.1563, -4.1364, -4.4538, -1.1610,  0.4400,  7.0864,  3.0672,
E                3.8926,  2.5721,  4.9122, -3.5912, -0.1291,  6.0539,  1.9451, -0.1928,
E                5.9556, -0.0312, -1.6620, -2.6962, -2.3322,  0.5261,  6.4754,  0.2881]) vs tensor([[[ 6.6790e-01,  2.6667e+00,  4.8783e-01,  1.7009e+00, -3.8410e-01,
E                  1.1220e-02],
E                [ 3.8262e-01,  6.5165e-02, -1.5195e-01, -5.2463e-01,  2.4714e+00,
E                 -1.3103e+00],
E                [-2.1156e+00,  2.7383e+00,  4.8318e+00, -3.8510e+00, -6.8652e-01,
E                  9.3048e-01]],
E       
E               [[-3.6107e-01, -2.6870e+00, -5.8938e-01,  1.1026e+00, -4.8595e-01,
E                 -9.3011e-01],
E                [ 5.3638e-04,  1.1401e+00, -1.8025e+00, -9.8479e-01, -3.0506e+00,
E                 -1.4775e+00],
E                [ 1.3600e+00,  1.4472e+00, -1.8734e+00, -3.5918e+00, -5.4886e-01,
E                  9.8591e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-6-5] ________________________

batch_shape = (2, 3), m = 5, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-0.1698,  3.0995, -1.4999,  2.2258, -0.0162, -3.4213, -0.8047, -3.6998,
        -1.3315, -1.0440,  1.6745,  4....6, -1.1767,  4.4035,  1.5813, -2.9039, -1.6409, -3.1184,
        -1.9692,  5.9403,  1.0447, -3.2720, -3.1077, -4.1883])
b = tensor([[[ 2.3991,  0.7376,  1.9946,  0.3781,  0.7770, -0.3088],
         [ 0.3592, -1.1403, -0.3871,  1.5466, -0.3000....1868, -0.7416,  1.2493, -1.3684,  0.9520, -0.1131],
         [ 1.8291,  1.4126,  0.8147,  0.1799,  1.3442,  0.5992]]])
prec = 1e-07
msg = 'tensor([-0.1698,  3.0995, -1.4999,  2.2258, -0.0162, -3.4213, -0.8047, -3.6998,\n        -1.3315, -1.0440,  1.6745,  ...868, -0.7416,  1.2493, -1.3684,  0.9520, -0.1131],\n         [ 1.8291,  1.4126,  0.8147,  0.1799,  1.3442,  0.5992]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-0.1698,  3.0995, -1.4999,  2.2258, -0.0162, -3.4213, -0.8047, -3.6998,
E               -1.3315, -1.0440,  1.6745,  4.4289,  1.9446,  2.5335, -1.1644,  4.9551,
E                7.0895,  0.4066, -1.1767,  4.4035,  1.5813, -2.9039, -1.6409, -3.1184,
E               -1.9692,  5.9403,  1.0447, -3.2720, -3.1077, -4.1883]) vs tensor([[[ 2.3991,  0.7376,  1.9946,  0.3781,  0.7770, -0.3088],
E                [ 0.3592, -1.1403, -0.3871,  1.5466, -0.3000, -0.9819],
E                [ 0.4952,  0.5871, -1.4861, -1.8880,  2.4759,  3.2137]],
E       
E               [[-0.6119, -0.1790, -0.4508,  1.6868, -0.4495,  1.5696],
E                [-2.1868, -0.7416,  1.2493, -1.3684,  0.9520, -0.1131],
E                [ 1.8291,  1.4126,  0.8147,  0.1799,  1.3442,  0.5992]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
________________________ test_convolve[same-(2, 3)-6-6] ________________________

batch_shape = (2, 3), m = 6, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ -0.3554,   1.7044,  -1.7181,  15.8561,  -1.7842,  -4.2384,   9.2857,
         -6.8986,  -3.1525,   1.9111,  -...7,   2.1961,  19.2009,
          4.3823,  -8.7109,   9.8500,  -8.2879,   4.9449,   6.1739,  -3.5133,
         -2.9087])
b = tensor([[[ 0.9606,  0.8221,  1.1521,  0.2174,  0.6591, -0.0411],
         [-1.8374,  0.2463, -3.7901,  1.4044,  3.4855....3613,  1.5166,  4.0558, -1.1366, -0.4071, -1.3615],
         [-3.3698,  3.1662,  3.2613, -1.9922,  4.2602, -3.2398]]])
prec = 1e-07
msg = 'tensor([ -0.3554,   1.7044,  -1.7181,  15.8561,  -1.7842,  -4.2384,   9.2857,\n         -6.8986,  -3.1525,   1.9111, ...613,  1.5166,  4.0558, -1.1366, -0.4071, -1.3615],\n         [-3.3698,  3.1662,  3.2613, -1.9922,  4.2602, -3.2398]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ -0.3554,   1.7044,  -1.7181,  15.8561,  -1.7842,  -4.2384,   9.2857,
E                -6.8986,  -3.1525,   1.9111,  -5.6091,  -6.6650,   6.9839,  -6.3678,
E                -2.6614,   9.2481,   0.2574,  -7.8252,   8.8411,   5.5307,   3.2958,
E                11.8123, -10.8652,  -4.1391,  -0.3348,   5.7647,   2.1961,  19.2009,
E                 4.3823,  -8.7109,   9.8500,  -8.2879,   4.9449,   6.1739,  -3.5133,
E                -2.9087]) vs tensor([[[ 0.9606,  0.8221,  1.1521,  0.2174,  0.6591, -0.0411],
E                [-1.8374,  0.2463, -3.7901,  1.4044,  3.4855,  0.3501],
E                [ 1.3381,  1.4500,  0.0937, -2.2270, -2.5978, -2.0309]],
E       
E               [[-0.4767,  1.2189, -1.7162, -1.3795,  2.6204,  0.3804],
E                [ 5.3613,  1.5166,  4.0558, -1.1366, -0.4071, -1.3615],
E                [-3.3698,  3.1662,  3.2613, -1.9922,  4.2602, -3.2398]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-6-10] ________________________

batch_shape = (2, 3), m = 10, n = 6, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-6.1865, -4.3325, -4.9783, -9.3345, -3.0314,  6.7859,  6.9804, -9.0207,
        -4.5756, -2.6815,  1.7104,  2....    5.8158,  3.5982,  3.9096, -4.0518,  2.8736,  1.1655, -4.4662,  0.7076,
        -3.1826,  0.4145, -2.9525,  5.4440])
b = tensor([[[ 0.7381, -0.1821,  1.3711, -0.2016,  0.6723,  0.5544,  0.8283,
          -1.2449,  0.1594, -1.1731],
       ...0880],
         [ 0.0391,  0.2543, -2.3323,  2.8723, -0.2907,  3.5255, -1.2979,
          -0.0306, -0.7805,  0.2170]]])
prec = 1e-07
msg = 'tensor([-6.1865, -4.3325, -4.9783, -9.3345, -3.0314,  6.7859,  6.9804, -9.0207,\n        -4.5756, -2.6815,  1.7104,  ...0],\n         [ 0.0391,  0.2543, -2.3323,  2.8723, -0.2907,  3.5255, -1.2979,\n          -0.0306, -0.7805,  0.2170]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-6.1865, -4.3325, -4.9783, -9.3345, -3.0314,  6.7859,  6.9804, -9.0207,
E               -4.5756, -2.6815,  1.7104,  2.5433, -5.3900, -2.5909,  1.5929,  5.9108,
E                4.9968,  6.5829,  4.9726, -2.2076, -1.3514, -5.1833,  0.5844,  1.5935,
E                4.8774,  6.8109, -1.5466,  3.7658, -5.2183,  2.4120,  5.2924,  5.2858,
E               -2.9645,  6.7688,  0.6761,  1.0199,  3.5215,  1.2750, -6.1535, -5.5500,
E               -4.0051, -1.0585, -0.1724, -0.3951, -3.1328,  3.7340, -2.9483,  1.1568,
E                5.8158,  3.5982,  3.9096, -4.0518,  2.8736,  1.1655, -4.4662,  0.7076,
E               -3.1826,  0.4145, -2.9525,  5.4440]) vs tensor([[[ 0.7381, -0.1821,  1.3711, -0.2016,  0.6723,  0.5544,  0.8283,
E                 -1.2449,  0.1594, -1.1731],
E                [ 0.5880, -0.0399, -2.1831, -5.2177, -3.4382,  0.5817,  2.2023,
E                  1.9228,  2.0568, -2.5173],
E                [-0.9467,  0.1071, -1.2944,  0.5763, -1.8556, -0.0895, -0.7857,
E                  2.9157, -0.5916, -1.2864]],
E       
E               [[ 1.4320,  1.4736, -0.7645, -0.9979,  0.5920,  2.1702,  1.9369,
E                 -2.8769, -2.4466,  0.9957],
E                [ 0.3971, -0.2633,  0.3320, -4.2912,  3.2688,  3.3925, -3.5241,
E                 -4.0277,  1.7916,  2.0880],
E                [ 0.0391,  0.2543, -2.3323,  2.8723, -0.2907,  3.5255, -1.2979,
E                 -0.0306, -0.7805,  0.2170]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-10-2] ________________________

batch_shape = (2, 3), m = 2, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.0252,  1.2424, -1.0362,  0.5085, -0.9858,  2.7205,  1.5892,  0.1488,
         2.9308,  1.5946,  1.8472,  0.9171])
b = tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02,
          -9.5987e-02, -2.3823e-01,  2.2673...1, -1.8115e-01,  6.8342e-01, -3.7475e-01,
          -1.6125e-01,  1.3826e-02,  2.3257e-02,  4.1761e-01,  3.6441e-01]]])
prec = 1e-07
msg = 'tensor([ 0.0252,  1.2424, -1.0362,  0.5085, -0.9858,  2.7205,  1.5892,  0.1488,\n         2.9308,  1.5946,  1.8472,  ... -1.8115e-01,  6.8342e-01, -3.7475e-01,\n          -1.6125e-01,  1.3826e-02,  2.3257e-02,  4.1761e-01,  3.6441e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.0252,  1.2424, -1.0362,  0.5085, -0.9858,  2.7205,  1.5892,  0.1488,
E                2.9308,  1.5946,  1.8472,  0.9171]) vs tensor([[[ 1.4663e-03,  4.9936e-02, -2.6292e-02,  5.0475e-02,  8.0372e-02,
E                 -9.5987e-02, -2.3823e-01,  2.2673e-01, -1.4968e-01,  1.3890e-01],
E                [ 2.2289e-01, -1.2352e-01,  6.4038e-02, -2.9786e-03,  7.6136e-02,
E                  9.1562e-02, -2.4015e-01, -7.2195e-04,  4.2764e-01,  1.9800e-01],
E                [-7.5381e-01,  3.0460e-02, -1.5465e-01,  1.3473e+00, -1.5012e+00,
E                  9.7228e-01,  1.1691e+00,  6.1421e-01,  8.1657e-01,  2.6589e-01]],
E       
E               [[ 4.2491e-01,  7.8568e-01, -2.4065e-01,  2.2641e-01, -2.0470e-01,
E                 -1.1198e+00, -2.3806e+00, -1.2985e+00, -1.0742e-01,  2.8685e-01],
E                [ 8.8882e-02,  6.8671e-01, -2.7063e-01, -2.7883e-01,  3.1859e-01,
E                  1.5760e-01, -1.3738e-01, -2.7386e-01, -3.0292e-02,  1.7860e-02],
E                [ 2.3171e-01, -4.6670e-01, -1.8115e-01,  6.8342e-01, -3.7475e-01,
E                 -1.6125e-01,  1.3826e-02,  2.3257e-02,  4.1761e-01,  3.6441e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-10-3] ________________________

batch_shape = (2, 3), m = 3, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.1075,  2.7292, -2.0673, -1.0240,  1.3551, -2.2234, -0.5573,  1.2704,
        -2.8390, -3.5579,  1.3297,  5.2321,  1.0457,  2.7281,  0.7857,  1.5182,
        -1.1341,  1.2521])
b = tensor([[[-9.7901e-01,  1.8422e-01, -1.8081e-01,  4.0965e-01,  3.5658e-01,
           1.2021e+00, -1.2999e+00,  1.7906...2, -1.0736e-02,  5.3292e-01, -6.7885e-01,
          -1.3608e+00, -6.4260e-01, -9.3293e-01,  3.6026e-02, -6.2310e-03]]])
prec = 1e-07
msg = 'tensor([ 0.1075,  2.7292, -2.0673, -1.0240,  1.3551, -2.2234, -0.5573,  1.2704,\n        -2.8390, -3.5579,  1.3297,  ... -1.0736e-02,  5.3292e-01, -6.7885e-01,\n          -1.3608e+00, -6.4260e-01, -9.3293e-01,  3.6026e-02, -6.2310e-03]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.1075,  2.7292, -2.0673, -1.0240,  1.3551, -2.2234, -0.5573,  1.2704,
E               -2.8390, -3.5579,  1.3297,  5.2321,  1.0457,  2.7281,  0.7857,  1.5182,
E               -1.1341,  1.2521]) vs tensor([[[-9.7901e-01,  1.8422e-01, -1.8081e-01,  4.0965e-01,  3.5658e-01,
E                  1.2021e+00, -1.2999e+00,  1.7906e+00,  1.0175e-01, -6.3946e-01],
E                [-5.2882e-02, -3.9098e-01, -1.6126e+00,  2.6562e-01, -1.6929e-01,
E                 -1.5669e+00,  2.7626e-01,  4.1126e-01, -5.9158e-01, -6.3450e-01],
E                [ 1.4001e-03, -1.2171e+00,  5.3185e-01, -2.7167e-01, -1.3036e-01,
E                  6.5585e-01, -8.7625e-01,  3.1401e+00,  1.4979e+00,  2.5035e+00]],
E       
E               [[ 4.2637e-01, -6.1110e-02, -2.4573e-01, -3.5788e-01, -6.8074e-01,
E                  2.3999e-01, -4.7770e-01,  8.9752e-01,  3.1412e-01, -3.0069e-01],
E                [ 4.3116e-02, -4.7290e-02,  2.2023e+00, -2.4484e+00,  2.3384e+00,
E                  1.7588e-01, -3.0260e+00,  3.4718e+00, -2.5845e+00,  1.8351e+00],
E                [ 1.7247e+00,  5.3415e-02, -1.0736e-02,  5.3292e-01, -6.7885e-01,
E                 -1.3608e+00, -6.4260e-01, -9.3293e-01,  3.6026e-02, -6.2310e-03]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-10-4] ________________________

batch_shape = (2, 3), m = 4, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 1.6340,  6.6963,  1.9529, -2.9956,  6.3091, -0.3329, -2.4605, -1.6389,
        -1.9838,  1.0951,  8.9625,  7.8718, -3.5015, -0.3104,  3.0473, -1.9768,
         1.3353,  3.8014,  1.1314, -5.1127,  1.1530,  1.0364, -3.6165,  1.0044])
b = tensor([[[ 0.6679,  2.6667,  0.4878,  1.7009, -0.3841,  0.7026,  0.4029,
          -0.6921,  2.0089, -0.2314],
       ...1337],
         [ 0.7264,  0.1995,  2.1163, -1.5002,  1.2939,  2.6919,  1.4256,
          -1.8022,  0.0936,  0.4541]]])
prec = 1e-07
msg = 'tensor([ 1.6340,  6.6963,  1.9529, -2.9956,  6.3091, -0.3329, -2.4605, -1.6389,\n        -1.9838,  1.0951,  8.9625,  ...7],\n         [ 0.7264,  0.1995,  2.1163, -1.5002,  1.2939,  2.6919,  1.4256,\n          -1.8022,  0.0936,  0.4541]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 1.6340,  6.6963,  1.9529, -2.9956,  6.3091, -0.3329, -2.4605, -1.6389,
E               -1.9838,  1.0951,  8.9625,  7.8718, -3.5015, -0.3104,  3.0473, -1.9768,
E                1.3353,  3.8014,  1.1314, -5.1127,  1.1530,  1.0364, -3.6165,  1.0044]) vs tensor([[[ 0.6679,  2.6667,  0.4878,  1.7009, -0.3841,  0.7026,  0.4029,
E                 -0.6921,  2.0089, -0.2314],
E                [ 0.5187,  0.5878,  0.8294, -0.5329,  0.3804, -2.4858, -0.4938,
E                  1.7978,  0.2898,  1.9508],
E                [ 3.1390, -4.1590, -4.9136,  7.3040, -0.4928, -0.4984,  0.9629,
E                  1.9301, -4.0283, -1.2949]],
E       
E               [[ 0.7444, -0.3179, -1.0583, -0.9401, -1.0883,  0.3176,  0.9174,
E                  1.0104, -0.4860, -0.9301],
E                [ 0.2469, -1.0894,  1.3544,  1.2803,  0.4725,  3.0996,  0.4040,
E                 -0.1226,  0.5756, -0.1337],
E                [ 0.7264,  0.1995,  2.1163, -1.5002,  1.2939,  2.6919,  1.4256,
E                 -1.8022,  0.0936,  0.4541]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-10-5] ________________________

batch_shape = (2, 3), m = 5, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ 0.6027,  1.4995,  1.8252,  3.0881,  2.5955, -1.6159, -3.8901, -1.1816,
         0.6716, -5.6906, -1.6474, -4....8,  1.9016,  1.5404, -6.2727,  0.0755,  1.3120,  3.2124,
        -8.4682, -5.1929,  2.7001,  1.8068,  1.2844, -1.0147])
b = tensor([[[ 2.3991e+00,  7.3756e-01,  1.9946e+00,  3.7809e-01,  7.8686e-01,
           4.6005e-01, -3.1066e-02, -4.8250...1,  4.3587e-01, -8.9718e-02,  1.3488e+00,
          -1.6158e+00,  5.1739e-01, -1.0623e+00,  1.1538e-01, -2.1870e-01]]])
prec = 1e-07
msg = 'tensor([ 0.6027,  1.4995,  1.8252,  3.0881,  2.5955, -1.6159, -3.8901, -1.1816,\n         0.6716, -5.6906, -1.6474, -...  4.3587e-01, -8.9718e-02,  1.3488e+00,\n          -1.6158e+00,  5.1739e-01, -1.0623e+00,  1.1538e-01, -2.1870e-01]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ 0.6027,  1.4995,  1.8252,  3.0881,  2.5955, -1.6159, -3.8901, -1.1816,
E                0.6716, -5.6906, -1.6474, -4.4325, -2.3218,  4.5604,  2.4860,  0.0944,
E               -0.9152,  1.4548,  1.9016,  1.5404, -6.2727,  0.0755,  1.3120,  3.2124,
E               -8.4682, -5.1929,  2.7001,  1.8068,  1.2844, -1.0147]) vs tensor([[[ 2.3991e+00,  7.3756e-01,  1.9946e+00,  3.7809e-01,  7.8686e-01,
E                  4.6005e-01, -3.1066e-02, -4.8250e-01,  1.1610e-01, -2.8309e-01],
E                [-5.9431e-01, -8.1631e-01,  2.5081e-01, -9.0779e-01,  5.5260e-01,
E                  1.2249e+00, -1.5317e+00, -1.9972e+00, -2.1607e-01,  1.1522e+00],
E                [ 7.5106e-01,  1.0440e+00, -1.4272e+00, -2.9832e+00,  2.3695e-01,
E                  2.9043e+00,  9.7490e-01, -2.1303e+00, -4.9215e-02,  5.1694e-01]],
E       
E               [[ 3.2464e-03,  8.9542e-01, -1.8142e+00,  1.0567e+00, -1.5176e+00,
E                  2.3462e-01, -1.8946e+00,  1.3086e+00, -4.4950e-01,  1.5696e+00],
E                [ 2.1208e+00,  1.2841e+00, -2.3751e+00, -3.6479e+00,  1.9778e-01,
E                  2.9770e+00, -4.5531e-01, -3.7774e+00,  1.4329e+00, -5.3440e-02],
E                [ 3.4202e-03,  5.7433e-01,  4.3587e-01, -8.9718e-02,  1.3488e+00,
E                 -1.6158e+00,  5.1739e-01, -1.0623e+00,  1.1538e-01, -2.1870e-01]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-10-6] ________________________

batch_shape = (2, 3), m = 6, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([ -0.0691,  -4.3843,  -0.8119,  -5.2951,  -3.7481,   1.9779,   6.2193,
          3.9776,   5.9684,   7.6513,   ...2,   0.6143,   4.1184,
         -3.7095,  -7.1887,   0.8637,  -7.2007,  -5.9313,  -1.7978,   1.8648,
         -1.2161])
b = tensor([[[ 0.9606,  0.8221,  1.1521,  0.2174,  2.7687,  1.1387,  1.1742,
           1.1784,  0.8246,  0.7198],
       ...2674],
         [ 2.4382, -1.2355, -0.7118, -0.0729,  2.6285,  2.3787, -0.7075,
           1.9007, -0.0821,  2.6730]]])
prec = 1e-07
msg = 'tensor([ -0.0691,  -4.3843,  -0.8119,  -5.2951,  -3.7481,   1.9779,   6.2193,\n          3.9776,   5.9684,   7.6513, ...4],\n         [ 2.4382, -1.2355, -0.7118, -0.0729,  2.6285,  2.3787, -0.7075,\n           1.9007, -0.0821,  2.6730]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([ -0.0691,  -4.3843,  -0.8119,  -5.2951,  -3.7481,   1.9779,   6.2193,
E                 3.9776,   5.9684,   7.6513,   1.4750, -10.8666,  -0.6944,  -5.0853,
E                 9.7720,  14.4536,  -0.6226,  -4.6570,   1.0933,  -3.2371,   4.5543,
E                 7.3440,   0.6703,  -1.4967,  -2.2361,   1.8352,   0.6143,   4.1184,
E                -3.7095,  -7.1887,   0.8637,  -7.2007,  -5.9313,  -1.7978,   1.8648,
E                -1.2161]) vs tensor([[[ 0.9606,  0.8221,  1.1521,  0.2174,  2.7687,  1.1387,  1.1742,
E                  1.1784,  0.8246,  0.7198],
E                [ 2.9363,  0.4406,  2.4955,  1.1649, -1.2190, -0.5690,  0.8233,
E                  0.1071,  1.1873,  1.1515],
E                [ 1.5356,  0.1609, -0.1586, -1.2630,  0.9055,  2.3859, -2.9825,
E                 -0.8378,  0.0848,  0.3037]],
E       
E               [[ 1.9649, -1.3304,  1.4484, -0.1765, -0.2716,  1.0638, -1.0986,
E                 -3.3868,  2.7701,  0.3804],
E                [-5.5795, -3.9063, -2.2526,  0.6205,  3.3055,  2.4568,  5.7890,
E                 -0.0795,  2.6265, -2.2674],
E                [ 2.4382, -1.2355, -0.7118, -0.0729,  2.6285,  2.3787, -0.7075,
E                  1.9007, -0.0821,  2.6730]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
_______________________ test_convolve[same-(2, 3)-10-10] _______________________

batch_shape = (2, 3), m = 10, n = 10, mode = 'same'

    @pytest.mark.parametrize("m", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("n", [2, 3, 4, 5, 6, 10])
    @pytest.mark.parametrize("batch_shape", [(), (4,), (2, 3)], ids=str)
    @pytest.mark.parametrize("mode", ["full", "valid", "same"])
    def test_convolve(batch_shape, m, n, mode):
        signal = torch.randn(*batch_shape, m)
        kernel = torch.randn(*batch_shape, n)
        actual = convolve(signal, kernel, mode)
        expected = torch.stack(
            [
                torch.tensor(np.convolve(s, k, mode=mode))
                for s, k in zip(signal.reshape(-1, m), kernel.reshape(-1, n))
            ]
        ).reshape(*batch_shape, -1)
>       assert_close(actual, expected)

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/tests/common.py:218: in assert_close
    assert_tensors_equal(actual, expected, prec, msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = tensor([-17.4045, -14.8661,  -0.3438,  -8.7243,   4.1529,   8.9479,  -0.7739,
          8.6845,   4.6911,   3.5862, -1...   6.7475,  12.9271, -13.9098,  -2.2643,  -1.7573,   3.8845,  -3.7212,
          5.0930,   0.8516,  -5.5306,   5.2966])
b = tensor([[[ 1.3711, -0.2016,  0.7039, -0.6227, -0.0206, -3.3166, -0.9656,
          -2.7246, -0.7086, -1.0503],
       ...3587],
         [-0.5211, -4.6072,  0.0318,  2.7662,  3.9208,  7.5514, -4.9645,
          -3.9031, -3.4275, -0.7544]]])
prec = 1e-07
msg = 'tensor([-17.4045, -14.8661,  -0.3438,  -8.7243,   4.1529,   8.9479,  -0.7739,\n          8.6845,   4.6911,   3.5862, ...7],\n         [-0.5211, -4.6072,  0.0318,  2.7662,  3.9208,  7.5514, -4.9645,\n          -3.9031, -3.4275, -0.7544]]])'

    def assert_tensors_equal(a, b, prec=0.0, msg=""):
>       assert a.size() == b.size(), msg
E       AssertionError: tensor([-17.4045, -14.8661,  -0.3438,  -8.7243,   4.1529,   8.9479,  -0.7739,
E                 8.6845,   4.6911,   3.5862, -15.7522,  -1.2824,  -1.2983,  -2.2948,
E                13.0476,  -3.4002,   4.5359,  -6.5208,   5.2946,   3.6344,  -6.9615,
E                -0.1334,   2.7224,  -5.0473,  -6.3492,  17.4922,   0.3173,   3.5662,
E               -11.5652,  -2.0461,   9.1786,  16.1634,   2.3449,  -3.6652,  -8.3648,
E               -10.8782,  13.5908,   4.6189,  -9.2074,   2.2433,   3.8584,  -2.7346,
E                -4.0544,  -0.2314,  -1.7872,  -3.8690,   3.6560,  -1.7547,   9.9969,
E                 6.7475,  12.9271, -13.9098,  -2.2643,  -1.7573,   3.8845,  -3.7212,
E                 5.0930,   0.8516,  -5.5306,   5.2966]) vs tensor([[[ 1.3711, -0.2016,  0.7039, -0.6227, -0.0206, -3.3166, -0.9656,
E                 -2.7246, -0.7086, -1.0503],
E                [ 3.7203,  2.8612,  0.3741, -0.9810, -4.9175,  0.6698,  6.9971,
E                  3.9335, -0.4506,  1.8556],
E                [ 2.6429, -3.8060,  4.1360, -4.0613,  2.8187, -3.4443,  3.8068,
E                 -0.9304,  1.7174, -1.4375]],
E       
E               [[ 3.3118, -1.4193, -1.3185, -1.4701, -0.8775,  5.6608,  0.3159,
E                 -4.6672,  0.8481,  2.0800],
E                [-0.8885,  3.7259, -3.5378,  0.9650, -0.2785,  3.8032,  0.5433,
E                  3.2200,  2.3856, -3.3587],
E                [-0.5211, -4.6072,  0.0318,  2.7662,  3.9208,  7.5514, -4.9645,
E                 -3.9031, -3.4275, -0.7544]]])

../publishablew/pyro/pyro/tests/common.py:147: AssertionError
=========================== short test summary info ============================
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6]
FAILED ../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-10]
======================== 288 failed, 36 passed in 3.07s ========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
collecting ... collected 324 items

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-10] PASSED

============================= 324 passed in 0.86s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
collecting ... collected 324 items

../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-()-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(4,)-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[full-(2, 3)-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-()-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(4,)-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[valid-(2, 3)-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-()-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(4,)-10-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-2-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-3-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-4-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-5-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-6-10] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-2] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-3] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-4] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-5] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-6] PASSED
../publishablew/pyro/pyro/tests/ops/test_tensor_utils.py::test_convolve[same-(2, 3)-10-10] PASSED

============================= 324 passed in 0.86s ==============================
