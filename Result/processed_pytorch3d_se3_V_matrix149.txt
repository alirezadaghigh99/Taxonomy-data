output file:
processed_pytorch3d_se3_V_matrix149.json
function:
_se3_V_matrix
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp - ...', '../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_zero_translation FAILED', 'FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation', 'FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed', '../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation FAILED', 'FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format - ...', '../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format FAILED', '../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity FAILED', '../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp FAILED', 'FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity - Ru...', 'FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_singularity - Ru...', 'FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_zero_translation', '../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log FAILED', '../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_singularity FAILED', '../pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed FAILED', 'FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log - ...'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 9 items

../pytorch3d/tests/test_se3.py::TestSE3::test_bad_se3_input_value_err PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed FAILED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format FAILED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity FAILED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp FAILED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation FAILED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_singularity FAILED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log FAILED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_zero_translation FAILED

=================================== FAILURES ===================================
____________________ TestSE3.test_compare_with_precomputed _____________________

self = <tests.test_se3.TestSE3 testMethod=test_compare_with_precomputed>

    def test_compare_with_precomputed(self):
        """
        Compare the outputs against precomputed results.
        """
        self.assertClose(
>           se3_log_map(self.precomputed_transform),
            self.precomputed_log_transform,
            atol=1e-4,
        )

../pytorch3d/tests/test_se3.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/transforms/se3.py:134: in se3_log_map
    V = _se3_V_matrix(*_get_se3_V_input(log_rotation), eps=eps)
../pytorch3d/pytorch3d/transforms/se3.py:140: in _se3_V_matrix
    return _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

log_rotation = tensor([[ 0.8500, -1.9200,  0.6500],
        [-1.2800, -1.6600, -0.3001],
        [ 1.8600, -0.7100,  0.6900],
       ....0800],
        [-0.5900, -1.0700,  0.1000],
        [ 0.3900,  0.1600, -0.2000],
        [-0.6400,  0.4500, -0.5400]])
log_rotation_hat = tensor([[[ 0.0000, -0.6500, -1.9200],
         [ 0.6500,  0.0000, -0.8500],
         [ 1.9200,  0.8500,  0.0000]],

  ...],

        [[ 0.0000,  0.5400,  0.4500],
         [-0.5400,  0.0000,  0.6400],
         [-0.4500, -0.6400,  0.0000]]])
log_rotation_hat_square = tensor([[[-4.1087, -1.6320,  0.5525],
         [-1.6320, -1.1450, -1.2479],
         [ 0.5525, -1.2479, -4.4088]],

  ...],

        [[-0.4941, -0.2880,  0.3456],
         [-0.2880, -0.7012, -0.2430],
         [ 0.3456, -0.2430, -0.6121]]])
rotation_angles = tensor([2.1980, 2.1176, 2.1071, 1.5792, 1.3788, 1.6198, 1.1514, 1.2260, 0.4666,
        0.9506])
eps = 0.0001

    def _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=0.0001):
        """
        Computes the "V" matrix used in SE(3) transformations.
    
        Parameters:
        - log_rotation (torch.Tensor): The logarithm of the rotation matrix.
        - log_rotation_hat (torch.Tensor): The skew-symmetric matrix derived from `log_rotation`.
        - log_rotation_hat_square (torch.Tensor): The square of the skew-symmetric matrix.
        - rotation_angles (torch.Tensor): The angles of rotation.
        - eps (float, optional): A small value for numerical stability, defaulting to 1e-4.
    
        Returns:
        - V (torch.Tensor): The computed "V" matrix.
        """
        rotation_angles = rotation_angles.unsqueeze(-1) if rotation_angles.dim() == 0 else rotation_angles
        angle_squared = rotation_angles ** 2
        sin_angle = torch.sin(rotation_angles)
        cos_angle = torch.cos(rotation_angles)
        A = sin_angle / (rotation_angles + eps)
        B = (1 - cos_angle) / (angle_squared + eps)
        C = (1 - A) / (angle_squared + eps)
>       V = torch.eye(3, device=log_rotation.device) + B * log_rotation_hat + C * log_rotation_hat_square
E       RuntimeError: The size of tensor a (10) must match the size of tensor b (3) at non-singleton dimension 2

../pytorch3d/pytorch3d/transforms/temp.py:26: RuntimeError
______________________ TestSE3.test_se3_exp_output_format ______________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_exp_output_format>
batch_size = 100

    def test_se3_exp_output_format(self, batch_size: int = 100):
        """
        Check that the output of `se3_exp_map` is a valid SE3 matrix.
        """
>       transform = se3_exp_map(TestSE3.init_log_transform(batch_size=batch_size))

../pytorch3d/tests/test_se3.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/transforms/se3.py:59: in se3_exp_map
    V = _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=eps)
../pytorch3d/pytorch3d/transforms/se3.py:140: in _se3_V_matrix
    return _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

log_rotation = tensor([[ 8.4906e-01, -1.9244e+00,  6.5299e-01],
        [-1.2753e+00, -1.6621e+00, -3.0331e-01],
        [ 1.8577e+00...2],
        [-1.8061e+00,  4.8693e-01, -6.9613e-01],
        [ 3.6993e-01,  7.4330e-01, -1.1991e-01]], device='cuda:0')
log_rotation_hat = tensor([[[ 0.0000e+00, -6.5299e-01, -1.9244e+00],
         [ 6.5299e-01,  0.0000e+00, -8.4906e-01],
         [ 1.9244e...
         [-1.1991e-01,  0.0000e+00, -3.6993e-01],
         [-7.4330e-01,  3.6993e-01,  0.0000e+00]]], device='cuda:0')
log_rotation_hat_square = tensor([[[-4.1297e+00, -1.6339e+00,  5.5442e-01],
         [-1.6339e+00, -1.1473e+00, -1.2566e+00],
         [ 5.5442e...
         [ 2.7497e-01, -1.5123e-01, -8.9131e-02],
         [-4.4360e-02, -8.9131e-02, -6.8934e-01]]], device='cuda:0')
rotation_angles = tensor([2.2024, 2.1169, 2.1059, 1.5830, 1.3835, 1.6166, 1.1561, 1.2271, 0.4702,
        0.9504, 1.6181, 0.5840, 2.1791...3696,
        1.2974, 2.2362, 1.5318, 1.5666, 1.5101, 1.4053, 1.4236, 1.3553, 1.9960,
        0.8389], device='cuda:0')
eps = 0.0001

    def _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=0.0001):
        """
        Computes the "V" matrix used in SE(3) transformations.
    
        Parameters:
        - log_rotation (torch.Tensor): The logarithm of the rotation matrix.
        - log_rotation_hat (torch.Tensor): The skew-symmetric matrix derived from `log_rotation`.
        - log_rotation_hat_square (torch.Tensor): The square of the skew-symmetric matrix.
        - rotation_angles (torch.Tensor): The angles of rotation.
        - eps (float, optional): A small value for numerical stability, defaulting to 1e-4.
    
        Returns:
        - V (torch.Tensor): The computed "V" matrix.
        """
        rotation_angles = rotation_angles.unsqueeze(-1) if rotation_angles.dim() == 0 else rotation_angles
        angle_squared = rotation_angles ** 2
        sin_angle = torch.sin(rotation_angles)
        cos_angle = torch.cos(rotation_angles)
        A = sin_angle / (rotation_angles + eps)
        B = (1 - cos_angle) / (angle_squared + eps)
        C = (1 - A) / (angle_squared + eps)
>       V = torch.eye(3, device=log_rotation.device) + B * log_rotation_hat + C * log_rotation_hat_square
E       RuntimeError: The size of tensor a (100) must match the size of tensor b (3) at non-singleton dimension 2

../pytorch3d/pytorch3d/transforms/temp.py:26: RuntimeError
_______________________ TestSE3.test_se3_exp_singularity _______________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_exp_singularity>
batch_size = 100

    def test_se3_exp_singularity(self, batch_size: int = 100):
        """
        Tests whether the `se3_exp_map` is robust to the input vectors
        with low L2 norms, where the algorithm is numerically unstable.
        """
        # generate random log-rotations with a tiny angle
        log_rot = TestSE3.init_log_transform(batch_size=batch_size)
        log_rot_small = log_rot * 1e-6
        log_rot_small.requires_grad = True
>       transforms = se3_exp_map(log_rot_small)

../pytorch3d/tests/test_se3.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/transforms/se3.py:59: in se3_exp_map
    V = _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=eps)
../pytorch3d/pytorch3d/transforms/se3.py:140: in _se3_V_matrix
    return _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

log_rotation = tensor([[ 8.4906e-07, -1.9244e-06,  6.5299e-07],
        [-1.2753e-06, -1.6621e-06, -3.0331e-07],
        [ 1.8577e-06...e-07, -6.9613e-07],
        [ 3.6993e-07,  7.4330e-07, -1.1991e-07]], device='cuda:0',
       grad_fn=<SliceBackward0>)
log_rotation_hat = tensor([[[ 0.0000e+00, -6.5299e-07, -1.9244e-06],
         [ 6.5299e-07,  0.0000e+00, -8.4906e-07],
         [ 1.9244e...00e+00, -3.6993e-07],
         [-7.4330e-07,  3.6993e-07,  0.0000e+00]]], device='cuda:0',
       grad_fn=<CopySlices>)
log_rotation_hat_square = tensor([[[-4.1297e-12, -1.6339e-12,  5.5442e-13],
         [-1.6339e-12, -1.1473e-12, -1.2566e-12],
         [ 5.5442e...e-13, -8.9131e-14],
         [-4.4360e-14, -8.9131e-14, -6.8934e-13]]], device='cuda:0',
       grad_fn=<BmmBackward0>)
rotation_angles = tensor([0.0100, 0.0100, 0.0100, 0.0100, 0.0100, 0.0100, 0.0100, 0.0100, 0.0100,
        0.0100, 0.0100, 0.0100, 0.0100...100, 0.0100, 0.0100, 0.0100, 0.0100, 0.0100, 0.0100, 0.0100,
        0.0100], device='cuda:0', grad_fn=<SqrtBackward0>)
eps = 0.0001

    def _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=0.0001):
        """
        Computes the "V" matrix used in SE(3) transformations.
    
        Parameters:
        - log_rotation (torch.Tensor): The logarithm of the rotation matrix.
        - log_rotation_hat (torch.Tensor): The skew-symmetric matrix derived from `log_rotation`.
        - log_rotation_hat_square (torch.Tensor): The square of the skew-symmetric matrix.
        - rotation_angles (torch.Tensor): The angles of rotation.
        - eps (float, optional): A small value for numerical stability, defaulting to 1e-4.
    
        Returns:
        - V (torch.Tensor): The computed "V" matrix.
        """
        rotation_angles = rotation_angles.unsqueeze(-1) if rotation_angles.dim() == 0 else rotation_angles
        angle_squared = rotation_angles ** 2
        sin_angle = torch.sin(rotation_angles)
        cos_angle = torch.cos(rotation_angles)
        A = sin_angle / (rotation_angles + eps)
        B = (1 - cos_angle) / (angle_squared + eps)
        C = (1 - A) / (angle_squared + eps)
>       V = torch.eye(3, device=log_rotation.device) + B * log_rotation_hat + C * log_rotation_hat_square
E       RuntimeError: The size of tensor a (100) must match the size of tensor b (3) at non-singleton dimension 2

../pytorch3d/pytorch3d/transforms/temp.py:26: RuntimeError
______________________ TestSE3.test_se3_exp_to_log_to_exp ______________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_exp_to_log_to_exp>
batch_size = 10000

    def test_se3_exp_to_log_to_exp(self, batch_size: int = 10000):
        """
        Check that `se3_exp_map(se3_log_map(A))==A` for
        a batch of randomly generated SE(3) matrices `A`.
        """
        transform = TestSE3.init_transform(batch_size=batch_size)
        # Limit test transforms to those not around the singularity where
        # the rotation angle~=pi.
        nonsingular = so3_rotation_angle(transform[:, :3, :3]) < 3.134
        transform = transform[nonsingular]
        transform_ = se3_exp_map(
>           se3_log_map(transform, eps=1e-8, cos_bound=0.0), eps=1e-8
        )

../pytorch3d/tests/test_se3.py:269: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/transforms/se3.py:134: in se3_log_map
    V = _se3_V_matrix(*_get_se3_V_input(log_rotation), eps=eps)
../pytorch3d/pytorch3d/transforms/se3.py:140: in _se3_V_matrix
    return _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

log_rotation = tensor([[-2.7617,  0.2198, -1.0849],
        [ 0.6037, -0.6004, -0.7558],
        [ 1.5982,  2.0829,  0.3801],
       ... 1.6749,  2.0024,  1.4097],
        [-0.7656,  0.6934,  0.8629],
        [ 1.3354, -0.8682, -2.2528]], device='cuda:0')
log_rotation_hat = tensor([[[ 0.0000,  1.0849,  0.2198],
         [-1.0849,  0.0000,  2.7617],
         [-0.2198, -2.7617,  0.0000]],

  ...0000,  2.2528, -0.8682],
         [-2.2528,  0.0000, -1.3354],
         [ 0.8682,  1.3354,  0.0000]]], device='cuda:0')
log_rotation_hat_square = tensor([[[-1.2254, -0.6071,  2.9962],
         [-0.6071, -8.8043, -0.2385],
         [ 2.9962, -0.2385, -7.6756]],

  ...8288, -1.1594, -3.0084],
         [-1.1594, -6.8584,  1.9558],
         [-3.0084,  1.9558, -2.5370]]], device='cuda:0')
rotation_angles = tensor([2.9753, 1.1385, 2.6528,  ..., 2.9668, 1.3460, 2.7590], device='cuda:0')
eps = 1e-08

    def _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=0.0001):
        """
        Computes the "V" matrix used in SE(3) transformations.
    
        Parameters:
        - log_rotation (torch.Tensor): The logarithm of the rotation matrix.
        - log_rotation_hat (torch.Tensor): The skew-symmetric matrix derived from `log_rotation`.
        - log_rotation_hat_square (torch.Tensor): The square of the skew-symmetric matrix.
        - rotation_angles (torch.Tensor): The angles of rotation.
        - eps (float, optional): A small value for numerical stability, defaulting to 1e-4.
    
        Returns:
        - V (torch.Tensor): The computed "V" matrix.
        """
        rotation_angles = rotation_angles.unsqueeze(-1) if rotation_angles.dim() == 0 else rotation_angles
        angle_squared = rotation_angles ** 2
        sin_angle = torch.sin(rotation_angles)
        cos_angle = torch.cos(rotation_angles)
        A = sin_angle / (rotation_angles + eps)
        B = (1 - cos_angle) / (angle_squared + eps)
        C = (1 - A) / (angle_squared + eps)
>       V = torch.eye(3, device=log_rotation.device) + B * log_rotation_hat + C * log_rotation_hat_square
E       RuntimeError: The size of tensor a (9969) must match the size of tensor b (3) at non-singleton dimension 2

../pytorch3d/pytorch3d/transforms/temp.py:26: RuntimeError
____________________ TestSE3.test_se3_exp_zero_translation _____________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_exp_zero_translation>
batch_size = 100

    def test_se3_exp_zero_translation(self, batch_size: int = 100):
        """
        Check that `se3_exp_map` with zero translation gives
        the same result as corresponding `so3_exp_map`.
        """
        log_transform = TestSE3.init_log_transform(batch_size=batch_size)
        log_transform[:, :3] *= 0.0
>       transform = se3_exp_map(log_transform, eps=1e-8)

../pytorch3d/tests/test_se3.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/transforms/se3.py:59: in se3_exp_map
    V = _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=eps)
../pytorch3d/pytorch3d/transforms/se3.py:140: in _se3_V_matrix
    return _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

log_rotation = tensor([[ 8.4906e-01, -1.9244e+00,  6.5299e-01],
        [-1.2753e+00, -1.6621e+00, -3.0331e-01],
        [ 1.8577e+00...2],
        [-1.8061e+00,  4.8693e-01, -6.9613e-01],
        [ 3.6993e-01,  7.4330e-01, -1.1991e-01]], device='cuda:0')
log_rotation_hat = tensor([[[ 0.0000e+00, -6.5299e-01, -1.9244e+00],
         [ 6.5299e-01,  0.0000e+00, -8.4906e-01],
         [ 1.9244e...
         [-1.1991e-01,  0.0000e+00, -3.6993e-01],
         [-7.4330e-01,  3.6993e-01,  0.0000e+00]]], device='cuda:0')
log_rotation_hat_square = tensor([[[-4.1297e+00, -1.6339e+00,  5.5442e-01],
         [-1.6339e+00, -1.1473e+00, -1.2566e+00],
         [ 5.5442e...
         [ 2.7497e-01, -1.5123e-01, -8.9131e-02],
         [-4.4360e-02, -8.9131e-02, -6.8934e-01]]], device='cuda:0')
rotation_angles = tensor([2.2024, 2.1169, 2.1059, 1.5830, 1.3835, 1.6166, 1.1561, 1.2271, 0.4702,
        0.9504, 1.6181, 0.5840, 2.1791...3696,
        1.2974, 2.2362, 1.5318, 1.5666, 1.5101, 1.4053, 1.4236, 1.3553, 1.9960,
        0.8389], device='cuda:0')
eps = 1e-08

    def _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=0.0001):
        """
        Computes the "V" matrix used in SE(3) transformations.
    
        Parameters:
        - log_rotation (torch.Tensor): The logarithm of the rotation matrix.
        - log_rotation_hat (torch.Tensor): The skew-symmetric matrix derived from `log_rotation`.
        - log_rotation_hat_square (torch.Tensor): The square of the skew-symmetric matrix.
        - rotation_angles (torch.Tensor): The angles of rotation.
        - eps (float, optional): A small value for numerical stability, defaulting to 1e-4.
    
        Returns:
        - V (torch.Tensor): The computed "V" matrix.
        """
        rotation_angles = rotation_angles.unsqueeze(-1) if rotation_angles.dim() == 0 else rotation_angles
        angle_squared = rotation_angles ** 2
        sin_angle = torch.sin(rotation_angles)
        cos_angle = torch.cos(rotation_angles)
        A = sin_angle / (rotation_angles + eps)
        B = (1 - cos_angle) / (angle_squared + eps)
        C = (1 - A) / (angle_squared + eps)
>       V = torch.eye(3, device=log_rotation.device) + B * log_rotation_hat + C * log_rotation_hat_square
E       RuntimeError: The size of tensor a (100) must match the size of tensor b (3) at non-singleton dimension 2

../pytorch3d/pytorch3d/transforms/temp.py:26: RuntimeError
_______________________ TestSE3.test_se3_log_singularity _______________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_log_singularity>
batch_size = 100

    def test_se3_log_singularity(self, batch_size: int = 100):
        """
        Tests whether the `se3_log_map` is robust to the input matrices
        whose rotation angles and translations are close to the numerically
        unstable region (i.e. matrices with low rotation angles
        and 0 translation).
        """
        # generate random rotations with a tiny angle
        device = torch.device("cuda:0")
        identity = torch.eye(3, device=device)
        rot180 = identity * torch.tensor([[1.0, -1.0, -1.0]], device=device)
        r = [identity, rot180]
        r.extend(
            [
                torch.linalg.qr(identity + torch.randn_like(identity) * 1e-6)[0]
                + float(i > batch_size // 2) * (0.5 - torch.rand_like(identity)) * 1e-8
                # this adds random noise to the second half
                # of the random orthogonal matrices to generate
                # near-orthogonal matrices
                for i in range(batch_size - 2)
            ]
        )
        r = torch.stack(r)
        # tiny translations
        t = torch.randn(batch_size, 3, dtype=r.dtype, device=device) * 1e-6
        # create the transform matrix
        transform = torch.zeros(batch_size, 4, 4, dtype=torch.float32, device=device)
        transform[:, :3, :3] = r
        transform[:, 3, :3] = t
        transform[:, 3, 3] = 1.0
        transform.requires_grad = True
        # the log of the transform
>       log_transform = se3_log_map(transform, eps=1e-4, cos_bound=1e-4)

../pytorch3d/tests/test_se3.py:219: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/transforms/se3.py:134: in se3_log_map
    V = _se3_V_matrix(*_get_se3_V_input(log_rotation), eps=eps)
../pytorch3d/pytorch3d/transforms/se3.py:140: in _se3_V_matrix
    return _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

log_rotation = tensor([[ 0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 3.1416e+00,  0.0000e+00,  0.0000e+00],
        [ 1.0201e-06...19e-09, -3.1416e+00],
        [ 1.8006e-07, -5.4254e-07, -3.1416e+00]], device='cuda:0',
       grad_fn=<DivBackward0>)
log_rotation_hat = tensor([[[ 0.0000e+00, -0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00, -0.0000e+00],
         [-0.0000e...00e+00, -1.8006e-07],
         [ 5.4254e-07,  1.8006e-07,  0.0000e+00]]], device='cuda:0',
       grad_fn=<CopySlices>)
log_rotation_hat_square = tensor([[[ 0.0000e+00,  0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00,  0.0000e+00],
         [ 0.0000e...e+00,  1.7045e-06],
         [-5.6567e-07,  1.7045e-06, -3.2678e-13]]], device='cuda:0',
       grad_fn=<BmmBackward0>)
rotation_angles = tensor([0.0100, 3.1416, 3.1416, 3.1416, 3.1416, 3.1416, 3.1416, 3.1416, 3.1416,
        3.1416, 3.1416, 3.1416, 3.1416...416, 3.1416, 3.1416, 3.1416, 3.1416, 3.1416, 3.1416, 3.1416,
        3.1416], device='cuda:0', grad_fn=<SqrtBackward0>)
eps = 0.0001

    def _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=0.0001):
        """
        Computes the "V" matrix used in SE(3) transformations.
    
        Parameters:
        - log_rotation (torch.Tensor): The logarithm of the rotation matrix.
        - log_rotation_hat (torch.Tensor): The skew-symmetric matrix derived from `log_rotation`.
        - log_rotation_hat_square (torch.Tensor): The square of the skew-symmetric matrix.
        - rotation_angles (torch.Tensor): The angles of rotation.
        - eps (float, optional): A small value for numerical stability, defaulting to 1e-4.
    
        Returns:
        - V (torch.Tensor): The computed "V" matrix.
        """
        rotation_angles = rotation_angles.unsqueeze(-1) if rotation_angles.dim() == 0 else rotation_angles
        angle_squared = rotation_angles ** 2
        sin_angle = torch.sin(rotation_angles)
        cos_angle = torch.cos(rotation_angles)
        A = sin_angle / (rotation_angles + eps)
        B = (1 - cos_angle) / (angle_squared + eps)
        C = (1 - A) / (angle_squared + eps)
>       V = torch.eye(3, device=log_rotation.device) + B * log_rotation_hat + C * log_rotation_hat_square
E       RuntimeError: The size of tensor a (100) must match the size of tensor b (3) at non-singleton dimension 2

../pytorch3d/pytorch3d/transforms/temp.py:26: RuntimeError
______________________ TestSE3.test_se3_log_to_exp_to_log ______________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_log_to_exp_to_log>
batch_size = 100

    def test_se3_log_to_exp_to_log(self, batch_size: int = 100):
        """
        Check that `se3_log_map(se3_exp_map(log_transform))==log_transform`
        for a randomly generated batch of SE(3) matrix logarithms `log_transform`.
        """
        log_transform = TestSE3.init_log_transform(batch_size=batch_size)
>       log_transform_ = se3_log_map(se3_exp_map(log_transform, eps=1e-8), eps=1e-8)

../pytorch3d/tests/test_se3.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/transforms/se3.py:59: in se3_exp_map
    V = _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=eps)
../pytorch3d/pytorch3d/transforms/se3.py:140: in _se3_V_matrix
    return _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

log_rotation = tensor([[ 8.4906e-01, -1.9244e+00,  6.5299e-01],
        [-1.2753e+00, -1.6621e+00, -3.0331e-01],
        [ 1.8577e+00...2],
        [-1.8061e+00,  4.8693e-01, -6.9613e-01],
        [ 3.6993e-01,  7.4330e-01, -1.1991e-01]], device='cuda:0')
log_rotation_hat = tensor([[[ 0.0000e+00, -6.5299e-01, -1.9244e+00],
         [ 6.5299e-01,  0.0000e+00, -8.4906e-01],
         [ 1.9244e...
         [-1.1991e-01,  0.0000e+00, -3.6993e-01],
         [-7.4330e-01,  3.6993e-01,  0.0000e+00]]], device='cuda:0')
log_rotation_hat_square = tensor([[[-4.1297e+00, -1.6339e+00,  5.5442e-01],
         [-1.6339e+00, -1.1473e+00, -1.2566e+00],
         [ 5.5442e...
         [ 2.7497e-01, -1.5123e-01, -8.9131e-02],
         [-4.4360e-02, -8.9131e-02, -6.8934e-01]]], device='cuda:0')
rotation_angles = tensor([2.2024, 2.1169, 2.1059, 1.5830, 1.3835, 1.6166, 1.1561, 1.2271, 0.4702,
        0.9504, 1.6181, 0.5840, 2.1791...3696,
        1.2974, 2.2362, 1.5318, 1.5666, 1.5101, 1.4053, 1.4236, 1.3553, 1.9960,
        0.8389], device='cuda:0')
eps = 1e-08

    def _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=0.0001):
        """
        Computes the "V" matrix used in SE(3) transformations.
    
        Parameters:
        - log_rotation (torch.Tensor): The logarithm of the rotation matrix.
        - log_rotation_hat (torch.Tensor): The skew-symmetric matrix derived from `log_rotation`.
        - log_rotation_hat_square (torch.Tensor): The square of the skew-symmetric matrix.
        - rotation_angles (torch.Tensor): The angles of rotation.
        - eps (float, optional): A small value for numerical stability, defaulting to 1e-4.
    
        Returns:
        - V (torch.Tensor): The computed "V" matrix.
        """
        rotation_angles = rotation_angles.unsqueeze(-1) if rotation_angles.dim() == 0 else rotation_angles
        angle_squared = rotation_angles ** 2
        sin_angle = torch.sin(rotation_angles)
        cos_angle = torch.cos(rotation_angles)
        A = sin_angle / (rotation_angles + eps)
        B = (1 - cos_angle) / (angle_squared + eps)
        C = (1 - A) / (angle_squared + eps)
>       V = torch.eye(3, device=log_rotation.device) + B * log_rotation_hat + C * log_rotation_hat_square
E       RuntimeError: The size of tensor a (100) must match the size of tensor b (3) at non-singleton dimension 2

../pytorch3d/pytorch3d/transforms/temp.py:26: RuntimeError
____________________ TestSE3.test_se3_log_zero_translation _____________________

self = <tests.test_se3.TestSE3 testMethod=test_se3_log_zero_translation>
batch_size = 100

    def test_se3_log_zero_translation(self, batch_size: int = 100):
        """
        Check that `se3_log_map` with zero translation gives
        the same result as corresponding `so3_log_map`.
        """
        transform = TestSE3.init_transform(batch_size=batch_size)
        transform[:, 3, :3] *= 0.0
>       log_transform = se3_log_map(transform, eps=1e-8, cos_bound=1e-4)

../pytorch3d/tests/test_se3.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/transforms/se3.py:134: in se3_log_map
    V = _se3_V_matrix(*_get_se3_V_input(log_rotation), eps=eps)
../pytorch3d/pytorch3d/transforms/se3.py:140: in _se3_V_matrix
    return _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

log_rotation = tensor([[-2.7617,  0.2198, -1.0849],
        [ 0.6037, -0.6004, -0.7558],
        [ 1.5982,  2.0829,  0.3801],
       ... 0.8028,  0.6486,  0.5900],
        [-2.6038, -0.9546, -0.1481],
        [-0.2401,  1.6728, -0.4914]], device='cuda:0')
log_rotation_hat = tensor([[[ 0.0000,  1.0849,  0.2198],
         [-1.0849,  0.0000,  2.7617],
         [-0.2198, -2.7617,  0.0000]],

  ...0000,  0.4914,  1.6728],
         [-0.4914,  0.0000,  0.2401],
         [-1.6728, -0.2401,  0.0000]]], device='cuda:0')
log_rotation_hat_square = tensor([[[-1.2254e+00, -6.0715e-01,  2.9962e+00],
         [-6.0715e-01, -8.8043e+00, -2.3851e-01],
         [ 2.9962e...
         [-4.0166e-01, -2.9914e-01, -8.2206e-01],
         [ 1.1799e-01, -8.2206e-01, -2.8560e+00]]], device='cuda:0')
rotation_angles = tensor([2.9753, 1.1385, 2.6528, 3.0567, 1.9495, 1.6301, 2.9026, 3.0044, 2.1845,
        1.7585, 0.3816, 2.6138, 2.5490...8612,
        3.0331, 1.3957, 2.0465, 1.9271, 3.0333, 1.9378, 1.6866, 1.1888, 2.7772,
        1.7600], device='cuda:0')
eps = 1e-08

    def _se3_V_matrix(log_rotation, log_rotation_hat, log_rotation_hat_square, rotation_angles, eps=0.0001):
        """
        Computes the "V" matrix used in SE(3) transformations.
    
        Parameters:
        - log_rotation (torch.Tensor): The logarithm of the rotation matrix.
        - log_rotation_hat (torch.Tensor): The skew-symmetric matrix derived from `log_rotation`.
        - log_rotation_hat_square (torch.Tensor): The square of the skew-symmetric matrix.
        - rotation_angles (torch.Tensor): The angles of rotation.
        - eps (float, optional): A small value for numerical stability, defaulting to 1e-4.
    
        Returns:
        - V (torch.Tensor): The computed "V" matrix.
        """
        rotation_angles = rotation_angles.unsqueeze(-1) if rotation_angles.dim() == 0 else rotation_angles
        angle_squared = rotation_angles ** 2
        sin_angle = torch.sin(rotation_angles)
        cos_angle = torch.cos(rotation_angles)
        A = sin_angle / (rotation_angles + eps)
        B = (1 - cos_angle) / (angle_squared + eps)
        C = (1 - A) / (angle_squared + eps)
>       V = torch.eye(3, device=log_rotation.device) + B * log_rotation_hat + C * log_rotation_hat_square
E       RuntimeError: The size of tensor a (100) must match the size of tensor b (3) at non-singleton dimension 2

../pytorch3d/pytorch3d/transforms/temp.py:26: RuntimeError
=========================== short test summary info ============================
FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed
FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format - ...
FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity - Ru...
FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp - ...
FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation
FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_singularity - Ru...
FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log - ...
FAILED ../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_zero_translation
========================= 8 failed, 1 passed in 1.65s ==========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 9 items

../pytorch3d/tests/test_se3.py::TestSE3::test_bad_se3_input_value_err PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_singularity PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_zero_translation PASSED

============================== 9 passed in 1.43s ===============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 9 items

../pytorch3d/tests/test_se3.py::TestSE3::test_bad_se3_input_value_err PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_compare_with_precomputed PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_output_format PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_singularity PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_to_log_to_exp PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_exp_zero_translation PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_singularity PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_to_exp_to_log PASSED
../pytorch3d/tests/test_se3.py::TestSE3::test_se3_log_zero_translation PASSED

============================== 9 passed in 1.41s ===============================
