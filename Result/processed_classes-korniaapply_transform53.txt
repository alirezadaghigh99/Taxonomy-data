output file:
processed_classes-korniaapply_transform53.json
function:
apply_transform
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32] FAILED [ 35%]', 'FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32]', '../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32] FAILED [ 64%]', 'FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32]', '../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32] FAILED [ 58%]', 'FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32]', '../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32] FAILED [ 76%]', 'FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32]', '../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32] FAILED [ 70%]', 'FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32]', '../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32] FAILED [ 47%]', 'FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32]', '../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32] FAILED [ 52%]', '../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32] FAILED [ 41%]', 'FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32]', '../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32] FAILED [ 82%]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python3
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'inductor', 'onnxrt', 'jit', 'openxla', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 17 items

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_smoke XFAIL [  5%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-1] PASSED [ 11%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-3] PASSED [ 17%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle_batch[cpu-float32] PASSED [ 23%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_same_on_batch[cpu-float32] PASSED [ 29%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32] FAILED [ 35%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32] FAILED [ 41%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32] FAILED [ 47%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32] FAILED [ 52%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32] FAILED [ 58%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32] FAILED [ 64%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32] FAILED [ 70%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32] FAILED [ 76%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32] FAILED [ 82%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_sequential[cpu-float32] PASSED [ 88%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jitter_batch_sequential[cpu-float32] PASSED [ 94%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_gradcheck[cpu] SKIPPED [100%]

=================================== FAILURES ===================================
_____________ TestColorJiggle.test_random_brightness[cpu-float32] ______________

self = <test_augmentation.TestColorJiggle object at 0x7154184650f0>
device = device(type='cpu'), dtype = torch.float32

    def test_random_brightness(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(brightness=0.2)
    
        input = torch.tensor(
            [[[[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]]]],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 3, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_brightness(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1299: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...0000]],

         [[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]]]])
expected = tensor([[[[0.2529, 0.3529, 0.4529],
          [0.7529, 0.6529, 0.5529],
          [0.8529, 0.9529, 1.0000]],

        ...0000]],

         [[0.2660, 0.3660, 0.4660],
          [0.7660, 0.6660, 0.5660],
          [0.8660, 0.9660, 1.0000]]]])
rtol = 0.01, atol = 0.0031622776601683794, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 48 / 54 (88.9%)
E       Greatest absolute difference: 0.16600000858306885 at index (1, 0, 0, 0) (up to 0.0031622776601683794 allowed)
E       Greatest relative difference: 0.6240601539611816 at index (1, 0, 0, 0) (up to 0.01 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
__________ TestColorJiggle.test_random_brightness_tuple[cpu-float32] ___________

self = <test_augmentation.TestColorJiggle object at 0x715418465420>
device = device(type='cpu'), dtype = torch.float32

    def test_random_brightness_tuple(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(brightness=(0.8, 1.2))
    
        input = torch.tensor(
            [[[[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]]]],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 3, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_brightness(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...0000]],

         [[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]]]])
expected = tensor([[[[0.2529, 0.3529, 0.4529],
          [0.7529, 0.6529, 0.5529],
          [0.8529, 0.9529, 1.0000]],

        ...0000]],

         [[0.2660, 0.3660, 0.4660],
          [0.7660, 0.6660, 0.5660],
          [0.8660, 0.9660, 1.0000]]]])
rtol = 0.01, atol = 0.0031622776601683794, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 48 / 54 (88.9%)
E       Greatest absolute difference: 0.16600000858306885 at index (1, 0, 0, 0) (up to 0.0031622776601683794 allowed)
E       Greatest relative difference: 0.6240601539611816 at index (1, 0, 0, 0) (up to 0.01 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
______________ TestColorJiggle.test_random_contrast[cpu-float32] _______________

self = <test_augmentation.TestColorJiggle object at 0x715418465750>
device = device(type='cpu'), dtype = torch.float32

    def test_random_contrast(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(contrast=0.2)
    
        input = torch.tensor(
            [[[[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]]]],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 3, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_contrast(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...0000]],

         [[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]]]])
expected = tensor([[[[0.0953, 0.1906, 0.2859],
          [0.5719, 0.4766, 0.3813],
          [0.6672, 0.7625, 0.9531]],

        ...0000]],

         [[0.1184, 0.2367, 0.3551],
          [0.7102, 0.5919, 0.4735],
          [0.8286, 0.9470, 1.0000]]]])
rtol = 0.01, atol = 0.0031622776601683794, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 51 / 54 (94.4%)
E       Greatest absolute difference: 0.1470000147819519 at index (1, 0, 2, 1) (up to 0.0031622776601683794 allowed)
E       Greatest relative difference: 0.15540538728237152 at index (1, 0, 0, 0) (up to 0.01 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
____________ TestColorJiggle.test_random_contrast_list[cpu-float32] ____________

self = <test_augmentation.TestColorJiggle object at 0x715418465a80>
device = device(type='cpu'), dtype = torch.float32

    def test_random_contrast_list(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(contrast=[0.8, 1.2])
    
        input = torch.tensor(
            [[[[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]]]],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 3, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_contrast(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1386: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...0000]],

         [[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]]]])
expected = tensor([[[[0.0953, 0.1906, 0.2859],
          [0.5719, 0.4766, 0.3813],
          [0.6672, 0.7625, 0.9531]],

        ...0000]],

         [[0.1184, 0.2367, 0.3551],
          [0.7102, 0.5919, 0.4735],
          [0.8286, 0.9470, 1.0000]]]])
rtol = 0.01, atol = 0.0031622776601683794, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 51 / 54 (94.4%)
E       Greatest absolute difference: 0.1470000147819519 at index (1, 0, 2, 1) (up to 0.0031622776601683794 allowed)
E       Greatest relative difference: 0.15540538728237152 at index (1, 0, 0, 0) (up to 0.01 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____________ TestColorJiggle.test_random_saturation[cpu-float32] ______________

self = <test_augmentation.TestColorJiggle object at 0x715418465db0>
device = device(type='cpu'), dtype = torch.float32

    def test_random_saturation(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(saturation=0.2)
    
        input = torch.tensor(
            [
                [
                    [[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]],
                    [[1.0, 0.5, 0.6], [0.6, 0.3, 0.2], [0.8, 0.1, 0.2]],
                    [[0.6, 0.8, 0.7], [0.9, 0.3, 0.2], [0.8, 0.4, 0.5]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 1, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_saturation(device, dtype)
>       self.assert_close(f(input), expected, low_tolerance=True)

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1448: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6000, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.4000, 0.5000]]]])
expected = tensor([[[[0.1876, 0.2584, 0.3389],
          [0.6292, 0.5000, 0.4000],
          [0.7097, 0.8000, 1.0000]],

        ...1060]],

         [[0.5556, 0.8000, 0.7000],
          [0.9000, 0.2765, 0.1765],
          [0.8000, 0.3530, 0.4413]]]])
rtol = 0.01, atol = 0.0031622776601683794, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 33 / 54 (61.1%)
E       Greatest absolute difference: 0.10000000149011612 at index (1, 0, 0, 0) (up to 0.0031622776601683794 allowed)
E       Greatest relative difference: inf at index (1, 0, 0, 0) (up to 0.01 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
__________ TestColorJiggle.test_random_saturation_tensor[cpu-float32] __________

self = <test_augmentation.TestColorJiggle object at 0x7154184660e0>
device = device(type='cpu'), dtype = torch.float32

    def test_random_saturation_tensor(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(saturation=torch.tensor(0.2))
    
        input = torch.tensor(
            [
                [
                    [[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]],
                    [[1.0, 0.5, 0.6], [0.6, 0.3, 0.2], [0.8, 0.1, 0.2]],
                    [[0.6, 0.8, 0.7], [0.9, 0.3, 0.2], [0.8, 0.4, 0.5]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 1, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_saturation(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1469: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6000, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.4000, 0.5000]]]])
expected = tensor([[[[0.1876, 0.2584, 0.3389],
          [0.6292, 0.5000, 0.4000],
          [0.7097, 0.8000, 1.0000]],

        ...1060]],

         [[0.5556, 0.8000, 0.7000],
          [0.9000, 0.2765, 0.1765],
          [0.8000, 0.3530, 0.4413]]]])
rtol = 0.01, atol = 0.0031622776601683794, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 33 / 54 (61.1%)
E       Greatest absolute difference: 0.10000000149011612 at index (1, 0, 0, 0) (up to 0.0031622776601683794 allowed)
E       Greatest relative difference: inf at index (1, 0, 0, 0) (up to 0.01 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
__________ TestColorJiggle.test_random_saturation_tuple[cpu-float32] ___________

self = <test_augmentation.TestColorJiggle object at 0x715418466410>
device = device(type='cpu'), dtype = torch.float32

    def test_random_saturation_tuple(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(saturation=(0.8, 1.2))
    
        input = torch.tensor(
            [
                [
                    [[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]],
                    [[1.0, 0.5, 0.6], [0.6, 0.3, 0.2], [0.8, 0.1, 0.2]],
                    [[0.6, 0.8, 0.7], [0.9, 0.3, 0.2], [0.8, 0.4, 0.5]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 1, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_saturation(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1490: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6000, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.4000, 0.5000]]]])
expected = tensor([[[[0.1876, 0.2584, 0.3389],
          [0.6292, 0.5000, 0.4000],
          [0.7097, 0.8000, 1.0000]],

        ...1060]],

         [[0.5556, 0.8000, 0.7000],
          [0.9000, 0.2765, 0.1765],
          [0.8000, 0.3530, 0.4413]]]])
rtol = 0.01, atol = 0.0031622776601683794, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 33 / 54 (61.1%)
E       Greatest absolute difference: 0.10000000149011612 at index (1, 0, 0, 0) (up to 0.0031622776601683794 allowed)
E       Greatest relative difference: inf at index (1, 0, 0, 0) (up to 0.01 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
_________________ TestColorJiggle.test_random_hue[cpu-float32] _________________

self = <test_augmentation.TestColorJiggle object at 0x715418466740>
device = device(type='cpu'), dtype = torch.float32

    def test_random_hue(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(hue=0.1 / pi.item())
    
        input = torch.tensor(
            [
                [
                    [[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]],
                    [[1.0, 0.5, 0.6], [0.6, 0.3, 0.2], [0.8, 0.1, 0.2]],
                    [[0.6, 0.8, 0.7], [0.9, 0.3, 0.2], [0.8, 0.4, 0.5]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 1, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_hue(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1553: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6000, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.4000, 0.5000]]]])
expected = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6347, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.3730, 0.4692]]]])
rtol = 0.01, atol = 0.0031622776601683794, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 16 / 54 (29.6%)
E       Greatest absolute difference: 0.037699997425079346 at index (0, 2, 0, 0) (up to 0.0031622776601683794 allowed)
E       Greatest relative difference: 0.07238608598709106 at index (1, 2, 2, 1) (up to 0.01 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
______________ TestColorJiggle.test_random_hue_list[cpu-float32] _______________

self = <test_augmentation.TestColorJiggle object at 0x715418466a70>
device = device(type='cpu'), dtype = torch.float32

    def test_random_hue_list(self, device, dtype):
        torch.manual_seed(42)
        f = ColorJiggle(hue=[-0.1 / pi, 0.1 / pi])
    
        input = torch.tensor(
            [
                [
                    [[0.1, 0.2, 0.3], [0.6, 0.5, 0.4], [0.7, 0.8, 1.0]],
                    [[1.0, 0.5, 0.6], [0.6, 0.3, 0.2], [0.8, 0.1, 0.2]],
                    [[0.6, 0.8, 0.7], [0.9, 0.3, 0.2], [0.8, 0.4, 0.5]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # 1 x 1 x 3 x 3
        input = input.repeat(2, 1, 1, 1)  # 2 x 3 x 3
    
        expected = self._get_expected_hue(device, dtype)
    
>       self.assert_close(f(input), expected, low_tolerance=True)

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py:1574: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6000, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.4000, 0.5000]]]])
expected = tensor([[[[0.1000, 0.2000, 0.3000],
          [0.6000, 0.5000, 0.4000],
          [0.7000, 0.8000, 1.0000]],

        ...2000]],

         [[0.6347, 0.8000, 0.7000],
          [0.9000, 0.3000, 0.2000],
          [0.8000, 0.3730, 0.4692]]]])
rtol = 0.01, atol = 0.0031622776601683794, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 16 / 54 (29.6%)
E       Greatest absolute difference: 0.037699997425079346 at index (0, 2, 0, 0) (up to 0.0031622776601683794 allowed)
E       Greatest relative difference: 0.07238608598709106 at index (1, 2, 2, 1) (up to 0.01 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32]
============== 9 failed, 6 passed, 1 skipped, 1 xfailed in 1.17s ===============


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python3
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'inductor', 'onnxrt', 'cudagraphs', 'openxla', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 17 items

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_smoke XFAIL [  5%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-1] PASSED [ 11%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-3] PASSED [ 17%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle_batch[cpu-float32] PASSED [ 23%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_same_on_batch[cpu-float32] PASSED [ 29%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32] PASSED [ 35%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32] PASSED [ 41%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32] PASSED [ 47%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32] PASSED [ 52%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32] PASSED [ 58%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32] PASSED [ 64%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32] PASSED [ 70%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32] PASSED [ 76%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32] PASSED [ 82%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_sequential[cpu-float32] PASSED [ 88%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jitter_batch_sequential[cpu-float32] PASSED [ 94%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_gradcheck[cpu] SKIPPED [100%]

=================== 15 passed, 1 skipped, 1 xfailed in 0.40s ===================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python3
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'jit', 'openxla', 'onnxrt', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 17 items

../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_smoke XFAIL [  5%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-1] PASSED [ 11%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle[cpu-float32-3] PASSED [ 17%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jiggle_batch[cpu-float32] PASSED [ 23%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_same_on_batch[cpu-float32] PASSED [ 29%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness[cpu-float32] PASSED [ 35%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_brightness_tuple[cpu-float32] PASSED [ 41%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast[cpu-float32] PASSED [ 47%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_contrast_list[cpu-float32] PASSED [ 52%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation[cpu-float32] PASSED [ 58%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tensor[cpu-float32] PASSED [ 64%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_saturation_tuple[cpu-float32] PASSED [ 70%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue[cpu-float32] PASSED [ 76%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_random_hue_list[cpu-float32] PASSED [ 82%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_sequential[cpu-float32] PASSED [ 88%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_color_jitter_batch_sequential[cpu-float32] PASSED [ 94%]
../publishablew/kornia/kornia/tests/augmentation/test_augmentation.py::TestColorJiggle::test_gradcheck[cpu] SKIPPED [100%]

=================== 15 passed, 1 skipped, 1 xfailed in 0.47s ===================
