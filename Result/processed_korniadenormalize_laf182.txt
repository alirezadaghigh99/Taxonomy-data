output file:
processed_korniadenormalize_laf182.json
function:
denormalize_laf
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_jit[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_gradcheck[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_gradcheck[cpu]', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_shape[cpu]', '../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_conversion[cpu] FAILED', '../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_shape[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_conversion[cpu]', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_jit[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'openxla', 'jit', 'cudagraphs', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 4 items

../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_shape[cpu] FAILED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_conversion[cpu] FAILED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_gradcheck[cpu] FAILED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_jit[cpu-float32] FAILED

=================================== FAILURES ===================================
______________________ TestDenormalizeLAF.test_shape[cpu] ______________________

self = <test_laf.TestDenormalizeLAF object at 0x7a1b404ff580>
device = device(type='cpu')

    def test_shape(self, device):
        inp = torch.rand(5, 3, 2, 3, device=device)
        img = torch.rand(5, 3, 10, 10, device=device)
>       assert inp.shape == kornia.feature.denormalize_laf(inp, img).shape

../publishablew/kornia/kornia/tests/feature/test_laf.py:327: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/laf.py:244: in denormalize_laf
    return denormalize_laf(LAF, images)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

LAF = tensor([[[[0.1432, 0.9518, 0.3271],
          [0.2021, 0.7820, 0.5777]],

         [[0.0912, 0.2231, 0.1414],
        ...9224],
          [0.6979, 0.3639, 0.4089]],

         [[0.8117, 0.2826, 0.7210],
          [0.6806, 0.7617, 0.4531]]]])
images = tensor([[[[0.9293, 0.7827, 0.9545,  ..., 0.8316, 0.8183, 0.2369],
          [0.2558, 0.4378, 0.3637,  ..., 0.1813, 0.9...19, 0.5064, 0.5323,  ..., 0.9427, 0.6180, 0.3341],
          [0.6786, 0.9323, 0.7470,  ..., 0.2392, 0.1858, 0.9214]]]])

    def denormalize_laf(LAF, images):
        """
        De-normalize LAFs from scale to image scale.
    
        Args:
            LAF: torch.Tensor of shape (B, N, 2, 3)
            images: torch.Tensor of shape (B, CH, H, W)
    
        Returns:
            torch.Tensor: the denormalized LAF of shape (B, N, 2, 3), scale in pixels
        """
        B, N, _, _ = LAF.size()
        _, _, H, W = images.size()
        MIN_SIZE = min(H - 1, W - 1)
        scaling_matrix = torch.tensor([[MIN_SIZE, 0, W - 1], [0, MIN_SIZE, W - 1]], dtype=LAF.dtype, device=LAF.device)
        denormalized_LAF = LAF.clone()
        for b in range(B):
            for n in range(N):
>               denormalized_LAF[b, n, :, :] = torch.mm(LAF[b, n, :, :], scaling_matrix)
E               RuntimeError: mat1 and mat2 shapes cannot be multiplied (2x3 and 2x3)

../publishablew/kornia/kornia/kornia/feature/temp.py:30: RuntimeError
___________________ TestDenormalizeLAF.test_conversion[cpu] ____________________

self = <test_laf.TestDenormalizeLAF object at 0x7a1b404ff8b0>
device = device(type='cpu')

    def test_conversion(self, device):
        w, h = 9, 5
        expected = torch.tensor([[1, 0, 1], [0, 1, 1]], device=device).float()
        expected = expected.view(1, 1, 2, 3)
        img = torch.rand(1, 3, h, w, device=device)
        lafn = torch.tensor([[0.25, 0, 0.125], [0, 0.25, 0.25]], device=device).float()
>       laf = kornia.feature.denormalize_laf(lafn.view(1, 1, 2, 3), img)

../publishablew/kornia/kornia/tests/feature/test_laf.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/laf.py:244: in denormalize_laf
    return denormalize_laf(LAF, images)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

LAF = tensor([[[[0.2500, 0.0000, 0.1250],
          [0.0000, 0.2500, 0.2500]]]])
images = tensor([[[[9.6982e-01, 3.1669e-01, 9.0073e-01, 2.9323e-01, 8.3020e-02,
           9.1706e-01, 2.5346e-01, 6.7837e-01, ...767e-01, 7.3523e-02, 8.5396e-01, 6.1240e-01, 5.1682e-01,
           5.3247e-01, 7.6442e-01, 8.3197e-01, 6.1697e-04]]]])

    def denormalize_laf(LAF, images):
        """
        De-normalize LAFs from scale to image scale.
    
        Args:
            LAF: torch.Tensor of shape (B, N, 2, 3)
            images: torch.Tensor of shape (B, CH, H, W)
    
        Returns:
            torch.Tensor: the denormalized LAF of shape (B, N, 2, 3), scale in pixels
        """
        B, N, _, _ = LAF.size()
        _, _, H, W = images.size()
        MIN_SIZE = min(H - 1, W - 1)
        scaling_matrix = torch.tensor([[MIN_SIZE, 0, W - 1], [0, MIN_SIZE, W - 1]], dtype=LAF.dtype, device=LAF.device)
        denormalized_LAF = LAF.clone()
        for b in range(B):
            for n in range(N):
>               denormalized_LAF[b, n, :, :] = torch.mm(LAF[b, n, :, :], scaling_matrix)
E               RuntimeError: mat1 and mat2 shapes cannot be multiplied (2x3 and 2x3)

../publishablew/kornia/kornia/kornia/feature/temp.py:30: RuntimeError
____________________ TestDenormalizeLAF.test_gradcheck[cpu] ____________________

self = <test_laf.TestDenormalizeLAF object at 0x7a1b404ffb50>
device = device(type='cpu')

    def test_gradcheck(self, device):
        batch_size, channels, height, width = 1, 2, 2, 3
    
        laf = torch.rand(batch_size, channels, height, width, device=device, dtype=torch.float64)
        img = torch.rand(batch_size, 3, 10, 32, device=device, dtype=torch.float64)
>       self.gradcheck(kornia.feature.denormalize_laf, (laf, img))

../publishablew/kornia/kornia/tests/feature/test_laf.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/feature/laf.py:244: in denormalize_laf
    return denormalize_laf(LAF, images)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

LAF = tensor([[[[0.8103, 0.2092, 0.0336],
          [0.7167, 0.6827, 0.9997]],

         [[0.8833, 0.0664, 0.3026],
          [0.2790, 0.3703, 0.7624]]]], dtype=torch.float64, requires_grad=True)
images = tensor([[[[0.8480, 0.0141, 0.3277, 0.5836, 0.5382, 0.7627, 0.3997, 0.2452,
           0.7583, 0.7801, 0.9451, 0.7078, ...    0.0040, 0.7868, 0.4696, 0.0655, 0.5988, 0.0028, 0.9394, 0.1584]]]],
       dtype=torch.float64, requires_grad=True)

    def denormalize_laf(LAF, images):
        """
        De-normalize LAFs from scale to image scale.
    
        Args:
            LAF: torch.Tensor of shape (B, N, 2, 3)
            images: torch.Tensor of shape (B, CH, H, W)
    
        Returns:
            torch.Tensor: the denormalized LAF of shape (B, N, 2, 3), scale in pixels
        """
        B, N, _, _ = LAF.size()
        _, _, H, W = images.size()
        MIN_SIZE = min(H - 1, W - 1)
        scaling_matrix = torch.tensor([[MIN_SIZE, 0, W - 1], [0, MIN_SIZE, W - 1]], dtype=LAF.dtype, device=LAF.device)
        denormalized_LAF = LAF.clone()
        for b in range(B):
            for n in range(N):
>               denormalized_LAF[b, n, :, :] = torch.mm(LAF[b, n, :, :], scaling_matrix)
E               RuntimeError: mat1 and mat2 shapes cannot be multiplied (2x3 and 2x3)

../publishablew/kornia/kornia/kornia/feature/temp.py:30: RuntimeError
___________________ TestDenormalizeLAF.test_jit[cpu-float32] ___________________

self = <test_laf.TestDenormalizeLAF object at 0x7a1b404ffe50>
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.jit()
    def test_jit(self, device, dtype):
        batch_size, channels, height, width = 1, 2, 2, 3
    
        laf = torch.rand(batch_size, channels, height, width)
        img = torch.rand(batch_size, 3, 10, 32)
        model = kornia.feature.denormalize_laf
>       model_jit = torch.jit.script(kornia.feature.denormalize_laf)

../publishablew/kornia/kornia/tests/feature/test_laf.py:352: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1429: in script
    ret = _script_impl(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1202: in _script_impl
    ast = get_jit_def(obj, obj.__name__)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:383: in get_jit_def
    return build_def(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:444: in build_def
    return Def(Ident(r, def_name), decl, build_stmts(ctx, body))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in build_stmts
    stmts = [build_stmt(ctx, s) for s in stmts]
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in <listcomp>
    stmts = [build_stmt(ctx, s) for s in stmts]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.jit.frontend.StmtBuilder object at 0x7a1c1afabd30>
ctx = <torch._sources.SourceContext object at 0x7a1b4021d300>
node = <ast.ImportFrom object at 0x7a1b4013b490>

    def __call__(self, ctx, node):
        method = getattr(self, "build_" + node.__class__.__name__, None)
        if method is None:
>           raise UnsupportedNodeError(ctx, node)
E           torch.jit.frontend.UnsupportedNodeError: import statements aren't supported:
E             File "/local/data0/moved_data/publishablew/kornia/kornia/kornia/feature/laf.py", line 243
E           def denormalize_laf(LAF: Tensor, images: Tensor) -> Tensor:
E               from .temp import denormalize_laf
E               ~~~~ <--- HERE
E               return denormalize_laf(LAF, images)

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:416: UnsupportedNodeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_shape[cpu]
FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_conversion[cpu]
FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_gradcheck[cpu]
FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_jit[cpu-float32]
============================== 4 failed in 0.41s ===============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'jit', 'onnxrt', 'cudagraphs', 'openxla', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 4 items

../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_shape[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_conversion[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_jit[cpu-float32] PASSED

============================== 4 passed in 0.19s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'onnxrt', 'cudagraphs', 'tvm', 'jit', 'inductor', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 4 items

../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_shape[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_conversion[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestDenormalizeLAF::test_jit[cpu-float32] PASSED

============================== 4 passed in 0.22s ===============================
