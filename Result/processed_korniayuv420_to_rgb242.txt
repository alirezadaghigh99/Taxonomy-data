output file:
processed_korniayuv420_to_rgb242.json
function:
yuv420_to_rgb
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape3] FAILED', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_jit[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_red[cpu-float32]', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_white[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_smoke[cpu-float32]', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_smoke[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_forth_and_back[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_white[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape3]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_forth_and_back[cpu-float32]', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_red[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_jit[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'openxla', 'cudagraphs', 'onnxrt', 'tvm', None, 'jit'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 12 items

../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_smoke[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape3] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_white[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_red[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_forth_and_back[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_gradcheck[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_jit[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_module[cpu-float32] PASSED

=================================== FAILURES ===================================
___________________ TestYuv420ToRgb.test_smoke[cpu-float32] ____________________

self = <test_yuv.TestYuv420ToRgb object at 0x73459c2fd720>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        H, W = 4, 6
        imgy = torch.rand(1, H, W, device=device, dtype=dtype)
        imguv = torch.rand(2, int(H / 2), int(W / 2), device=device, dtype=dtype)
>       assert isinstance(kornia.color.yuv420_to_rgb(imgy, imguv), torch.Tensor)

../publishablew/kornia/kornia/tests/color/test_yuv.py:359: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:143: in yuv420_to_rgb
    return yuv420_to_rgb(imagey, imageuv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

imagey = tensor([[[0.3461, 0.8532, 0.6987, 0.9133, 0.1944, 0.8005],
         [0.9338, 0.3900, 0.9328, 0.6480, 0.8961, 0.5635],
         [0.8553, 0.9611, 0.5739, 0.9037, 0.5555, 0.8899],
         [0.9134, 0.1689, 0.8026, 0.9387, 0.7179, 0.5260]]])
imageuv = tensor([[[9.3657e-01, 4.5254e-01, 4.0748e-01],
         [6.7878e-04, 4.6700e-01, 7.8861e-01]],

        [[6.2558e-01, 4.9962e-01, 1.3087e-01],
         [4.0249e-02, 2.5708e-01, 3.6862e-01]]])

    def yuv420_to_rgb(imagey, imageuv):
        """
        Convert a YUV420 image to RGB.
        Args:
            imagey (torch.Tensor): Y (luma) image plane with shape (*, 1, H, W)
            imageuv (torch.Tensor): UV (chroma) image planes with shape (*, 2, H/2, W/2)
        Returns:
            torch.Tensor: RGB image with shape (*, 3, H, W)
        """
        if not isinstance(imagey, torch.Tensor) or not isinstance(imageuv, torch.Tensor):
            raise TypeError('Input images must be torch Tensors')
        if imagey.ndim != 4 or imageuv.ndim != 4:
>           raise ValueError('Input images must have 4 dimensions')
E           ValueError: Input images must have 4 dimensions

../publishablew/kornia/kornia/kornia/color/temp.py:37: ValueError
_____________ TestYuv420ToRgb.test_cardinality[cpu-float32-shape3] _____________

self = <test_yuv.TestYuv420ToRgb object at 0x73459c2fdf30>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 2, 2)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2)])
    def test_cardinality(self, device, dtype, shape):
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] = int(shapeuv[-2] / 2)
        shapeuv[-1] = int(shapeuv[-1] / 2)
    
        imgy = torch.ones(shapey, device=device, dtype=dtype)
        imguv = torch.ones(shapeuv, device=device, dtype=dtype)
>       assert kornia.color.yuv420_to_rgb(imgy, imguv).shape == shape

../publishablew/kornia/kornia/tests/color/test_yuv.py:372: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:143: in yuv420_to_rgb
    return yuv420_to_rgb(imagey, imageuv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

imagey = tensor([[[1., 1.],
         [1., 1.]]])
imageuv = tensor([[[1.]],

        [[1.]]])

    def yuv420_to_rgb(imagey, imageuv):
        """
        Convert a YUV420 image to RGB.
        Args:
            imagey (torch.Tensor): Y (luma) image plane with shape (*, 1, H, W)
            imageuv (torch.Tensor): UV (chroma) image planes with shape (*, 2, H/2, W/2)
        Returns:
            torch.Tensor: RGB image with shape (*, 3, H, W)
        """
        if not isinstance(imagey, torch.Tensor) or not isinstance(imageuv, torch.Tensor):
            raise TypeError('Input images must be torch Tensors')
        if imagey.ndim != 4 or imageuv.ndim != 4:
>           raise ValueError('Input images must have 4 dimensions')
E           ValueError: Input images must have 4 dimensions

../publishablew/kornia/kornia/kornia/color/temp.py:37: ValueError
_________________ TestYuv420ToRgb.test_unit_white[cpu-float32] _________________

self = <test_yuv.TestYuv420ToRgb object at 0x73459c2fe410>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_white(self, device, dtype):  # skipcq: PYL-R0201
        refrgb = torch.tensor(
            [[[255, 255], [255, 255]], [[255, 255], [255, 255]], [[255, 255], [255, 255]]],
            device=device,
            dtype=torch.uint8,
        )
        y = torch.tensor([[[255, 255], [255, 255]]], device=device, dtype=torch.uint8).type(dtype) / 255.0
        uv = torch.tensor([[[0]], [[0]]], device=device, dtype=torch.int8).type(torch.float) / 255.0
    
>       resrgb = (kornia.color.yuv420_to_rgb(y, uv) * 255.0).round().type(torch.uint8)

../publishablew/kornia/kornia/tests/color/test_yuv.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:143: in yuv420_to_rgb
    return yuv420_to_rgb(imagey, imageuv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

imagey = tensor([[[1., 1.],
         [1., 1.]]])
imageuv = tensor([[[0.]],

        [[0.]]])

    def yuv420_to_rgb(imagey, imageuv):
        """
        Convert a YUV420 image to RGB.
        Args:
            imagey (torch.Tensor): Y (luma) image plane with shape (*, 1, H, W)
            imageuv (torch.Tensor): UV (chroma) image planes with shape (*, 2, H/2, W/2)
        Returns:
            torch.Tensor: RGB image with shape (*, 3, H, W)
        """
        if not isinstance(imagey, torch.Tensor) or not isinstance(imageuv, torch.Tensor):
            raise TypeError('Input images must be torch Tensors')
        if imagey.ndim != 4 or imageuv.ndim != 4:
>           raise ValueError('Input images must have 4 dimensions')
E           ValueError: Input images must have 4 dimensions

../publishablew/kornia/kornia/kornia/color/temp.py:37: ValueError
__________________ TestYuv420ToRgb.test_unit_red[cpu-float32] __________________

self = <test_yuv.TestYuv420ToRgb object at 0x73459c2fe740>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_red(self, device, dtype):  # skipcq: PYL-R0201
        refrgb = torch.tensor(
            [[[221, 221], [221, 221]], [[17, 17], [17, 17]], [[1, 1], [1, 1]]], device=device, dtype=torch.uint8
        )
        y = torch.tensor([[[76, 76], [76, 76]]], device=device, dtype=torch.uint8).type(dtype) / 255.0
        uv = torch.tensor([[[-37]], [[127]]], device=device, dtype=torch.int8).type(torch.float) / 255.0
    
>       resrgb = (kornia.color.yuv420_to_rgb(y, uv) * 255.0).round().type(torch.uint8)

../publishablew/kornia/kornia/tests/color/test_yuv.py:421: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:143: in yuv420_to_rgb
    return yuv420_to_rgb(imagey, imageuv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

imagey = tensor([[[0.2980, 0.2980],
         [0.2980, 0.2980]]])
imageuv = tensor([[[-0.1451]],

        [[ 0.4980]]])

    def yuv420_to_rgb(imagey, imageuv):
        """
        Convert a YUV420 image to RGB.
        Args:
            imagey (torch.Tensor): Y (luma) image plane with shape (*, 1, H, W)
            imageuv (torch.Tensor): UV (chroma) image planes with shape (*, 2, H/2, W/2)
        Returns:
            torch.Tensor: RGB image with shape (*, 3, H, W)
        """
        if not isinstance(imagey, torch.Tensor) or not isinstance(imageuv, torch.Tensor):
            raise TypeError('Input images must be torch Tensors')
        if imagey.ndim != 4 or imageuv.ndim != 4:
>           raise ValueError('Input images must have 4 dimensions')
E           ValueError: Input images must have 4 dimensions

../publishablew/kornia/kornia/kornia/color/temp.py:37: ValueError
_______________ TestYuv420ToRgb.test_forth_and_back[cpu-float32] _______________

self = <test_yuv.TestYuv420ToRgb object at 0x73459c2fea70>
device = device(type='cpu'), dtype = torch.float32

    def test_forth_and_back(self, device, dtype):  # skipcq: PYL-R0201
        datay = torch.rand(1, 4, 6, device=device, dtype=dtype)
        datauv = torch.rand(2, 2, 3, device=device, dtype=dtype)
        rgb = kornia.color.yuv420_to_rgb
        yuv = kornia.color.rgb_to_yuv420
    
>       (data_outy, data_outuv) = yuv(rgb(datay, datauv))

../publishablew/kornia/kornia/tests/color/test_yuv.py:431: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:143: in yuv420_to_rgb
    return yuv420_to_rgb(imagey, imageuv)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

imagey = tensor([[[0.1817, 0.4398, 0.4351, 0.9791, 0.0179, 0.7940],
         [0.8742, 0.0469, 0.3707, 0.1278, 0.1262, 0.5954],
         [0.6930, 0.3028, 0.2193, 0.6235, 0.2996, 0.1791],
         [0.2244, 0.2873, 0.8941, 0.4862, 0.2675, 0.2180]]])
imageuv = tensor([[[0.1934, 0.8964, 0.8372],
         [0.9090, 0.9441, 0.9309]],

        [[0.8718, 0.2349, 0.2894],
         [0.0521, 0.4270, 0.3142]]])

    def yuv420_to_rgb(imagey, imageuv):
        """
        Convert a YUV420 image to RGB.
        Args:
            imagey (torch.Tensor): Y (luma) image plane with shape (*, 1, H, W)
            imageuv (torch.Tensor): UV (chroma) image planes with shape (*, 2, H/2, W/2)
        Returns:
            torch.Tensor: RGB image with shape (*, 3, H, W)
        """
        if not isinstance(imagey, torch.Tensor) or not isinstance(imageuv, torch.Tensor):
            raise TypeError('Input images must be torch Tensors')
        if imagey.ndim != 4 or imageuv.ndim != 4:
>           raise ValueError('Input images must have 4 dimensions')
E           ValueError: Input images must have 4 dimensions

../publishablew/kornia/kornia/kornia/color/temp.py:37: ValueError
____________________ TestYuv420ToRgb.test_jit[cpu-float32] _____________________

self = <test_yuv.TestYuv420ToRgb object at 0x73459c2ff0d0>
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.jit()
    def test_jit(self, device, dtype):
        B, H, W = 2, 4, 4
        imgy = torch.ones(B, 1, H, W, device=device, dtype=dtype)
        imguv = torch.ones(B, 2, int(H / 2), int(W / 2), device=device, dtype=dtype)
        op = kornia.color.yuv420_to_rgb
>       op_jit = torch.jit.script(op)

../publishablew/kornia/kornia/tests/color/test_yuv.py:448: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1429: in script
    ret = _script_impl(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1202: in _script_impl
    ast = get_jit_def(obj, obj.__name__)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:383: in get_jit_def
    return build_def(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:444: in build_def
    return Def(Ident(r, def_name), decl, build_stmts(ctx, body))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in build_stmts
    stmts = [build_stmt(ctx, s) for s in stmts]
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in <listcomp>
    stmts = [build_stmt(ctx, s) for s in stmts]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.jit.frontend.StmtBuilder object at 0x73466cdb3c40>
ctx = <torch._sources.SourceContext object at 0x73459c00bba0>
node = <ast.ImportFrom object at 0x73459c1da0e0>

    def __call__(self, ctx, node):
        method = getattr(self, "build_" + node.__class__.__name__, None)
        if method is None:
>           raise UnsupportedNodeError(ctx, node)
E           torch.jit.frontend.UnsupportedNodeError: import statements aren't supported:
E             File "/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py", line 142
E           def yuv420_to_rgb(imagey: Tensor, imageuv: Tensor) -> Tensor:
E               from .temp import yuv420_to_rgb
E               ~~~~ <--- HERE
E               return yuv420_to_rgb(imagey, imageuv)

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:416: UnsupportedNodeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_smoke[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape3]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_white[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_red[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_forth_and_back[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_jit[cpu-float32]
========================= 6 failed, 6 passed in 0.41s ==========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'cudagraphs', 'tvm', 'inductor', 'onnxrt', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 12 items

../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape3] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_white[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_red[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_forth_and_back[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_gradcheck[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_jit[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_module[cpu-float32] PASSED

============================== 12 passed in 0.21s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'inductor', 'openxla', 'jit', 'cudagraphs', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 12 items

../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_cardinality[cpu-float32-shape3] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_white[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_unit_red[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_forth_and_back[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_gradcheck[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_jit[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestYuv420ToRgb::test_module[cpu-float32] PASSED

============================== 12 passed in 0.20s ==============================
