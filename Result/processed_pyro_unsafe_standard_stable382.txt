output file:
processed_pyro_unsafe_standard_stable382.json
function:
_unsafe_standard_stable
Error Cases:

Pass or Failed: 1

Related Failed Test Cases:
set()

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
collecting ... collected 45 items

../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0] FAILED

=================================== FAILURES ===================================
____________________________ test_sample[0.1--1.0] _____________________________

alpha = 0.1, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb43166520>],
      dtype=object)
args = (array(0.1), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.1--0.5] _____________________________

alpha = 0.1, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb43166b60>],
      dtype=object)
args = (array(0.1), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.0] _____________________________

alpha = 0.1, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb43166ac0>],
      dtype=object)
args = (array(0.1), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.5] _____________________________

alpha = 0.1, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb431649a0>],
      dtype=object)
args = (array(0.1), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-1.0] _____________________________

alpha = 0.1, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfee80>],
      dtype=object)
args = (array(0.1), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--1.0] _____________________________

alpha = 0.4, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb43166b60>],
      dtype=object)
args = (array(0.4), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--0.5] _____________________________

alpha = 0.4, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfe3e0>],
      dtype=object)
args = (array(0.4), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.0] _____________________________

alpha = 0.4, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfe020>],
      dtype=object)
args = (array(0.4), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.5] _____________________________

alpha = 0.4, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfd080>],
      dtype=object)
args = (array(0.4), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-1.0] _____________________________

alpha = 0.4, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfe840>],
      dtype=object)
args = (array(0.4), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--1.0] _____________________________

alpha = 0.8, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfea20>],
      dtype=object)
args = (array(0.8), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--0.5] _____________________________

alpha = 0.8, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfdda0>],
      dtype=object)
args = (array(0.8), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.0] _____________________________

alpha = 0.8, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfd260>],
      dtype=object)
args = (array(0.8), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.5] _____________________________

alpha = 0.8, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfe340>],
      dtype=object)
args = (array(0.8), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-1.0] _____________________________

alpha = 0.8, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfec00>],
      dtype=object)
args = (array(0.8), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--1.0] ____________________________

alpha = 0.99, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfe660>],
      dtype=object)
args = (array(0.99), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--0.5] ____________________________

alpha = 0.99, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dffc40>],
      dtype=object)
args = (array(0.99), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.0] _____________________________

alpha = 0.99, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfee80>],
      dtype=object)
args = (array(0.99), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.5] _____________________________

alpha = 0.99, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dfdd00>],
      dtype=object)
args = (array(0.99), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-1.0] _____________________________

alpha = 0.99, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dff7e0>],
      dtype=object)
args = (array(0.99), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.0--1.0] _____________________________

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.0--0.5] _____________________________

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.0] _____________________________

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.5] _____________________________

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-1.0] _____________________________

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.01--1.0] ____________________________

alpha = 1.01, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dff100>],
      dtype=object)
args = (array(1.01), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01--0.5] ____________________________

alpha = 1.01, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dff600>],
      dtype=object)
args = (array(1.01), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.0] _____________________________

alpha = 1.01, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb41dffec0>],
      dtype=object)
args = (array(1.01), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.5] _____________________________

alpha = 1.01, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa19e0>],
      dtype=object)
args = (array(1.01), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-1.0] _____________________________

alpha = 1.01, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa1940>],
      dtype=object)
args = (array(1.01), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--1.0] _____________________________

alpha = 1.3, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa1580>],
      dtype=object)
args = (array(1.3), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--0.5] _____________________________

alpha = 1.3, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa0360>],
      dtype=object)
args = (array(1.3), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.0] _____________________________

alpha = 1.3, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa1440>],
      dtype=object)
args = (array(1.3), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.5] _____________________________

alpha = 1.3, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa00e0>],
      dtype=object)
args = (array(1.3), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-1.0] _____________________________

alpha = 1.3, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa1760>],
      dtype=object)
args = (array(1.3), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--1.0] _____________________________

alpha = 1.7, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa05e0>],
      dtype=object)
args = (array(1.7), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--0.5] _____________________________

alpha = 1.7, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa0b80>],
      dtype=object)
args = (array(1.7), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.0] _____________________________

alpha = 1.7, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa13a0>],
      dtype=object)
args = (array(1.7), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.5] _____________________________

alpha = 1.7, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa1760>],
      dtype=object)
args = (array(1.7), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-1.0] _____________________________

alpha = 1.7, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa05e0>],
      dtype=object)
args = (array(1.7), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--1.0] _____________________________

alpha = 2.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa0b80>],
      dtype=object)
args = (array(2.), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--0.5] _____________________________

alpha = 2.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa13a0>],
      dtype=object)
args = (array(2.), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.0] _____________________________

alpha = 2.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa28e0>],
      dtype=object)
args = (array(2.), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.5] _____________________________

alpha = 2.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa1800>],
      dtype=object)
args = (array(2.), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-1.0] _____________________________

alpha = 2.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x78cb699ca3d0>
x = array([<function test_sample.<locals>.sampler at 0x78cb3ffa2200>],
      dtype=object)
args = (array(2.), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
=============================== warnings summary ===============================
../publishablew/pyro/pyro/tests/distributions/test_stable.py:8
  /local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:8: DeprecationWarning: Please import `IntegrationWarning` from the `scipy.integrate` namespace; the `scipy.integrate.quadpack` namespace is deprecated and will be removed in SciPy 2.0.0.
    from scipy.integrate.quadpack import IntegrationWarning

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0]
======================== 45 failed, 1 warning in 7.21s =========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
collecting ... collected 45 items

../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0] FAILED

=================================== FAILURES ===================================
____________________________ test_sample[0.1--1.0] _____________________________

alpha = 0.1, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cfb5a480>],
      dtype=object)
args = (array(0.1), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.1--0.5] _____________________________

alpha = 0.1, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cfb5aac0>],
      dtype=object)
args = (array(0.1), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.0] _____________________________

alpha = 0.1, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cfb5aa20>],
      dtype=object)
args = (array(0.1), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.5] _____________________________

alpha = 0.1, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cfb58900>],
      dtype=object)
args = (array(0.1), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-1.0] _____________________________

alpha = 0.1, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f6de0>],
      dtype=object)
args = (array(0.1), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--1.0] _____________________________

alpha = 0.4, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cfb5aac0>],
      dtype=object)
args = (array(0.4), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--0.5] _____________________________

alpha = 0.4, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f6340>],
      dtype=object)
args = (array(0.4), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.0] _____________________________

alpha = 0.4, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f5f80>],
      dtype=object)
args = (array(0.4), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.5] _____________________________

alpha = 0.4, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f4fe0>],
      dtype=object)
args = (array(0.4), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-1.0] _____________________________

alpha = 0.4, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f67a0>],
      dtype=object)
args = (array(0.4), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--1.0] _____________________________

alpha = 0.8, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f6980>],
      dtype=object)
args = (array(0.8), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--0.5] _____________________________

alpha = 0.8, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f5d00>],
      dtype=object)
args = (array(0.8), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.0] _____________________________

alpha = 0.8, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f51c0>],
      dtype=object)
args = (array(0.8), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.5] _____________________________

alpha = 0.8, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f62a0>],
      dtype=object)
args = (array(0.8), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-1.0] _____________________________

alpha = 0.8, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f6b60>],
      dtype=object)
args = (array(0.8), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--1.0] ____________________________

alpha = 0.99, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f76a0>],
      dtype=object)
args = (array(0.99), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--0.5] ____________________________

alpha = 0.99, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f7ba0>],
      dtype=object)
args = (array(0.99), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.0] _____________________________

alpha = 0.99, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f7c40>],
      dtype=object)
args = (array(0.99), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.5] _____________________________

alpha = 0.99, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f6520>],
      dtype=object)
args = (array(0.99), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-1.0] _____________________________

alpha = 0.99, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f76a0>],
      dtype=object)
args = (array(0.99), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.0--1.0] _____________________________

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.0--0.5] _____________________________

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.0] _____________________________

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.5] _____________________________

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-1.0] _____________________________

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.01--1.0] ____________________________

alpha = 1.01, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f6b60>],
      dtype=object)
args = (array(1.01), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01--0.5] ____________________________

alpha = 1.01, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f71a0>],
      dtype=object)
args = (array(1.01), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.0] _____________________________

alpha = 1.01, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1ce7f5c60>],
      dtype=object)
args = (array(1.01), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.5] _____________________________

alpha = 1.01, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96d940>],
      dtype=object)
args = (array(1.01), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-1.0] _____________________________

alpha = 1.01, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96d8a0>],
      dtype=object)
args = (array(1.01), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--1.0] _____________________________

alpha = 1.3, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96d4e0>],
      dtype=object)
args = (array(1.3), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--0.5] _____________________________

alpha = 1.3, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96cea0>],
      dtype=object)
args = (array(1.3), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.0] _____________________________

alpha = 1.3, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96d3a0>],
      dtype=object)
args = (array(1.3), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.5] _____________________________

alpha = 1.3, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96c040>],
      dtype=object)
args = (array(1.3), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-1.0] _____________________________

alpha = 1.3, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96d6c0>],
      dtype=object)
args = (array(1.3), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--1.0] _____________________________

alpha = 1.7, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96c180>],
      dtype=object)
args = (array(1.7), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--0.5] _____________________________

alpha = 1.7, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96ce00>],
      dtype=object)
args = (array(1.7), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.0] _____________________________

alpha = 1.7, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96d300>],
      dtype=object)
args = (array(1.7), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.5] _____________________________

alpha = 1.7, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96d6c0>],
      dtype=object)
args = (array(1.7), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-1.0] _____________________________

alpha = 1.7, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96c180>],
      dtype=object)
args = (array(1.7), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--1.0] _____________________________

alpha = 2.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96ce00>],
      dtype=object)
args = (array(2.), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--0.5] _____________________________

alpha = 2.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96d300>],
      dtype=object)
args = (array(2.), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.0] _____________________________

alpha = 2.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96e840>],
      dtype=object)
args = (array(2.), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.5] _____________________________

alpha = 2.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96d760>],
      dtype=object)
args = (array(2.), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-1.0] _____________________________

alpha = 2.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x79a21298f550>
x = array([<function test_sample.<locals>.sampler at 0x79a1cc96e160>],
      dtype=object)
args = (array(2.), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
=============================== warnings summary ===============================
../publishablew/pyro/pyro/tests/distributions/test_stable.py:8
  /local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:8: DeprecationWarning: Please import `IntegrationWarning` from the `scipy.integrate` namespace; the `scipy.integrate.quadpack` namespace is deprecated and will be removed in SciPy 2.0.0.
    from scipy.integrate.quadpack import IntegrationWarning

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0]
======================== 45 failed, 1 warning in 7.18s =========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pyro/pyro/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pyro/pyro
configfile: setup.cfg
collecting ... collected 45 items

../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5] FAILED
../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0] FAILED

=================================== FAILURES ===================================
____________________________ test_sample[0.1--1.0] _____________________________

alpha = 0.1, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff76297a660>],
      dtype=object)
args = (array(0.1), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.1--0.5] _____________________________

alpha = 0.1, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff76297aca0>],
      dtype=object)
args = (array(0.1), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.0] _____________________________

alpha = 0.1, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff76297ac00>],
      dtype=object)
args = (array(0.1), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-0.5] _____________________________

alpha = 0.1, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff762978f40>],
      dtype=object)
args = (array(0.1), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.1-1.0] _____________________________

alpha = 0.1, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761551e40>],
      dtype=object)
args = (array(0.1), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--1.0] _____________________________

alpha = 0.4, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff7615531a0>],
      dtype=object)
args = (array(0.4), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.4--0.5] _____________________________

alpha = 0.4, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761552660>],
      dtype=object)
args = (array(0.4), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.0] _____________________________

alpha = 0.4, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761552200>],
      dtype=object)
args = (array(0.4), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-0.5] _____________________________

alpha = 0.4, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761553100>],
      dtype=object)
args = (array(0.4), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.4-1.0] _____________________________

alpha = 0.4, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761552c00>],
      dtype=object)
args = (array(0.4), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--1.0] _____________________________

alpha = 0.8, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761553060>],
      dtype=object)
args = (array(0.8), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.8--0.5] _____________________________

alpha = 0.8, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761552520>],
      dtype=object)
args = (array(0.8), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.0] _____________________________

alpha = 0.8, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761553c40>],
      dtype=object)
args = (array(0.8), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-0.5] _____________________________

alpha = 0.8, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff7615527a0>],
      dtype=object)
args = (array(0.8), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[0.8-1.0] _____________________________

alpha = 0.8, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761551f80>],
      dtype=object)
args = (array(0.8), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--1.0] ____________________________

alpha = 0.99, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761551da0>],
      dtype=object)
args = (array(0.99), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99--0.5] ____________________________

alpha = 0.99, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761552700>],
      dtype=object)
args = (array(0.99), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.0] _____________________________

alpha = 0.99, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761552160>],
      dtype=object)
args = (array(0.99), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-0.5] _____________________________

alpha = 0.99, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761552980>],
      dtype=object)
args = (array(0.99), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[0.99-1.0] _____________________________

alpha = 0.99, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761553d80>],
      dtype=object)
args = (array(0.99), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.0--1.0] _____________________________

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.0--0.5] _____________________________

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, -0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.0] _____________________________

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-0.5] _____________________________

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 0.5]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
_____________________________ test_sample[1.0-1.0] _____________________________

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
>               consolidated = ar.view(dtype)

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

oldtype = dtype('O'), newtype = dtype([('f0', 'O'), ('f1', 'O')])

    def _view_is_safe(oldtype, newtype):
        """ Checks safety of a view involving object arrays, for example when
        doing::
    
            np.zeros(10, dtype=oldtype).view(newtype)
    
        Parameters
        ----------
        oldtype : data-type
            Data type of original ndarray
        newtype : data-type
            Data type of the view
    
        Raises
        ------
        TypeError
            If the new type is incompatible with the old type.
    
        """
    
        # if the types are equivalent, there is no problem.
        # for example: dtype((np.record, 'i4,i4')) == dtype((np.void, 'i4,i4'))
        if oldtype == newtype:
            return
    
        if newtype.hasobject or oldtype.hasobject:
>           raise TypeError("Cannot change data-type for array of references.")
E           TypeError: Cannot change data-type for array of references.

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/_core/_internal.py:564: TypeError

The above exception was the direct cause of the following exception:

alpha = 1.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1031: in cdf
    uniq_param_pairs = np.unique(data_in[:, 1:], axis=0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = array([[1.0, 1.0]], dtype=object), return_index = False
return_inverse = False, return_counts = False, axis = 0

    @array_function_dispatch(_unique_dispatcher)
    def unique(ar, return_index=False, return_inverse=False,
               return_counts=False, axis=None, *, equal_nan=True):
        """
        Find the unique elements of an array.
    
        Returns the sorted unique elements of an array. There are three optional
        outputs in addition to the unique elements:
    
        * the indices of the input array that give the unique values
        * the indices of the unique array that reconstruct the input array
        * the number of times each unique value comes up in the input array
    
        Parameters
        ----------
        ar : array_like
            Input array. Unless `axis` is specified, this will be flattened if it
            is not already 1-D.
        return_index : bool, optional
            If True, also return the indices of `ar` (along the specified axis,
            if provided, or in the flattened array) that result in the unique array.
        return_inverse : bool, optional
            If True, also return the indices of the unique array (for the specified
            axis, if provided) that can be used to reconstruct `ar`.
        return_counts : bool, optional
            If True, also return the number of times each unique item appears
            in `ar`.
        axis : int or None, optional
            The axis to operate on. If None, `ar` will be flattened. If an integer,
            the subarrays indexed by the given axis will be flattened and treated
            as the elements of a 1-D array with the dimension of the given axis,
            see the notes for more details.  Object arrays or structured arrays
            that contain objects are not supported if the `axis` kwarg is used. The
            default is None.
    
            .. versionadded:: 1.13.0
    
        equal_nan : bool, optional
            If True, collapses multiple NaN values in the return array into one.
    
            .. versionadded:: 1.24
    
        Returns
        -------
        unique : ndarray
            The sorted unique values.
        unique_indices : ndarray, optional
            The indices of the first occurrences of the unique values in the
            original array. Only provided if `return_index` is True.
        unique_inverse : ndarray, optional
            The indices to reconstruct the original array from the
            unique array. Only provided if `return_inverse` is True.
        unique_counts : ndarray, optional
            The number of times each of the unique values comes up in the
            original array. Only provided if `return_counts` is True.
    
            .. versionadded:: 1.9.0
    
        See Also
        --------
        repeat : Repeat elements of an array.
    
        Notes
        -----
        When an axis is specified the subarrays indexed by the axis are sorted.
        This is done by making the specified axis the first dimension of the array
        (move the axis to the first dimension to keep the order of the other axes)
        and then flattening the subarrays in C order. The flattened subarrays are
        then viewed as a structured type with each element given a label, with the
        effect that we end up with a 1-D array of structured types that can be
        treated in the same way as any other 1-D array. The result is that the
        flattened subarrays are sorted in lexicographic order starting with the
        first element.
    
        .. versionchanged: 1.21
            If nan values are in the input array, a single nan is put
            to the end of the sorted unique values.
    
            Also for complex arrays all NaN values are considered equivalent
            (no matter whether the NaN is in the real or imaginary part).
            As the representant for the returned array the smallest one in the
            lexicographical order is chosen - see np.sort for how the lexicographical
            order is defined for complex arrays.
    
        .. versionchanged: 2.0
            For multi-dimensional inputs, ``unique_inverse`` is reshaped
            such that the input can be reconstructed using
            ``np.take(unique, unique_inverse, axis=axis)``. The result is
            now not 1-dimensional when ``axis=None``.
    
            Note that in NumPy 2.0.0 a higher dimensional array was returned also
            when ``axis`` was not ``None``.  This was reverted, but
            ``inverse.reshape(-1)`` can be used to ensure compatibility with both
            versions.
    
        Examples
        --------
        >>> import numpy as np
        >>> np.unique([1, 1, 2, 2, 3, 3])
        array([1, 2, 3])
        >>> a = np.array([[1, 1], [2, 3]])
        >>> np.unique(a)
        array([1, 2, 3])
    
        Return the unique rows of a 2D array
    
        >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
        >>> np.unique(a, axis=0)
        array([[1, 0, 0], [2, 3, 4]])
    
        Return the indices of the original array that give the unique values:
    
        >>> a = np.array(['a', 'b', 'b', 'c', 'a'])
        >>> u, indices = np.unique(a, return_index=True)
        >>> u
        array(['a', 'b', 'c'], dtype='<U1')
        >>> indices
        array([0, 1, 3])
        >>> a[indices]
        array(['a', 'b', 'c'], dtype='<U1')
    
        Reconstruct the input array from the unique values and inverse:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> u, indices = np.unique(a, return_inverse=True)
        >>> u
        array([1, 2, 3, 4, 6])
        >>> indices
        array([0, 1, 4, 3, 1, 2, 1])
        >>> u[indices]
        array([1, 2, 6, 4, 2, 3, 2])
    
        Reconstruct the input values from the unique values and counts:
    
        >>> a = np.array([1, 2, 6, 4, 2, 3, 2])
        >>> values, counts = np.unique(a, return_counts=True)
        >>> values
        array([1, 2, 3, 4, 6])
        >>> counts
        array([1, 3, 1, 1, 1])
        >>> np.repeat(values, counts)
        array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved
    
        """
        ar = np.asanyarray(ar)
        if axis is None:
            ret = _unique1d(ar, return_index, return_inverse, return_counts,
                            equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)
            return _unpack_tuple(ret)
    
        # axis was specified and not None
        try:
            ar = np.moveaxis(ar, axis, 0)
        except np.exceptions.AxisError:
            # this removes the "axis1" or "axis2" prefix from the error message
            raise np.exceptions.AxisError(axis, ar.ndim) from None
        inverse_shape = [1] * ar.ndim
        inverse_shape[axis] = ar.shape[0]
    
        # Must reshape to a contiguous 2D array for this to work...
        orig_shape, orig_dtype = ar.shape, ar.dtype
        ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
        ar = np.ascontiguousarray(ar)
        dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
    
        # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured
        # data type with `m` fields where each field has the data type of `ar`.
        # In the following, we create the array `consolidated`, which has
        # shape `(n,)` with data type `dtype`.
        try:
            if ar.shape[1] > 0:
                consolidated = ar.view(dtype)
            else:
                # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is
                # a data type with itemsize 0, and the call `ar.view(dtype)` will
                # fail.  Instead, we'll use `np.empty` to explicitly create the
                # array with shape `(len(ar),)`.  Because `dtype` in this case has
                # itemsize 0, the total size of the result is still 0 bytes.
                consolidated = np.empty(len(ar), dtype=dtype)
        except TypeError as e:
            # There's no good way to do this for object arrays, etc...
            msg = 'The axis argument to unique is not supported for dtype {dt}'
>           raise TypeError(msg.format(dt=ar.dtype)) from e
E           TypeError: The axis argument to unique is not supported for dtype object

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/numpy/lib/_arraysetops_impl.py:327: TypeError
____________________________ test_sample[1.01--1.0] ____________________________

alpha = 1.01, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761551da0>],
      dtype=object)
args = (array(1.01), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01--0.5] ____________________________

alpha = 1.01, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761553560>],
      dtype=object)
args = (array(1.01), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.0] _____________________________

alpha = 1.01, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f489a0>],
      dtype=object)
args = (array(1.01), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-0.5] _____________________________

alpha = 1.01, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f49940>],
      dtype=object)
args = (array(1.01), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.01-1.0] _____________________________

alpha = 1.01, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f482c0>],
      dtype=object)
args = (array(1.01), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--1.0] _____________________________

alpha = 1.3, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f496c0>],
      dtype=object)
args = (array(1.3), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.3--0.5] _____________________________

alpha = 1.3, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f491c0>],
      dtype=object)
args = (array(1.3), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.0] _____________________________

alpha = 1.3, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f48f40>],
      dtype=object)
args = (array(1.3), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-0.5] _____________________________

alpha = 1.3, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f48540>],
      dtype=object)
args = (array(1.3), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.3-1.0] _____________________________

alpha = 1.3, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f49620>],
      dtype=object)
args = (array(1.3), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--1.0] _____________________________

alpha = 1.7, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f49800>],
      dtype=object)
args = (array(1.7), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[1.7--0.5] _____________________________

alpha = 1.7, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f480e0>],
      dtype=object)
args = (array(1.7), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.0] _____________________________

alpha = 1.7, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f48540>],
      dtype=object)
args = (array(1.7), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-0.5] _____________________________

alpha = 1.7, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f49620>],
      dtype=object)
args = (array(1.7), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[1.7-1.0] _____________________________

alpha = 1.7, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f49800>],
      dtype=object)
args = (array(1.7), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--1.0] _____________________________

alpha = 2.0, beta = -1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f480e0>],
      dtype=object)
args = (array(2.), array(-1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
____________________________ test_sample[2.0--0.5] _____________________________

alpha = 2.0, beta = -0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f4a660>],
      dtype=object)
args = (array(2.), array(-0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.0] _____________________________

alpha = 2.0, beta = 0.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f48d60>],
      dtype=object)
args = (array(2.), array(0.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-0.5] _____________________________

alpha = 2.0, beta = 0.5

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f48540>],
      dtype=object)
args = (array(2.), array(0.5)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
_____________________________ test_sample[2.0-1.0] _____________________________

alpha = 2.0, beta = 1.0

    @pytest.mark.parametrize("beta", [-1.0, -0.5, 0.0, 0.5, 1.0])
    @pytest.mark.parametrize("alpha", [0.1, 0.4, 0.8, 0.99, 1.0, 1.01, 1.3, 1.7, 2.0])
    def test_sample(alpha, beta):
        num_samples = 100
        d = dist.Stable(alpha, beta, coords="S")
    
        def sampler(size):
            # Temporarily increase radius to test hole-patching logic.
            # Scipy doesn't handle values of alpha very close to 1.
            try:
                old = pyro.distributions.stable.RADIUS
                pyro.distributions.stable.RADIUS = 0.02
                return d.sample([size])
            finally:
                pyro.distributions.stable.RADIUS = old
    
        def cdf(x):
            with warnings.catch_warnings(record=True) as w:
                warnings.simplefilter("always", category=IntegrationWarning)
                result = levy_stable.cdf(x, alpha, beta)
            # Scipy has only an experimental .cdf() function for alpha=1, beta!=0.
            # It sometimes passes and sometimes xfails.
            if w and alpha == 1 and beta != 0:
                pytest.xfail(reason="scipy.stats.levy_stable.cdf is unstable")
            return result
    
>       assert kstest(sampler, cdf, N=num_samples).pvalue > 0.1

../publishablew/pyro/pyro/tests/distributions/test_stable.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:586: in axis_nan_policy_wrapper
    res = hypotest_fun_out(*samples, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:8389: in kstest
    return ks_1samp(xvals, cdf, args=args, alternative=alternative,
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_axis_nan_policy.py:430: in axis_nan_policy_wrapper
    return hypotest_fun_in(*args, **kwds)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/_lib/_util.py:1020: in wrapper
    return fun(*args, **kwargs)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_stats_py.py:7711: in ks_1samp
    cdfvals = cdf(x, *args)
../publishablew/pyro/pyro/tests/distributions/test_stable.py:52: in cdf
    result = levy_stable.cdf(x, alpha, beta)
../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_levy_stable/__init__.py:1022: in cdf
    return super().cdf(x, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scipy.stats._levy_stable.levy_stable_gen object at 0x7ff79e1aa310>
x = array([<function test_sample.<locals>.sampler at 0x7ff761f4aa20>],
      dtype=object)
args = (array(2.), array(1.)), kwds = {}, loc = array(0), scale = array(1)
_a = -inf, _b = inf, dtyp = dtype('O')

    def cdf(self, x, *args, **kwds):
        """
        Cumulative distribution function of the given RV.
    
        Parameters
        ----------
        x : array_like
            quantiles
        arg1, arg2, arg3,... : array_like
            The shape parameter(s) for the distribution (see docstring of the
            instance object for more information)
        loc : array_like, optional
            location parameter (default=0)
        scale : array_like, optional
            scale parameter (default=1)
    
        Returns
        -------
        cdf : ndarray
            Cumulative distribution function evaluated at `x`
    
        """
        args, loc, scale = self._parse_args(*args, **kwds)
        x, loc, scale = map(asarray, (x, loc, scale))
        args = tuple(map(asarray, args))
        _a, _b = self._get_support(*args)
        dtyp = np.promote_types(x.dtype, np.float64)
>       x = np.asarray((x - loc)/scale, dtype=dtyp)
E       TypeError: unsupported operand type(s) for -: 'function' and 'int'

../publishablew/pyro/pyro/venv/lib/python3.11/site-packages/scipy/stats/_distn_infrastructure.py:2129: TypeError
=============================== warnings summary ===============================
../publishablew/pyro/pyro/tests/distributions/test_stable.py:8
  /local/data0/moved_data/publishablew/pyro/pyro/tests/distributions/test_stable.py:8: DeprecationWarning: Please import `IntegrationWarning` from the `scipy.integrate` namespace; the `scipy.integrate.quadpack` namespace is deprecated and will be removed in SciPy 2.0.0.
    from scipy.integrate.quadpack import IntegrationWarning

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.1-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.4-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.8-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[0.99-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.0-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.01-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.3-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[1.7-1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--1.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0--0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.0]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-0.5]
FAILED ../publishablew/pyro/pyro/tests/distributions/test_stable.py::test_sample[2.0-1.0]
======================== 45 failed, 1 warning in 7.56s =========================
