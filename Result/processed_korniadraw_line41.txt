output file:
processed_korniadraw_line41.json
function:
draw_line
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'inductor', 'openxla', 'jit', 'onnxrt', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 87 items

../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_rgb[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_third_order[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_second_order[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dims[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dtype[cpu] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_singleton_color_dims[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_vertical[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_horizontal[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_with_big_coordinates[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_circle[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_ellipse[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_rectangle[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_variable_size[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_color_no_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_out_of_bounds_rectangle[cpu-float32] PASSED

=================================== FAILURES ===================================
_____________ TestDrawLine.test_draw_line_m_lte_neg1[cpu-float32] ______________

self = <test_draw.TestDrawLine object at 0x7096b8702d40>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_m_lte_neg1(self, dtype, device):
        """Test drawing a line with m <= -1."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        img = draw_line(img, torch.tensor([0, 7]), torch.tensor([6, 0]), torch.tensor([255]))
        img_mask = torch.tensor(
            [
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       assert_close(img, img_mask)

../publishablew/kornia/kornia/tests/utils/test_draw.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[  0.,   0.,   0.,   0.,   0.,   0., 255.,   0.],
         [  0.,   0.,   0.,   0.,   0., 255.,   0.,   0.],
...         [  0., 255.,   0.,   0.,   0.,   0.,   0.,   0.],
         [255.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]])
expected = tensor([[[  0.,   0.,   0.,   0.,   0.,   0., 255.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 255.,   0.],
...         [  0., 255.,   0.,   0.,   0.,   0.,   0.,   0.],
         [255.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 6 / 64 (9.4%)
E       Greatest absolute difference: 255.0 at index (0, 1, 5) (up to 1e-05 allowed)
E       Greatest relative difference: inf at index (0, 1, 5) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___________ TestDrawLine.test_draw_line_m_lt_0_gte_neg1[cpu-float32] ___________

self = <test_draw.TestDrawLine object at 0x7096b8703070>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_m_lt_0_gte_neg1(self, dtype, device):
        """Test drawing a line with -1 < m < 0."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        img = draw_line(img, torch.tensor([1, 5]), torch.tensor([7, 0]), torch.tensor([255]))
        img_mask = torch.tensor(
            [
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       assert_close(img, img_mask)

../publishablew/kornia/kornia/tests/utils/test_draw.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[  0.,   0.,   0.,   0.,   0.,   0.,   0., 255.],
         [  0.,   0.,   0.,   0.,   0.,   0., 255.,   0.],
...         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]])
expected = tensor([[[  0.,   0.,   0.,   0.,   0.,   0., 255., 255.],
         [  0.,   0.,   0.,   0.,   0., 255.,   0.,   0.],
...         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 6 / 64 (9.4%)
E       Greatest absolute difference: 255.0 at index (0, 0, 6) (up to 1e-05 allowed)
E       Greatest relative difference: inf at index (0, 1, 6) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____________ TestDrawLine.test_draw_line_m_gt_0_lt_1[cpu-float32] _____________

self = <test_draw.TestDrawLine object at 0x7096b87033a0>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_m_gt_0_lt_1(self, dtype, device):
        """Test drawing a line with 0 < m < 1."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        img = draw_line(img, torch.tensor([0, 0]), torch.tensor([6, 2]), torch.tensor([255]))
        img_mask = torch.tensor(
            [
                [
                    [255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       assert_close(img, img_mask)

../publishablew/kornia/kornia/tests/utils/test_draw.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[255., 255.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0., 255., 255., 255.,   0.,   0.,   0.],
...         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]])
expected = tensor([[[255.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0., 255., 255., 255.,   0.,   0.,   0.,   0.],
...         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 4 / 64 (6.2%)
E       Greatest absolute difference: 255.0 at index (0, 0, 1) (up to 1e-05 allowed)
E       Greatest relative difference: inf at index (0, 0, 1) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
_______________ TestDrawLine.test_draw_line_m_gte_1[cpu-float32] _______________

self = <test_draw.TestDrawLine object at 0x7096b87036d0>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_line_m_gte_1(self, dtype, device):
        """Test drawing a line with m >= 1."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        img = draw_line(img, torch.tensor([3, 7]), torch.tensor([1, 4]), torch.tensor([255]))
        img_mask = torch.tensor(
            [
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       assert_close(img, img_mask)

../publishablew/kornia/kornia/tests/utils/test_draw.py:214: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
...         [  0.,   0., 255.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0., 255.,   0.,   0.,   0.,   0.]]])
expected = tensor([[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
...         [  0.,   0., 255.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0., 255.,   0.,   0.,   0.,   0.]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 2 / 64 (3.1%)
E       Greatest absolute difference: 255.0 at index (0, 5, 1) (up to 1e-05 allowed)
E       Greatest relative difference: inf at index (0, 5, 2) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
______________ TestDrawLine.test_draw_lines_batched[cpu-float32] _______________

self = <test_draw.TestDrawLine object at 0x7096b8703a00>, dtype = torch.float32
device = device(type='cpu')

    def test_draw_lines_batched(self, dtype, device):
        """Test drawing a line with m <= -1."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        img = draw_line(
            img, torch.tensor([[0, 7], [0, 7], [0, 2]]), torch.tensor([[6, 0], [0, 0], [7, 7]]), torch.tensor([255])
        )
        img_mask = torch.tensor(
            [
                [
                    [255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0],
                    [255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0],
                    [255.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0],
                    [255.0, 255.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0],
                    [255.0, 0.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0],
                    [255.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0],
                    [255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0],
                    [255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       assert_close(img, img_mask)

../publishablew/kornia/kornia/tests/utils/test_draw.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[255.,   0.,   0.,   0.,   0.,   0., 255.,   0.],
         [255.,   0.,   0.,   0.,   0., 255.,   0.,   0.],
...         [255., 255.,   0.,   0.,   0., 255., 255.,   0.],
         [255.,   0.,   0.,   0.,   0.,   0.,   0., 255.]]])
expected = tensor([[[255.,   0.,   0.,   0.,   0.,   0., 255.,   0.],
         [255.,   0.,   0.,   0.,   0.,   0., 255.,   0.],
...         [255., 255.,   0.,   0.,   0., 255.,   0.,   0.],
         [255.,   0.,   0.,   0.,   0.,   0., 255., 255.]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 11 / 64 (17.2%)
E       Greatest absolute difference: 255.0 at index (0, 1, 5) (up to 1e-05 allowed)
E       Greatest relative difference: inf at index (0, 1, 5) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
_____________ TestDrawLine.test_p1_out_of_bounds[cpu-float32-p10] ______________

self = <test_draw.TestDrawLine object at 0x7096b8703df0>, p1 = tensor([-1,  0])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p1", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p1_out_of_bounds(self, p1, dtype, device):
        """Tests that an exception is raised if p1 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       with pytest.raises(ValueError) as excinfo:
E       Failed: DID NOT RAISE <class 'ValueError'>

../publishablew/kornia/kornia/tests/utils/test_draw.py:246: Failed
_____________ TestDrawLine.test_p1_out_of_bounds[cpu-float32-p11] ______________

self = <test_draw.TestDrawLine object at 0x7096b8703d30>, p1 = tensor([ 0, -1])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p1", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p1_out_of_bounds(self, p1, dtype, device):
        """Tests that an exception is raised if p1 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       with pytest.raises(ValueError) as excinfo:
E       Failed: DID NOT RAISE <class 'ValueError'>

../publishablew/kornia/kornia/tests/utils/test_draw.py:246: Failed
_____________ TestDrawLine.test_p1_out_of_bounds[cpu-float32-p12] ______________

self = <test_draw.TestDrawLine object at 0x7096b8738190>, p1 = tensor([8, 0])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p1", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p1_out_of_bounds(self, p1, dtype, device):
        """Tests that an exception is raised if p1 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       with pytest.raises(ValueError) as excinfo:
E       Failed: DID NOT RAISE <class 'ValueError'>

../publishablew/kornia/kornia/tests/utils/test_draw.py:246: Failed
_____________ TestDrawLine.test_p1_out_of_bounds[cpu-float32-p13] ______________

self = <test_draw.TestDrawLine object at 0x7096b8738250>, p1 = tensor([0, 8])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p1", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p1_out_of_bounds(self, p1, dtype, device):
        """Tests that an exception is raised if p1 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       with pytest.raises(ValueError) as excinfo:
E       Failed: DID NOT RAISE <class 'ValueError'>

../publishablew/kornia/kornia/tests/utils/test_draw.py:246: Failed
_____________ TestDrawLine.test_p2_out_of_bounds[cpu-float32-p20] ______________

self = <test_draw.TestDrawLine object at 0x7096b8702e60>, p2 = tensor([-1,  0])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p2", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p2_out_of_bounds(self, p2, dtype, device):
        """Tests that an exception is raised if p2 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       with pytest.raises(ValueError) as excinfo:
E       Failed: DID NOT RAISE <class 'ValueError'>

../publishablew/kornia/kornia/tests/utils/test_draw.py:257: Failed
_____________ TestDrawLine.test_p2_out_of_bounds[cpu-float32-p21] ______________

self = <test_draw.TestDrawLine object at 0x7096b87031c0>, p2 = tensor([ 0, -1])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p2", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p2_out_of_bounds(self, p2, dtype, device):
        """Tests that an exception is raised if p2 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       with pytest.raises(ValueError) as excinfo:
E       Failed: DID NOT RAISE <class 'ValueError'>

../publishablew/kornia/kornia/tests/utils/test_draw.py:257: Failed
_____________ TestDrawLine.test_p2_out_of_bounds[cpu-float32-p22] ______________

self = <test_draw.TestDrawLine object at 0x7096b8701390>, p2 = tensor([8, 0])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p2", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p2_out_of_bounds(self, p2, dtype, device):
        """Tests that an exception is raised if p2 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       with pytest.raises(ValueError) as excinfo:
E       Failed: DID NOT RAISE <class 'ValueError'>

../publishablew/kornia/kornia/tests/utils/test_draw.py:257: Failed
_____________ TestDrawLine.test_p2_out_of_bounds[cpu-float32-p23] ______________

self = <test_draw.TestDrawLine object at 0x7096b87383a0>, p2 = tensor([0, 8])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize(
        "p2", [torch.tensor([-1, 0]), torch.tensor([0, -1]), torch.tensor([8, 0]), torch.tensor([0, 8])]
    )
    def test_p2_out_of_bounds(self, p2, dtype, device):
        """Tests that an exception is raised if p2 is out of bounds."""
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
>       with pytest.raises(ValueError) as excinfo:
E       Failed: DID NOT RAISE <class 'ValueError'>

../publishablew/kornia/kornia/tests/utils/test_draw.py:257: Failed
_____________ TestDrawLine.test_image_size[cpu-float32-img_size0] ______________

self = <test_draw.TestDrawLine object at 0x7096b8738730>, img_size = (200, 100)
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("img_size", [(200, 100), (32, 3, 20, 20)])
    def test_image_size(self, img_size, dtype, device):
        img = torch.zeros(*img_size, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, torch.tensor([0, 0]), torch.tensor([1, 1]), torch.tensor([255]))

../publishablew/kornia/kornia/tests/utils/test_draw.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]...       [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
p1 = tensor([0, 0]), p2 = tensor([1, 1]), color = tensor([255])

    def draw_line(image, p1, p2, color):
        """
        Draws a single line into an image.
    
        Parameters:
        - image (torch.Tensor): The input image with shape (C, H, W).
        - p1 (torch.Tensor): The start point [x, y] of the line with shape (2,) or (B, 2).
        - p2 (torch.Tensor): The end point [x, y] of the line with shape (2,) or (B, 2).
        - color (torch.Tensor): The color of the line with shape (C).
    
        Returns:
        - torch.Tensor: The image with the drawn line.
        """
>       assert image.dim() == 3, 'Image must have 3 dimensions (C, H, W)'
E       AssertionError: Image must have 3 dimensions (C, H, W)

../publishablew/kornia/kornia/kornia/utils/temp.py:20: AssertionError
_____________ TestDrawLine.test_image_size[cpu-float32-img_size1] ______________

self = <test_draw.TestDrawLine object at 0x7096b8738670>
img_size = (32, 3, 20, 20), dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("img_size", [(200, 100), (32, 3, 20, 20)])
    def test_image_size(self, img_size, dtype, device):
        img = torch.zeros(*img_size, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, torch.tensor([0, 0]), torch.tensor([1, 1]), torch.tensor([255]))

../publishablew/kornia/kornia/tests/utils/test_draw.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
p1 = tensor([0, 0]), p2 = tensor([1, 1]), color = tensor([255])

    def draw_line(image, p1, p2, color):
        """
        Draws a single line into an image.
    
        Parameters:
        - image (torch.Tensor): The input image with shape (C, H, W).
        - p1 (torch.Tensor): The start point [x, y] of the line with shape (2,) or (B, 2).
        - p2 (torch.Tensor): The end point [x, y] of the line with shape (2,) or (B, 2).
        - color (torch.Tensor): The color of the line with shape (C).
    
        Returns:
        - torch.Tensor: The image with the drawn line.
        """
>       assert image.dim() == 3, 'Image must have 3 dimensions (C, H, W)'
E       AssertionError: Image must have 3 dimensions (C, H, W)

../publishablew/kornia/kornia/kornia/utils/temp.py:20: AssertionError
___ TestDrawLine.test_color_image_channel_size[cpu-float32-img_size0-color0] ___

self = <test_draw.TestDrawLine object at 0x7096b8738be0>, img_size = (1, 8, 8)
color = tensor([23, 53]), dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("img_size,color", [((1, 8, 8), torch.tensor([23, 53])), ((3, 8, 8), torch.tensor([255]))])
    def test_color_image_channel_size(self, img_size, color, dtype, device):
        img = torch.zeros(*img_size, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, torch.tensor([0, 0]), torch.tensor([1, 1]), color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([0, 0]), p2 = tensor([1, 1]), color = tensor([23, 53])

    def draw_line(image, p1, p2, color):
        """
        Draws a single line into an image.
    
        Parameters:
        - image (torch.Tensor): The input image with shape (C, H, W).
        - p1 (torch.Tensor): The start point [x, y] of the line with shape (2,) or (B, 2).
        - p2 (torch.Tensor): The end point [x, y] of the line with shape (2,) or (B, 2).
        - color (torch.Tensor): The color of the line with shape (C).
    
        Returns:
        - torch.Tensor: The image with the drawn line.
        """
        assert image.dim() == 3, 'Image must have 3 dimensions (C, H, W)'
        C, H, W = image.shape
>       assert color.shape == (C,), 'Color must have the same number of channels as the image'
E       AssertionError: Color must have the same number of channels as the image

../publishablew/kornia/kornia/kornia/utils/temp.py:22: AssertionError
___ TestDrawLine.test_color_image_channel_size[cpu-float32-img_size1-color1] ___

self = <test_draw.TestDrawLine object at 0x7096b8738b20>, img_size = (3, 8, 8)
color = tensor([255]), dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("img_size,color", [((1, 8, 8), torch.tensor([23, 53])), ((3, 8, 8), torch.tensor([255]))])
    def test_color_image_channel_size(self, img_size, color, dtype, device):
        img = torch.zeros(*img_size, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, torch.tensor([0, 0]), torch.tensor([1, 1]), color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([0, 0]), p2 = tensor([1, 1]), color = tensor([255])

    def draw_line(image, p1, p2, color):
        """
        Draws a single line into an image.
    
        Parameters:
        - image (torch.Tensor): The input image with shape (C, H, W).
        - p1 (torch.Tensor): The start point [x, y] of the line with shape (2,) or (B, 2).
        - p2 (torch.Tensor): The end point [x, y] of the line with shape (2,) or (B, 2).
        - color (torch.Tensor): The color of the line with shape (C).
    
        Returns:
        - torch.Tensor: The image with the drawn line.
        """
        assert image.dim() == 3, 'Image must have 3 dimensions (C, H, W)'
        C, H, W = image.shape
>       assert color.shape == (C,), 'Color must have the same number of channels as the image'
E       AssertionError: Color must have the same number of channels as the image

../publishablew/kornia/kornia/kornia/utils/temp.py:22: AssertionError
______________ TestDrawLine.test_point_size[cpu-float32-p10-p20] _______________

self = <test_draw.TestDrawLine object at 0x7096b87390f0>
p1 = tensor([[0.2333, 0.4221],
        [0.8735, 0.4768],
        [0.6855, 0.1059],
        [0.1699, 0.1059],
        [0.849...7079, 0.0396],
        [0.8349, 0.4345],
        [0.4121, 0.9825],
        [0.3620, 0.6443],
        [0.4568, 0.7960]])
p2 = tensor([[0.8358, 0.5371],
        [0.5583, 0.8824],
        [0.1392, 0.1091],
        [0.1945, 0.7276],
        [0.784...3303, 0.2236],
        [0.6256, 0.9809],
        [0.9616, 0.4503],
        [0.2456, 0.9077],
        [0.0788, 0.2036]])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("p1,p2", [(torch.rand([10, 2]), torch.rand([20, 2])), (torch.rand([2]), torch.rand([3]))])
    def test_point_size(self, p1, p2, dtype, device):
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, p1, p2, torch.tensor([255]))

../publishablew/kornia/kornia/tests/utils/test_draw.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([[0.2333, 0.4221],
        [0.8735, 0.4768],
        [0.6855, 0.1059],
        [0.1699, 0.1059],
        [0.849...7079, 0.0396],
        [0.8349, 0.4345],
        [0.4121, 0.9825],
        [0.3620, 0.6443],
        [0.4568, 0.7960]])
p2 = tensor([[0.8358, 0.5371],
        [0.5583, 0.8824],
        [0.1392, 0.1091],
        [0.1945, 0.7276],
        [0.784...3303, 0.2236],
        [0.6256, 0.9809],
        [0.9616, 0.4503],
        [0.2456, 0.9077],
        [0.0788, 0.2036]])
color = tensor([255])

    def draw_line(image, p1, p2, color):
        """
        Draws a single line into an image.
    
        Parameters:
        - image (torch.Tensor): The input image with shape (C, H, W).
        - p1 (torch.Tensor): The start point [x, y] of the line with shape (2,) or (B, 2).
        - p2 (torch.Tensor): The end point [x, y] of the line with shape (2,) or (B, 2).
        - color (torch.Tensor): The color of the line with shape (C).
    
        Returns:
        - torch.Tensor: The image with the drawn line.
        """
        assert image.dim() == 3, 'Image must have 3 dimensions (C, H, W)'
        C, H, W = image.shape
        assert color.shape == (C,), 'Color must have the same number of channels as the image'
        if p1.dim() == 1:
            p1 = p1.unsqueeze(0)
        if p2.dim() == 1:
            p2 = p2.unsqueeze(0)
>       assert p1.shape == p2.shape, 'p1 and p2 must have the same shape'
E       AssertionError: p1 and p2 must have the same shape

../publishablew/kornia/kornia/kornia/utils/temp.py:27: AssertionError
______________ TestDrawLine.test_point_size[cpu-float32-p11-p21] _______________

self = <test_draw.TestDrawLine object at 0x7096b8739030>
p1 = tensor([0.5025, 0.0955]), p2 = tensor([0.0441, 0.8066, 0.3533])
dtype = torch.float32, device = device(type='cpu')

    @pytest.mark.parametrize("p1,p2", [(torch.rand([10, 2]), torch.rand([20, 2])), (torch.rand([2]), torch.rand([3]))])
    def test_point_size(self, p1, p2, dtype, device):
        img = torch.zeros(1, 8, 8, dtype=dtype, device=device)
        with pytest.raises(ValueError) as excinfo:
>           draw_line(img, p1, p2, torch.tensor([255]))

../publishablew/kornia/kornia/tests/utils/test_draw.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:45: in draw_line
    return draw_line(image, p1, p2, color)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0....., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0.]]])
p1 = tensor([[0.5025, 0.0955]]), p2 = tensor([[0.0441, 0.8066, 0.3533]])
color = tensor([255])

    def draw_line(image, p1, p2, color):
        """
        Draws a single line into an image.
    
        Parameters:
        - image (torch.Tensor): The input image with shape (C, H, W).
        - p1 (torch.Tensor): The start point [x, y] of the line with shape (2,) or (B, 2).
        - p2 (torch.Tensor): The end point [x, y] of the line with shape (2,) or (B, 2).
        - color (torch.Tensor): The color of the line with shape (C).
    
        Returns:
        - torch.Tensor: The image with the drawn line.
        """
        assert image.dim() == 3, 'Image must have 3 dimensions (C, H, W)'
        C, H, W = image.shape
        assert color.shape == (C,), 'Color must have the same number of channels as the image'
        if p1.dim() == 1:
            p1 = p1.unsqueeze(0)
        if p2.dim() == 1:
            p2 = p2.unsqueeze(0)
>       assert p1.shape == p2.shape, 'p1 and p2 must have the same shape'
E       AssertionError: p1 and p2 must have the same shape

../publishablew/kornia/kornia/kornia/utils/temp.py:27: AssertionError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21]
======================== 19 failed, 68 passed in 0.82s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'onnxrt', 'jit', 'inductor', 'cudagraphs', None, 'openxla'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 87 items

../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_rgb[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_third_order[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_second_order[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dims[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dtype[cpu] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_singleton_color_dims[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_vertical[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_horizontal[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_with_big_coordinates[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_circle[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_ellipse[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_rectangle[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_variable_size[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_color_no_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_out_of_bounds_rectangle[cpu-float32] PASSED

============================== 87 passed in 0.38s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'jit', 'onnxrt', 'openxla', 'inductor', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 87 items

../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_rgb[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_third_order[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_grayscale_second_order[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dims[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_mismatched_dtype[cpu] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawPoint::test_draw_point2d_with_singleton_color_dims[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_vertical[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_horizontal[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_with_big_coordinates[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lte_neg1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_lt_0_gte_neg1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gt_0_lt_1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_line_m_gte_1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_draw_lines_batched[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p10] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p12] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p1_out_of_bounds[cpu-float32-p13] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p20] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p21] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p22] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_p2_out_of_bounds[cpu-float32-p23] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_image_size[cpu-float32-img_size1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size0-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_color_image_channel_size[cpu-float32-img_size1-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p10-p20] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawLine::test_point_size[cpu-float32-p11-p21] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_circle[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_ellipse[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_rectangle[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_variable_size[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_batch_color_no_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestFillConvexPolygon::test_out_of_bounds_rectangle[cpu-float32] PASSED

============================== 87 passed in 0.35s ==============================
