output file:
processed_scikit-learncompute_sample_weight157.json
function:
compute_sample_weight
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight2-None-Got 1 element\\\\(s\\\\) while having 2 outputs] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_array]', '../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight FAILED', "FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[single-output-class_weight0-indices0-The only valid class_weight for subsampling is 'balanced'.]", 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight2-None-Got 1 element\\\\(s\\\\) while having 2 outputs]', "../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[single-output-class_weight0-indices0-The only valid class_weight for subsampling is 'balanced'.] FAILED", 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_class_weight_does_not_contains_more_classes', '../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_matrix] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_class_weight_does_not_contains_more_classes FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_with_subsample', '../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight1-None-For multi-output, class_weight should be a list of dicts, or the string] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_matrix]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight1-None-For multi-output, class_weight should be a list of dicts, or the string]', '../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_array] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight', '../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_with_subsample FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 20 items

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight I: Seeding RNGs with 1557598685
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-balanced-classes0-classes should have valid labels that are in y] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-class_weight1-classes1-The classes, \\[0, 1, 2, 3\\], are not in class_weight] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-balanced-classes2-classes should include all valid labels] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-class_weight3-classes3-classes should include all valid labels] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[string-class_weight4-classes4-The classes, \\['dog'\\], are not in class_weight] ['dog' 'cat' 'dog']
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_dict PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_invariance PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_balanced_negative PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_balanced_unordered PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_default PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_with_subsample FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[single-output-class_weight0-indices0-The only valid class_weight for subsampling is 'balanced'.] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight1-None-For multi-output, class_weight should be a list of dicts, or the string] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight2-None-Got 1 element\\(s\\) while having 2 outputs] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_more_than_32 PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_class_weight_does_not_contains_more_classes FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_array] FAILED

=================================== FAILURES ===================================
__________________________ test_compute_sample_weight __________________________

    def test_compute_sample_weight():
        # Test (and demo) compute_sample_weight.
        # Test with balanced classes
        y = np.asarray([1, 1, 1, 2, 2, 2])
        sample_weight = compute_sample_weight("balanced", y)
        assert_array_almost_equal(sample_weight, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
    
        # Test with user-defined weights
        sample_weight = compute_sample_weight({1: 2, 2: 1}, y)
        assert_array_almost_equal(sample_weight, [2.0, 2.0, 2.0, 1.0, 1.0, 1.0])
    
        # Test with column vector of balanced classes
        y = np.asarray([[1], [1], [1], [2], [2], [2]])
>       sample_weight = compute_sample_weight("balanced", y)

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/class_weight.py:73: in compute_sample_weight
    return compute_sample_weight(class_weight, y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

class_weight = 'balanced'
y = array([[1],
       [1],
       [1],
       [2],
       [2],
       [2]])
indices = None

    def compute_sample_weight(class_weight, y, indices=None):
        y = np.asarray(y)
        if indices is not None:
            y = y[indices]
        classes, class_counts = np.unique(y, return_counts=True)
        n_samples = y.shape[0]
        sample_weight_vect = np.ones(n_samples, dtype=np.float64)
        if class_weight is None:
            return sample_weight_vect
        elif class_weight == 'balanced':
            class_weight_dict = {cls: n_samples / (len(classes) * count) for cls, count in zip(classes, class_counts)}
        elif isinstance(class_weight, dict):
            class_weight_dict = class_weight
        elif isinstance(class_weight, list):
            if len(class_weight) != len(classes):
                raise ValueError('Length of class_weight list must match number of classes.')
            class_weight_dict = {cls: weight for cls, weight in zip(classes, class_weight)}
        else:
            raise ValueError("class_weight must be 'balanced', a dict, a list of dicts, or None.")
        for cls, weight in class_weight_dict.items():
>           sample_weight_vect[y == cls] = weight
E           IndexError: too many indices for array: array is 1-dimensional, but 2 were indexed

../publishablew/scikit-learn/scikit-learn/sklearn/utils/temp.py:27: IndexError
__________________ test_compute_sample_weight_with_subsample ___________________

    def test_compute_sample_weight_with_subsample():
        # Test compute_sample_weight with subsamples specified.
        # Test with balanced classes and all samples present
        y = np.asarray([1, 1, 1, 2, 2, 2])
        sample_weight = compute_sample_weight("balanced", y, indices=range(6))
        assert_array_almost_equal(sample_weight, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
    
        # Test with column vector of balanced classes and all samples present
        y = np.asarray([[1], [1], [1], [2], [2], [2]])
>       sample_weight = compute_sample_weight("balanced", y, indices=range(6))

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/class_weight.py:73: in compute_sample_weight
    return compute_sample_weight(class_weight, y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

class_weight = 'balanced'
y = array([[1],
       [1],
       [1],
       [2],
       [2],
       [2]])
indices = None

    def compute_sample_weight(class_weight, y, indices=None):
        y = np.asarray(y)
        if indices is not None:
            y = y[indices]
        classes, class_counts = np.unique(y, return_counts=True)
        n_samples = y.shape[0]
        sample_weight_vect = np.ones(n_samples, dtype=np.float64)
        if class_weight is None:
            return sample_weight_vect
        elif class_weight == 'balanced':
            class_weight_dict = {cls: n_samples / (len(classes) * count) for cls, count in zip(classes, class_counts)}
        elif isinstance(class_weight, dict):
            class_weight_dict = class_weight
        elif isinstance(class_weight, list):
            if len(class_weight) != len(classes):
                raise ValueError('Length of class_weight list must match number of classes.')
            class_weight_dict = {cls: weight for cls, weight in zip(classes, class_weight)}
        else:
            raise ValueError("class_weight must be 'balanced', a dict, a list of dicts, or None.")
        for cls, weight in class_weight_dict.items():
>           sample_weight_vect[y == cls] = weight
E           IndexError: too many indices for array: array is 1-dimensional, but 2 were indexed

../publishablew/scikit-learn/scikit-learn/sklearn/utils/temp.py:27: IndexError
_ test_compute_sample_weight_errors[single-output-class_weight0-indices0-The only valid class_weight for subsampling is 'balanced'.] _

y_type = 'single-output', class_weight = {1: 2, 2: 1}, indices = range(0, 4)
err_msg = "The only valid class_weight for subsampling is 'balanced'."

    @pytest.mark.parametrize(
        "y_type, class_weight, indices, err_msg",
        [
            (
                "single-output",
                {1: 2, 2: 1},
                range(4),
                "The only valid class_weight for subsampling is 'balanced'.",
            ),
            (
                "multi-output",
                {1: 2, 2: 1},
                None,
                "For multi-output, class_weight should be a list of dicts, or the string",
            ),
            (
                "multi-output",
                [{1: 2, 2: 1}],
                None,
                r"Got 1 element\(s\) while having 2 outputs",
            ),
        ],
    )
    def test_compute_sample_weight_errors(y_type, class_weight, indices, err_msg):
        # Test compute_sample_weight raises errors expected.
        # Invalid preset string
        y_single_output = np.asarray([1, 1, 1, 2, 2, 2])
        y_multi_output = np.asarray([[1, 0], [1, 0], [1, 0], [2, 1], [2, 1], [2, 1]])
    
        y = y_single_output if y_type == "single-output" else y_multi_output
        with pytest.raises(ValueError, match=err_msg):
>           compute_sample_weight(class_weight, y, indices=indices)
E           Failed: DID NOT RAISE <class 'ValueError'>

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py:289: Failed
_ test_compute_sample_weight_errors[multi-output-class_weight1-None-For multi-output, class_weight should be a list of dicts, or the string] _

y_type = 'multi-output', class_weight = {1: 2, 2: 1}, indices = None
err_msg = 'For multi-output, class_weight should be a list of dicts, or the string'

    @pytest.mark.parametrize(
        "y_type, class_weight, indices, err_msg",
        [
            (
                "single-output",
                {1: 2, 2: 1},
                range(4),
                "The only valid class_weight for subsampling is 'balanced'.",
            ),
            (
                "multi-output",
                {1: 2, 2: 1},
                None,
                "For multi-output, class_weight should be a list of dicts, or the string",
            ),
            (
                "multi-output",
                [{1: 2, 2: 1}],
                None,
                r"Got 1 element\(s\) while having 2 outputs",
            ),
        ],
    )
    def test_compute_sample_weight_errors(y_type, class_weight, indices, err_msg):
        # Test compute_sample_weight raises errors expected.
        # Invalid preset string
        y_single_output = np.asarray([1, 1, 1, 2, 2, 2])
        y_multi_output = np.asarray([[1, 0], [1, 0], [1, 0], [2, 1], [2, 1], [2, 1]])
    
        y = y_single_output if y_type == "single-output" else y_multi_output
        with pytest.raises(ValueError, match=err_msg):
>           compute_sample_weight(class_weight, y, indices=indices)

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/class_weight.py:73: in compute_sample_weight
    return compute_sample_weight(class_weight, y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

class_weight = {1: 2, 2: 1}
y = array([[1, 0],
       [1, 0],
       [1, 0],
       [2, 1],
       [2, 1],
       [2, 1]])
indices = None

    def compute_sample_weight(class_weight, y, indices=None):
        y = np.asarray(y)
        if indices is not None:
            y = y[indices]
        classes, class_counts = np.unique(y, return_counts=True)
        n_samples = y.shape[0]
        sample_weight_vect = np.ones(n_samples, dtype=np.float64)
        if class_weight is None:
            return sample_weight_vect
        elif class_weight == 'balanced':
            class_weight_dict = {cls: n_samples / (len(classes) * count) for cls, count in zip(classes, class_counts)}
        elif isinstance(class_weight, dict):
            class_weight_dict = class_weight
        elif isinstance(class_weight, list):
            if len(class_weight) != len(classes):
                raise ValueError('Length of class_weight list must match number of classes.')
            class_weight_dict = {cls: weight for cls, weight in zip(classes, class_weight)}
        else:
            raise ValueError("class_weight must be 'balanced', a dict, a list of dicts, or None.")
        for cls, weight in class_weight_dict.items():
>           sample_weight_vect[y == cls] = weight
E           IndexError: too many indices for array: array is 1-dimensional, but 2 were indexed

../publishablew/scikit-learn/scikit-learn/sklearn/utils/temp.py:27: IndexError
_ test_compute_sample_weight_errors[multi-output-class_weight2-None-Got 1 element\\(s\\) while having 2 outputs] _

y_type = 'multi-output', class_weight = [{1: 2, 2: 1}], indices = None
err_msg = 'Got 1 element\\(s\\) while having 2 outputs'

    @pytest.mark.parametrize(
        "y_type, class_weight, indices, err_msg",
        [
            (
                "single-output",
                {1: 2, 2: 1},
                range(4),
                "The only valid class_weight for subsampling is 'balanced'.",
            ),
            (
                "multi-output",
                {1: 2, 2: 1},
                None,
                "For multi-output, class_weight should be a list of dicts, or the string",
            ),
            (
                "multi-output",
                [{1: 2, 2: 1}],
                None,
                r"Got 1 element\(s\) while having 2 outputs",
            ),
        ],
    )
    def test_compute_sample_weight_errors(y_type, class_weight, indices, err_msg):
        # Test compute_sample_weight raises errors expected.
        # Invalid preset string
        y_single_output = np.asarray([1, 1, 1, 2, 2, 2])
        y_multi_output = np.asarray([[1, 0], [1, 0], [1, 0], [2, 1], [2, 1], [2, 1]])
    
        y = y_single_output if y_type == "single-output" else y_multi_output
        with pytest.raises(ValueError, match=err_msg):
>           compute_sample_weight(class_weight, y, indices=indices)

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/class_weight.py:73: in compute_sample_weight
    return compute_sample_weight(class_weight, y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

class_weight = [{1: 2, 2: 1}]
y = array([[1, 0],
       [1, 0],
       [1, 0],
       [2, 1],
       [2, 1],
       [2, 1]])
indices = None

    def compute_sample_weight(class_weight, y, indices=None):
        y = np.asarray(y)
        if indices is not None:
            y = y[indices]
        classes, class_counts = np.unique(y, return_counts=True)
        n_samples = y.shape[0]
        sample_weight_vect = np.ones(n_samples, dtype=np.float64)
        if class_weight is None:
            return sample_weight_vect
        elif class_weight == 'balanced':
            class_weight_dict = {cls: n_samples / (len(classes) * count) for cls, count in zip(classes, class_counts)}
        elif isinstance(class_weight, dict):
            class_weight_dict = class_weight
        elif isinstance(class_weight, list):
            if len(class_weight) != len(classes):
>               raise ValueError('Length of class_weight list must match number of classes.')
E               ValueError: Length of class_weight list must match number of classes.

../publishablew/scikit-learn/scikit-learn/sklearn/utils/temp.py:22: ValueError

During handling of the above exception, another exception occurred:

y_type = 'multi-output', class_weight = [{1: 2, 2: 1}], indices = None
err_msg = 'Got 1 element\\(s\\) while having 2 outputs'

    @pytest.mark.parametrize(
        "y_type, class_weight, indices, err_msg",
        [
            (
                "single-output",
                {1: 2, 2: 1},
                range(4),
                "The only valid class_weight for subsampling is 'balanced'.",
            ),
            (
                "multi-output",
                {1: 2, 2: 1},
                None,
                "For multi-output, class_weight should be a list of dicts, or the string",
            ),
            (
                "multi-output",
                [{1: 2, 2: 1}],
                None,
                r"Got 1 element\(s\) while having 2 outputs",
            ),
        ],
    )
    def test_compute_sample_weight_errors(y_type, class_weight, indices, err_msg):
        # Test compute_sample_weight raises errors expected.
        # Invalid preset string
        y_single_output = np.asarray([1, 1, 1, 2, 2, 2])
        y_multi_output = np.asarray([[1, 0], [1, 0], [1, 0], [2, 1], [2, 1], [2, 1]])
    
        y = y_single_output if y_type == "single-output" else y_multi_output
        with pytest.raises(ValueError, match=err_msg):
>           compute_sample_weight(class_weight, y, indices=indices)
E           AssertionError: Regex pattern did not match.
E            Regex: 'Got 1 element\\(s\\) while having 2 outputs'
E            Input: 'Length of class_weight list must match number of classes.'

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py:289: AssertionError
_______________ test_class_weight_does_not_contains_more_classes _______________

    def test_class_weight_does_not_contains_more_classes():
        """Check that class_weight can contain more labels than in y.
    
        Non-regression test for #22413
        """
        tree = DecisionTreeClassifier(class_weight={0: 1, 1: 10, 2: 20})
    
        # Does not raise
>       tree.fit([[0, 0, 1], [1, 0, 1], [1, 2, 0]], [0, 0, 1])

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/tree/_classes.py:1019: in fit
    super()._fit(
../publishablew/scikit-learn/scikit-learn/sklearn/tree/_classes.py:311: in _fit
    expanded_class_weight = compute_sample_weight(
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/class_weight.py:73: in compute_sample_weight
    return compute_sample_weight(class_weight, y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

class_weight = {0: 1, 1: 10, 2: 20}, y = array([[0],
       [0],
       [1]])
indices = None

    def compute_sample_weight(class_weight, y, indices=None):
        y = np.asarray(y)
        if indices is not None:
            y = y[indices]
        classes, class_counts = np.unique(y, return_counts=True)
        n_samples = y.shape[0]
        sample_weight_vect = np.ones(n_samples, dtype=np.float64)
        if class_weight is None:
            return sample_weight_vect
        elif class_weight == 'balanced':
            class_weight_dict = {cls: n_samples / (len(classes) * count) for cls, count in zip(classes, class_counts)}
        elif isinstance(class_weight, dict):
            class_weight_dict = class_weight
        elif isinstance(class_weight, list):
            if len(class_weight) != len(classes):
                raise ValueError('Length of class_weight list must match number of classes.')
            class_weight_dict = {cls: weight for cls, weight in zip(classes, class_weight)}
        else:
            raise ValueError("class_weight must be 'balanced', a dict, a list of dicts, or None.")
        for cls, weight in class_weight_dict.items():
>           sample_weight_vect[y == cls] = weight
E           IndexError: too many indices for array: array is 1-dimensional, but 2 were indexed

../publishablew/scikit-learn/scikit-learn/sklearn/utils/temp.py:27: IndexError
________________ test_compute_sample_weight_sparse[csc_matrix] _________________

csc_container = <class 'scipy.sparse._csc.csc_matrix'>

    @pytest.mark.parametrize("csc_container", CSC_CONTAINERS)
    def test_compute_sample_weight_sparse(csc_container):
        """Check that we can compute weight for sparse `y`."""
        y = csc_container(np.asarray([[0], [1], [1]]))
>       sample_weight = compute_sample_weight("balanced", y)

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/class_weight.py:73: in compute_sample_weight
    return compute_sample_weight(class_weight, y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

class_weight = 'balanced'
y = array(<3x1 sparse matrix of type '<class 'numpy.int64'>'
	with 2 stored elements in Compressed Sparse Column format>, dtype=object)
indices = None

    def compute_sample_weight(class_weight, y, indices=None):
        y = np.asarray(y)
        if indices is not None:
            y = y[indices]
        classes, class_counts = np.unique(y, return_counts=True)
>       n_samples = y.shape[0]
E       IndexError: tuple index out of range

../publishablew/scikit-learn/scikit-learn/sklearn/utils/temp.py:12: IndexError
_________________ test_compute_sample_weight_sparse[csc_array] _________________

csc_container = <class 'scipy.sparse._csc.csc_array'>

    @pytest.mark.parametrize("csc_container", CSC_CONTAINERS)
    def test_compute_sample_weight_sparse(csc_container):
        """Check that we can compute weight for sparse `y`."""
        y = csc_container(np.asarray([[0], [1], [1]]))
>       sample_weight = compute_sample_weight("balanced", y)

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/class_weight.py:73: in compute_sample_weight
    return compute_sample_weight(class_weight, y)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

class_weight = 'balanced'
y = array(<3x1 sparse array of type '<class 'numpy.int64'>'
	with 2 stored elements in Compressed Sparse Column format>, dtype=object)
indices = None

    def compute_sample_weight(class_weight, y, indices=None):
        y = np.asarray(y)
        if indices is not None:
            y = y[indices]
        classes, class_counts = np.unique(y, return_counts=True)
>       n_samples = y.shape[0]
E       IndexError: tuple index out of range

../publishablew/scikit-learn/scikit-learn/sklearn/utils/temp.py:12: IndexError
=========================== short test summary info ============================
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_with_subsample
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[single-output-class_weight0-indices0-The only valid class_weight for subsampling is 'balanced'.]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight1-None-For multi-output, class_weight should be a list of dicts, or the string]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight2-None-Got 1 element\\(s\\) while having 2 outputs]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_class_weight_does_not_contains_more_classes
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_array]
========================= 8 failed, 12 passed in 0.54s =========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 20 items

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight I: Seeding RNGs with 505002972
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-balanced-classes0-classes should have valid labels that are in y] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-class_weight1-classes1-The classes, \\[0, 1, 2, 3\\], are not in class_weight] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-balanced-classes2-classes should include all valid labels] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-class_weight3-classes3-classes should include all valid labels] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[string-class_weight4-classes4-The classes, \\['dog'\\], are not in class_weight] ['dog' 'cat' 'dog']
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_dict PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_invariance PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_balanced_negative PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_balanced_unordered PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_default PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_with_subsample PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[single-output-class_weight0-indices0-The only valid class_weight for subsampling is 'balanced'.] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight1-None-For multi-output, class_weight should be a list of dicts, or the string] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight2-None-Got 1 element\\(s\\) while having 2 outputs] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_more_than_32 PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_class_weight_does_not_contains_more_classes PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_matrix] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_array] PASSED

============================== 20 passed in 0.32s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 20 items

../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight I: Seeding RNGs with 1471036382
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-balanced-classes0-classes should have valid labels that are in y] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-class_weight1-classes1-The classes, \\[0, 1, 2, 3\\], are not in class_weight] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-balanced-classes2-classes should include all valid labels] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[numeric-class_weight3-classes3-classes should include all valid labels] [0 0 0 1 1 2]
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_not_present[string-class_weight4-classes4-The classes, \\['dog'\\], are not in class_weight] ['dog' 'cat' 'dog']
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_dict PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_invariance PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_balanced_negative PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_balanced_unordered PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_class_weight_default PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_with_subsample PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[single-output-class_weight0-indices0-The only valid class_weight for subsampling is 'balanced'.] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight1-None-For multi-output, class_weight should be a list of dicts, or the string] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_errors[multi-output-class_weight2-None-Got 1 element\\(s\\) while having 2 outputs] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_more_than_32 PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_class_weight_does_not_contains_more_classes PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_matrix] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/utils/tests/test_class_weight.py::test_compute_sample_weight_sparse[csc_array] PASSED

============================== 20 passed in 0.31s ==============================
