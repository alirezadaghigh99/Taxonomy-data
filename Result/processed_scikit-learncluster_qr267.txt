output file:
processed_scikit-learncluster_qr267.json
function:
cluster_qr
Error Cases:

Pass or Failed: 1

Related Failed Test Cases:
set()

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 12 items

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_matrix] I: Seeding RNGs with 1824961275
FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_array] FAILED

=================================== FAILURES ===================================
______________ test_spectral_clustering[kmeans-arpack-csr_matrix] ______________

eigen_solver = 'arpack', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
______________ test_spectral_clustering[kmeans-arpack-csr_array] _______________

eigen_solver = 'arpack', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
______________ test_spectral_clustering[kmeans-lobpcg-csr_matrix] ______________

eigen_solver = 'lobpcg', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
______________ test_spectral_clustering[kmeans-lobpcg-csr_array] _______________

eigen_solver = 'lobpcg', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-arpack-csr_matrix] ____________

eigen_solver = 'arpack', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-arpack-csr_array] _____________

eigen_solver = 'arpack', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-lobpcg-csr_matrix] ____________

eigen_solver = 'lobpcg', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-lobpcg-csr_array] _____________

eigen_solver = 'lobpcg', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-arpack-csr_matrix] ____________

eigen_solver = 'arpack', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 0]), labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-arpack-csr_array] _____________

eigen_solver = 'arpack', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 0]), labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-lobpcg-csr_matrix] ____________

eigen_solver = 'lobpcg', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 0]), labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-lobpcg-csr_array] _____________

eigen_solver = 'lobpcg', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 0]), labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
=========================== short test summary info ============================
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_array]
============================== 12 failed in 0.69s ==============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 12 items

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_matrix] I: Seeding RNGs with 1680427243
FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_array] FAILED

=================================== FAILURES ===================================
______________ test_spectral_clustering[kmeans-arpack-csr_matrix] ______________

eigen_solver = 'arpack', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
______________ test_spectral_clustering[kmeans-arpack-csr_array] _______________

eigen_solver = 'arpack', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
______________ test_spectral_clustering[kmeans-lobpcg-csr_matrix] ______________

eigen_solver = 'lobpcg', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
______________ test_spectral_clustering[kmeans-lobpcg-csr_array] _______________

eigen_solver = 'lobpcg', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-arpack-csr_matrix] ____________

eigen_solver = 'arpack', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-arpack-csr_array] _____________

eigen_solver = 'arpack', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-lobpcg-csr_matrix] ____________

eigen_solver = 'lobpcg', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-lobpcg-csr_array] _____________

eigen_solver = 'lobpcg', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-arpack-csr_matrix] ____________

eigen_solver = 'arpack', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-arpack-csr_array] _____________

eigen_solver = 'arpack', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-lobpcg-csr_matrix] ____________

eigen_solver = 'lobpcg', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-lobpcg-csr_array] _____________

eigen_solver = 'lobpcg', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
=========================== short test summary info ============================
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_array]
============================== 12 failed in 0.71s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 12 items

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_matrix] I: Seeding RNGs with 510282163
FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_array] FAILED

=================================== FAILURES ===================================
______________ test_spectral_clustering[kmeans-arpack-csr_matrix] ______________

eigen_solver = 'arpack', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
______________ test_spectral_clustering[kmeans-arpack-csr_array] _______________

eigen_solver = 'arpack', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
______________ test_spectral_clustering[kmeans-lobpcg-csr_matrix] ______________

eigen_solver = 'lobpcg', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
______________ test_spectral_clustering[kmeans-lobpcg-csr_array] _______________

eigen_solver = 'lobpcg', assign_labels = 'kmeans'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0], dtype=int32)
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-arpack-csr_matrix] ____________

eigen_solver = 'arpack', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-arpack-csr_array] _____________

eigen_solver = 'arpack', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-lobpcg-csr_matrix] ____________

eigen_solver = 'lobpcg', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[discretize-lobpcg-csr_array] _____________

eigen_solver = 'lobpcg', assign_labels = 'discretize'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-arpack-csr_matrix] ____________

eigen_solver = 'arpack', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-arpack-csr_array] _____________

eigen_solver = 'arpack', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-lobpcg-csr_matrix] ____________

eigen_solver = 'lobpcg', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_matrix'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
____________ test_spectral_clustering[cluster_qr-lobpcg-csr_array] _____________

eigen_solver = 'lobpcg', assign_labels = 'cluster_qr'
csr_container = <class 'scipy.sparse._csr.csr_array'>

    @pytest.mark.parametrize("csr_container", CSR_CONTAINERS)
    @pytest.mark.parametrize("eigen_solver", ("arpack", "lobpcg"))
    @pytest.mark.parametrize("assign_labels", ("kmeans", "discretize", "cluster_qr"))
    def test_spectral_clustering(eigen_solver, assign_labels, csr_container):
        S = np.array(
            [
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [1.0, 1.0, 1.0, 0.2, 0.0, 0.0, 0.0],
                [0.2, 0.2, 0.2, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
            ]
        )
    
        for mat in (S, csr_container(S)):
            model = SpectralClustering(
                random_state=0,
                n_clusters=2,
                affinity="precomputed",
                eigen_solver=eigen_solver,
                assign_labels=assign_labels,
            ).fit(mat)
            labels = model.labels_
            if labels[0] == 0:
                labels = 1 - labels
    
>           assert adjusted_rand_score(labels, [1, 1, 1, 0, 0, 0, 0]) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = array([1, 1, 1, 0, 0, 0, 0])
labels_pred = [1, 1, 1, 0, 0, 0, ...]

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
=========================== short test summary info ============================
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-arpack-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[kmeans-lobpcg-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-arpack-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[discretize-lobpcg-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-arpack-csr_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_spectral.py::test_spectral_clustering[cluster_qr-lobpcg-csr_array]
============================== 12 failed in 0.70s ==============================
