output file:
processed_korniaget_perspective_transform326.json
function:
get_perspective_transform
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_dynamo[cpu-float32-inductor]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-5]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_back_and_forth[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-1]', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_hflip[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-2]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_dynamo[cpu-float32-inductor] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_hflip[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_gradcheck[cpu] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_back_and_forth[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-5] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'inductor', 'jit', 'cudagraphs', 'onnxrt', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 9 items

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-5] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_crop_src_dst_type_mismatch[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_crop_src_dst_type_mismatch[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_back_and_forth[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_hflip[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_dynamo[cpu-float32-inductor] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
____________ TestGetPerspectiveTransform.test_smoke[cpu-float32-1] _____________

self = <test_imgwarp.TestGetPerspectiveTransform object at 0x756e139029b0>
device = device(type='cpu'), dtype = torch.float32, batch_size = 1

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_smoke(self, device, dtype, batch_size):
        points_src = torch.rand(batch_size, 4, 2, device=device, dtype=dtype)
        points_dst = torch.rand(batch_size, 4, 2, device=device, dtype=dtype)
    
>       dst_trans_src = kornia.geometry.get_perspective_transform(points_src, points_dst)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/transform/imgwarp.py:186: in get_perspective_transform
    return get_perspective_transform(points_src, points_dst)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points_src = tensor([[[0.1872, 0.6829],
         [0.8621, 0.4470],
         [0.4972, 0.3246],
         [0.2709, 0.6701]]])
points_dst = tensor([[[0.9161, 0.0691],
         [0.7381, 0.5574],
         [0.6122, 0.4560],
         [0.7428, 0.3659]]])

    def get_perspective_transform(points_src, points_dst):
        """
        Calculate a perspective transform from four pairs of the corresponding points using DLT.
    
        Args:
            points_src: coordinates of quadrangle vertices in the source image with shape (B, 4, 2).
            points_dst: coordinates of the corresponding quadrangle vertices in the destination image with shape (B, 4, 2).
    
        Returns:
            the perspective transformation with shape (B, 3, 3).
        """
        assert points_src.shape == points_dst.shape, 'Source and destination points must have the same shape'
        assert points_src.shape[1:] == (4, 2), 'Each set of points must have shape (4, 2)'
        batch_size = points_src.shape[0]
        A = torch.zeros((batch_size, 8, 9), dtype=points_src.dtype, device=points_src.device)
        for i in range(4):
            x_src, y_src = (points_src[:, i, 0], points_src[:, i, 1])
            x_dst, y_dst = (points_dst[:, i, 0], points_dst[:, i, 1])
            A[:, 2 * i, 0:3] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i, 6:9] = -x_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 3:6] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 6:9] = -y_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
        U, S, V = torch.svd(A)
>       H = V[:, -1, :].reshape(batch_size, 3, 3)
E       RuntimeError: shape '[1, 3, 3]' is invalid for input of size 8

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:36: RuntimeError
____________ TestGetPerspectiveTransform.test_smoke[cpu-float32-2] _____________

self = <test_imgwarp.TestGetPerspectiveTransform object at 0x756e13902920>
device = device(type='cpu'), dtype = torch.float32, batch_size = 2

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_smoke(self, device, dtype, batch_size):
        points_src = torch.rand(batch_size, 4, 2, device=device, dtype=dtype)
        points_dst = torch.rand(batch_size, 4, 2, device=device, dtype=dtype)
    
>       dst_trans_src = kornia.geometry.get_perspective_transform(points_src, points_dst)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/transform/imgwarp.py:186: in get_perspective_transform
    return get_perspective_transform(points_src, points_dst)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points_src = tensor([[[0.0489, 0.2629],
         [0.3321, 0.6558],
         [0.7874, 0.8822],
         [0.6960, 0.0941]],

        [[0.2052, 0.5639],
         [0.5423, 0.5562],
         [0.8988, 0.2351],
         [0.9494, 0.8346]]])
points_dst = tensor([[[0.4359, 0.6720],
         [0.2776, 0.8184],
         [0.7312, 0.9443],
         [0.4577, 0.6933]],

        [[0.6627, 0.8132],
         [0.6208, 0.8813],
         [0.4163, 0.4925],
         [0.2068, 0.9590]]])

    def get_perspective_transform(points_src, points_dst):
        """
        Calculate a perspective transform from four pairs of the corresponding points using DLT.
    
        Args:
            points_src: coordinates of quadrangle vertices in the source image with shape (B, 4, 2).
            points_dst: coordinates of the corresponding quadrangle vertices in the destination image with shape (B, 4, 2).
    
        Returns:
            the perspective transformation with shape (B, 3, 3).
        """
        assert points_src.shape == points_dst.shape, 'Source and destination points must have the same shape'
        assert points_src.shape[1:] == (4, 2), 'Each set of points must have shape (4, 2)'
        batch_size = points_src.shape[0]
        A = torch.zeros((batch_size, 8, 9), dtype=points_src.dtype, device=points_src.device)
        for i in range(4):
            x_src, y_src = (points_src[:, i, 0], points_src[:, i, 1])
            x_dst, y_dst = (points_dst[:, i, 0], points_dst[:, i, 1])
            A[:, 2 * i, 0:3] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i, 6:9] = -x_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 3:6] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 6:9] = -y_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
        U, S, V = torch.svd(A)
>       H = V[:, -1, :].reshape(batch_size, 3, 3)
E       RuntimeError: shape '[2, 3, 3]' is invalid for input of size 16

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:36: RuntimeError
____________ TestGetPerspectiveTransform.test_smoke[cpu-float32-5] _____________

self = <test_imgwarp.TestGetPerspectiveTransform object at 0x756e13902bc0>
device = device(type='cpu'), dtype = torch.float32, batch_size = 5

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_smoke(self, device, dtype, batch_size):
        points_src = torch.rand(batch_size, 4, 2, device=device, dtype=dtype)
        points_dst = torch.rand(batch_size, 4, 2, device=device, dtype=dtype)
    
>       dst_trans_src = kornia.geometry.get_perspective_transform(points_src, points_dst)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/transform/imgwarp.py:186: in get_perspective_transform
    return get_perspective_transform(points_src, points_dst)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points_src = tensor([[[0.5872, 0.1087],
         [0.0887, 0.1431],
         [0.8900, 0.2180],
         [0.4644, 0.1028]],

        ....2641]],

        [[0.2151, 0.2672],
         [0.1816, 0.3843],
         [0.6664, 0.8836],
         [0.4987, 0.6825]]])
points_dst = tensor([[[0.0235, 0.4486],
         [0.8119, 0.4445],
         [0.7421, 0.8965],
         [0.0616, 0.0755]],

        ....3706]],

        [[0.4097, 0.8924],
         [0.7059, 0.6665],
         [0.0201, 0.0349],
         [0.6989, 0.7537]]])

    def get_perspective_transform(points_src, points_dst):
        """
        Calculate a perspective transform from four pairs of the corresponding points using DLT.
    
        Args:
            points_src: coordinates of quadrangle vertices in the source image with shape (B, 4, 2).
            points_dst: coordinates of the corresponding quadrangle vertices in the destination image with shape (B, 4, 2).
    
        Returns:
            the perspective transformation with shape (B, 3, 3).
        """
        assert points_src.shape == points_dst.shape, 'Source and destination points must have the same shape'
        assert points_src.shape[1:] == (4, 2), 'Each set of points must have shape (4, 2)'
        batch_size = points_src.shape[0]
        A = torch.zeros((batch_size, 8, 9), dtype=points_src.dtype, device=points_src.device)
        for i in range(4):
            x_src, y_src = (points_src[:, i, 0], points_src[:, i, 1])
            x_dst, y_dst = (points_dst[:, i, 0], points_dst[:, i, 1])
            A[:, 2 * i, 0:3] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i, 6:9] = -x_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 3:6] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 6:9] = -y_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
        U, S, V = torch.svd(A)
>       H = V[:, -1, :].reshape(batch_size, 3, 3)
E       RuntimeError: shape '[5, 3, 3]' is invalid for input of size 40

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:36: RuntimeError
_________ TestGetPerspectiveTransform.test_back_and_forth[cpu-float32] _________

self = <test_imgwarp.TestGetPerspectiveTransform object at 0x756e13903340>
device = device(type='cpu'), dtype = torch.float32

    def test_back_and_forth(self, device, dtype):
        # generate input data
        h_max, w_max = 64, 32  # height, width
        h = h_max * torch.rand(1, device=device, dtype=dtype)
        w = w_max * torch.rand(1, device=device, dtype=dtype)
    
        norm = torch.rand(1, 4, 2, device=device, dtype=dtype)
        points_src = torch.zeros_like(norm, device=device, dtype=dtype)
        points_src[:, 1, 0] = h
        points_src[:, 2, 1] = w
        points_src[:, 3, 0] = h
        points_src[:, 3, 1] = w
        points_dst = points_src + norm
    
        # compute transform from source to target
>       dst_trans_src = kornia.geometry.get_perspective_transform(points_src, points_dst)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/transform/imgwarp.py:186: in get_perspective_transform
    return get_perspective_transform(points_src, points_dst)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points_src = tensor([[[ 0.0000,  0.0000],
         [29.0695,  0.0000],
         [ 0.0000, 11.1655],
         [29.0695, 11.1655]]])
points_dst = tensor([[[ 0.0861,  0.7904],
         [29.4783,  0.7029],
         [ 0.7926, 11.3636],
         [29.2729, 11.1798]]])

    def get_perspective_transform(points_src, points_dst):
        """
        Calculate a perspective transform from four pairs of the corresponding points using DLT.
    
        Args:
            points_src: coordinates of quadrangle vertices in the source image with shape (B, 4, 2).
            points_dst: coordinates of the corresponding quadrangle vertices in the destination image with shape (B, 4, 2).
    
        Returns:
            the perspective transformation with shape (B, 3, 3).
        """
        assert points_src.shape == points_dst.shape, 'Source and destination points must have the same shape'
        assert points_src.shape[1:] == (4, 2), 'Each set of points must have shape (4, 2)'
        batch_size = points_src.shape[0]
        A = torch.zeros((batch_size, 8, 9), dtype=points_src.dtype, device=points_src.device)
        for i in range(4):
            x_src, y_src = (points_src[:, i, 0], points_src[:, i, 1])
            x_dst, y_dst = (points_dst[:, i, 0], points_dst[:, i, 1])
            A[:, 2 * i, 0:3] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i, 6:9] = -x_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 3:6] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 6:9] = -y_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
        U, S, V = torch.svd(A)
>       H = V[:, -1, :].reshape(batch_size, 3, 3)
E       RuntimeError: shape '[1, 3, 3]' is invalid for input of size 8

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:36: RuntimeError
_____________ TestGetPerspectiveTransform.test_hflip[cpu-float32] ______________

self = <test_imgwarp.TestGetPerspectiveTransform object at 0x756e13903670>
device = device(type='cpu'), dtype = torch.float32

    def test_hflip(self, device, dtype):
        points_src = torch.tensor([[[0.0, 0.0], [1.0, 0.0], [1.0, 1.0], [0.0, 1.0]]], device=device, dtype=dtype)
    
        points_dst = torch.tensor([[[1.0, 0.0], [0.0, 0.0], [0.0, 1.0], [1.0, 1.0]]], device=device, dtype=dtype)
    
>       dst_trans_src = kornia.geometry.get_perspective_transform(points_src, points_dst)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/transform/imgwarp.py:186: in get_perspective_transform
    return get_perspective_transform(points_src, points_dst)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points_src = tensor([[[0., 0.],
         [1., 0.],
         [1., 1.],
         [0., 1.]]])
points_dst = tensor([[[1., 0.],
         [0., 0.],
         [0., 1.],
         [1., 1.]]])

    def get_perspective_transform(points_src, points_dst):
        """
        Calculate a perspective transform from four pairs of the corresponding points using DLT.
    
        Args:
            points_src: coordinates of quadrangle vertices in the source image with shape (B, 4, 2).
            points_dst: coordinates of the corresponding quadrangle vertices in the destination image with shape (B, 4, 2).
    
        Returns:
            the perspective transformation with shape (B, 3, 3).
        """
        assert points_src.shape == points_dst.shape, 'Source and destination points must have the same shape'
        assert points_src.shape[1:] == (4, 2), 'Each set of points must have shape (4, 2)'
        batch_size = points_src.shape[0]
        A = torch.zeros((batch_size, 8, 9), dtype=points_src.dtype, device=points_src.device)
        for i in range(4):
            x_src, y_src = (points_src[:, i, 0], points_src[:, i, 1])
            x_dst, y_dst = (points_dst[:, i, 0], points_dst[:, i, 1])
            A[:, 2 * i, 0:3] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i, 6:9] = -x_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 3:6] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 6:9] = -y_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
        U, S, V = torch.svd(A)
>       H = V[:, -1, :].reshape(batch_size, 3, 3)
E       RuntimeError: shape '[1, 3, 3]' is invalid for input of size 8

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:36: RuntimeError
________ TestGetPerspectiveTransform.test_dynamo[cpu-float32-inductor] _________

self = <test_imgwarp.TestGetPerspectiveTransform object at 0x756e13903a60>
device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x756ee8fe5900>, backend='inductor')

    def test_dynamo(self, device, dtype, torch_optimizer):
        points_src = torch.rand(1, 4, 2, device=device, dtype=dtype)
        points_dst = torch.rand(1, 4, 2, device=device, dtype=dtype)
    
        op = kornia.geometry.get_perspective_transform
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(points_src, points_dst), op_optimized(points_src, points_dst))

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/transform/imgwarp.py:186: in get_perspective_transform
    return get_perspective_transform(points_src, points_dst)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points_src = tensor([[[0.9946, 0.4419],
         [0.5725, 0.9909],
         [0.4171, 0.2496],
         [0.3832, 0.1822]]])
points_dst = tensor([[[0.8596, 0.8311],
         [0.3329, 0.3393],
         [0.0340, 0.2250],
         [0.8592, 0.8347]]])

    def get_perspective_transform(points_src, points_dst):
        """
        Calculate a perspective transform from four pairs of the corresponding points using DLT.
    
        Args:
            points_src: coordinates of quadrangle vertices in the source image with shape (B, 4, 2).
            points_dst: coordinates of the corresponding quadrangle vertices in the destination image with shape (B, 4, 2).
    
        Returns:
            the perspective transformation with shape (B, 3, 3).
        """
        assert points_src.shape == points_dst.shape, 'Source and destination points must have the same shape'
        assert points_src.shape[1:] == (4, 2), 'Each set of points must have shape (4, 2)'
        batch_size = points_src.shape[0]
        A = torch.zeros((batch_size, 8, 9), dtype=points_src.dtype, device=points_src.device)
        for i in range(4):
            x_src, y_src = (points_src[:, i, 0], points_src[:, i, 1])
            x_dst, y_dst = (points_dst[:, i, 0], points_dst[:, i, 1])
            A[:, 2 * i, 0:3] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i, 6:9] = -x_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 3:6] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 6:9] = -y_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
        U, S, V = torch.svd(A)
>       H = V[:, -1, :].reshape(batch_size, 3, 3)
E       RuntimeError: shape '[1, 3, 3]' is invalid for input of size 8

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:36: RuntimeError
_______________ TestGetPerspectiveTransform.test_gradcheck[cpu] ________________

self = <test_imgwarp.TestGetPerspectiveTransform object at 0x756e13903d00>
device = device(type='cpu')

    @pytest.mark.skipif(torch_version_lt(1, 11, 0), reason="backward for LSTSQ not supported in pytorch < 1.11.0")
    def test_gradcheck(self, device):
        # compute gradient check
        points_src = torch.rand(1, 4, 2, device=device, dtype=torch.float64, requires_grad=True)
        points_dst = torch.rand(1, 4, 2, device=device, dtype=torch.float64, requires_grad=True)
>       self.gradcheck(kornia.geometry.get_perspective_transform, (points_src, points_dst))

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/geometry/transform/imgwarp.py:186: in get_perspective_transform
    return get_perspective_transform(points_src, points_dst)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points_src = tensor([[[0.9103, 0.4423],
         [0.1331, 0.1658],
         [0.1221, 0.7162],
         [0.7574, 0.9142]]], dtype=torch.float64, requires_grad=True)
points_dst = tensor([[[0.0327, 0.2705],
         [0.2212, 0.3235],
         [0.8609, 0.5604],
         [0.4114, 0.0308]]], dtype=torch.float64, requires_grad=True)

    def get_perspective_transform(points_src, points_dst):
        """
        Calculate a perspective transform from four pairs of the corresponding points using DLT.
    
        Args:
            points_src: coordinates of quadrangle vertices in the source image with shape (B, 4, 2).
            points_dst: coordinates of the corresponding quadrangle vertices in the destination image with shape (B, 4, 2).
    
        Returns:
            the perspective transformation with shape (B, 3, 3).
        """
        assert points_src.shape == points_dst.shape, 'Source and destination points must have the same shape'
        assert points_src.shape[1:] == (4, 2), 'Each set of points must have shape (4, 2)'
        batch_size = points_src.shape[0]
        A = torch.zeros((batch_size, 8, 9), dtype=points_src.dtype, device=points_src.device)
        for i in range(4):
            x_src, y_src = (points_src[:, i, 0], points_src[:, i, 1])
            x_dst, y_dst = (points_dst[:, i, 0], points_dst[:, i, 1])
            A[:, 2 * i, 0:3] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i, 6:9] = -x_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 3:6] = torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
            A[:, 2 * i + 1, 6:9] = -y_dst.unsqueeze(1) * torch.stack([x_src, y_src, torch.ones_like(x_src)], dim=1)
        U, S, V = torch.svd(A)
>       H = V[:, -1, :].reshape(batch_size, 3, 3)
E       RuntimeError: shape '[1, 3, 3]' is invalid for input of size 8

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:36: RuntimeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-5]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_back_and_forth[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_hflip[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_dynamo[cpu-float32-inductor]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_gradcheck[cpu]
========================= 7 failed, 2 passed in 0.46s ==========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'inductor', 'openxla', 'tvm', 'jit', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 9 items

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_crop_src_dst_type_mismatch[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_crop_src_dst_type_mismatch[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_back_and_forth[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_hflip[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_dynamo[cpu-float32-inductor] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_gradcheck[cpu] PASSED

============================== 9 passed in 2.38s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'onnxrt', 'openxla', 'cudagraphs', 'jit', None, 'tvm'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 9 items

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_smoke[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_crop_src_dst_type_mismatch[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_crop_src_dst_type_mismatch[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_back_and_forth[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_hflip[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_dynamo[cpu-float32-inductor] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestGetPerspectiveTransform::test_gradcheck[cpu] PASSED

============================== 9 passed in 2.32s ===============================
