output file:
processed_torchgeoresnet50136.json
function:
resnet50
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_DECUR]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DINO]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_MOCO]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_SECO] FAILED', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_MOCO] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DINO] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_MOCO] FAILED', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.FMOW_RGB_GASSL]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_MOCO]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.FMOW_RGB_GASSL] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_MOCO] FAILED', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] FAILED', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] FAILED', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_MOCO]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DECUR] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] FAILED', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_MOCO]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] FAILED', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_DECUR] FAILED', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DECUR]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_SECO]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] FAILED', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_MOCO]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] FAILED', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_MOCO]', 'FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR]', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] FAILED', '../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/torchgeo/torchgeo
configfile: pyproject.toml
plugins: hydra-core-1.3.2
collecting ... collected 89 items / 22 deselected / 67 selected

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.FMOW_RGB_GASSL] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_DECUR] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_MOCO] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DECUR] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DINO] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_MOCO] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_MOCO] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_SECO] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] FAILED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.FMOW_RGB_GASSL] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL1_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL1_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_ALL_DINO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_RGB_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_RGB_SECO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.FMOW_RGB_GASSL] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL1_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL1_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_ALL_DINO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_RGB_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_RGB_SECO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] PASSED

=================================== FAILURES ===================================
______ TestResNet50.test_resnet_weights[ResNet50_Weights.FMOW_RGB_GASSL] _______

f = ResNet50_Weights.FMOW_RGB_GASSL

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5cab953d0>
mocked_weights = ResNet50_Weights.FMOW_RGB_GASSL

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
____ TestResNet50.test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] ____

f = ResNet50_Weights.LANDSAT_TM_TOA_MOCO

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c9718fd0>
mocked_weights = ResNet50_Weights.LANDSAT_TM_TOA_MOCO

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
___ TestResNet50.test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] ___

f = ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c9719250>
mocked_weights = ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
___ TestResNet50.test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] ____

f = ResNet50_Weights.LANDSAT_ETM_TOA_MOCO

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c97194d0>
mocked_weights = ResNet50_Weights.LANDSAT_ETM_TOA_MOCO

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
__ TestResNet50.test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] ___

f = ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c9719790>
mocked_weights = ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
____ TestResNet50.test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] ____

f = ResNet50_Weights.LANDSAT_ETM_SR_MOCO

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c9719a90>
mocked_weights = ResNet50_Weights.LANDSAT_ETM_SR_MOCO

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
___ TestResNet50.test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] ___

f = ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c9719d90>
mocked_weights = ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
_ TestResNet50.test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] _

f = ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971a090>
mocked_weights = ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
_ TestResNet50.test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] _

f = ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971a390>
mocked_weights = ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
____ TestResNet50.test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] ____

f = ResNet50_Weights.LANDSAT_OLI_SR_MOCO

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971a650>
mocked_weights = ResNet50_Weights.LANDSAT_OLI_SR_MOCO

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
___ TestResNet50.test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] ___

f = ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971a950>
mocked_weights = ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
____ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_DECUR] ____

f = ResNet50_Weights.SENTINEL1_ALL_DECUR

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971ac50>
mocked_weights = ResNet50_Weights.SENTINEL1_ALL_DECUR

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
____ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_MOCO] _____

f = ResNet50_Weights.SENTINEL1_ALL_MOCO

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971af50>
mocked_weights = ResNet50_Weights.SENTINEL1_ALL_MOCO

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
____ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DECUR] ____

f = ResNet50_Weights.SENTINEL2_ALL_DECUR

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971b250>
mocked_weights = ResNet50_Weights.SENTINEL2_ALL_DECUR

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
____ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DINO] _____

f = ResNet50_Weights.SENTINEL2_ALL_DINO

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971b550>
mocked_weights = ResNet50_Weights.SENTINEL2_ALL_DINO

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
____ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_MOCO] _____

f = ResNet50_Weights.SENTINEL2_ALL_MOCO

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971b850>
mocked_weights = ResNet50_Weights.SENTINEL2_ALL_MOCO

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
__ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] ___

f = ResNet50_Weights.SENTINEL2_MI_MS_SATLAS

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971bb50>
mocked_weights = ResNet50_Weights.SENTINEL2_MI_MS_SATLAS

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
__ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] __

f = ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c971be50>
mocked_weights = ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
____ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_MOCO] _____

f = ResNet50_Weights.SENTINEL2_RGB_MOCO

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c9730190>
mocked_weights = ResNet50_Weights.SENTINEL2_RGB_MOCO

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
____ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_SECO] _____

f = ResNet50_Weights.SENTINEL2_RGB_SECO

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c9730490>
mocked_weights = ResNet50_Weights.SENTINEL2_RGB_SECO

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
__ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] ___

f = ResNet50_Weights.SENTINEL2_SI_MS_SATLAS

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c9730790>
mocked_weights = ResNet50_Weights.SENTINEL2_SI_MS_SATLAS

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
__ TestResNet50.test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] __

f = ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS

    def _check_seekable(f) -> bool:
        def raise_err_msg(patterns, e):
            for p in patterns:
                if p in str(e):
                    msg = (
                        str(e)
                        + ". You can only torch.load from a file that is seekable."
                        + " Please pre-load the data into a buffer like io.BytesIO and"
                        + " try to load from it instead."
                    )
                    raise type(e)(msg)
            raise e
    
        try:
>           f.seek(f.tell())
E           AttributeError: 'ResNet50_Weights' object has no attribute 'seek'

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:757: AttributeError

During handling of the above exception, another exception occurred:

self = <tests.models.test_resnet.TestResNet50 object at 0x75a5c9730ad0>
mocked_weights = ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS

    def test_resnet_weights(self, mocked_weights: WeightsEnum) -> None:
>       resnet50(weights=mocked_weights)

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/torchgeo/torchgeo/torchgeo/models/resnet.py:129: in resnet50
    return resnet50(weights)
../publishablew/torchgeo/torchgeo/torchgeo/models/temp.py:24: in resnet50
    state_dict = torch.load(weights_path, map_location='cpu')
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:1319: in load
    with _open_file_like(f, "rb") as opened_file:
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:664: in _open_file_like
    return _open_buffer_reader(name_or_buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:649: in __init__
    _check_seekable(buffer)
../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:760: in _check_seekable
    raise_err_msg(["seek", "tell"], e)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

patterns = ['seek', 'tell']
e = AttributeError("'ResNet50_Weights' object has no attribute 'seek'")

    def raise_err_msg(patterns, e):
        for p in patterns:
            if p in str(e):
                msg = (
                    str(e)
                    + ". You can only torch.load from a file that is seekable."
                    + " Please pre-load the data into a buffer like io.BytesIO and"
                    + " try to load from it instead."
                )
>               raise type(e)(msg)
E               AttributeError: 'ResNet50_Weights' object has no attribute 'seek'. You can only torch.load from a file that is seekable. Please pre-load the data into a buffer like io.BytesIO and try to load from it instead.

../publishablew/torchgeo/torchgeo/venv/lib/python3.11/site-packages/torch/serialization.py:753: AttributeError
=========================== short test summary info ============================
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.FMOW_RGB_GASSL]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_MOCO]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_MOCO]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_MOCO]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_DECUR]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_MOCO]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DECUR]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DINO]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_MOCO]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_MOCO]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_SECO]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS]
FAILED ../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS]
================ 22 failed, 45 passed, 22 deselected in 19.44s =================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/torchgeo/torchgeo
configfile: pyproject.toml
plugins: hydra-core-1.3.2
collecting ... collected 89 items / 22 deselected / 67 selected

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.FMOW_RGB_GASSL] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DINO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_SECO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.FMOW_RGB_GASSL] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL1_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL1_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_ALL_DINO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_RGB_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_RGB_SECO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.FMOW_RGB_GASSL] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL1_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL1_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_ALL_DINO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_RGB_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_RGB_SECO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] PASSED

====================== 67 passed, 22 deselected in 23.14s ======================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/torchgeo/torchgeo/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/torchgeo/torchgeo
configfile: pyproject.toml
plugins: hydra-core-1.3.2
collecting ... collected 89 items / 22 deselected / 67 selected

../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.FMOW_RGB_GASSL] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL1_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_DINO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_RGB_SECO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_resnet_weights[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.FMOW_RGB_GASSL] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL1_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL1_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_ALL_DINO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_RGB_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_RGB_SECO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_bands[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.FMOW_RGB_GASSL] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_TM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_TM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_ETM_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_TIRS_TOA_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_SR_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.LANDSAT_OLI_SR_SIMCLR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL1_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL1_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_ALL_DECUR] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_ALL_DINO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_ALL_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_MI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_MI_RGB_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_RGB_MOCO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_RGB_SECO] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_SI_MS_SATLAS] PASSED
../publishablew/torchgeo/torchgeo/tests/models/test_resnet.py::TestResNet50::test_transforms[ResNet50_Weights.SENTINEL2_SI_RGB_SATLAS] PASSED

====================== 67 passed, 22 deselected in 23.26s ======================
