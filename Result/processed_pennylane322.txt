output file:
processed_pennylane322.json
function:
allclose
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-numpy]', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-autograd] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-autograd] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-numpy]', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-numpy] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-numpy]', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-autograd] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-numpy] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-autograd]', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-autograd]', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-autograd]', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-autograd]', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-numpy] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-numpy] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-autograd] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-numpy] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-numpy]', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-numpy] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-numpy] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-autograd]', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-autograd] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-autograd] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-autograd]', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-numpy]', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-autograd] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-autograd] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-numpy]', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-autograd]', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-autograd]', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-autograd]', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-autograd] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-autograd] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-numpy]', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-numpy]', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-numpy]', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-numpy] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-numpy] FAILED', '../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-numpy] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-autograd]', 'FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-numpy]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pennylane/pennylane/venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /local/data0/moved_data/publishablew/pennylane/pennylane/tests
configfile: pytest.ini
plugins: flaky-3.8.1, xdist-3.6.1, split-0.10.0, rng-1.0.0, mock-3.14.0, forked-1.6.0, cov-6.0.0, benchmark-5.1.0
collecting ... collected 60 items

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-numpy] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-autograd] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-numpy] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-autograd] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-numpy] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-autograd] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-numpy] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-autograd] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-numpy] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-autograd] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-numpy] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-autograd] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-numpy] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-autograd] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-numpy] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-autograd] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-numpy] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-autograd] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-numpy] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-autograd] FAILED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-tensorflow] SKIPPED

=================================== FAILURES ===================================
_________ TestPartialTrace.test_single_density_matrix[complex64-numpy] _________

a = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]], dtype=complex64)
b = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]], dtype=complex64)
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf8a6e45d0>
ml_framework = 'numpy', c_dtype = 'complex64'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_single_density_matrix(self, ml_framework, c_dtype):
        """Test partial trace on a single density matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]), like=ml_framework
        )
    
        # Expected result after tracing out the second qubit
        expected = qml.math.asarray(np.array([[[1, 0], [0, 0]]], dtype=c_dtype), like=ml_framework)
    
        # Perform the partial trace
        result = qml.math.quantum.partial_trace(rho, [0], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:922: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
_______ TestPartialTrace.test_single_density_matrix[complex64-autograd] ________

a = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]], dtype=complex64)
b = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]], dtype=complex64)
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf8a783050>
ml_framework = 'autograd', c_dtype = 'complex64'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_single_density_matrix(self, ml_framework, c_dtype):
        """Test partial trace on a single density matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]), like=ml_framework
        )
    
        # Expected result after tracing out the second qubit
        expected = qml.math.asarray(np.array([[[1, 0], [0, 0]]], dtype=c_dtype), like=ml_framework)
    
        # Perform the partial trace
        result = qml.math.quantum.partial_trace(rho, [0], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:922: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
________ TestPartialTrace.test_single_density_matrix[complex128-numpy] _________

a = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]])
b = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]]), rtol = 1e-05
atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf8a783b10>
ml_framework = 'numpy', c_dtype = 'complex128'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_single_density_matrix(self, ml_framework, c_dtype):
        """Test partial trace on a single density matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]), like=ml_framework
        )
    
        # Expected result after tracing out the second qubit
        expected = qml.math.asarray(np.array([[[1, 0], [0, 0]]], dtype=c_dtype), like=ml_framework)
    
        # Perform the partial trace
        result = qml.math.quantum.partial_trace(rho, [0], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:922: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
_______ TestPartialTrace.test_single_density_matrix[complex128-autograd] _______

a = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]])
b = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]]), rtol = 1e-05
atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf8a783e10>
ml_framework = 'autograd', c_dtype = 'complex128'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_single_density_matrix(self, ml_framework, c_dtype):
        """Test partial trace on a single density matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]), like=ml_framework
        )
    
        # Expected result after tracing out the second qubit
        expected = qml.math.asarray(np.array([[[1, 0], [0, 0]]], dtype=c_dtype), like=ml_framework)
    
        # Perform the partial trace
        result = qml.math.quantum.partial_trace(rho, [0], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:922: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
_______ TestPartialTrace.test_batched_density_matrices[complex64-numpy] ________

a = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]],

       [[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]], dtype=complex64)
b = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]],

       [[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]], dtype=complex64)
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf88502390>
ml_framework = 'numpy', c_dtype = 'complex64'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_batched_density_matrices(self, ml_framework, c_dtype):
        """Test partial trace on a batch of density matrices."""
        # Define a batch of 2-qubit density matrices
        rho = qml.math.asarray(
            np.array(
                [
                    [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
                    [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
                ]
            ),
            like=ml_framework,
        )
    
        # rho = qml.math.asarrays(rho)
        # Expected result after tracing out the first qubit for each matrix
        expected = qml.math.asarray(
            np.array([[[1, 0], [0, 0]], [[1, 0], [0, 0]]], dtype=c_dtype), like=ml_framework
        )
    
        # Perform the partial trace
        result = qml.math.quantum.partial_trace(rho, [1], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:946: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
______ TestPartialTrace.test_batched_density_matrices[complex64-autograd] ______

a = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]],

       [[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]], dtype=complex64)
b = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]],

       [[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]], dtype=complex64)
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf88502610>
ml_framework = 'autograd', c_dtype = 'complex64'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_batched_density_matrices(self, ml_framework, c_dtype):
        """Test partial trace on a batch of density matrices."""
        # Define a batch of 2-qubit density matrices
        rho = qml.math.asarray(
            np.array(
                [
                    [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
                    [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
                ]
            ),
            like=ml_framework,
        )
    
        # rho = qml.math.asarrays(rho)
        # Expected result after tracing out the first qubit for each matrix
        expected = qml.math.asarray(
            np.array([[[1, 0], [0, 0]], [[1, 0], [0, 0]]], dtype=c_dtype), like=ml_framework
        )
    
        # Perform the partial trace
        result = qml.math.quantum.partial_trace(rho, [1], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:946: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
_______ TestPartialTrace.test_batched_density_matrices[complex128-numpy] _______

a = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]],

       [[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]])
b = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]],

       [[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]])
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf885030d0>
ml_framework = 'numpy', c_dtype = 'complex128'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_batched_density_matrices(self, ml_framework, c_dtype):
        """Test partial trace on a batch of density matrices."""
        # Define a batch of 2-qubit density matrices
        rho = qml.math.asarray(
            np.array(
                [
                    [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
                    [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
                ]
            ),
            like=ml_framework,
        )
    
        # rho = qml.math.asarrays(rho)
        # Expected result after tracing out the first qubit for each matrix
        expected = qml.math.asarray(
            np.array([[[1, 0], [0, 0]], [[1, 0], [0, 0]]], dtype=c_dtype), like=ml_framework
        )
    
        # Perform the partial trace
        result = qml.math.quantum.partial_trace(rho, [1], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:946: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
_____ TestPartialTrace.test_batched_density_matrices[complex128-autograd] ______

a = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]],

       [[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]])
b = array([[[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]],

       [[1.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j]]])
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf8a6e6d90>
ml_framework = 'autograd', c_dtype = 'complex128'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_batched_density_matrices(self, ml_framework, c_dtype):
        """Test partial trace on a batch of density matrices."""
        # Define a batch of 2-qubit density matrices
        rho = qml.math.asarray(
            np.array(
                [
                    [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
                    [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
                ]
            ),
            like=ml_framework,
        )
    
        # rho = qml.math.asarrays(rho)
        # Expected result after tracing out the first qubit for each matrix
        expected = qml.math.asarray(
            np.array([[[1, 0], [0, 0]], [[1, 0], [0, 0]]], dtype=c_dtype), like=ml_framework
        )
    
        # Perform the partial trace
        result = qml.math.quantum.partial_trace(rho, [1], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:946: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
______ TestPartialTrace.test_partial_trace_over_no_wires[complex64-numpy] ______

a = array([[[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]], dtype=complex64)
b = array([[[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]], dtype=complex64)
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf885098d0>
ml_framework = 'numpy', c_dtype = 'complex64'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_over_no_wires(self, ml_framework, c_dtype):
        """Test that tracing over no wires returns the original matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], dtype=c_dtype),
            like=ml_framework,
        )
    
        # Perform the partial trace over no wires
        result = qml.math.quantum.partial_trace(rho, [], c_dtype=c_dtype)
>       assert qml.math.allclose(result, rho)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:959: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
____ TestPartialTrace.test_partial_trace_over_no_wires[complex64-autograd] _____

a = array([[[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]], dtype=complex64)
b = array([[[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]], dtype=complex64)
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf88509b90>
ml_framework = 'autograd', c_dtype = 'complex64'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_over_no_wires(self, ml_framework, c_dtype):
        """Test that tracing over no wires returns the original matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], dtype=c_dtype),
            like=ml_framework,
        )
    
        # Perform the partial trace over no wires
        result = qml.math.quantum.partial_trace(rho, [], c_dtype=c_dtype)
>       assert qml.math.allclose(result, rho)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:959: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
_____ TestPartialTrace.test_partial_trace_over_no_wires[complex128-numpy] ______

a = array([[[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]])
b = array([[[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]])
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf8850a690>
ml_framework = 'numpy', c_dtype = 'complex128'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_over_no_wires(self, ml_framework, c_dtype):
        """Test that tracing over no wires returns the original matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], dtype=c_dtype),
            like=ml_framework,
        )
    
        # Perform the partial trace over no wires
        result = qml.math.quantum.partial_trace(rho, [], c_dtype=c_dtype)
>       assert qml.math.allclose(result, rho)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:959: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
____ TestPartialTrace.test_partial_trace_over_no_wires[complex128-autograd] ____

a = array([[[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]])
b = array([[[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],
        [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]])
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf8850a990>
ml_framework = 'autograd', c_dtype = 'complex128'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_over_no_wires(self, ml_framework, c_dtype):
        """Test that tracing over no wires returns the original matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], dtype=c_dtype),
            like=ml_framework,
        )
    
        # Perform the partial trace over no wires
        result = qml.math.quantum.partial_trace(rho, [], c_dtype=c_dtype)
>       assert qml.math.allclose(result, rho)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:959: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
_____ TestPartialTrace.test_partial_trace_over_all_wires[complex64-numpy] ______

a = array([[[1.+0.j]]], dtype=complex64), b = array([1.+0.j], dtype=complex64)
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf88515110>
ml_framework = 'numpy', c_dtype = 'complex64'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_over_all_wires(self, ml_framework, c_dtype):
        """Test that tracing over all wires returns the trace of the matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]), like=ml_framework
        )
        # Expected result after tracing out all qubits
        expected = qml.math.asarray(np.array([1], dtype=c_dtype), like=ml_framework)
    
        # Perform the partial trace over all wires
        result = qml.math.quantum.partial_trace(rho, [0, 1], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
____ TestPartialTrace.test_partial_trace_over_all_wires[complex64-autograd] ____

a = array([[[1.+0.j]]], dtype=complex64), b = array([1.+0.j], dtype=complex64)
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf88515390>
ml_framework = 'autograd', c_dtype = 'complex64'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_over_all_wires(self, ml_framework, c_dtype):
        """Test that tracing over all wires returns the trace of the matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]), like=ml_framework
        )
        # Expected result after tracing out all qubits
        expected = qml.math.asarray(np.array([1], dtype=c_dtype), like=ml_framework)
    
        # Perform the partial trace over all wires
        result = qml.math.quantum.partial_trace(rho, [0, 1], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
_____ TestPartialTrace.test_partial_trace_over_all_wires[complex128-numpy] _____

a = array([[[1.+0.j]]]), b = array([1.+0.j]), rtol = 1e-05, atol = 1e-08
kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf88515e50>
ml_framework = 'numpy', c_dtype = 'complex128'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_over_all_wires(self, ml_framework, c_dtype):
        """Test that tracing over all wires returns the trace of the matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]), like=ml_framework
        )
        # Expected result after tracing out all qubits
        expected = qml.math.asarray(np.array([1], dtype=c_dtype), like=ml_framework)
    
        # Perform the partial trace over all wires
        result = qml.math.quantum.partial_trace(rho, [0, 1], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
___ TestPartialTrace.test_partial_trace_over_all_wires[complex128-autograd] ____

a = array([[[1.+0.j]]]), b = array([1.+0.j]), rtol = 1e-05, atol = 1e-08
kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf88516150>
ml_framework = 'autograd', c_dtype = 'complex128'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_over_all_wires(self, ml_framework, c_dtype):
        """Test that tracing over all wires returns the trace of the matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]), like=ml_framework
        )
        # Expected result after tracing out all qubits
        expected = qml.math.asarray(np.array([1], dtype=c_dtype), like=ml_framework)
    
        # Perform the partial trace over all wires
        result = qml.math.quantum.partial_trace(rho, [0, 1], c_dtype=c_dtype)
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
______ TestPartialTrace.test_partial_trace_single_matrix[complex64-numpy] ______

a = array([[1.+0.j, 0.+0.j],
       [0.+0.j, 0.+0.j]], dtype=complex64)
b = array([[1.+0.j, 0.+0.j],
       [0.+0.j, 0.+0.j]], dtype=complex64)
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf8851bb50>
ml_framework = 'numpy', c_dtype = 'complex64'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_single_matrix(self, ml_framework, c_dtype):
        """Test that partial_trace works on a single matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]), like=ml_framework
        )
    
        result = qml.math.quantum.partial_trace(rho, [0], c_dtype=c_dtype)
        expected = qml.math.asarray(np.array([[1, 0], [0, 0]], dtype=c_dtype), like=ml_framework)
    
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
____ TestPartialTrace.test_partial_trace_single_matrix[complex64-autograd] _____

a = array([[1.+0.j, 0.+0.j],
       [0.+0.j, 0.+0.j]], dtype=complex64)
b = array([[1.+0.j, 0.+0.j],
       [0.+0.j, 0.+0.j]], dtype=complex64)
rtol = 1e-05, atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf8851bdd0>
ml_framework = 'autograd', c_dtype = 'complex64'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_single_matrix(self, ml_framework, c_dtype):
        """Test that partial_trace works on a single matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]), like=ml_framework
        )
    
        result = qml.math.quantum.partial_trace(rho, [0], c_dtype=c_dtype)
        expected = qml.math.asarray(np.array([[1, 0], [0, 0]], dtype=c_dtype), like=ml_framework)
    
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
_____ TestPartialTrace.test_partial_trace_single_matrix[complex128-numpy] ______

a = array([[1.+0.j, 0.+0.j],
       [0.+0.j, 0.+0.j]])
b = array([[1.+0.j, 0.+0.j],
       [0.+0.j, 0.+0.j]]), rtol = 1e-05
atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf885208d0>
ml_framework = 'numpy', c_dtype = 'complex128'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_single_matrix(self, ml_framework, c_dtype):
        """Test that partial_trace works on a single matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]), like=ml_framework
        )
    
        result = qml.math.quantum.partial_trace(rho, [0], c_dtype=c_dtype)
        expected = qml.math.asarray(np.array([[1, 0], [0, 0]], dtype=c_dtype), like=ml_framework)
    
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
____ TestPartialTrace.test_partial_trace_single_matrix[complex128-autograd] ____

a = array([[1.+0.j, 0.+0.j],
       [0.+0.j, 0.+0.j]])
b = array([[1.+0.j, 0.+0.j],
       [0.+0.j, 0.+0.j]]), rtol = 1e-05
atol = 1e-08, kwargs = {}

    def allclose(a, b, rtol=1e-05, atol=1e-08, **kwargs):
        try:
>           res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)

../publishablew/pennylane/pennylane/pennylane/math/temp.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError

During handling of the above exception, another exception occurred:

self = <test_matrix_manipulation.TestPartialTrace object at 0x71bf88520bd0>
ml_framework = 'autograd', c_dtype = 'complex128'

    @pytest.mark.parametrize("c_dtype", dtypes)
    def test_partial_trace_single_matrix(self, ml_framework, c_dtype):
        """Test that partial_trace works on a single matrix."""
        # Define a 2-qubit density matrix
        rho = qml.math.asarray(
            np.array([[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]), like=ml_framework
        )
    
        result = qml.math.quantum.partial_trace(rho, [0], c_dtype=c_dtype)
        expected = qml.math.asarray(np.array([[1, 0], [0, 0]], dtype=c_dtype), like=ml_framework)
    
>       assert qml.math.allclose(result, expected)

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py:1006: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/math/utils.py:41: in allclose
    return allclose(a, b, rtol, atol)
../publishablew/pennylane/pennylane/pennylane/math/temp.py:15: in allclose
    res = np.allclose1(a, b, rtol=rtol, atol=atol, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

attr = 'allclose1'

    def __getattr__(attr):
        # Warn for expired attributes
        import warnings
    
        if attr == "linalg":
            import numpy.linalg as linalg
            return linalg
        elif attr == "fft":
            import numpy.fft as fft
            return fft
        elif attr == "dtypes":
            import numpy.dtypes as dtypes
            return dtypes
        elif attr == "random":
            import numpy.random as random
            return random
        elif attr == "polynomial":
            import numpy.polynomial as polynomial
            return polynomial
        elif attr == "ma":
            import numpy.ma as ma
            return ma
        elif attr == "ctypeslib":
            import numpy.ctypeslib as ctypeslib
            return ctypeslib
        elif attr == "exceptions":
            import numpy.exceptions as exceptions
            return exceptions
        elif attr == "testing":
            import numpy.testing as testing
            return testing
        elif attr == "matlib":
            import numpy.matlib as matlib
            return matlib
        elif attr == "f2py":
            import numpy.f2py as f2py
            return f2py
        elif attr == "typing":
            import numpy.typing as typing
            return typing
        elif attr == "rec":
            import numpy.rec as rec
            return rec
        elif attr == "char":
            import numpy.char as char
            return char
        elif attr == "array_api":
            raise AttributeError("`numpy.array_api` is not available from "
                                 "numpy 2.0 onwards")
        elif attr == "core":
            import numpy.core as core
            return core
        elif attr == "strings":
            import numpy.strings as strings
            return strings
        elif attr == "distutils":
            if 'distutils' in __numpy_submodules__:
                import numpy.distutils as distutils
                return distutils
            else:
                raise AttributeError("`numpy.distutils` is not available from "
                                     "Python 3.12 onwards")
    
        if attr in __future_scalars__:
            # And future warnings for those that will change, but also give
            # the AttributeError
            warnings.warn(
                f"In the future `np.{attr}` will be defined as the "
                "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
    
        if attr in __former_attrs__:
            raise AttributeError(__former_attrs__[attr])
    
        if attr in __expired_attributes__:
            raise AttributeError(
                f"`np.{attr}` was removed in the NumPy 2.0 release. "
                f"{__expired_attributes__[attr]}"
            )
    
        if attr == "chararray":
            warnings.warn(
                "`np.chararray` is deprecated and will be removed from "
                "the main namespace in the future. Use an array with a string "
                "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
            import numpy.char as char
            return char.chararray
    
>       raise AttributeError("module {!r} has no attribute "
                             "{!r}".format(__name__, attr))
E       AttributeError: module 'numpy' has no attribute 'allclose1'

../publishablew/pennylane/pennylane/venv/lib/python3.11/site-packages/numpy/__init__.py:410: AttributeError
=========================== short test summary info ============================
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-numpy]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-autograd]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-numpy]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-autograd]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-numpy]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-autograd]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-numpy]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-autograd]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-numpy]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-autograd]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-numpy]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-autograd]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-numpy]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-autograd]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-numpy]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-autograd]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-numpy]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-autograd]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-numpy]
FAILED ../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-autograd]
=================== 20 failed, 4 passed, 36 skipped in 0.73s ===================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pennylane/pennylane/venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /local/data0/moved_data/publishablew/pennylane/pennylane/tests
configfile: pytest.ini
plugins: flaky-3.8.1, xdist-3.6.1, split-0.10.0, rng-1.0.0, mock-3.14.0, forked-1.6.0, cov-6.0.0, benchmark-5.1.0
collecting ... collected 60 items

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-tensorflow] SKIPPED

======================== 24 passed, 36 skipped in 0.05s ========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pennylane/pennylane/venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /local/data0/moved_data/publishablew/pennylane/pennylane/tests
configfile: pytest.ini
plugins: flaky-3.8.1, xdist-3.6.1, split-0.10.0, rng-1.0.0, mock-3.14.0, forked-1.6.0, cov-6.0.0, benchmark-5.1.0
collecting ... collected 60 items

../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_single_density_matrix[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_batched_density_matrices[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_no_wires[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_over_all_wires[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_invalid_wire_selection[complex128-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex64-tensorflow] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-numpy] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-autograd] PASSED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-jax] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-torch] SKIPPED
../publishablew/pennylane/pennylane/tests/math/test_matrix_manipulation.py::TestPartialTrace::test_partial_trace_single_matrix[complex128-tensorflow] SKIPPED

======================== 24 passed, 36 skipped in 0.06s ========================
