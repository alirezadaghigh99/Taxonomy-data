output file:
processed_cleanlabnoise_matrix_is_valid204.json
function:
noise_matrix_is_valid
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose', '../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_max_iter FAILED', 'FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many', '../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose_valid FAILED', '../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_verbose FAILED', 'FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_valid', '../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_fraczero_high FAILED', 'FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline', '../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_valid FAILED', '../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose FAILED', 'FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_verbose', '../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline FAILED', '../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many FAILED', 'FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose_valid', 'FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_max_iter', 'FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_fraczero_high'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/cleanlab/cleanlab/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/cleanlab/cleanlab
configfile: pyproject.toml
collecting ... collected 24 items

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline FAILED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_fraczero_high FAILED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_verbose FAILED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many FAILED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose_valid FAILED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_valid FAILED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose FAILED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_invalid_inputs_verify[True] PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_invalid_inputs_verify[False] PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_invalid_matrix PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_trace_less_than_1_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_trace_equals_1_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_valid_no_py_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_one_class_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_two_class_nofraczero PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_two_class_fraczero_high PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_two_class_fraczero_high_valid PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_gen_probs_sum_empty PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_gen_probs_max_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_gen_probs_min_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_probs_min_max_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_balls_zero PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_balls_params PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_max_iter FAILED

=================================== FAILURES ===================================
______________________________ test_main_pipeline ______________________________

verbose = False, n = 10, valid_noise_matrix = True, frac_zero_noise_rates = 0

    def test_main_pipeline(
        verbose=False,
        n=10,
        valid_noise_matrix=True,
        frac_zero_noise_rates=0,
    ):
        trace = 1.5
        py = [0.1, 0.1, 0.2, 0.6]
        K = len(py)
        y = [z for i, p in enumerate(py) for z in [i] * int(p * n)]
        nm = noise_generation.generate_noise_matrix_from_trace(
            K=K,
            trace=trace,
            py=py,
            seed=0,
            valid_noise_matrix=valid_noise_matrix,
            frac_zero_noise_rates=frac_zero_noise_rates,
        )
        # Check that trace is what its supposed to be
>       assert abs(trace - np.trace(nm) < 1e-2)

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = None, offset = 0, axis1 = 0, axis2 = 1, dtype = None, out = None

    @array_function_dispatch(_trace_dispatcher)
    def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
        """
        Return the sum along diagonals of the array.
    
        If `a` is 2-D, the sum along its diagonal with the given offset
        is returned, i.e., the sum of elements ``a[i,i+offset]`` for all i.
    
        If `a` has more than two dimensions, then the axes specified by axis1 and
        axis2 are used to determine the 2-D sub-arrays whose traces are returned.
        The shape of the resulting array is the same as that of `a` with `axis1`
        and `axis2` removed.
    
        Parameters
        ----------
        a : array_like
            Input array, from which the diagonals are taken.
        offset : int, optional
            Offset of the diagonal from the main diagonal. Can be both positive
            and negative. Defaults to 0.
        axis1, axis2 : int, optional
            Axes to be used as the first and second axis of the 2-D sub-arrays
            from which the diagonals should be taken. Defaults are the first two
            axes of `a`.
        dtype : dtype, optional
            Determines the data-type of the returned array and of the accumulator
            where the elements are summed. If dtype has the value None and `a` is
            of integer type of precision less than the default integer
            precision, then the default integer precision is used. Otherwise,
            the precision is the same as that of `a`.
        out : ndarray, optional
            Array into which the output is placed. Its type is preserved and
            it must be of the right shape to hold the output.
    
        Returns
        -------
        sum_along_diagonals : ndarray
            If `a` is 2-D, the sum along the diagonal is returned.  If `a` has
            larger dimensions, then an array of sums along diagonals is returned.
    
        See Also
        --------
        diag, diagonal, diagflat
    
        Examples
        --------
        >>> np.trace(np.eye(3))
        3.0
        >>> a = np.arange(8).reshape((2,2,2))
        >>> np.trace(a)
        array([6, 8])
    
        >>> a = np.arange(24).reshape((2,2,2,3))
        >>> np.trace(a).shape
        (2, 3)
    
        """
        if isinstance(a, np.matrix):
            # Get trace of matrix via an array to preserve backward compatibility.
            return asarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
        else:
>           return asanyarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
E           ValueError: diag requires an array of at least two dimensions

../publishablew/cleanlab/cleanlab/venv/lib/python3.11/site-packages/numpy/core/fromnumeric.py:1761: ValueError
_______________________ test_main_pipeline_fraczero_high _______________________

    def test_main_pipeline_fraczero_high():
>       test_main_pipeline(n=1000, frac_zero_noise_rates=0.75)

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:31: in test_main_pipeline
    assert abs(trace - np.trace(nm) < 1e-2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = None, offset = 0, axis1 = 0, axis2 = 1, dtype = None, out = None

    @array_function_dispatch(_trace_dispatcher)
    def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
        """
        Return the sum along diagonals of the array.
    
        If `a` is 2-D, the sum along its diagonal with the given offset
        is returned, i.e., the sum of elements ``a[i,i+offset]`` for all i.
    
        If `a` has more than two dimensions, then the axes specified by axis1 and
        axis2 are used to determine the 2-D sub-arrays whose traces are returned.
        The shape of the resulting array is the same as that of `a` with `axis1`
        and `axis2` removed.
    
        Parameters
        ----------
        a : array_like
            Input array, from which the diagonals are taken.
        offset : int, optional
            Offset of the diagonal from the main diagonal. Can be both positive
            and negative. Defaults to 0.
        axis1, axis2 : int, optional
            Axes to be used as the first and second axis of the 2-D sub-arrays
            from which the diagonals should be taken. Defaults are the first two
            axes of `a`.
        dtype : dtype, optional
            Determines the data-type of the returned array and of the accumulator
            where the elements are summed. If dtype has the value None and `a` is
            of integer type of precision less than the default integer
            precision, then the default integer precision is used. Otherwise,
            the precision is the same as that of `a`.
        out : ndarray, optional
            Array into which the output is placed. Its type is preserved and
            it must be of the right shape to hold the output.
    
        Returns
        -------
        sum_along_diagonals : ndarray
            If `a` is 2-D, the sum along the diagonal is returned.  If `a` has
            larger dimensions, then an array of sums along diagonals is returned.
    
        See Also
        --------
        diag, diagonal, diagflat
    
        Examples
        --------
        >>> np.trace(np.eye(3))
        3.0
        >>> a = np.arange(8).reshape((2,2,2))
        >>> np.trace(a)
        array([6, 8])
    
        >>> a = np.arange(24).reshape((2,2,2,3))
        >>> np.trace(a).shape
        (2, 3)
    
        """
        if isinstance(a, np.matrix):
            # Get trace of matrix via an array to preserve backward compatibility.
            return asarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
        else:
>           return asanyarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
E           ValueError: diag requires an array of at least two dimensions

../publishablew/cleanlab/cleanlab/venv/lib/python3.11/site-packages/numpy/core/fromnumeric.py:1761: ValueError
__________________________ test_main_pipeline_verbose __________________________

verbose = True, n = 10

    def test_main_pipeline_verbose(verbose=True, n=10):
>       test_main_pipeline(verbose=verbose, n=n)

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:31: in test_main_pipeline
    assert abs(trace - np.trace(nm) < 1e-2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = None, offset = 0, axis1 = 0, axis2 = 1, dtype = None, out = None

    @array_function_dispatch(_trace_dispatcher)
    def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
        """
        Return the sum along diagonals of the array.
    
        If `a` is 2-D, the sum along its diagonal with the given offset
        is returned, i.e., the sum of elements ``a[i,i+offset]`` for all i.
    
        If `a` has more than two dimensions, then the axes specified by axis1 and
        axis2 are used to determine the 2-D sub-arrays whose traces are returned.
        The shape of the resulting array is the same as that of `a` with `axis1`
        and `axis2` removed.
    
        Parameters
        ----------
        a : array_like
            Input array, from which the diagonals are taken.
        offset : int, optional
            Offset of the diagonal from the main diagonal. Can be both positive
            and negative. Defaults to 0.
        axis1, axis2 : int, optional
            Axes to be used as the first and second axis of the 2-D sub-arrays
            from which the diagonals should be taken. Defaults are the first two
            axes of `a`.
        dtype : dtype, optional
            Determines the data-type of the returned array and of the accumulator
            where the elements are summed. If dtype has the value None and `a` is
            of integer type of precision less than the default integer
            precision, then the default integer precision is used. Otherwise,
            the precision is the same as that of `a`.
        out : ndarray, optional
            Array into which the output is placed. Its type is preserved and
            it must be of the right shape to hold the output.
    
        Returns
        -------
        sum_along_diagonals : ndarray
            If `a` is 2-D, the sum along the diagonal is returned.  If `a` has
            larger dimensions, then an array of sums along diagonals is returned.
    
        See Also
        --------
        diag, diagonal, diagflat
    
        Examples
        --------
        >>> np.trace(np.eye(3))
        3.0
        >>> a = np.arange(8).reshape((2,2,2))
        >>> np.trace(a)
        array([6, 8])
    
        >>> a = np.arange(24).reshape((2,2,2,3))
        >>> np.trace(a).shape
        (2, 3)
    
        """
        if isinstance(a, np.matrix):
            # Get trace of matrix via an array to preserve backward compatibility.
            return asarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
        else:
>           return asanyarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
E           ValueError: diag requires an array of at least two dimensions

../publishablew/cleanlab/cleanlab/venv/lib/python3.11/site-packages/numpy/core/fromnumeric.py:1761: ValueError
___________________________ test_main_pipeline_many ____________________________

verbose = False, n = 1000

    def test_main_pipeline_many(verbose=False, n=1000):
>       test_main_pipeline(verbose=verbose, n=n)

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:31: in test_main_pipeline
    assert abs(trace - np.trace(nm) < 1e-2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = None, offset = 0, axis1 = 0, axis2 = 1, dtype = None, out = None

    @array_function_dispatch(_trace_dispatcher)
    def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
        """
        Return the sum along diagonals of the array.
    
        If `a` is 2-D, the sum along its diagonal with the given offset
        is returned, i.e., the sum of elements ``a[i,i+offset]`` for all i.
    
        If `a` has more than two dimensions, then the axes specified by axis1 and
        axis2 are used to determine the 2-D sub-arrays whose traces are returned.
        The shape of the resulting array is the same as that of `a` with `axis1`
        and `axis2` removed.
    
        Parameters
        ----------
        a : array_like
            Input array, from which the diagonals are taken.
        offset : int, optional
            Offset of the diagonal from the main diagonal. Can be both positive
            and negative. Defaults to 0.
        axis1, axis2 : int, optional
            Axes to be used as the first and second axis of the 2-D sub-arrays
            from which the diagonals should be taken. Defaults are the first two
            axes of `a`.
        dtype : dtype, optional
            Determines the data-type of the returned array and of the accumulator
            where the elements are summed. If dtype has the value None and `a` is
            of integer type of precision less than the default integer
            precision, then the default integer precision is used. Otherwise,
            the precision is the same as that of `a`.
        out : ndarray, optional
            Array into which the output is placed. Its type is preserved and
            it must be of the right shape to hold the output.
    
        Returns
        -------
        sum_along_diagonals : ndarray
            If `a` is 2-D, the sum along the diagonal is returned.  If `a` has
            larger dimensions, then an array of sums along diagonals is returned.
    
        See Also
        --------
        diag, diagonal, diagflat
    
        Examples
        --------
        >>> np.trace(np.eye(3))
        3.0
        >>> a = np.arange(8).reshape((2,2,2))
        >>> np.trace(a)
        array([6, 8])
    
        >>> a = np.arange(24).reshape((2,2,2,3))
        >>> np.trace(a).shape
        (2, 3)
    
        """
        if isinstance(a, np.matrix):
            # Get trace of matrix via an array to preserve backward compatibility.
            return asarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
        else:
>           return asanyarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
E           ValueError: diag requires an array of at least two dimensions

../publishablew/cleanlab/cleanlab/venv/lib/python3.11/site-packages/numpy/core/fromnumeric.py:1761: ValueError
____________________ test_main_pipeline_many_verbose_valid _____________________

verbose = True, n = 100

    def test_main_pipeline_many_verbose_valid(verbose=True, n=100):
>       test_main_pipeline(verbose, n, valid_noise_matrix=True)

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:31: in test_main_pipeline
    assert abs(trace - np.trace(nm) < 1e-2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = None, offset = 0, axis1 = 0, axis2 = 1, dtype = None, out = None

    @array_function_dispatch(_trace_dispatcher)
    def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
        """
        Return the sum along diagonals of the array.
    
        If `a` is 2-D, the sum along its diagonal with the given offset
        is returned, i.e., the sum of elements ``a[i,i+offset]`` for all i.
    
        If `a` has more than two dimensions, then the axes specified by axis1 and
        axis2 are used to determine the 2-D sub-arrays whose traces are returned.
        The shape of the resulting array is the same as that of `a` with `axis1`
        and `axis2` removed.
    
        Parameters
        ----------
        a : array_like
            Input array, from which the diagonals are taken.
        offset : int, optional
            Offset of the diagonal from the main diagonal. Can be both positive
            and negative. Defaults to 0.
        axis1, axis2 : int, optional
            Axes to be used as the first and second axis of the 2-D sub-arrays
            from which the diagonals should be taken. Defaults are the first two
            axes of `a`.
        dtype : dtype, optional
            Determines the data-type of the returned array and of the accumulator
            where the elements are summed. If dtype has the value None and `a` is
            of integer type of precision less than the default integer
            precision, then the default integer precision is used. Otherwise,
            the precision is the same as that of `a`.
        out : ndarray, optional
            Array into which the output is placed. Its type is preserved and
            it must be of the right shape to hold the output.
    
        Returns
        -------
        sum_along_diagonals : ndarray
            If `a` is 2-D, the sum along the diagonal is returned.  If `a` has
            larger dimensions, then an array of sums along diagonals is returned.
    
        See Also
        --------
        diag, diagonal, diagflat
    
        Examples
        --------
        >>> np.trace(np.eye(3))
        3.0
        >>> a = np.arange(8).reshape((2,2,2))
        >>> np.trace(a)
        array([6, 8])
    
        >>> a = np.arange(24).reshape((2,2,2,3))
        >>> np.trace(a).shape
        (2, 3)
    
        """
        if isinstance(a, np.matrix):
            # Get trace of matrix via an array to preserve backward compatibility.
            return asarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
        else:
>           return asanyarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
E           ValueError: diag requires an array of at least two dimensions

../publishablew/cleanlab/cleanlab/venv/lib/python3.11/site-packages/numpy/core/fromnumeric.py:1761: ValueError
________________________ test_main_pipeline_many_valid _________________________

verbose = False, n = 100

    def test_main_pipeline_many_valid(verbose=False, n=100):
>       test_main_pipeline(verbose, n, valid_noise_matrix=True)

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:31: in test_main_pipeline
    assert abs(trace - np.trace(nm) < 1e-2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = None, offset = 0, axis1 = 0, axis2 = 1, dtype = None, out = None

    @array_function_dispatch(_trace_dispatcher)
    def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
        """
        Return the sum along diagonals of the array.
    
        If `a` is 2-D, the sum along its diagonal with the given offset
        is returned, i.e., the sum of elements ``a[i,i+offset]`` for all i.
    
        If `a` has more than two dimensions, then the axes specified by axis1 and
        axis2 are used to determine the 2-D sub-arrays whose traces are returned.
        The shape of the resulting array is the same as that of `a` with `axis1`
        and `axis2` removed.
    
        Parameters
        ----------
        a : array_like
            Input array, from which the diagonals are taken.
        offset : int, optional
            Offset of the diagonal from the main diagonal. Can be both positive
            and negative. Defaults to 0.
        axis1, axis2 : int, optional
            Axes to be used as the first and second axis of the 2-D sub-arrays
            from which the diagonals should be taken. Defaults are the first two
            axes of `a`.
        dtype : dtype, optional
            Determines the data-type of the returned array and of the accumulator
            where the elements are summed. If dtype has the value None and `a` is
            of integer type of precision less than the default integer
            precision, then the default integer precision is used. Otherwise,
            the precision is the same as that of `a`.
        out : ndarray, optional
            Array into which the output is placed. Its type is preserved and
            it must be of the right shape to hold the output.
    
        Returns
        -------
        sum_along_diagonals : ndarray
            If `a` is 2-D, the sum along the diagonal is returned.  If `a` has
            larger dimensions, then an array of sums along diagonals is returned.
    
        See Also
        --------
        diag, diagonal, diagflat
    
        Examples
        --------
        >>> np.trace(np.eye(3))
        3.0
        >>> a = np.arange(8).reshape((2,2,2))
        >>> np.trace(a)
        array([6, 8])
    
        >>> a = np.arange(24).reshape((2,2,2,3))
        >>> np.trace(a).shape
        (2, 3)
    
        """
        if isinstance(a, np.matrix):
            # Get trace of matrix via an array to preserve backward compatibility.
            return asarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
        else:
>           return asanyarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
E           ValueError: diag requires an array of at least two dimensions

../publishablew/cleanlab/cleanlab/venv/lib/python3.11/site-packages/numpy/core/fromnumeric.py:1761: ValueError
_______________________ test_main_pipeline_many_verbose ________________________

verbose = True, n = 1000

    def test_main_pipeline_many_verbose(verbose=True, n=1000):
>       test_main_pipeline(verbose=verbose, n=n)

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:31: in test_main_pipeline
    assert abs(trace - np.trace(nm) < 1e-2)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = None, offset = 0, axis1 = 0, axis2 = 1, dtype = None, out = None

    @array_function_dispatch(_trace_dispatcher)
    def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
        """
        Return the sum along diagonals of the array.
    
        If `a` is 2-D, the sum along its diagonal with the given offset
        is returned, i.e., the sum of elements ``a[i,i+offset]`` for all i.
    
        If `a` has more than two dimensions, then the axes specified by axis1 and
        axis2 are used to determine the 2-D sub-arrays whose traces are returned.
        The shape of the resulting array is the same as that of `a` with `axis1`
        and `axis2` removed.
    
        Parameters
        ----------
        a : array_like
            Input array, from which the diagonals are taken.
        offset : int, optional
            Offset of the diagonal from the main diagonal. Can be both positive
            and negative. Defaults to 0.
        axis1, axis2 : int, optional
            Axes to be used as the first and second axis of the 2-D sub-arrays
            from which the diagonals should be taken. Defaults are the first two
            axes of `a`.
        dtype : dtype, optional
            Determines the data-type of the returned array and of the accumulator
            where the elements are summed. If dtype has the value None and `a` is
            of integer type of precision less than the default integer
            precision, then the default integer precision is used. Otherwise,
            the precision is the same as that of `a`.
        out : ndarray, optional
            Array into which the output is placed. Its type is preserved and
            it must be of the right shape to hold the output.
    
        Returns
        -------
        sum_along_diagonals : ndarray
            If `a` is 2-D, the sum along the diagonal is returned.  If `a` has
            larger dimensions, then an array of sums along diagonals is returned.
    
        See Also
        --------
        diag, diagonal, diagflat
    
        Examples
        --------
        >>> np.trace(np.eye(3))
        3.0
        >>> a = np.arange(8).reshape((2,2,2))
        >>> np.trace(a)
        array([6, 8])
    
        >>> a = np.arange(24).reshape((2,2,2,3))
        >>> np.trace(a).shape
        (2, 3)
    
        """
        if isinstance(a, np.matrix):
            # Get trace of matrix via an array to preserve backward compatibility.
            return asarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
        else:
>           return asanyarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
E           ValueError: diag requires an array of at least two dimensions

../publishablew/cleanlab/cleanlab/venv/lib/python3.11/site-packages/numpy/core/fromnumeric.py:1761: ValueError
________________________________ test_max_iter _________________________________

    def test_max_iter():
        trace = 2
        K = 3
        py = [1 / float(K)] * K
        nm = noise_generation.generate_noise_matrix_from_trace(
            K=K,
            trace=trace,
            valid_noise_matrix=True,
            max_iter=1,
            py=py,
            seed=1,
        )
>       assert abs(np.trace(nm) - trace) < 1e-6

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py:248: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = None, offset = 0, axis1 = 0, axis2 = 1, dtype = None, out = None

    @array_function_dispatch(_trace_dispatcher)
    def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
        """
        Return the sum along diagonals of the array.
    
        If `a` is 2-D, the sum along its diagonal with the given offset
        is returned, i.e., the sum of elements ``a[i,i+offset]`` for all i.
    
        If `a` has more than two dimensions, then the axes specified by axis1 and
        axis2 are used to determine the 2-D sub-arrays whose traces are returned.
        The shape of the resulting array is the same as that of `a` with `axis1`
        and `axis2` removed.
    
        Parameters
        ----------
        a : array_like
            Input array, from which the diagonals are taken.
        offset : int, optional
            Offset of the diagonal from the main diagonal. Can be both positive
            and negative. Defaults to 0.
        axis1, axis2 : int, optional
            Axes to be used as the first and second axis of the 2-D sub-arrays
            from which the diagonals should be taken. Defaults are the first two
            axes of `a`.
        dtype : dtype, optional
            Determines the data-type of the returned array and of the accumulator
            where the elements are summed. If dtype has the value None and `a` is
            of integer type of precision less than the default integer
            precision, then the default integer precision is used. Otherwise,
            the precision is the same as that of `a`.
        out : ndarray, optional
            Array into which the output is placed. Its type is preserved and
            it must be of the right shape to hold the output.
    
        Returns
        -------
        sum_along_diagonals : ndarray
            If `a` is 2-D, the sum along the diagonal is returned.  If `a` has
            larger dimensions, then an array of sums along diagonals is returned.
    
        See Also
        --------
        diag, diagonal, diagflat
    
        Examples
        --------
        >>> np.trace(np.eye(3))
        3.0
        >>> a = np.arange(8).reshape((2,2,2))
        >>> np.trace(a)
        array([6, 8])
    
        >>> a = np.arange(24).reshape((2,2,2,3))
        >>> np.trace(a).shape
        (2, 3)
    
        """
        if isinstance(a, np.matrix):
            # Get trace of matrix via an array to preserve backward compatibility.
            return asarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
        else:
>           return asanyarray(a).trace(offset=offset, axis1=axis1, axis2=axis2, dtype=dtype, out=out)
E           ValueError: diag requires an array of at least two dimensions

../publishablew/cleanlab/cleanlab/venv/lib/python3.11/site-packages/numpy/core/fromnumeric.py:1761: ValueError
=========================== short test summary info ============================
FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline
FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_fraczero_high
FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_verbose
FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many
FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose_valid
FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_valid
FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose
FAILED ../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_max_iter
======================== 8 failed, 16 passed in 11.52s =========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/cleanlab/cleanlab/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/cleanlab/cleanlab
configfile: pyproject.toml
collecting ... collected 24 items

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_fraczero_high PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_verbose PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose_valid PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_valid PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_invalid_inputs_verify[True] PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_invalid_inputs_verify[False] PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_invalid_matrix PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_trace_less_than_1_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_trace_equals_1_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_valid_no_py_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_one_class_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_two_class_nofraczero PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_two_class_fraczero_high PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_two_class_fraczero_high_valid PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_gen_probs_sum_empty PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_gen_probs_max_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_gen_probs_min_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_probs_min_max_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_balls_zero PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_balls_params PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_max_iter PASSED

============================== 24 passed in 0.52s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/cleanlab/cleanlab/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/cleanlab/cleanlab
configfile: pyproject.toml
collecting ... collected 24 items

../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_fraczero_high PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_verbose PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose_valid PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_valid PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_main_pipeline_many_verbose PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_invalid_inputs_verify[True] PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_invalid_inputs_verify[False] PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_invalid_matrix PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_trace_less_than_1_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_trace_equals_1_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_valid_no_py_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_one_class_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_two_class_nofraczero PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_two_class_fraczero_high PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_two_class_fraczero_high_valid PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_gen_probs_sum_empty PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_gen_probs_max_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_gen_probs_min_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_probs_min_max_error PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_balls_zero PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_balls_params PASSED
../publishablew/cleanlab/cleanlab/tests/test_noise_generation.py::test_max_iter PASSED

============================== 24 passed in 0.58s ==============================
