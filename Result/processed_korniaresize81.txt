output file:
processed_korniaresize81.json
function:
resize
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsize[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_gradcheck[cpu] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_smoke[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-False] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-True] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-False]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_horz[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_horz[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-True]', '../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_upsize[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsizeAA[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_long[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_smoke[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_vert[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_upsize[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsize[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsizeAA[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_vert[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_long[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', None, 'tvm', 'onnxrt', 'openxla', 'jit', 'cudagraphs', 'inductor'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 11 items

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_smoke[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_upsize[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsize[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsizeAA[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_long[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_vert[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_horz[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_gradcheck[cpu] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-True] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-False] FAILED

=================================== FAILURES ===================================
______________________ TestResize.test_smoke[cpu-float32] ______________________

self = <test_affine.TestResize object at 0x7509acbe6680>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        inp = torch.rand(1, 3, 3, 4, device=device, dtype=dtype)
>       out = kornia.geometry.transform.resize(inp, (3, 4), align_corners=False)

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[0.1534, 0.8196, 0.4489, 0.4294],
          [0.2359, 0.3476, 0.7569, 0.3964],
          [0.4930, 0.4707, 0.5...19, 0.9503, 0.1930, 0.8414],
          [0.9537, 0.5263, 0.0039, 0.6929],
          [0.6092, 0.7754, 0.9413, 0.4857]]]])
output_size = (3, 4), interpolation = 'bilinear', align_corners = False
side = 'short', antialias = False

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
            raise ValueError('output_size must be a tuple of (height, width)')
        valid_interpolations = ['bilinear', 'nearest', 'bicubic', 'trilinear', 'area']
        if interpolation not in valid_interpolations:
            raise ValueError(f'Invalid interpolation method. Choose from {valid_interpolations}')
        valid_sides = ['both', 'height', 'width']
        if side not in valid_sides:
>           raise ValueError(f'Invalid side. Choose from {valid_sides}')
E           ValueError: Invalid side. Choose from ['both', 'height', 'width']

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:40: ValueError
_____________________ TestResize.test_upsize[cpu-float32] ______________________

self = <test_affine.TestResize object at 0x7509acbe6a70>
device = device(type='cpu'), dtype = torch.float32

    def test_upsize(self, device, dtype):
        inp = torch.rand(1, 3, 3, 4, device=device, dtype=dtype)
>       out = kornia.geometry.transform.resize(inp, (6, 8), align_corners=False)

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[8.8472e-01, 1.0272e-01, 3.7889e-01, 9.4845e-01],
          [4.0557e-01, 5.1169e-01, 6.6180e-01, 7.2003e-01]...       [8.2687e-02, 2.4639e-01, 3.1407e-01, 3.3354e-01],
          [4.7141e-04, 2.6516e-01, 6.1702e-02, 7.0083e-01]]]])
output_size = (6, 8), interpolation = 'bilinear', align_corners = False
side = 'short', antialias = False

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
            raise ValueError('output_size must be a tuple of (height, width)')
        valid_interpolations = ['bilinear', 'nearest', 'bicubic', 'trilinear', 'area']
        if interpolation not in valid_interpolations:
            raise ValueError(f'Invalid interpolation method. Choose from {valid_interpolations}')
        valid_sides = ['both', 'height', 'width']
        if side not in valid_sides:
>           raise ValueError(f'Invalid side. Choose from {valid_sides}')
E           ValueError: Invalid side. Choose from ['both', 'height', 'width']

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:40: ValueError
____________________ TestResize.test_downsize[cpu-float32] _____________________

self = <test_affine.TestResize object at 0x7509acbe6da0>
device = device(type='cpu'), dtype = torch.float32

    def test_downsize(self, device, dtype):
        inp = torch.rand(1, 3, 5, 2, device=device, dtype=dtype)
>       out = kornia.geometry.transform.resize(inp, (3, 1), align_corners=False)

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[0.0100, 0.0471],
          [0.2925, 0.8258],
          [0.4573, 0.8501],
          [0.6984, 0.9665],
      ...81],
          [0.9260, 0.5001],
          [0.4592, 0.2445],
          [0.9066, 0.7470],
          [0.0161, 0.7912]]]])
output_size = (3, 1), interpolation = 'bilinear', align_corners = False
side = 'short', antialias = False

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
            raise ValueError('output_size must be a tuple of (height, width)')
        valid_interpolations = ['bilinear', 'nearest', 'bicubic', 'trilinear', 'area']
        if interpolation not in valid_interpolations:
            raise ValueError(f'Invalid interpolation method. Choose from {valid_interpolations}')
        valid_sides = ['both', 'height', 'width']
        if side not in valid_sides:
>           raise ValueError(f'Invalid side. Choose from {valid_sides}')
E           ValueError: Invalid side. Choose from ['both', 'height', 'width']

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:40: ValueError
___________________ TestResize.test_downsizeAA[cpu-float32] ____________________

self = <test_affine.TestResize object at 0x7509acbe70d0>
device = device(type='cpu'), dtype = torch.float32

    def test_downsizeAA(self, device, dtype):
        inp = torch.rand(1, 3, 10, 8, device=device, dtype=dtype)
>       out = kornia.geometry.transform.resize(inp, (5, 3), align_corners=False, antialias=True)

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[0.7526, 0.4639, 0.5872, 0.3405, 0.2108, 0.9338, 0.7997, 0.9169],
          [0.2047, 0.0105, 0.9229, 0.4121,...0.0194, 0.9499, 0.5061, 0.8318, 0.6442],
          [0.1092, 0.6550, 0.7031, 0.6030, 0.4248, 0.4279, 0.0319, 0.3527]]]])
output_size = (5, 3), interpolation = 'bilinear', align_corners = False
side = 'short', antialias = True

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
            raise ValueError('output_size must be a tuple of (height, width)')
        valid_interpolations = ['bilinear', 'nearest', 'bicubic', 'trilinear', 'area']
        if interpolation not in valid_interpolations:
            raise ValueError(f'Invalid interpolation method. Choose from {valid_interpolations}')
        valid_sides = ['both', 'height', 'width']
        if side not in valid_sides:
>           raise ValueError(f'Invalid side. Choose from {valid_sides}')
E           ValueError: Invalid side. Choose from ['both', 'height', 'width']

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:40: ValueError
____________________ TestResize.test_one_param[cpu-float32] ____________________

self = <test_affine.TestResize object at 0x7509acbe7400>
device = device(type='cpu'), dtype = torch.float32

    def test_one_param(self, device, dtype):
        inp = torch.rand(1, 3, 5, 2, device=device, dtype=dtype)
>       out = kornia.geometry.transform.resize(inp, 10, align_corners=False)

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[0.9796, 0.0897],
          [0.1342, 0.5093],
          [0.6172, 0.7054],
          [0.0834, 0.8313],
      ...64],
          [0.1908, 0.0450],
          [0.3454, 0.9811],
          [0.6574, 0.5437],
          [0.8413, 0.6167]]]])
output_size = 10, interpolation = 'bilinear', align_corners = False
side = 'short', antialias = False

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
>           raise ValueError('output_size must be a tuple of (height, width)')
E           ValueError: output_size must be a tuple of (height, width)

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:34: ValueError
_________________ TestResize.test_one_param_long[cpu-float32] __________________

self = <test_affine.TestResize object at 0x7509acbe7730>
device = device(type='cpu'), dtype = torch.float32

    def test_one_param_long(self, device, dtype):
        inp = torch.rand(1, 3, 5, 2, device=device, dtype=dtype)
>       out = kornia.geometry.transform.resize(inp, 10, align_corners=False, side="long")

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[0.8923, 0.2671],
          [0.7392, 0.3004],
          [0.0663, 0.1502],
          [0.6441, 0.1369],
      ...49],
          [0.9636, 0.2533],
          [0.4295, 0.7851],
          [0.3434, 0.3204],
          [0.3201, 0.7122]]]])
output_size = 10, interpolation = 'bilinear', align_corners = False
side = 'long', antialias = False

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
>           raise ValueError('output_size must be a tuple of (height, width)')
E           ValueError: output_size must be a tuple of (height, width)

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:34: ValueError
_________________ TestResize.test_one_param_vert[cpu-float32] __________________

self = <test_affine.TestResize object at 0x7509acbe7a60>
device = device(type='cpu'), dtype = torch.float32

    def test_one_param_vert(self, device, dtype):
        inp = torch.rand(1, 3, 5, 2, device=device, dtype=dtype)
>       out = kornia.geometry.transform.resize(inp, 10, align_corners=False, side="vert")

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[3.0471e-01, 5.9335e-01],
          [4.7145e-01, 4.9104e-01],
          [9.9108e-01, 6.2790e-01],
          ...82e-01],
          [5.7668e-02, 4.2306e-02],
          [3.4472e-01, 6.7369e-03],
          [3.7031e-01, 9.8370e-01]]]])
output_size = 10, interpolation = 'bilinear', align_corners = False
side = 'vert', antialias = False

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
>           raise ValueError('output_size must be a tuple of (height, width)')
E           ValueError: output_size must be a tuple of (height, width)

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:34: ValueError
_________________ TestResize.test_one_param_horz[cpu-float32] __________________

self = <test_affine.TestResize object at 0x7509acbe7d90>
device = device(type='cpu'), dtype = torch.float32

    def test_one_param_horz(self, device, dtype):
        inp = torch.rand(1, 3, 2, 5, device=device, dtype=dtype)
>       out = kornia.geometry.transform.resize(inp, 10, align_corners=False, side="horz")

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[0.2644, 0.1186, 0.3026, 0.4993, 0.7977],
          [0.0363, 0.2029, 0.1319, 0.4152, 0.2324]],

         [[0..., 0.5071]],

         [[0.7306, 0.1804, 0.6693, 0.3479, 0.6374],
          [0.8507, 0.3743, 0.6078, 0.7724, 0.9661]]]])
output_size = 10, interpolation = 'bilinear', align_corners = False
side = 'horz', antialias = False

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
>           raise ValueError('output_size must be a tuple of (height, width)')
E           ValueError: output_size must be a tuple of (height, width)

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:34: ValueError
________________________ TestResize.test_gradcheck[cpu] ________________________

self = <test_affine.TestResize object at 0x7509ac5180a0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        # test parameters
        new_size = 4
        inp = torch.rand(1, 2, 3, 4, device=device, dtype=torch.float64)
>       self.gradcheck(kornia.geometry.transform.Resize(new_size, align_corners=False), (inp,))

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:521: in forward
    return resize(input, self.size, self.interpolation, align_corners=self.align_corners, side=self.side, antialias=self.antialias)
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[0.6042, 0.6042, 0.0669, 0.5099],
          [0.1198, 0.4070, 0.3637, 0.8392],
          [0.9884, 0.7418, 0.8...0.6402, 0.2573, 0.2957],
          [0.8261, 0.5995, 0.6466, 0.8230]]]], dtype=torch.float64,
       requires_grad=True)
output_size = 4, interpolation = 'bilinear', align_corners = False
side = 'short', antialias = False

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
>           raise ValueError('output_size must be a tuple of (height, width)')
E           ValueError: output_size must be a tuple of (height, width)

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:34: ValueError
______________ TestResize.test_dynamo[cpu-float32-inductor-True] _______________

self = <test_affine.TestResize object at 0x7509ac5184f0>
device = device(type='cpu'), dtype = torch.float32, anti_alias = True
torch_optimizer = functools.partial(<function compile at 0x750a823c5900>, backend='inductor')

    @pytest.mark.parametrize("anti_alias", [True, False])
    def test_dynamo(self, device, dtype, anti_alias, torch_optimizer):
        new_size = (5, 6)
        inp = torch.rand(1, 2, 3, 4, device=device, dtype=dtype)
        op = torch_optimizer(kornia.geometry.transform.resize)
>       out = op(inp, new_size, align_corners=False, antialias=anti_alias)

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:465: in _fn
    return fn(*args, **kwargs)
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[0.1261, 0.8849, 0.4585, 0.0032],
          [0.1151, 0.7943, 0.6676, 0.5954],
          [0.0047, 0.9786, 0.2...84, 0.3705, 0.7801, 0.5286],
          [0.4140, 0.6282, 0.0313, 0.6828],
          [0.8163, 0.9286, 0.1856, 0.5426]]]])
output_size = (5, 6), interpolation = 'bilinear', align_corners = False
side = 'short', antialias = True

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
            raise ValueError('output_size must be a tuple of (height, width)')
        valid_interpolations = ['bilinear', 'nearest', 'bicubic', 'trilinear', 'area']
        if interpolation not in valid_interpolations:
            raise ValueError(f'Invalid interpolation method. Choose from {valid_interpolations}')
        valid_sides = ['both', 'height', 'width']
        if side not in valid_sides:
>           raise ValueError(f'Invalid side. Choose from {valid_sides}')
E           ValueError: Invalid side. Choose from ['both', 'height', 'width']

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:40: ValueError
______________ TestResize.test_dynamo[cpu-float32-inductor-False] ______________

self = <test_affine.TestResize object at 0x7509ac518460>
device = device(type='cpu'), dtype = torch.float32, anti_alias = False
torch_optimizer = functools.partial(<function compile at 0x750a823c5900>, backend='inductor')

    @pytest.mark.parametrize("anti_alias", [True, False])
    def test_dynamo(self, device, dtype, anti_alias, torch_optimizer):
        new_size = (5, 6)
        inp = torch.rand(1, 2, 3, 4, device=device, dtype=dtype)
        op = torch_optimizer(kornia.geometry.transform.resize)
>       out = op(inp, new_size, align_corners=False, antialias=anti_alias)

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:465: in _fn
    return fn(*args, **kwargs)
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/geometry/transform/affwarp.py:366: in resize
    return resize(input, size, interpolation, align_corners, side, antialias)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_tensor = tensor([[[[0.1824, 0.0636, 0.4685, 0.1324],
          [0.4001, 0.3249, 0.8905, 0.7662],
          [0.9546, 0.1407, 0.2...00, 0.3341, 0.9620, 0.9507],
          [0.6135, 0.6585, 0.2972, 0.4703],
          [0.7989, 0.9654, 0.4474, 0.3174]]]])
output_size = (5, 6), interpolation = 'bilinear', align_corners = False
side = 'short', antialias = False

    def resize(input_tensor, output_size, interpolation='bilinear', align_corners=False, side='both', antialias=False):
        """
        Resizes an input torch.Tensor to a specified size using various parameters.
    
        Parameters:
        - input_tensor (torch.Tensor): The input tensor to be resized.
        - output_size (tuple): The desired output size (height, width).
        - interpolation (str): The interpolation method ('bilinear', 'nearest', etc.). Default is 'bilinear'.
        - align_corners (bool): Flag for alignment. Default is False.
        - side (str): Side for resizing ('both', 'height', 'width'). Default is 'both'.
        - antialias (bool): Flag for antialiasing. Default is False.
    
        Returns:
        - torch.Tensor: The resized tensor.
        """
        if not isinstance(input_tensor, torch.Tensor):
            raise TypeError('input_tensor must be a torch.Tensor')
        if len(input_tensor.shape) != 4:
            raise ValueError('input_tensor must be a 4D tensor (batch_size, channels, height, width)')
        if not (isinstance(output_size, tuple) and len(output_size) == 2):
            raise ValueError('output_size must be a tuple of (height, width)')
        valid_interpolations = ['bilinear', 'nearest', 'bicubic', 'trilinear', 'area']
        if interpolation not in valid_interpolations:
            raise ValueError(f'Invalid interpolation method. Choose from {valid_interpolations}')
        valid_sides = ['both', 'height', 'width']
        if side not in valid_sides:
>           raise ValueError(f'Invalid side. Choose from {valid_sides}')
E           ValueError: Invalid side. Choose from ['both', 'height', 'width']

../publishablew/kornia/kornia/kornia/geometry/transform/temp.py:40: ValueError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_smoke[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_upsize[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsize[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsizeAA[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_long[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_vert[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_horz[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_gradcheck[cpu]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-True]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-False]
============================== 11 failed in 0.77s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'tvm', 'cudagraphs', 'jit', 'inductor', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 11 items

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_upsize[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsize[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsizeAA[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_long[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_vert[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_horz[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-True] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-False] PASSED

============================== 11 passed in 2.09s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'jit', 'tvm', 'cudagraphs', 'inductor', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 11 items

../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_upsize[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsize[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_downsizeAA[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_long[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_vert[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_one_param_horz[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-True] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_affine.py::TestResize::test_dynamo[cpu-float32-inductor-False] PASSED

============================== 11 passed in 2.08s ==============================
