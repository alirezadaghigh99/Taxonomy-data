output file:
processed_korniazca_mean129.json
function:
zca_mean
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-0]', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-True] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_with_fit[cpu] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape1-0.1] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-False] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape2-0.001] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_with_fit[cpu]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape2-0.001]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape0-1e-06]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_detach_zca[cpu]', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-0] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-True] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-False]', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_individual_transforms[cpu] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape0-1e-06] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape1-0.1]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-1]', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_detach_zca[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-False]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_jit[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_individual_transforms[cpu]', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_jit[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-False] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-True]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-True]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'inductor', 'jit', 'cudagraphs', 'tvm', None, 'openxla'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 15 items

../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-True] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-False] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-0] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape0-1e-06] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape1-0.1] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape2-0.001] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_individual_transforms[cpu] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_with_fit[cpu] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_detach_zca[cpu] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_not_fitted[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_not_fitted_inv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_jit[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-True] FAILED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-False] FAILED

=================================== FAILURES ===================================
_________________ TestZCA.test_zca_unbiased[cpu-float32-True] __________________

self = <test_zca.TestZCA object at 0x77f5fc2fc9d0>, unbiased = True
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("unbiased", [True, False])
    def test_zca_unbiased(self, unbiased, device, dtype):
        data = torch.tensor([[0, 1], [1, 0], [-1, 0], [0, -1]], device=device, dtype=dtype)
    
        if unbiased:
            unbiased_val = 1.5
        else:
            unbiased_val = 2.0
    
        expected = torch.sqrt(unbiased_val * torch.abs(data)) * torch.sign(data)
    
>       zca = kornia.enhance.ZCAWhitening(unbiased=unbiased).fit(data)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/enhance/zca.py:84: in fit
    T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[ 0.,  1.],
        [ 1.,  0.],
        [-1.,  0.],
        [ 0., -1.]])
dim = 0, unbiased = True, eps = 1e-06, return_inverse = False

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
_________________ TestZCA.test_zca_unbiased[cpu-float32-False] _________________

self = <test_zca.TestZCA object at 0x77f5fc2fc940>, unbiased = False
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("unbiased", [True, False])
    def test_zca_unbiased(self, unbiased, device, dtype):
        data = torch.tensor([[0, 1], [1, 0], [-1, 0], [0, -1]], device=device, dtype=dtype)
    
        if unbiased:
            unbiased_val = 1.5
        else:
            unbiased_val = 2.0
    
        expected = torch.sqrt(unbiased_val * torch.abs(data)) * torch.sign(data)
    
>       zca = kornia.enhance.ZCAWhitening(unbiased=unbiased).fit(data)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/enhance/zca.py:84: in fit
    T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[ 0.,  1.],
        [ 1.,  0.],
        [-1.,  0.],
        [ 0., -1.]])
dim = 0, unbiased = False, eps = 1e-06, return_inverse = False

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
_____________________ TestZCA.test_dim_args[cpu-float32-0] _____________________

self = <test_zca.TestZCA object at 0x77f5fc2fce50>, dim = 0
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("dim", [0, 1])
    def test_dim_args(self, dim, device, dtype):
        if "xla" in device.type:
            pytest.skip("buggy with XLA devices.")
    
        if dtype == torch.float16:
            pytest.skip("not work for half-precision")
    
        data = torch.tensor([[0, 1], [1, 0], [-1, 0], [0, -1]], device=device, dtype=dtype)
    
        if dim == 1:
            expected = torch.tensor(
                [
                    [-0.35360718, 0.35360718],
                    [0.35351562, -0.35351562],
                    [-0.35353088, 0.35353088],
                    [0.35353088, -0.35353088],
                ],
                device=device,
                dtype=dtype,
            )
        elif dim == 0:
            expected = torch.tensor(
                [[0.0, 1.2247448], [1.2247448, 0.0], [-1.2247448, 0.0], [0.0, -1.2247448]], device=device, dtype=dtype
            )
    
        zca = kornia.enhance.ZCAWhitening(dim=dim)
>       actual = zca(data, True)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/zca.py:109: in forward
    self.fit(x)
../publishablew/kornia/kornia/kornia/enhance/zca.py:84: in fit
    T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[ 0.,  1.],
        [ 1.,  0.],
        [-1.,  0.],
        [ 0., -1.]])
dim = 0, unbiased = True, eps = 1e-06, return_inverse = False

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
_____________________ TestZCA.test_dim_args[cpu-float32-1] _____________________

self = <test_zca.TestZCA object at 0x77f5fc2fcd90>, dim = 1
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("dim", [0, 1])
    def test_dim_args(self, dim, device, dtype):
        if "xla" in device.type:
            pytest.skip("buggy with XLA devices.")
    
        if dtype == torch.float16:
            pytest.skip("not work for half-precision")
    
        data = torch.tensor([[0, 1], [1, 0], [-1, 0], [0, -1]], device=device, dtype=dtype)
    
        if dim == 1:
            expected = torch.tensor(
                [
                    [-0.35360718, 0.35360718],
                    [0.35351562, -0.35351562],
                    [-0.35353088, 0.35353088],
                    [0.35353088, -0.35353088],
                ],
                device=device,
                dtype=dtype,
            )
        elif dim == 0:
            expected = torch.tensor(
                [[0.0, 1.2247448], [1.2247448, 0.0], [-1.2247448, 0.0], [0.0, -1.2247448]], device=device, dtype=dtype
            )
    
        zca = kornia.enhance.ZCAWhitening(dim=dim)
>       actual = zca(data, True)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/zca.py:109: in forward
    self.fit(x)
../publishablew/kornia/kornia/kornia/enhance/zca.py:84: in fit
    T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[ 0.,  1.],
        [ 1.,  0.],
        [-1.,  0.],
        [ 0., -1.]])
dim = 1, unbiased = True, eps = 1e-06, return_inverse = False

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
____________ TestZCA.test_identity[cpu-float32-input_shape0-1e-06] _____________

self = <test_zca.TestZCA object at 0x77f5fc2fd300>, input_shape = (15, 2, 2, 2)
eps = 1e-06, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("input_shape,eps", [((15, 2, 2, 2), 1e-6), ((10, 4), 0.1), ((20, 3, 2, 2), 1e-3)])
    def test_identity(self, input_shape, eps, device, dtype):
        """Assert that data can be recovered by the inverse transform."""
        data = torch.randn(*input_shape, device=device, dtype=dtype)
    
>       zca = kornia.enhance.ZCAWhitening(compute_inv=True, eps=eps).fit(data)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/enhance/zca.py:84: in fit
    T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[[[ 1.4780,  0.8168],
          [ 0.5102, -0.2179]],

         [[-0.6603, -1.3039],
          [-0.4361,  0.044...   [[[ 0.9648,  1.0713],
          [-0.0169, -0.0536]],

         [[-0.3596,  0.2894],
          [ 0.3619,  0.5830]]]])
dim = 0, unbiased = True, eps = 1e-06, return_inverse = True

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
_____________ TestZCA.test_identity[cpu-float32-input_shape1-0.1] ______________

self = <test_zca.TestZCA object at 0x77f5fc2fd240>, input_shape = (10, 4)
eps = 0.1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("input_shape,eps", [((15, 2, 2, 2), 1e-6), ((10, 4), 0.1), ((20, 3, 2, 2), 1e-3)])
    def test_identity(self, input_shape, eps, device, dtype):
        """Assert that data can be recovered by the inverse transform."""
        data = torch.randn(*input_shape, device=device, dtype=dtype)
    
>       zca = kornia.enhance.ZCAWhitening(compute_inv=True, eps=eps).fit(data)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/enhance/zca.py:84: in fit
    T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[ 2.0557,  0.5761, -0.4805, -0.5998],
        [ 0.3233,  0.4632,  0.6128,  0.2906],
        [ 0.5038,  1.9498,...0.0790,  1.2737, -1.1325],
        [-0.0706, -2.8719,  0.3512,  0.5599],
        [-1.3893,  0.8475, -0.2830, -2.7812]])
dim = 0, unbiased = True, eps = 0.1, return_inverse = True

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
____________ TestZCA.test_identity[cpu-float32-input_shape2-0.001] _____________

self = <test_zca.TestZCA object at 0x77f5fc2fd5a0>, input_shape = (20, 3, 2, 2)
eps = 0.001, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("input_shape,eps", [((15, 2, 2, 2), 1e-6), ((10, 4), 0.1), ((20, 3, 2, 2), 1e-3)])
    def test_identity(self, input_shape, eps, device, dtype):
        """Assert that data can be recovered by the inverse transform."""
        data = torch.randn(*input_shape, device=device, dtype=dtype)
    
>       zca = kornia.enhance.ZCAWhitening(compute_inv=True, eps=eps).fit(data)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/enhance/zca.py:84: in fit
    T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[[[ 1.3855, -0.6773],
          [-0.0714,  0.4211]],

         [[-0.2572,  0.5109],
          [-0.2180, -0.538...    [[-0.6508, -1.4276],
          [-1.2709, -0.7409]],

         [[ 0.9716, -2.0445],
          [-0.8052,  0.5239]]]])
dim = 0, unbiased = True, eps = 0.001, return_inverse = True

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
_______________ TestZCA.test_grad_zca_individual_transforms[cpu] _______________

self = <test_zca.TestZCA object at 0x77f5fc2fd810>, device = device(type='cpu')

    def test_grad_zca_individual_transforms(self, device):
        """Check if the gradients of the transforms are correct w.r.t to the input data."""
        data = torch.tensor([[2, 0], [0, 1], [-2, 0], [0, -1]], device=device, dtype=torch.float64)
    
        def zca_T(x):
            return kornia.enhance.zca_mean(x)[0]
    
        def zca_mu(x):
            return kornia.enhance.zca_mean(x)[1]
    
        def zca_T_inv(x):
            return kornia.enhance.zca_mean(x, return_inverse=True)[2]
    
>       self.gradcheck(zca_T, (data,))

../publishablew/kornia/kornia/tests/enhance/test_zca.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/tests/enhance/test_zca.py:76: in zca_T
    return kornia.enhance.zca_mean(x)[0]
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[ 2.,  0.],
        [ 0.,  1.],
        [-2.,  0.],
        [ 0., -1.]], dtype=torch.float64, requires_grad=True)
dim = 0, unbiased = True, eps = 1e-06, return_inverse = False

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
_____________________ TestZCA.test_grad_zca_with_fit[cpu] ______________________

self = <test_zca.TestZCA object at 0x77f5fc2fdab0>, device = device(type='cpu')

    def test_grad_zca_with_fit(self, device):
        data = torch.tensor([[2, 0], [0, 1], [-2, 0], [0, -1]], device=device, dtype=torch.float64)
    
        def zca_fit(x):
            zca = kornia.enhance.ZCAWhitening(detach_transforms=False)
            return zca(x, include_fit=True)
    
>       self.gradcheck(zca_fit, (data,))

../publishablew/kornia/kornia/tests/enhance/test_zca.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/tests/enhance/test_zca.py:93: in zca_fit
    return zca(x, include_fit=True)
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/zca.py:109: in forward
    self.fit(x)
../publishablew/kornia/kornia/kornia/enhance/zca.py:84: in fit
    T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[ 2.,  0.],
        [ 0.,  1.],
        [-2.,  0.],
        [ 0., -1.]], dtype=torch.float64, requires_grad=True)
dim = 0, unbiased = True, eps = 1e-06, return_inverse = False

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
______________________ TestZCA.test_grad_detach_zca[cpu] _______________________

self = <test_zca.TestZCA object at 0x77f5fc2fdd50>, device = device(type='cpu')

    def test_grad_detach_zca(self, device):
        data = torch.tensor([[1, 0], [0, 1], [-2, 0], [0, -1]], device=device, dtype=torch.float64)
    
        zca = kornia.enhance.ZCAWhitening()
    
>       zca.fit(data)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/enhance/zca.py:84: in fit
    T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[ 1.,  0.],
        [ 0.,  1.],
        [-2.,  0.],
        [ 0., -1.]], dtype=torch.float64)
dim = 0, unbiased = True, eps = 1e-06, return_inverse = False

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
________________________ TestZCA.test_jit[cpu-float32] _________________________

self = <test_zca.TestZCA object at 0x77f5fc2fe350>, device = device(type='cpu')
dtype = torch.float32

    def test_jit(self, device, dtype):
        data = torch.rand(10, 3, 1, 2, device=device, dtype=dtype)
>       zca = kornia.enhance.ZCAWhitening().fit(data)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/enhance/zca.py:84: in fit
    T, mean, T_inv = zca_mean(x, self.dim, self.unbiased, self.eps, self.compute_inv)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[[[0.8433, 0.7338]],

         [[0.5501, 0.1905]],

         [[0.0559, 0.6253]]],


        [[[0.0576, 0.3518]...      [[0.6995, 0.0559]]],


        [[[0.4925, 0.3071]],

         [[0.6006, 0.0074]],

         [[0.5012, 0.0990]]]])
dim = 0, unbiased = True, eps = 1e-06, return_inverse = False

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
___________ TestZCA.test_zca_whiten_func_unbiased[cpu-float32-True] ____________

self = <test_zca.TestZCA object at 0x77f5fc2fe740>, unbiased = True
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("unbiased", [True, False])
    def test_zca_whiten_func_unbiased(self, unbiased, device, dtype):
        data = torch.tensor([[0, 1], [1, 0], [-1, 0], [0, -1]], device=device, dtype=dtype)
    
        if unbiased:
            unbiased_val = 1.5
        else:
            unbiased_val = 2.0
    
        expected = torch.sqrt(unbiased_val * torch.abs(data)) * torch.sign(data)
    
>       actual = kornia.enhance.zca_whiten(data, unbiased=unbiased)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/enhance/zca.py:243: in zca_whiten
    transform, mean, _ = zca_mean(inp, dim, unbiased, eps, False)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[ 0.,  1.],
        [ 1.,  0.],
        [-1.,  0.],
        [ 0., -1.]])
dim = 0, unbiased = True, eps = 1e-06, return_inverse = False

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
___________ TestZCA.test_zca_whiten_func_unbiased[cpu-float32-False] ___________

self = <test_zca.TestZCA object at 0x77f5fc2fe680>, unbiased = False
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("unbiased", [True, False])
    def test_zca_whiten_func_unbiased(self, unbiased, device, dtype):
        data = torch.tensor([[0, 1], [1, 0], [-1, 0], [0, -1]], device=device, dtype=dtype)
    
        if unbiased:
            unbiased_val = 1.5
        else:
            unbiased_val = 2.0
    
        expected = torch.sqrt(unbiased_val * torch.abs(data)) * torch.sign(data)
    
>       actual = kornia.enhance.zca_whiten(data, unbiased=unbiased)

../publishablew/kornia/kornia/tests/enhance/test_zca.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/enhance/zca.py:243: in zca_whiten
    transform, mean, _ = zca_mean(inp, dim, unbiased, eps, False)
../publishablew/kornia/kornia/kornia/enhance/zca.py:136: in zca_mean
    return zca_mean(inp, dim, unbiased, eps, return_inverse)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inp = tensor([[ 0.,  1.],
        [ 1.,  0.],
        [-1.,  0.],
        [ 0., -1.]])
dim = 0, unbiased = False, eps = 1e-06, return_inverse = False

    def zca_mean(inp, dim=0, unbiased=True, eps=1e-05, return_inverse=False):
        """
        Computes the ZCA whitening matrix and mean vector for a given input tensor.
    
        Parameters:
        - inp: np.ndarray, the input tensor.
        - dim: int, the dimension along which the samples are located.
        - unbiased: bool, whether to use the unbiased estimate of the covariance matrix.
        - eps: float, a small value for numerical stability.
        - return_inverse: bool, whether to return the inverse ZCA transform.
    
        Returns:
        - A tuple containing the ZCA matrix, the mean vector, and optionally the inverse ZCA matrix.
        """
        if not isinstance(inp, np.ndarray):
>           raise TypeError('Input must be a numpy ndarray.')
E           TypeError: Input must be a numpy ndarray.

../publishablew/kornia/kornia/kornia/enhance/temp.py:22: TypeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-True]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-False]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-0]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape0-1e-06]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape1-0.1]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape2-0.001]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_individual_transforms[cpu]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_with_fit[cpu]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_detach_zca[cpu]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_jit[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-True]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-False]
========================= 13 failed, 2 passed in 0.55s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'inductor', 'onnxrt', 'tvm', 'cudagraphs', None, 'openxla'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 15 items

../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-True] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-False] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-0] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape0-1e-06] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape1-0.1] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape2-0.001] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_individual_transforms[cpu] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_with_fit[cpu] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_detach_zca[cpu] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_not_fitted[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_not_fitted_inv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_jit[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-True] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-False] PASSED

============================== 15 passed in 0.23s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', None, 'tvm', 'inductor', 'onnxrt', 'openxla', 'jit', 'cudagraphs'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 15 items

../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-True] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_unbiased[cpu-float32-False] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-0] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_dim_args[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape0-1e-06] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape1-0.1] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_identity[cpu-float32-input_shape2-0.001] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_individual_transforms[cpu] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_zca_with_fit[cpu] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_grad_detach_zca[cpu] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_not_fitted[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_not_fitted_inv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_jit[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-True] PASSED
../publishablew/kornia/kornia/tests/enhance/test_zca.py::TestZCA::test_zca_whiten_func_unbiased[cpu-float32-False] PASSED

============================== 15 passed in 0.29s ==============================
