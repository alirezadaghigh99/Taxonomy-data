output file:
processed_deepchemso3_generators373.json
function:
so3_generators
Error Cases:
2024-12-26 19:19:58.776255: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1735258798.788024  890629 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1735258798.791542  890629 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-12-26 19:19:58.804367: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j1', '../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_commutation FAILED', 'FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_generators_shape', 'FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality', 'FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_commutation', '../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j0 FAILED', '../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property FAILED', '../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_generators_shape FAILED', 'FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j0', 'FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property', '../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j1 FAILED', '../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/deepchem/deepchem/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/deepchem/deepchem
configfile: setup.cfg
plugins: flaky-3.8.1
collecting ... collected 14 items

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device FAILED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_dtype_conversion PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_0 PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_2 PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality FAILED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_commutation FAILED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_generators_shape FAILED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j0 FAILED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j1 FAILED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_commutation PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_angular_momentum_one PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_shape PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_zero_momenta PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property FAILED

=================================== FAILURES ===================================
________ TestEquivarianceUtils.test_change_basis_real_to_complex_device ________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_change_basis_real_to_complex_device>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_change_basis_real_to_complex_device(self) -> None:
        # Test for device placement (CPU to CUDA)
        j = 1
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        Q = equivariance_utils.change_basis_real_to_complex(j, device=device)
>       self.assertEqual(Q.device, device)
E       AssertionError: device(type='cuda', index=0) != device(type='cuda')

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:111: AssertionError
___________________ TestEquivarianceUtils.test_orthogonality ___________________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_orthogonality>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_orthogonality(self):
        j = 2
        alpha = torch.tensor([0.2])
        beta = torch.tensor([0.1])
        gamma = torch.tensor([0.7])
    
>       D_matrix = equivariance_utils.wigner_D(j, alpha, beta, gamma)

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/deepchem/deepchem/deepchem/utils/equivariance_utils.py:287: in wigner_D
    X = so3_generators(k)
../publishablew/deepchem/deepchem/deepchem/utils/equivariance_utils.py:167: in so3_generators
    return so3_generators(k)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

k = 2

    def so3_generators(k):
        """
        Generate the generators of the special orthogonal group SO(3).
    
        Parameters
        ----------
        k : int
            The representation index, which determines the order of the representation.
    
        Returns
        -------
        torch.Tensor
            A stack of three SO(3) generators, corresponding to J_x, J_y, and J_z.
        """
        if k < 1:
            raise ValueError('The representation index k must be a positive integer.')
        J_x = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        J_y = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        J_z = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        for m in range(-k, k + 1):
            if m < k:
>               J_x[k + m, k + m + 1] = 0.5 * torch.sqrt((k - m) * (k + m + 1))
E               TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

../publishablew/deepchem/deepchem/deepchem/utils/temp.py:27: TypeError
__________________ TestEquivarianceUtils.test_so3_commutation __________________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_so3_commutation>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_so3_commutation(self):
        j_values = [0, 1, 2, 3, 4,
                    5]  # Test for multiple quantum angular momentum values
        for j in j_values:
            with self.subTest(j=j):
>               X = equivariance_utils.so3_generators(j)

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/deepchem/deepchem/deepchem/utils/equivariance_utils.py:167: in so3_generators
    return so3_generators(k)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

k = 0

    def so3_generators(k):
        """
        Generate the generators of the special orthogonal group SO(3).
    
        Parameters
        ----------
        k : int
            The representation index, which determines the order of the representation.
    
        Returns
        -------
        torch.Tensor
            A stack of three SO(3) generators, corresponding to J_x, J_y, and J_z.
        """
        if k < 1:
>           raise ValueError('The representation index k must be a positive integer.')
E           ValueError: The representation index k must be a positive integer.

../publishablew/deepchem/deepchem/deepchem/utils/temp.py:21: ValueError
_______________ TestEquivarianceUtils.test_so3_generators_shape ________________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_so3_generators_shape>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_so3_generators_shape(self):
        j_values = [1, 2, 3, 4, 5]
        for j in j_values:
            with self.subTest(j=j):
>               result = equivariance_utils.so3_generators(j)

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/deepchem/deepchem/deepchem/utils/equivariance_utils.py:167: in so3_generators
    return so3_generators(k)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

k = 1

    def so3_generators(k):
        """
        Generate the generators of the special orthogonal group SO(3).
    
        Parameters
        ----------
        k : int
            The representation index, which determines the order of the representation.
    
        Returns
        -------
        torch.Tensor
            A stack of three SO(3) generators, corresponding to J_x, J_y, and J_z.
        """
        if k < 1:
            raise ValueError('The representation index k must be a positive integer.')
        J_x = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        J_y = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        J_z = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        for m in range(-k, k + 1):
            if m < k:
>               J_x[k + m, k + m + 1] = 0.5 * torch.sqrt((k - m) * (k + m + 1))
E               TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

../publishablew/deepchem/deepchem/deepchem/utils/temp.py:27: TypeError
______________________ TestEquivarianceUtils.test_so3_j0 _______________________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_so3_j0>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_so3_j0(self):
        j = 0
>       result = equivariance_utils.so3_generators(j)

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/deepchem/deepchem/deepchem/utils/equivariance_utils.py:167: in so3_generators
    return so3_generators(k)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

k = 0

    def so3_generators(k):
        """
        Generate the generators of the special orthogonal group SO(3).
    
        Parameters
        ----------
        k : int
            The representation index, which determines the order of the representation.
    
        Returns
        -------
        torch.Tensor
            A stack of three SO(3) generators, corresponding to J_x, J_y, and J_z.
        """
        if k < 1:
>           raise ValueError('The representation index k must be a positive integer.')
E           ValueError: The representation index k must be a positive integer.

../publishablew/deepchem/deepchem/deepchem/utils/temp.py:21: ValueError
______________________ TestEquivarianceUtils.test_so3_j1 _______________________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_so3_j1>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_so3_j1(self):
        j = 1
>       result = equivariance_utils.so3_generators(j)

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/deepchem/deepchem/deepchem/utils/equivariance_utils.py:167: in so3_generators
    return so3_generators(k)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

k = 1

    def so3_generators(k):
        """
        Generate the generators of the special orthogonal group SO(3).
    
        Parameters
        ----------
        k : int
            The representation index, which determines the order of the representation.
    
        Returns
        -------
        torch.Tensor
            A stack of three SO(3) generators, corresponding to J_x, J_y, and J_z.
        """
        if k < 1:
            raise ValueError('The representation index k must be a positive integer.')
        J_x = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        J_y = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        J_z = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        for m in range(-k, k + 1):
            if m < k:
>               J_x[k + m, k + m + 1] = 0.5 * torch.sqrt((k - m) * (k + m + 1))
E               TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

../publishablew/deepchem/deepchem/deepchem/utils/temp.py:27: TypeError
_________________ TestEquivarianceUtils.test_unitary_property __________________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_unitary_property>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_unitary_property(self):
        j = 2
        alpha = torch.tensor([0.2])
        beta = torch.tensor([0.1])
        gamma = torch.tensor([0.7])
    
>       D_matrix = equivariance_utils.wigner_D(j, alpha, beta, gamma)

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/deepchem/deepchem/deepchem/utils/equivariance_utils.py:287: in wigner_D
    X = so3_generators(k)
../publishablew/deepchem/deepchem/deepchem/utils/equivariance_utils.py:167: in so3_generators
    return so3_generators(k)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

k = 2

    def so3_generators(k):
        """
        Generate the generators of the special orthogonal group SO(3).
    
        Parameters
        ----------
        k : int
            The representation index, which determines the order of the representation.
    
        Returns
        -------
        torch.Tensor
            A stack of three SO(3) generators, corresponding to J_x, J_y, and J_z.
        """
        if k < 1:
            raise ValueError('The representation index k must be a positive integer.')
        J_x = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        J_y = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        J_z = torch.zeros((2 * k + 1, 2 * k + 1), dtype=torch.float32)
        for m in range(-k, k + 1):
            if m < k:
>               J_x[k + m, k + m + 1] = 0.5 * torch.sqrt((k - m) * (k + m + 1))
E               TypeError: sqrt(): argument 'input' (position 1) must be Tensor, not int

../publishablew/deepchem/deepchem/deepchem/utils/temp.py:27: TypeError
=========================== short test summary info ============================
FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device
FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality
FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_commutation
FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_generators_shape
FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j0
FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j1
FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property
========================= 7 failed, 7 passed in 4.33s ==========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/deepchem/deepchem/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/deepchem/deepchem
configfile: setup.cfg
plugins: flaky-3.8.1
collecting ... collected 14 items

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device FAILED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_dtype_conversion PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_0 PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_2 PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_commutation PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_generators_shape PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j0 PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j1 PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_commutation PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_angular_momentum_one PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_shape PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_zero_momenta PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property PASSED

=================================== FAILURES ===================================
________ TestEquivarianceUtils.test_change_basis_real_to_complex_device ________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_change_basis_real_to_complex_device>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_change_basis_real_to_complex_device(self) -> None:
        # Test for device placement (CPU to CUDA)
        j = 1
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        Q = equivariance_utils.change_basis_real_to_complex(j, device=device)
>       self.assertEqual(Q.device, device)
E       AssertionError: device(type='cuda', index=0) != device(type='cuda')

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:111: AssertionError
=========================== short test summary info ============================
FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device
========================= 1 failed, 13 passed in 4.25s =========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/deepchem/deepchem/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/deepchem/deepchem
configfile: setup.cfg
plugins: flaky-3.8.1
collecting ... collected 14 items

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device FAILED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_dtype_conversion PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_0 PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_j_2 PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_orthogonality PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_commutation PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_generators_shape PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j0 PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_so3_j1 PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_commutation PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_angular_momentum_one PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_shape PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_su2_generators_zero_momenta PASSED
../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_unitary_property PASSED

=================================== FAILURES ===================================
________ TestEquivarianceUtils.test_change_basis_real_to_complex_device ________

self = <deepchem.utils.test.test_equivariance_utils.TestEquivarianceUtils testMethod=test_change_basis_real_to_complex_device>

    @unittest.skipIf(not has_torch, "torch is not available")
    def test_change_basis_real_to_complex_device(self) -> None:
        # Test for device placement (CPU to CUDA)
        j = 1
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        Q = equivariance_utils.change_basis_real_to_complex(j, device=device)
>       self.assertEqual(Q.device, device)
E       AssertionError: device(type='cuda', index=0) != device(type='cuda')

../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py:111: AssertionError
=========================== short test summary info ============================
FAILED ../publishablew/deepchem/deepchem/deepchem/utils/test/test_equivariance_utils.py::TestEquivarianceUtils::test_change_basis_real_to_complex_device
========================= 1 failed, 13 passed in 4.74s =========================
