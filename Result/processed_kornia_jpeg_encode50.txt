output file:
processed_kornia_jpeg_encode50.json
function:
_jpeg_encode
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32]', '../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32]', '../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] FAILED', '../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32]', '../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32]', '../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'inductor', 'jit', 'cudagraphs', 'onnxrt', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 11 items

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
_____________________ TestDiffJPEG.test_smoke[cpu-float32] _____________________

self = <test_jpeg.TestDiffJPEG object at 0x789fc57084f0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype) -> None:
        """This test standard usage."""
        B, H, W = 2, 32, 32
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
../publishablew/kornia/kornia/kornia/enhance/temp.py:45: in _jpeg_encode
    cr_blocks = block_split(cr_channel)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([], size=(2, 0, 4, 4, 8, 8)), block_size = 8

    def block_split(image, block_size=8):
        B, C, H, W = image.shape
        image = image.view(B, C, H // block_size, block_size, W // block_size, block_size)
        image = image.permute(0, 1, 2, 4, 3, 5).contiguous()
>       image = image.view(B, C, -1, block_size, block_size)
E       RuntimeError: cannot reshape tensor of 0 elements into shape [2, 0, -1, 8, 8] because the unspecified dimension size -1 can be any value and is ambiguous

../publishablew/kornia/kornia/kornia/enhance/temp.py:27: RuntimeError
______________ TestDiffJPEG.test_smoke_not_div_by_16[cpu-float32] ______________

self = <test_jpeg.TestDiffJPEG object at 0x789fc57088e0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke_not_div_by_16(self, device, dtype) -> None:
        """This test standard usage."""
        B, H, W = 2, 33, 33
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
../publishablew/kornia/kornia/kornia/enhance/temp.py:45: in _jpeg_encode
    cr_blocks = block_split(cr_channel)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([], size=(2, 0, 6, 6, 8, 8)), block_size = 8

    def block_split(image, block_size=8):
        B, C, H, W = image.shape
        image = image.view(B, C, H // block_size, block_size, W // block_size, block_size)
        image = image.permute(0, 1, 2, 4, 3, 5).contiguous()
>       image = image.view(B, C, -1, block_size, block_size)
E       RuntimeError: cannot reshape tensor of 0 elements into shape [2, 0, -1, 8, 8] because the unspecified dimension size -1 can be any value and is ambiguous

../publishablew/kornia/kornia/kornia/enhance/temp.py:27: RuntimeError
__________________ TestDiffJPEG.test_multi_batch[cpu-float32] __________________

self = <test_jpeg.TestDiffJPEG object at 0x789fc5708c10>
device = device(type='cpu'), dtype = torch.float32

    def test_multi_batch(self, device, dtype) -> None:
        """Here we test two batch dimensions."""
        B, H, W = 4, 32, 32
        img = torch.rand(B, B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(1,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(B * B, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(B * B, 8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
../publishablew/kornia/kornia/kornia/enhance/temp.py:45: in _jpeg_encode
    cr_blocks = block_split(cr_channel)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([], size=(16, 0, 4, 4, 8, 8)), block_size = 8

    def block_split(image, block_size=8):
        B, C, H, W = image.shape
        image = image.view(B, C, H // block_size, block_size, W // block_size, block_size)
        image = image.permute(0, 1, 2, 4, 3, 5).contiguous()
>       image = image.view(B, C, -1, block_size, block_size)
E       RuntimeError: cannot reshape tensor of 0 elements into shape [16, 0, -1, 8, 8] because the unspecified dimension size -1 can be any value and is ambiguous

../publishablew/kornia/kornia/kornia/enhance/temp.py:27: RuntimeError
___________________ TestDiffJPEG.test_custom_qt[cpu-float32] ___________________

self = <test_jpeg.TestDiffJPEG object at 0x789fc5708f40>
device = device(type='cpu'), dtype = torch.float32

    def test_custom_qt(self, device, dtype) -> None:
        """Here we test if we can handle custom quantization tables."""
        B, H, W = 4, 32, 32
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
../publishablew/kornia/kornia/kornia/enhance/temp.py:45: in _jpeg_encode
    cr_blocks = block_split(cr_channel)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([], size=(4, 0, 4, 4, 8, 8)), block_size = 8

    def block_split(image, block_size=8):
        B, C, H, W = image.shape
        image = image.view(B, C, H // block_size, block_size, W // block_size, block_size)
        image = image.permute(0, 1, 2, 4, 3, 5).contiguous()
>       image = image.view(B, C, -1, block_size, block_size)
E       RuntimeError: cannot reshape tensor of 0 elements into shape [4, 0, -1, 8, 8] because the unspecified dimension size -1 can be any value and is ambiguous

../publishablew/kornia/kornia/kornia/enhance/temp.py:27: RuntimeError
________________ TestDiffJPEG.test_non_batch_param[cpu-float32] ________________

self = <test_jpeg.TestDiffJPEG object at 0x789fc5709270>
device = device(type='cpu'), dtype = torch.float32

    def test_non_batch_param(self, device, dtype) -> None:
        """Here we test if we can handle non-batched JPEG parameters (JPEG quality and QT's)."""
        B, H, W = 3, 32, 32
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(1,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(1, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(1, 8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
../publishablew/kornia/kornia/kornia/enhance/temp.py:45: in _jpeg_encode
    cr_blocks = block_split(cr_channel)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([], size=(3, 0, 4, 4, 8, 8)), block_size = 8

    def block_split(image, block_size=8):
        B, C, H, W = image.shape
        image = image.view(B, C, H // block_size, block_size, W // block_size, block_size)
        image = image.permute(0, 1, 2, 4, 3, 5).contiguous()
>       image = image.view(B, C, -1, block_size, block_size)
E       RuntimeError: cannot reshape tensor of 0 elements into shape [3, 0, -1, 8, 8] because the unspecified dimension size -1 can be any value and is ambiguous

../publishablew/kornia/kornia/kornia/enhance/temp.py:27: RuntimeError
_________________ TestDiffJPEG.test_non_batch_inp[cpu-float32] _________________

self = <test_jpeg.TestDiffJPEG object at 0x789fc57095a0>
device = device(type='cpu'), dtype = torch.float32

    def test_non_batch_inp(self, device, dtype) -> None:
        """Here we test if we can handle non-batched inputs (input image, JPEG quality, and QT's)."""
        H, W = 32, 32
        img = torch.rand(3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(1,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(8, 8), device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality, qt_y, qt_c)

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
../publishablew/kornia/kornia/kornia/enhance/temp.py:45: in _jpeg_encode
    cr_blocks = block_split(cr_channel)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([], size=(1, 0, 4, 4, 8, 8)), block_size = 8

    def block_split(image, block_size=8):
        B, C, H, W = image.shape
        image = image.view(B, C, H // block_size, block_size, W // block_size, block_size)
        image = image.permute(0, 1, 2, 4, 3, 5).contiguous()
>       image = image.view(B, C, -1, block_size, block_size)
E       RuntimeError: cannot reshape tensor of 0 elements into shape [1, 0, -1, 8, 8] because the unspecified dimension size -1 can be any value and is ambiguous

../publishablew/kornia/kornia/kornia/enhance/temp.py:27: RuntimeError
__________________ TestDiffJPEG.test_cardinality[cpu-float32] __________________

self = <test_jpeg.TestDiffJPEG object at 0x789fc5709c00>
device = device(type='cpu'), dtype = torch.float32

    def test_cardinality(self, device, dtype) -> None:
        B, H, W = 1, 16, 16
        img = torch.zeros(B, 3, H, W, device=device, dtype=dtype)
        img[..., 4:-4, 4:-4] = 1.0
        jpeg_quality = torch.tensor([2.0], device=device, dtype=dtype)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
../publishablew/kornia/kornia/kornia/enhance/temp.py:45: in _jpeg_encode
    cr_blocks = block_split(cr_channel)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([], size=(1, 0, 2, 2, 8, 8)), block_size = 8

    def block_split(image, block_size=8):
        B, C, H, W = image.shape
        image = image.view(B, C, H // block_size, block_size, W // block_size, block_size)
        image = image.permute(0, 1, 2, 4, 3, 5).contiguous()
>       image = image.view(B, C, -1, block_size, block_size)
E       RuntimeError: cannot reshape tensor of 0 elements into shape [1, 0, -1, 8, 8] because the unspecified dimension size -1 can be any value and is ambiguous

../publishablew/kornia/kornia/kornia/enhance/temp.py:27: RuntimeError
____________________ TestDiffJPEG.test_module[cpu-float32] _____________________

self = <test_jpeg.TestDiffJPEG object at 0x789fc5709f30>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype) -> None:
        B, H, W = 4, 16, 16
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
        qt_y = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
        qt_c = torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype)
        diff_jpeg_module = kornia.enhance.JPEGCodecDifferentiable(qt_y, qt_c)
>       img_jpeg = diff_jpeg_module(img, jpeg_quality)

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py:1033: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:432: in forward
    image_rgb_jpeg: Tensor = jpeg_codec_differentiable(image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=self.quantization_table_c, quantization_table_y=self.quantization_table_y)
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
../publishablew/kornia/kornia/kornia/enhance/temp.py:45: in _jpeg_encode
    cr_blocks = block_split(cr_channel)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([], size=(4, 0, 2, 2, 8, 8)), block_size = 8

    def block_split(image, block_size=8):
        B, C, H, W = image.shape
        image = image.view(B, C, H // block_size, block_size, W // block_size, block_size)
        image = image.permute(0, 1, 2, 4, 3, 5).contiguous()
>       image = image.view(B, C, -1, block_size, block_size)
E       RuntimeError: cannot reshape tensor of 0 elements into shape [4, 0, -1, 8, 8] because the unspecified dimension size -1 can be any value and is ambiguous

../publishablew/kornia/kornia/kornia/enhance/temp.py:27: RuntimeError
_______________ TestDiffJPEG.test_module_with_param[cpu-float32] _______________

self = <test_jpeg.TestDiffJPEG object at 0x789fc57093f0>
device = device(type='cpu'), dtype = torch.float32

    def test_module_with_param(self, device, dtype) -> None:
        B, H, W = 4, 16, 16
        img = torch.rand(B, 3, H, W, device=device, dtype=dtype)
        jpeg_quality = torch.randint(low=0, high=100, size=(B,), device=device, dtype=dtype)
        qt_y = torch.nn.Parameter(torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype))
        qt_c = torch.nn.Parameter(torch.randint(low=1, high=255, size=(B, 8, 8), device=device, dtype=dtype))
        diff_jpeg_module = kornia.enhance.JPEGCodecDifferentiable(qt_y, qt_c)
>       img_jpeg = diff_jpeg_module(img, jpeg_quality)

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py:1044: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:432: in forward
    image_rgb_jpeg: Tensor = jpeg_codec_differentiable(image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=self.quantization_table_c, quantization_table_y=self.quantization_table_y)
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
../publishablew/kornia/kornia/kornia/enhance/temp.py:45: in _jpeg_encode
    cr_blocks = block_split(cr_channel)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([], size=(4, 0, 2, 2, 8, 8)), block_size = 8

    def block_split(image, block_size=8):
        B, C, H, W = image.shape
        image = image.view(B, C, H // block_size, block_size, W // block_size, block_size)
        image = image.permute(0, 1, 2, 4, 3, 5).contiguous()
>       image = image.view(B, C, -1, block_size, block_size)
E       RuntimeError: cannot reshape tensor of 0 elements into shape [4, 0, -1, 8, 8] because the unspecified dimension size -1 can be any value and is ambiguous

../publishablew/kornia/kornia/kornia/enhance/temp.py:27: RuntimeError
_______________________ TestDiffJPEG.test_gradcheck[cpu] _______________________

self = <test_jpeg.TestDiffJPEG object at 0x789fc5709ea0>
device = device(type='cpu')

    def test_gradcheck(self, device) -> None:
        """We test that the gradient matches the gradient of the reference implementation."""
        B, H, W = 1, 16, 16
        img = torch.zeros(B, 3, H, W, device=device, dtype=torch.float)
        img[..., 0, 4:-4, 4:-4] = 1.0
        img[..., 1, 4:-4, 4:-4] = 0.5
        img[..., 2, 4:-4, 4:-4] = 0.5
        img.requires_grad = True
        jpeg_quality = torch.tensor([10.0], device=device, dtype=torch.float, requires_grad=True)
>       img_jpeg = kornia.enhance.jpeg_codec_differentiable(img, jpeg_quality)

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py:1058: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/image.py:272: in _wrapper
    output = f(input, *args, **kwargs)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:340: in jpeg_codec_differentiable
    y_encoded, cb_encoded, cr_encoded = _jpeg_encode(image_rgb=image_rgb, jpeg_quality=jpeg_quality, quantization_table_c=quantization_table_c, quantization_table_y=quantization_table_y)
../publishablew/kornia/kornia/kornia/enhance/jpeg.py:166: in _jpeg_encode
    return _jpeg_encode(image_rgb, jpeg_quality, quantization_table_y, quantization_table_c)
../publishablew/kornia/kornia/kornia/enhance/temp.py:45: in _jpeg_encode
    cr_blocks = block_split(cr_channel)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([], size=(1, 0, 2, 2, 8, 8), grad_fn=<PermuteBackward0>)
block_size = 8

    def block_split(image, block_size=8):
        B, C, H, W = image.shape
        image = image.view(B, C, H // block_size, block_size, W // block_size, block_size)
        image = image.permute(0, 1, 2, 4, 3, 5).contiguous()
>       image = image.view(B, C, -1, block_size, block_size)
E       RuntimeError: cannot reshape tensor of 0 elements into shape [1, 0, -1, 8, 8] because the unspecified dimension size -1 can be any value and is ambiguous

../publishablew/kornia/kornia/kornia/enhance/temp.py:27: RuntimeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu]
========================= 10 failed, 1 passed in 0.49s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'jit', 'tvm', 'cudagraphs', 'openxla', 'inductor', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 11 items

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
    return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 11 passed, 1 warning in 0.21s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'onnxrt', 'jit', 'openxla', 'inductor', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 11 items

../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke_not_div_by_16[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_multi_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_custom_qt[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_param[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_non_batch_inp[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_cardinality[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_module_with_param[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/enhance/test_jpeg.py::TestDiffJPEG::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/enhance/test_jpeg.py::TestDiffJPEG::test_smoke[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
    return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 11 passed, 1 warning in 0.21s =========================
