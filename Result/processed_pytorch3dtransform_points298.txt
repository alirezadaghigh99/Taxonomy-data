output file:
processed_pytorch3dtransform_points298.json
function:
transform_points
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_off FAILED', '../pytorch3d/tests/test_transforms.py::TestTransform::test_scale_translate FAILED', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_dtype_propagation', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_to - Import...', '../pytorch3d/tests/test_transforms.py::TestTransform::test_dtype_propagation FAILED', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_eps', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_translate', '../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_eps FAILED', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_fail', '../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_on FAILED', '../pytorch3d/tests/test_transforms.py::TestTransform::test_stack FAILED', '../pytorch3d/tests/test_transforms.py::TestTransform::test_to FAILED', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_off', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_scale - Imp...', '../pytorch3d/tests/test_transforms.py::TestTransform::test_translate FAILED', '../pytorch3d/tests/test_transforms.py::TestTransform::test_scale FAILED', '../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_fail FAILED', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_stack - Imp...', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_axis_angle', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_scale_translate', '../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_axis_angle FAILED', 'FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_on'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 18 items

../pytorch3d/tests/test_transforms.py::TestTransform::test_clone PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_compose_fail PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_dtype_propagation FAILED
../pytorch3d/tests/test_transforms.py::TestTransform::test_get_item PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_get_se3 PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_init_with_custom_matrix PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_init_with_custom_matrix_errors PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_inverse PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_axis_angle FAILED
../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_off FAILED
../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_on FAILED
../pytorch3d/tests/test_transforms.py::TestTransform::test_scale FAILED
../pytorch3d/tests/test_transforms.py::TestTransform::test_scale_translate FAILED
../pytorch3d/tests/test_transforms.py::TestTransform::test_stack FAILED
../pytorch3d/tests/test_transforms.py::TestTransform::test_to FAILED
../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_eps FAILED
../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_fail FAILED
../pytorch3d/tests/test_transforms.py::TestTransform::test_translate FAILED

=================================== FAILURES ===================================
_____________________ TestTransform.test_dtype_propagation _____________________

self = <tests.test_transforms.TestTransform testMethod=test_dtype_propagation>

    def test_dtype_propagation(self):
        """
        Check that a given dtype is correctly passed along to child
        transformations.
        """
        # Use at least two dtypes so we avoid only testing on the
        # default dtype.
        for dtype in [torch.float32, torch.float64]:
            R = torch.tensor(
                [[0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0]],
                dtype=dtype,
            )
            tf = (
                Transform3d(dtype=dtype)
                .rotate(R)
                .rotate_axis_angle(
                    R[0],
                    "X",
                )
                .translate(3, 2, 1)
                .scale(0.5)
            )
    
            self.assertEqual(tf.dtype, dtype)
            for inner_tf in tf._transforms:
                self.assertEqual(inner_tf.dtype, dtype)
    
>           transformed = tf.transform_points(R)

../pytorch3d/tests/test_transforms.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.transforms.transform3d.Transform3d object at 0x774579f20b50>
points = tensor([[0., 1., 0.],
        [0., 0., 1.],
        [1., 0., 0.]])
eps = None

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
_____________________ TestTransform.test_rotate_axis_angle _____________________

self = <tests.test_transforms.TestTransform testMethod=test_rotate_axis_angle>

    def test_rotate_axis_angle(self):
        t = Transform3d().rotate_axis_angle(90.0, axis="Z")
        points = torch.tensor([[0.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0]]).view(
            1, 3, 3
        )
        normals = torch.tensor(
            [[1.0, 0.0, 0.0], [1.0, 0.0, 0.0], [1.0, 0.0, 0.0]]
        ).view(1, 3, 3)
>       points_out = t.transform_points(points)

../pytorch3d/tests/test_transforms.py:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.transforms.transform3d.Transform3d object at 0x7745724b2bb0>
points = tensor([[[0., 0., 0.],
         [0., 1., 0.],
         [0., 1., 1.]]])
eps = None

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
________________ TestTransform.test_rotate_check_rot_valid_off _________________

self = <tests.test_transforms.TestTransform testMethod=test_rotate_check_rot_valid_off>

    @mock.patch.dict(os.environ, {"PYTORCH3D_CHECK_ROTATION_MATRICES": "0"}, clear=True)
    def test_rotate_check_rot_valid_off(self):
        R = so3_exp_map(torch.randn((1, 3)))
        t = Transform3d().rotate(R)
        points = torch.tensor([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.5, 0.5, 0.0]]).view(
            1, 3, 3
        )
        normals = torch.tensor(
            [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [1.0, 1.0, 0.0]]
        ).view(1, 3, 3)
>       points_out = t.transform_points(points)

../pytorch3d/tests/test_transforms.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.transforms.transform3d.Transform3d object at 0x774627fa4880>
points = tensor([[[1.0000, 0.0000, 0.0000],
         [0.0000, 1.0000, 0.0000],
         [0.5000, 0.5000, 0.0000]]])
eps = None

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
_________________ TestTransform.test_rotate_check_rot_valid_on _________________

self = <tests.test_transforms.TestTransform testMethod=test_rotate_check_rot_valid_on>

    @mock.patch.dict(os.environ, {"PYTORCH3D_CHECK_ROTATION_MATRICES": "1"}, clear=True)
    def test_rotate_check_rot_valid_on(self):
        R = so3_exp_map(torch.randn((1, 3)))
        t = Transform3d().rotate(R)
        points = torch.tensor([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.5, 0.5, 0.0]]).view(
            1, 3, 3
        )
        normals = torch.tensor(
            [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [1.0, 1.0, 0.0]]
        ).view(1, 3, 3)
>       points_out = t.transform_points(points)

../pytorch3d/tests/test_transforms.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.transforms.transform3d.Transform3d object at 0x774627f90700>
points = tensor([[[1.0000, 0.0000, 0.0000],
         [0.0000, 1.0000, 0.0000],
         [0.5000, 0.5000, 0.0000]]])
eps = None

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
___________________________ TestTransform.test_scale ___________________________

self = <tests.test_transforms.TestTransform testMethod=test_scale>

    def test_scale(self):
        t = Transform3d().scale(2.0).scale(0.5, 0.25, 1.0)
        points = torch.tensor([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.5, 0.5, 0.0]]).view(
            1, 3, 3
        )
        normals = torch.tensor(
            [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [1.0, 1.0, 0.0]]
        ).view(1, 3, 3)
>       points_out = t.transform_points(points)

../pytorch3d/tests/test_transforms.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.transforms.transform3d.Transform3d object at 0x774626d76430>
points = tensor([[[1.0000, 0.0000, 0.0000],
         [0.0000, 1.0000, 0.0000],
         [0.5000, 0.5000, 0.0000]]])
eps = None

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
______________________ TestTransform.test_scale_translate ______________________

self = <tests.test_transforms.TestTransform testMethod=test_scale_translate>

    def test_scale_translate(self):
        t = Transform3d().scale(2, 1, 3).translate(1, 2, 3)
        points = torch.tensor([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.5, 0.5, 0.0]]).view(
            1, 3, 3
        )
        normals = torch.tensor(
            [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [1.0, 1.0, 0.0]]
        ).view(1, 3, 3)
>       points_out = t.transform_points(points)

../pytorch3d/tests/test_transforms.py:256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.transforms.transform3d.Transform3d object at 0x774572461580>
points = tensor([[[1.0000, 0.0000, 0.0000],
         [0.0000, 1.0000, 0.0000],
         [0.5000, 0.5000, 0.0000]]])
eps = None

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
___________________________ TestTransform.test_stack ___________________________

self = <tests.test_transforms.TestTransform testMethod=test_stack>

    def test_stack(self):
        rotations = random_rotations(3)
        transform3 = Transform3d().rotate(rotations).translate(torch.full((3, 3), 0.3))
        transform1 = Scale(37)
        transform4 = transform1.stack(transform3)
        self.assertEqual(len(transform1), 1)
        self.assertEqual(len(transform3), 3)
        self.assertEqual(len(transform4), 4)
        self.assertClose(
            transform4.get_matrix(),
            torch.cat([transform1.get_matrix(), transform3.get_matrix()]),
        )
        points = torch.rand(4, 5, 3)
        new_points_expect = torch.cat(
            [
>               transform1.transform_points(points[:1]),
                transform3.transform_points(points[1:]),
            ]
        )

../pytorch3d/tests/test_transforms.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.transforms.transform3d.Scale object at 0x774626d76790>
points = tensor([[[0.1053, 0.2695, 0.3588],
         [0.1994, 0.5472, 0.0062],
         [0.9516, 0.0753, 0.8860],
         [0.5832, 0.3376, 0.8090],
         [0.5779, 0.9040, 0.5547]]])
eps = None

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
____________________________ TestTransform.test_to _____________________________

self = <tests.test_transforms.TestTransform testMethod=test_to>

    def test_to(self):
        tr = Translate(torch.FloatTensor([[1.0, 2.0, 3.0]]))
        R = torch.FloatTensor([[0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0]])
        R = Rotate(R)
        t = Transform3d().compose(R, tr)
    
        cpu_device = torch.device("cpu")
    
        cpu_t = t.to("cpu")
        self.assertEqual(cpu_device, cpu_t.device)
        self.assertEqual(cpu_device, t.device)
        self.assertEqual(torch.float32, cpu_t.dtype)
        self.assertEqual(torch.float32, t.dtype)
        self.assertIs(t, cpu_t)
    
        cpu_t = t.to(cpu_device)
        self.assertEqual(cpu_device, cpu_t.device)
        self.assertEqual(cpu_device, t.device)
        self.assertEqual(torch.float32, cpu_t.dtype)
        self.assertEqual(torch.float32, t.dtype)
        self.assertIs(t, cpu_t)
    
        cpu_t = t.to(dtype=torch.float64, device=cpu_device)
        self.assertEqual(cpu_device, cpu_t.device)
        self.assertEqual(cpu_device, t.device)
        self.assertEqual(torch.float64, cpu_t.dtype)
        self.assertEqual(torch.float32, t.dtype)
        self.assertIsNot(t, cpu_t)
    
        cuda_device = torch.device("cuda:0")
    
        cuda_t = t.to("cuda:0")
        self.assertEqual(cuda_device, cuda_t.device)
        self.assertEqual(cpu_device, t.device)
        self.assertEqual(torch.float32, cuda_t.dtype)
        self.assertEqual(torch.float32, t.dtype)
        self.assertIsNot(t, cuda_t)
    
        cuda_t = t.to(cuda_device)
        self.assertEqual(cuda_device, cuda_t.device)
        self.assertEqual(cpu_device, t.device)
        self.assertEqual(torch.float32, cuda_t.dtype)
        self.assertEqual(torch.float32, t.dtype)
        self.assertIsNot(t, cuda_t)
    
        cuda_t = t.to(dtype=torch.float64, device=cuda_device)
        self.assertEqual(cuda_device, cuda_t.device)
        self.assertEqual(cpu_device, t.device)
        self.assertEqual(torch.float64, cuda_t.dtype)
        self.assertEqual(torch.float32, t.dtype)
        self.assertIsNot(t, cuda_t)
    
        cpu_points = torch.rand(9, 3)
        cuda_points = cpu_points.cuda()
        for _ in range(3):
            t = t.cpu()
>           t.transform_points(cpu_points)

../pytorch3d/tests/test_transforms.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.transforms.transform3d.Transform3d object at 0x774579ee2880>
points = tensor([[0.8823, 0.9150, 0.3829],
        [0.9593, 0.3904, 0.6009],
        [0.2566, 0.7936, 0.9408],
        [0.1332,...0.8854, 0.5739],
        [0.2666, 0.6274, 0.2696],
        [0.4414, 0.2969, 0.8317],
        [0.1053, 0.2695, 0.3588]])
eps = None

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
___________________ TestTransform.test_transform_points_eps ____________________

self = <tests.test_transforms.TestTransform testMethod=test_transform_points_eps>

    def test_transform_points_eps(self):
        t1 = Transform3d()
        persp_proj = [
            [
                [1.0, 0.0, 0.0, 0.0],
                [0.0, 1.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 1.0],
                [0.0, 0.0, 1.0, 0.0],
            ]
        ]
        t1._matrix = torch.FloatTensor(persp_proj)
        points = torch.tensor(
            [[0.0, 1.0, 0.0], [0.0, 0.0, 1e-5], [-1.0, 0.0, 1e-5]]
        ).view(
            1, 3, 3
        )  # a set of points with z-coord very close to 0
    
>       proj = t1.transform_points(points)

../pytorch3d/tests/test_transforms.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.transforms.transform3d.Transform3d object at 0x77457238a640>
points = tensor([[[ 0.0000e+00,  1.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00,  1.0000e-05],
         [-1.0000e+00,  0.0000e+00,  1.0000e-05]]])
eps = None

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
___________________ TestTransform.test_transform_points_fail ___________________

self = <tests.test_transforms.TestTransform testMethod=test_transform_points_fail>

    def test_transform_points_fail(self):
        t1 = Scale(0.1, 0.1, 0.1)
        P = 7
        with self.assertRaises(ValueError):
>           t1.transform_points(torch.randn(P))

../pytorch3d/tests/test_transforms.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
_________________________ TestTransform.test_translate _________________________

self = <tests.test_transforms.TestTransform testMethod=test_translate>

    def test_translate(self):
        t = Transform3d().translate(1, 2, 3)
        points = torch.tensor([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.5, 0.5, 0.0]]).view(
            1, 3, 3
        )
        normals = torch.tensor(
            [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [1.0, 1.0, 0.0]]
        ).view(1, 3, 3)
>       points_out = t.transform_points(points)

../pytorch3d/tests/test_transforms.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.transforms.transform3d.Transform3d object at 0x774626d693a0>
points = tensor([[[1.0000, 0.0000, 0.0000],
         [0.0000, 1.0000, 0.0000],
         [0.5000, 0.5000, 0.0000]]])
eps = None

    def transform_points(self, points, eps: Optional[float]=None) -> torch.Tensor:
>       from .temp import transform_points
E       ImportError: cannot import name 'transform_points' from 'pytorch3d.transforms.temp' (/local/data0/moved_data/pytorch3d/pytorch3d/transforms/temp.py)

../pytorch3d/pytorch3d/transforms/transform3d.py:328: ImportError
=========================== short test summary info ============================
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_dtype_propagation
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_axis_angle
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_off
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_on
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_scale - Imp...
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_scale_translate
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_stack - Imp...
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_to - Import...
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_eps
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_fail
FAILED ../pytorch3d/tests/test_transforms.py::TestTransform::test_translate
========================= 11 failed, 7 passed in 1.63s =========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 18 items

../pytorch3d/tests/test_transforms.py::TestTransform::test_clone PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_compose_fail PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_dtype_propagation PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_get_item PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_get_se3 PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_init_with_custom_matrix PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_init_with_custom_matrix_errors PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_inverse PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_axis_angle PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_off PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_on PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_scale PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_scale_translate PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_stack PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_to PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_eps PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_fail PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_translate PASSED

============================== 18 passed in 1.34s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 18 items

../pytorch3d/tests/test_transforms.py::TestTransform::test_clone PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_compose_fail PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_dtype_propagation PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_get_item PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_get_se3 PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_init_with_custom_matrix PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_init_with_custom_matrix_errors PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_inverse PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_axis_angle PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_off PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_rotate_check_rot_valid_on PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_scale PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_scale_translate PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_stack PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_to PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_eps PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_transform_points_fail PASSED
../pytorch3d/tests/test_transforms.py::TestTransform::test_translate PASSED

============================== 18 passed in 1.42s ==============================
