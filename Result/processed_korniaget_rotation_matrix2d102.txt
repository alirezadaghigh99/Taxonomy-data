output file:
processed_korniaget_rotation_matrix2d102.json
function:
get_rotation_matrix2d
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-5]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-2]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-1]', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-5] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-5] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-1]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-1]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-5]', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-2] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-2] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-2] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_gradcheck[cpu-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_gradcheck[cpu-1]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-2]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-5]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-2]', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-5] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'cudagraphs', 'inductor', 'tvm', 'jit', 'openxla', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 10 items

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-5] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-5] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-5] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_gradcheck[cpu-1] FAILED

=================================== FAILURES ===================================
___________ TestRotationMatrix2d.test_90deg_rotation[cpu-float32-1] ____________

self = <test_imgwarp.TestRotationMatrix2d object at 0x7ac830706980>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_90deg_rotation(self, batch_size, device, dtype):
        # generate input data
        center_base = torch.zeros(batch_size, 2, device=device, dtype=dtype)
        angle_base = torch.ones(batch_size, device=device, dtype=dtype)
        scale_base = torch.ones(batch_size, 2, device=device, dtype=dtype)
    
        # 90 deg rotation
        center = center_base
        angle = 90.0 * angle_base
        scale = scale_base
        M = kornia.geometry.get_rotation_matrix2d(center, angle, scale)
    
        for i in range(batch_size):
            self.assert_close(M[i, 0, 0].item(), 0.0, rtol=1e-4, atol=1e-4)
>           self.assert_close(M[i, 0, 1].item(), 1.0, rtol=1e-4, atol=1e-4)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = -1.0, expected = 1.0, rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Scalars are not close!
E       
E       Expected 1.0 but got -1.0.
E       Absolute difference: 2.0 (up to 0.0001 allowed)
E       Relative difference: 2.0 (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___________ TestRotationMatrix2d.test_90deg_rotation[cpu-float32-2] ____________

self = <test_imgwarp.TestRotationMatrix2d object at 0x7ac8307068f0>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_90deg_rotation(self, batch_size, device, dtype):
        # generate input data
        center_base = torch.zeros(batch_size, 2, device=device, dtype=dtype)
        angle_base = torch.ones(batch_size, device=device, dtype=dtype)
        scale_base = torch.ones(batch_size, 2, device=device, dtype=dtype)
    
        # 90 deg rotation
        center = center_base
        angle = 90.0 * angle_base
        scale = scale_base
        M = kornia.geometry.get_rotation_matrix2d(center, angle, scale)
    
        for i in range(batch_size):
            self.assert_close(M[i, 0, 0].item(), 0.0, rtol=1e-4, atol=1e-4)
>           self.assert_close(M[i, 0, 1].item(), 1.0, rtol=1e-4, atol=1e-4)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = -1.0, expected = 1.0, rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Scalars are not close!
E       
E       Expected 1.0 but got -1.0.
E       Absolute difference: 2.0 (up to 0.0001 allowed)
E       Relative difference: 2.0 (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___________ TestRotationMatrix2d.test_90deg_rotation[cpu-float32-5] ____________

self = <test_imgwarp.TestRotationMatrix2d object at 0x7ac830706b90>
batch_size = 5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_90deg_rotation(self, batch_size, device, dtype):
        # generate input data
        center_base = torch.zeros(batch_size, 2, device=device, dtype=dtype)
        angle_base = torch.ones(batch_size, device=device, dtype=dtype)
        scale_base = torch.ones(batch_size, 2, device=device, dtype=dtype)
    
        # 90 deg rotation
        center = center_base
        angle = 90.0 * angle_base
        scale = scale_base
        M = kornia.geometry.get_rotation_matrix2d(center, angle, scale)
    
        for i in range(batch_size):
            self.assert_close(M[i, 0, 0].item(), 0.0, rtol=1e-4, atol=1e-4)
>           self.assert_close(M[i, 0, 1].item(), 1.0, rtol=1e-4, atol=1e-4)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = -1.0, expected = 1.0, rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Scalars are not close!
E       
E       Expected 1.0 but got -1.0.
E       Absolute difference: 2.0 (up to 0.0001 allowed)
E       Relative difference: 2.0 (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
______ TestRotationMatrix2d.test_rotation_90deg_and_scale[cpu-float32-1] _______

self = <test_imgwarp.TestRotationMatrix2d object at 0x7ac830706f20>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_rotation_90deg_and_scale(self, batch_size, device, dtype):
        # generate input data
        center_base = torch.zeros(batch_size, 2, device=device, dtype=dtype)
        angle_base = torch.ones(batch_size, device=device, dtype=dtype)
        scale_base = torch.ones(batch_size, 2, device=device, dtype=dtype)
    
        # 90 deg rotation + 2x scale
        center = center_base
        angle = 90.0 * angle_base
        scale = 2.0 * scale_base
        M = kornia.geometry.get_rotation_matrix2d(center, angle, scale)
    
        for i in range(batch_size):
            self.assert_close(M[i, 0, 0].item(), 0.0, rtol=1e-4, atol=1e-4)
>           self.assert_close(M[i, 0, 1].item(), 2.0, rtol=1e-4, atol=1e-4)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = -2.0, expected = 2.0, rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Scalars are not close!
E       
E       Expected 2.0 but got -2.0.
E       Absolute difference: 4.0 (up to 0.0001 allowed)
E       Relative difference: 2.0 (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
______ TestRotationMatrix2d.test_rotation_90deg_and_scale[cpu-float32-2] _______

self = <test_imgwarp.TestRotationMatrix2d object at 0x7ac830706e60>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_rotation_90deg_and_scale(self, batch_size, device, dtype):
        # generate input data
        center_base = torch.zeros(batch_size, 2, device=device, dtype=dtype)
        angle_base = torch.ones(batch_size, device=device, dtype=dtype)
        scale_base = torch.ones(batch_size, 2, device=device, dtype=dtype)
    
        # 90 deg rotation + 2x scale
        center = center_base
        angle = 90.0 * angle_base
        scale = 2.0 * scale_base
        M = kornia.geometry.get_rotation_matrix2d(center, angle, scale)
    
        for i in range(batch_size):
            self.assert_close(M[i, 0, 0].item(), 0.0, rtol=1e-4, atol=1e-4)
>           self.assert_close(M[i, 0, 1].item(), 2.0, rtol=1e-4, atol=1e-4)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = -2.0, expected = 2.0, rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Scalars are not close!
E       
E       Expected 2.0 but got -2.0.
E       Absolute difference: 4.0 (up to 0.0001 allowed)
E       Relative difference: 2.0 (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
______ TestRotationMatrix2d.test_rotation_90deg_and_scale[cpu-float32-5] _______

self = <test_imgwarp.TestRotationMatrix2d object at 0x7ac830707160>
batch_size = 5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_rotation_90deg_and_scale(self, batch_size, device, dtype):
        # generate input data
        center_base = torch.zeros(batch_size, 2, device=device, dtype=dtype)
        angle_base = torch.ones(batch_size, device=device, dtype=dtype)
        scale_base = torch.ones(batch_size, 2, device=device, dtype=dtype)
    
        # 90 deg rotation + 2x scale
        center = center_base
        angle = 90.0 * angle_base
        scale = 2.0 * scale_base
        M = kornia.geometry.get_rotation_matrix2d(center, angle, scale)
    
        for i in range(batch_size):
            self.assert_close(M[i, 0, 0].item(), 0.0, rtol=1e-4, atol=1e-4)
>           self.assert_close(M[i, 0, 1].item(), 2.0, rtol=1e-4, atol=1e-4)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = -2.0, expected = 2.0, rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Scalars are not close!
E       
E       Expected 2.0 but got -2.0.
E       Absolute difference: 4.0 (up to 0.0001 allowed)
E       Relative difference: 2.0 (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___________ TestRotationMatrix2d.test_rotation_45deg[cpu-float32-1] ____________

self = <test_imgwarp.TestRotationMatrix2d object at 0x7ac8307074f0>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_rotation_45deg(self, batch_size, device, dtype):
        # generate input data
        center_base = torch.zeros(batch_size, 2, device=device, dtype=dtype)
        angle_base = torch.ones(batch_size, device=device, dtype=dtype)
        scale_base = torch.ones(batch_size, 2, device=device, dtype=dtype)
    
        # 45 deg rotation
        center = center_base
        angle = 45.0 * angle_base
        scale = scale_base
    
        M = kornia.geometry.get_rotation_matrix2d(center, angle, scale)
    
        for i in range(batch_size):
            self.assert_close(M[i, 0, 0].item(), 0.7071)
>           self.assert_close(M[i, 0, 1].item(), 0.7071)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = -0.7071067690849304, expected = 0.7071, rtol = 0.0001, atol = 1e-05
kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Scalars are not close!
E       
E       Expected 0.7071 but got -0.7071067690849304.
E       Absolute difference: 1.4142067690849305 (up to 1e-05 allowed)
E       Relative difference: 2.0000095730235192 (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___________ TestRotationMatrix2d.test_rotation_45deg[cpu-float32-2] ____________

self = <test_imgwarp.TestRotationMatrix2d object at 0x7ac830707430>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_rotation_45deg(self, batch_size, device, dtype):
        # generate input data
        center_base = torch.zeros(batch_size, 2, device=device, dtype=dtype)
        angle_base = torch.ones(batch_size, device=device, dtype=dtype)
        scale_base = torch.ones(batch_size, 2, device=device, dtype=dtype)
    
        # 45 deg rotation
        center = center_base
        angle = 45.0 * angle_base
        scale = scale_base
    
        M = kornia.geometry.get_rotation_matrix2d(center, angle, scale)
    
        for i in range(batch_size):
            self.assert_close(M[i, 0, 0].item(), 0.7071)
>           self.assert_close(M[i, 0, 1].item(), 0.7071)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = -0.7071067690849304, expected = 0.7071, rtol = 0.0001, atol = 1e-05
kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Scalars are not close!
E       
E       Expected 0.7071 but got -0.7071067690849304.
E       Absolute difference: 1.4142067690849305 (up to 1e-05 allowed)
E       Relative difference: 2.0000095730235192 (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___________ TestRotationMatrix2d.test_rotation_45deg[cpu-float32-5] ____________

self = <test_imgwarp.TestRotationMatrix2d object at 0x7ac830707730>
batch_size = 5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 5])
    def test_rotation_45deg(self, batch_size, device, dtype):
        # generate input data
        center_base = torch.zeros(batch_size, 2, device=device, dtype=dtype)
        angle_base = torch.ones(batch_size, device=device, dtype=dtype)
        scale_base = torch.ones(batch_size, 2, device=device, dtype=dtype)
    
        # 45 deg rotation
        center = center_base
        angle = 45.0 * angle_base
        scale = scale_base
    
        M = kornia.geometry.get_rotation_matrix2d(center, angle, scale)
    
        for i in range(batch_size):
            self.assert_close(M[i, 0, 0].item(), 0.7071)
>           self.assert_close(M[i, 0, 1].item(), 0.7071)

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = -0.7071067690849304, expected = 0.7071, rtol = 0.0001, atol = 1e-05
kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Scalars are not close!
E       
E       Expected 0.7071 but got -0.7071067690849304.
E       Absolute difference: 1.4142067690849305 (up to 1e-05 allowed)
E       Relative difference: 2.0000095730235192 (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
__________________ TestRotationMatrix2d.test_gradcheck[cpu-1] __________________

self = <test_imgwarp.TestRotationMatrix2d object at 0x7ac830707a30>
batch_size = 1, device = device(type='cpu')

    @pytest.mark.parametrize("batch_size", [1])
    def test_gradcheck(self, batch_size, device):
        dtype = torch.float64
        # generate input data
        center_base = torch.zeros(batch_size, 2, device=device, dtype=dtype)
        angle_base = torch.ones(batch_size, device=device, dtype=dtype)
        scale_base = torch.ones(batch_size, 2, device=device, dtype=dtype)
    
        # 45 deg rotation
        center = center_base
        angle = 45.0 * angle_base
        scale = scale_base
    
        # evaluate function gradient
>       self.gradcheck(kornia.geometry.get_rotation_matrix2d, (center, angle, scale))

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2081: in _gradcheck_helper
    _gradcheck_real_imag(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1491: in _gradcheck_real_imag
    gradcheck_fn(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1921: in _fast_gradcheck
    analytical_vJu = _get_analytical_vJu_backward_mode(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:804: in _get_analytical_vJu_backward_mode
    all_vJ = _check_analytical_jacobian_attributes(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:772: in _check_analytical_jacobian_attributes
    vjps1 = _get_analytical_vjps_wrt_specific_output(vjp_fn, output.clone(), v)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:907: in _get_analytical_vjps_wrt_specific_output
    grad_inputs = vjp_fn(v.reshape(sample_output.shape))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:766: in vjp_fn
    return torch.autograd.grad(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/__init__.py:496: in grad
    result = _engine_run_backward(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

t_outputs = (tensor([[[ 0.7071, -0.7071,  0.0000],
         [ 0.7071,  0.7071,  0.0000]]], dtype=torch.float64,
       grad_fn=<CopySlices>),)
args = ((tensor([[[0.3356, 0.0528, 0.7125],
         [0.5242, 0.3135, 0.0620]]], dtype=torch.float64),), True, False, (tensor...or([45.], dtype=torch.float64, requires_grad=True), tensor([[1., 1.]], dtype=torch.float64, requires_grad=True)), True)
kwargs = {'accumulate_grad': False}, attach_logging_hooks = False

    def _engine_run_backward(
        t_outputs: Sequence[Union[torch.Tensor, GradientEdge]],
        *args: Any,
        **kwargs: Any,
    ) -> Tuple[torch.Tensor, ...]:
        attach_logging_hooks = log.getEffectiveLevel() <= logging.DEBUG
        if attach_logging_hooks:
            unregister_hooks = _register_logging_hooks_on_whole_graph(t_outputs)
        try:
>           return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
                t_outputs, *args, **kwargs
            )  # Calls into the C++ engine to run the backward pass
E           RuntimeError: one of the variables needed for gradient computation has been modified by an inplace operation: [torch.DoubleTensor [1]], which is output 0 of AsStridedBackward0, is at version 6; expected version 5 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/graph.py:825: RuntimeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-5]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-5]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-5]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_gradcheck[cpu-1]
============================== 10 failed in 0.48s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'cudagraphs', 'inductor', 'openxla', 'onnxrt', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 10 items

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_gradcheck[cpu-1] PASSED

============================== 10 passed in 0.17s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'inductor', 'cudagraphs', 'openxla', 'jit', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 10 items

../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_90deg_rotation[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_90deg_and_scale[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_rotation_45deg[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_imgwarp.py::TestRotationMatrix2d::test_gradcheck[cpu-1] PASSED

============================== 10 passed in 0.21s ==============================
