output file:
processed_pennylane_coefficients_no_filter171.json
function:
_coefficients_no_filter
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-False]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-False] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-False]', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-True]', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-True]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-True] FAILED', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-False] FAILED', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-True] FAILED', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-True] FAILED', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-True] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-True]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-False] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-True]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-True] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-True]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-False] FAILED', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-False] FAILED', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-True] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-True]', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-False]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-True] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-False]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-False] FAILED', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-False] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-False]', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-True]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-True] FAILED', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-True] FAILED', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-False] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-False]', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-True]', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-False]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-False] FAILED', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-False] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-False]', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-True]', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-False]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-False] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-False]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-True] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-True]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-True] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-False]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-False] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-False]', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-True]', '../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-True] FAILED', 'FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-True]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pennylane/pennylane/venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /local/data0/moved_data/publishablew/pennylane/pennylane/tests
configfile: pytest.ini
plugins: flaky-3.8.1, xdist-3.6.1, split-0.10.0, rng-1.0.0, mock-3.14.0, forked-1.6.0, cov-6.0.0, benchmark-5.1.0
collecting ... collected 24 items

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-True] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-False] FAILED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-True] FAILED

=================================== FAILURES ===================================
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f30e50>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 1, expected_coeffs = tensor([0. , 0.5, 0.5], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (1,), use_broadcasting = False

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f450d0>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 1, expected_coeffs = tensor([0. , 0.5, 0.5], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (1,), use_broadcasting = True

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f47610>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 2
expected_coeffs = tensor([0. , 0.5, 0. , 0. , 0.5], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (2,), use_broadcasting = False

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f47750>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 2
expected_coeffs = tensor([0. , 0.5, 0. , 0. , 0.5], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (2,), use_broadcasting = True

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f47910>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (1,)
expected_coeffs = tensor([ 0.+0.j ,  0.+0.5j, -0.-0.5j], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (1,), use_broadcasting = False

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f47b90>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (1,)
expected_coeffs = tensor([ 0.+0.j ,  0.+0.5j, -0.-0.5j], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (1,), use_broadcasting = True

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f47e10>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 3
expected_coeffs = tensor([ 0.+0.j ,  0.+0.5j,  0.+0.j ,  0.+0.j ,  0.+0.j ,  0.+0.j ,
        -0.-0.5j], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (3,), use_broadcasting = False

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5c0d0>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 3
expected_coeffs = tensor([ 0.+0.j ,  0.+0.5j,  0.+0.j ,  0.+0.j ,  0.+0.j ,  0.+0.j ,
        -0.-0.5j], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (3,), use_broadcasting = True

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5c350>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 2
expected_coeffs = tensor([0.5 , 0.  , 0.25, 0.25, 0.  ], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (2,), use_broadcasting = False

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5c590>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 2
expected_coeffs = tensor([0.5 , 0.  , 0.25, 0.25, 0.  ], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (2,), use_broadcasting = True

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5c810>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 4
expected_coeffs = tensor([0.5 , 0.  , 0.25, 0.  , 0.  , 0.  , 0.  , 0.25, 0.  ], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (4,), use_broadcasting = False

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5cad0>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 4
expected_coeffs = tensor([0.5 , 0.  , 0.25, 0.  , 0.  , 0.  , 0.  , 0.25, 0.  ], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (4,), use_broadcasting = True

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5cdd0>
circuit = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = (2,)
expected_coeffs = tensor([0.5 , 0.  , 0.25, 0.25, 0.  ], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = (2,), use_broadcasting = False

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5d0d0>
circuit = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = (2,)
expected_coeffs = tensor([0.5 , 0.  , 0.25, 0.25, 0.  ], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = (2,), use_broadcasting = True

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5d3d0>
circuit = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = 3
expected_coeffs = tensor([0.5 , 0.  , 0.25, 0.  , 0.  , 0.25, 0.  ], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = (3,), use_broadcasting = False

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5d6d0>
circuit = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = 3
expected_coeffs = tensor([0.5 , 0.  , 0.25, 0.  , 0.  , 0.25, 0.  ], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (circuit_one_qubit_one_param_rx, 1, np.array([0, 0.5, 0.5])),
            (circuit_one_qubit_one_param_rx, 2, np.array([0, 0.5, 0, 0, 0.5])),
            (circuit_one_qubit_one_param_h_ry, (1,), np.array([0, 0.5j, -0.5j])),
            (
                circuit_one_qubit_one_param_h_ry,
                3,
                np.array([0, 0.5j, 0, 0, 0, 0, -0.5j]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                2,
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_one_qubit_one_param_rx_ry,
                4,
                np.array([0.5, 0, 0.25, 0, 0, 0, 0, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                (2,),
                np.array([0.5, 0, 0.25, 0.25, 0]),
            ),
            (
                circuit_two_qubits_repeated_param,
                3,
                np.array([0.5, 0, 0.25, 0, 0, 0.25, 0]),
            ),
        ],
    )
    def test_coefficients_one_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

f = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = (3,), use_broadcasting = True

    def _coefficients_no_filter(f, degree, use_broadcasting=True):
        if isinstance(degree, int):
            d = degree
            k_values = np.arange(-d, d + 1)
        elif isinstance(degree, tuple) and len(degree) == 2:
            d1, d2 = degree
            k_values = np.array([(k1, k2) for k1 in range(-d1, d1 + 1) for k2 in range(-d2, d2 + 1)])
        else:
>           raise ValueError('degree must be an integer or a tuple of two integers')
E           ValueError: degree must be an integer or a tuple of two integers

../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:13: ValueError
_ TestFourierCoefficientCircuits.test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5e450>
circuit = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = 1
expected_coeffs = tensor([[0.  , 0.  , 0.  ],
        [0.  , 0.25, 0.25],
        [0.  , 0.25, 0.25]], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (
                circuit_two_qubits_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_two_qubits_two_params,
                (1, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                (2, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0, 0], [0, 0, 0], [0, 0.25, 0.25]]),
            ),
        ],
    )
    def test_coefficients_two_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:20: in _coefficients_no_filter
    fx = np.array([f(xi) for xi in x])
../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:20: in <listcomp>
    fx = np.array([f(xi) for xi in x])
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:976: in __call__
    return self._impl_call(*args, **kwargs)
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:952: in _impl_call
    self.construct(args, kwargs)
../publishablew/pennylane/pennylane/pennylane/logging/decorators.py:61: in wrapper_entry
    return func(*args, **kwargs)
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:884: in construct
    self._qfunc_output = self.func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inpt = np.float64(0.0)

    @qml.qnode(dev_2)
    def circuit_two_qubits_two_params(inpt):
        r"""Circuit with a single-qubit, two-param output function :math:`<Z>`.
    
        By-hand calculation of :math:`f(x)` gives :math:`<Z> = cos(x_1) cos(x_2)`
        Fourier coeffs are 0.25 for all :math:`+/-1` combinations, 0 elsewhere
        (Same as the circuit with one qubit and two params)
        """
>       qml.RY(inpt[0], wires=0)
E       IndexError: invalid index to scalar variable.

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:189: IndexError
_ TestFourierCoefficientCircuits.test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5f3d0>
circuit = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = 1
expected_coeffs = tensor([[0.  , 0.  , 0.  ],
        [0.  , 0.25, 0.25],
        [0.  , 0.25, 0.25]], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (
                circuit_two_qubits_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_two_qubits_two_params,
                (1, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                (2, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0, 0], [0, 0, 0], [0, 0.25, 0.25]]),
            ),
        ],
    )
    def test_coefficients_two_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
        coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)
>       assert np.allclose(coeffs, expected_coeffs)
E       assert False
E        +  where False = <function primitive.<locals>.f_wrapped at 0x77067dceb060>(array([[0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j],\n       [0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j],\n       [0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j]]), tensor([[0.  , 0.  , 0.  ],\n        [0.  , 0.25, 0.25],\n        [0.  , 0.25, 0.25]], requires_grad=True))
E        +    where <function primitive.<locals>.f_wrapped at 0x77067dceb060> = np.allclose

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:274: AssertionError
_ TestFourierCoefficientCircuits.test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5f610>
circuit = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = (1, 1)
expected_coeffs = tensor([[0.  , 0.  , 0.  ],
        [0.  , 0.25, 0.25],
        [0.  , 0.25, 0.25]], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (
                circuit_two_qubits_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_two_qubits_two_params,
                (1, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                (2, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0, 0], [0, 0, 0], [0, 0.25, 0.25]]),
            ),
        ],
    )
    def test_coefficients_two_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:20: in _coefficients_no_filter
    fx = np.array([f(xi) for xi in x])
../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:20: in <listcomp>
    fx = np.array([f(xi) for xi in x])
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:976: in __call__
    return self._impl_call(*args, **kwargs)
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:952: in _impl_call
    self.construct(args, kwargs)
../publishablew/pennylane/pennylane/pennylane/logging/decorators.py:61: in wrapper_entry
    return func(*args, **kwargs)
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:884: in construct
    self._qfunc_output = self.func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inpt = np.float64(0.0)

    @qml.qnode(dev_2)
    def circuit_two_qubits_two_params(inpt):
        r"""Circuit with a single-qubit, two-param output function :math:`<Z>`.
    
        By-hand calculation of :math:`f(x)` gives :math:`<Z> = cos(x_1) cos(x_2)`
        Fourier coeffs are 0.25 for all :math:`+/-1` combinations, 0 elsewhere
        (Same as the circuit with one qubit and two params)
        """
>       qml.RY(inpt[0], wires=0)
E       IndexError: invalid index to scalar variable.

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:189: IndexError
_ TestFourierCoefficientCircuits.test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5f890>
circuit = <QNode: device='<default.qubit device (wires=2) at 0x770642f23f90>', interface='auto', diff_method='best'>
degree = (1, 1)
expected_coeffs = tensor([[0.  , 0.  , 0.  ],
        [0.  , 0.25, 0.25],
        [0.  , 0.25, 0.25]], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (
                circuit_two_qubits_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_two_qubits_two_params,
                (1, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                (2, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0, 0], [0, 0, 0], [0, 0.25, 0.25]]),
            ),
        ],
    )
    def test_coefficients_two_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
        coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)
>       assert np.allclose(coeffs, expected_coeffs)
E       assert False
E        +  where False = <function primitive.<locals>.f_wrapped at 0x77067dceb060>(array([[0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j],\n       [0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j],\n       [0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j]]), tensor([[0.  , 0.  , 0.  ],\n        [0.  , 0.25, 0.25],\n        [0.  , 0.25, 0.25]], requires_grad=True))
E        +    where <function primitive.<locals>.f_wrapped at 0x77067dceb060> = np.allclose

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:274: AssertionError
_ TestFourierCoefficientCircuits.test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5fb10>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 1
expected_coeffs = tensor([[0.  , 0.  , 0.  ],
        [0.  , 0.25, 0.25],
        [0.  , 0.25, 0.25]], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (
                circuit_two_qubits_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_two_qubits_two_params,
                (1, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                (2, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0, 0], [0, 0, 0], [0, 0.25, 0.25]]),
            ),
        ],
    )
    def test_coefficients_two_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:20: in _coefficients_no_filter
    fx = np.array([f(xi) for xi in x])
../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:20: in <listcomp>
    fx = np.array([f(xi) for xi in x])
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:976: in __call__
    return self._impl_call(*args, **kwargs)
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:952: in _impl_call
    self.construct(args, kwargs)
../publishablew/pennylane/pennylane/pennylane/logging/decorators.py:61: in wrapper_entry
    return func(*args, **kwargs)
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:884: in construct
    self._qfunc_output = self.func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inpt = np.float64(0.0)

    @qml.qnode(dev_1)
    def circuit_one_qubit_two_params(inpt):
        r"""Circuit with a single-qubit, single-param, output function <Z>.
    
        By-hand calculation of :math:`f(x)` gives :math:`<Z> = cos(x_1) cos(x_2)`
        Fourier coeffs are 0.25 for all :math:`+/-1` combinations, 0 elsewhere.
        """
>       qml.RY(inpt[0], wires=0)
E       IndexError: invalid index to scalar variable.

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:156: IndexError
_ TestFourierCoefficientCircuits.test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f5fd90>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = 1
expected_coeffs = tensor([[0.  , 0.  , 0.  ],
        [0.  , 0.25, 0.25],
        [0.  , 0.25, 0.25]], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (
                circuit_two_qubits_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_two_qubits_two_params,
                (1, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                (2, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0, 0], [0, 0, 0], [0, 0.25, 0.25]]),
            ),
        ],
    )
    def test_coefficients_two_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
        coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)
>       assert np.allclose(coeffs, expected_coeffs)
E       assert False
E        +  where False = <function primitive.<locals>.f_wrapped at 0x77067dceb060>(array([[0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j],\n       [0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j],\n       [0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j]]), tensor([[0.  , 0.  , 0.  ],\n        [0.  , 0.25, 0.25],\n        [0.  , 0.25, 0.25]], requires_grad=True))
E        +    where <function primitive.<locals>.f_wrapped at 0x77067dceb060> = np.allclose

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:274: AssertionError
_ TestFourierCoefficientCircuits.test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-False] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f64090>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (2, 1)
expected_coeffs = tensor([[0.  , 0.  , 0.  ],
        [0.  , 0.25, 0.25],
        [0.  , 0.  , 0.  ],
        [0.  , 0.  , 0.  ],
        [0.  , 0.25, 0.25]], requires_grad=True)
use_broadcasting = False

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (
                circuit_two_qubits_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_two_qubits_two_params,
                (1, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                (2, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0, 0], [0, 0, 0], [0, 0.25, 0.25]]),
            ),
        ],
    )
    def test_coefficients_two_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
>       coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:158: in coefficients
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/coefficients.py:180: in _coefficients_no_filter
    return _coefficients_no_filter(f, degree, use_broadcasting)
../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:20: in _coefficients_no_filter
    fx = np.array([f(xi) for xi in x])
../publishablew/pennylane/pennylane/pennylane/fourier/temp.py:20: in <listcomp>
    fx = np.array([f(xi) for xi in x])
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:976: in __call__
    return self._impl_call(*args, **kwargs)
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:952: in _impl_call
    self.construct(args, kwargs)
../publishablew/pennylane/pennylane/pennylane/logging/decorators.py:61: in wrapper_entry
    return func(*args, **kwargs)
../publishablew/pennylane/pennylane/pennylane/workflow/qnode.py:884: in construct
    self._qfunc_output = self.func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

inpt = np.float64(0.0)

    @qml.qnode(dev_1)
    def circuit_one_qubit_two_params(inpt):
        r"""Circuit with a single-qubit, single-param, output function <Z>.
    
        By-hand calculation of :math:`f(x)` gives :math:`<Z> = cos(x_1) cos(x_2)`
        Fourier coeffs are 0.25 for all :math:`+/-1` combinations, 0 elsewhere.
        """
>       qml.RY(inpt[0], wires=0)
E       IndexError: invalid index to scalar variable.

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:156: IndexError
_ TestFourierCoefficientCircuits.test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-True] _

self = <test_coefficients.TestFourierCoefficientCircuits object at 0x770642f64390>
circuit = <QNode: device='<default.qubit device (wires=1) at 0x770642f23a10>', interface='auto', diff_method='best'>
degree = (2, 1)
expected_coeffs = tensor([[0.  , 0.  , 0.  ],
        [0.  , 0.25, 0.25],
        [0.  , 0.  , 0.  ],
        [0.  , 0.  , 0.  ],
        [0.  , 0.25, 0.25]], requires_grad=True)
use_broadcasting = True

    @pytest.mark.parametrize(
        "circuit,degree,expected_coeffs",
        [
            (
                circuit_two_qubits_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_two_qubits_two_params,
                (1, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                1,
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0.25, 0.25]]),
            ),
            (
                circuit_one_qubit_two_params,
                (2, 1),
                np.array([[0, 0, 0], [0, 0.25, 0.25], [0, 0, 0], [0, 0, 0], [0, 0.25, 0.25]]),
            ),
        ],
    )
    def test_coefficients_two_param_circuits(
        self, circuit, degree, expected_coeffs, use_broadcasting
    ):
        """Test that coeffs for a single instance of a single parameter match the by-hand
        results regardless of input degree (max degree is 1)."""
        coeffs = coefficients(circuit, circuit.n_inputs, degree, use_broadcasting=use_broadcasting)
>       assert np.allclose(coeffs, expected_coeffs)
E       assert False
E        +  where False = <function primitive.<locals>.f_wrapped at 0x77067dceb060>(array([[0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j],\n       [0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j],\n       [0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j],\n       [0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j],\n       [0.00099996+6.28301994e-06j, 0.00099998+0.00000000e+00j,\n        0.00099996-6.28301994e-06j]]), tensor([[0.  , 0.  , 0.  ],\n        [0.  , 0.25, 0.25],\n        [0.  , 0.  , 0.  ],\n        [0.  , 0.  , 0.  ],\n        [0.  , 0.25, 0.25]], requires_grad=True))
E        +    where <function primitive.<locals>.f_wrapped at 0x77067dceb060> = np.allclose

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py:274: AssertionError
=========================== short test summary info ============================
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-True]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-False]
FAILED ../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-True]
============================== 24 failed in 0.36s ==============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pennylane/pennylane/venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /local/data0/moved_data/publishablew/pennylane/pennylane/tests
configfile: pytest.ini
plugins: flaky-3.8.1, xdist-3.6.1, split-0.10.0, rng-1.0.0, mock-3.14.0, forked-1.6.0, cov-6.0.0, benchmark-5.1.0
collecting ... collected 24 items

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-True] PASSED

============================== 24 passed in 0.09s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pennylane/pennylane/venv/bin/python
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /local/data0/moved_data/publishablew/pennylane/pennylane/tests
configfile: pytest.ini
plugins: flaky-3.8.1, xdist-3.6.1, split-0.10.0, rng-1.0.0, mock-3.14.0, forked-1.6.0, cov-6.0.0, benchmark-5.1.0
collecting ... collected 24 items

../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-1-expected_coeffs0-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx-2-expected_coeffs1-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-degree2-expected_coeffs2-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_h_ry-3-expected_coeffs3-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-2-expected_coeffs4-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_one_qubit_one_param_rx_ry-4-expected_coeffs5-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-degree6-expected_coeffs6-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_one_param_circuits[circuit_two_qubits_repeated_param-3-expected_coeffs7-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-1-expected_coeffs0-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_two_qubits_two_params-degree1-expected_coeffs1-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-1-expected_coeffs2-True] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-False] PASSED
../publishablew/pennylane/pennylane/tests/fourier/test_coefficients.py::TestFourierCoefficientCircuits::test_coefficients_two_param_circuits[circuit_one_qubit_two_params-degree3-expected_coeffs3-True] PASSED

============================== 24 passed in 0.15s ==============================
