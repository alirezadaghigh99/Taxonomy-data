output file:
processed_korniadraw_rectangle105.json
function:
draw_rectangle
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'onnxrt', 'inductor', 'cudagraphs', 'tvm', 'openxla', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 52 items

../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] FAILED

=================================== FAILURES ===================================
__________________ TestDrawRectangle.test_smoke[cpu-color0-4] __________________

self = <test_draw.TestDrawRectangle object at 0x7510048d93c0>
device = device(type='cpu'), batch = 4, color = tensor([1.])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[1.]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: IndexError
_________________ TestDrawRectangle.test_smoke[cpu-color0-17] __________________

self = <test_draw.TestDrawRectangle object at 0x7510048d9270>
device = device(type='cpu'), batch = 17, color = tensor([1.])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

  ...],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[1.]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: IndexError
__________________ TestDrawRectangle.test_smoke[cpu-color1-4] __________________

self = <test_draw.TestDrawRectangle object at 0x7510048d95a0>
device = device(type='cpu'), batch = 4, color = tensor([0.5000])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[0.5000]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: IndexError
_________________ TestDrawRectangle.test_smoke[cpu-color1-17] __________________

self = <test_draw.TestDrawRectangle object at 0x7510048d9660>
device = device(type='cpu'), batch = 17, color = tensor([0.5000])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

  ...],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[0.5000]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: IndexError
____________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7510048da3b0>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-True-11] ____________

self = <test_draw.TestDrawRectangle object at 0x7510048d98d0>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

  ...],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-False-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7510048d9f00>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048d9f30>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

  ...],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7510048d9ff0>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048da0b0>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048da170>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048da230>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x7510048da2f0>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048d9b40>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048daec0>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048daf80>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048db040>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048db100>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048db1c0>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7510048db280>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048db340>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7510048db400>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7510048db4c0>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7510048db580>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048db640>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7510048db700>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7510048db7c0>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7510048db880>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
___________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048db940>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048dba00>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048dbac0>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7510048dbb80>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048dbc40>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x7510048dbd00>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x7510048dbdc0>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7510048dbe80>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x7510048dbf40>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x751004718040>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   RuntimeError: shape '[3, 1, 1]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: RuntimeError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x751004718100>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x7510047181c0>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-5-4] _______________

self = <test_draw.TestDrawRectangle object at 0x751004718730>
device = device(type='cpu'), batch = 4, N = 5, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[8.0763e-01, 1.6512e-01, 6.1838e-01,  ..., 5.1216e-01,
           4.1451e-01, 3.2793e-01],
          [5.4627...1, 7.0046e-01],
          [1.4515e-01, 5.8923e-01, 8.3789e-01,  ..., 4.8477e-01,
           6.1341e-01, 2.8409e-01]]]])
rectangle = tensor([[[18, 18, 19, 19],
         [ 7, 17, 11, 18],
         [ 8, 13, 11, 14],
         [18,  6, 19,  8],
         [... 14,  9],
         [17, 10, 18, 17],
         [ 6,  3, 12,  7],
         [11,  1, 17, 13],
         [11,  5, 15,  7]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-5-6] _______________

self = <test_draw.TestDrawRectangle object at 0x751004718670>
device = device(type='cpu'), batch = 6, N = 5, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[9.8344e-01, 7.8884e-01, 5.5712e-01,  ..., 9.3188e-01,
           6.3667e-01, 5.5426e-01],
          [4.7921...1, 5.8245e-01],
          [5.0155e-01, 3.2167e-01, 2.9634e-01,  ..., 7.1892e-01,
           6.3243e-01, 7.1741e-01]]]])
rectangle = tensor([[[15,  2, 18,  9],
         [ 2, 10, 13, 17],
         [16,  1, 19,  4],
         [ 2,  1, 19, 19],
         [... 19, 10],
         [ 3, 15, 14, 19],
         [ 2, 12, 11, 16],
         [14, 14, 18, 15],
         [ 2, 16, 19, 17]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-12-4] ______________

self = <test_draw.TestDrawRectangle object at 0x751004718550>
device = device(type='cpu'), batch = 4, N = 12, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[7.3794e-01, 2.0239e-01, 6.7022e-01,  ..., 5.9383e-02,
           6.5777e-01, 4.2098e-01],
          [5.6822...1, 7.8545e-01],
          [4.4485e-01, 9.0279e-01, 2.7843e-01,  ..., 8.4812e-01,
           8.8516e-01, 7.7666e-01]]]])
rectangle = tensor([[[12,  6, 18,  8],
         [ 0, 14,  2, 19],
         [ 5, 16, 12, 19],
         [ 5, 17, 15, 18],
         [...  3, 19],
         [ 4, 12, 14, 17],
         [18,  1, 19,  9],
         [15, 12, 16, 19],
         [ 7, 18, 12, 19]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-12-6] ______________

self = <test_draw.TestDrawRectangle object at 0x751004718a60>
device = device(type='cpu'), batch = 6, N = 12, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[4.6237e-01, 6.6776e-02, 8.0411e-01,  ..., 6.2863e-01,
           3.6001e-01, 1.5246e-01],
          [3.7212...1, 8.5315e-01],
          [2.6726e-02, 2.0635e-01, 8.3786e-01,  ..., 9.3171e-02,
           5.7165e-01, 7.1551e-01]]]])
rectangle = tensor([[[11,  6, 16, 18],
         [ 9, 15, 19, 18],
         [ 3,  1, 10, 12],
         [ 5,  8, 15, 14],
         [... 16, 18],
         [ 2, 13, 14, 16],
         [ 9, 18, 19, 19],
         [ 9,  1, 13,  8],
         [ 4, 10, 11, 11]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
>                   image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
E                   IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:39: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-False-5-4] ______________

self = <test_draw.TestDrawRectangle object at 0x751004718b20>
device = device(type='cpu'), batch = 4, N = 5, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[6.6987e-02, 6.1937e-01, 9.4876e-01,  ..., 7.0042e-01,
           9.7834e-01, 1.6091e-01],
          [6.0207...1, 3.0815e-01],
          [8.1350e-01, 1.9478e-01, 1.1439e-01,  ..., 9.2928e-01,
           9.2061e-01, 8.0163e-01]]]])
rectangle = tensor([[[ 1,  7, 19, 16],
         [15, 17, 18, 18],
         [ 1, 17, 18, 18],
         [ 3,  3,  9, 11],
         [... 15, 17],
         [ 7,  6, 17, 13],
         [11,  0, 18, 10],
         [ 3, 13, 14, 17],
         [ 7,  9,  9, 18]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: The expanded size of the tensor (18) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 18].  Tensor sizes: [3]

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
______________ TestDrawRectangle.test_n_rectangles[cpu-False-5-6] ______________

self = <test_draw.TestDrawRectangle object at 0x751004718be0>
device = device(type='cpu'), batch = 6, N = 5, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[7.4400e-01, 8.5817e-01, 3.4748e-01,  ..., 4.7500e-01,
           4.3558e-01, 2.6494e-01],
          [2.7607...1, 1.6927e-01],
          [5.8911e-01, 2.3086e-01, 6.5281e-01,  ..., 9.8411e-01,
           9.1109e-01, 3.7528e-01]]]])
rectangle = tensor([[[15, 17, 18, 19],
         [ 2, 10,  3, 19],
         [16, 10, 19, 12],
         [ 7, 17,  9, 19],
         [... 19, 17],
         [ 8, 16, 19, 19],
         [10, 10, 17, 17],
         [14, 10, 18, 13],
         [15, 15, 19, 19]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: IndexError
_____________ TestDrawRectangle.test_n_rectangles[cpu-False-12-4] ______________

self = <test_draw.TestDrawRectangle object at 0x751004718ca0>
device = device(type='cpu'), batch = 4, N = 12, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.9006, 0.9725, 0.6925,  ..., 0.8651, 0.8485, 0.2253],
          [0.2204, 0.0514, 0.8143,  ..., 0.2400, 0.9...23, 0.0842, 0.8381,  ..., 0.3164, 0.0266, 0.5347],
          [0.9034, 0.0367, 0.8056,  ..., 0.9676, 0.5881, 0.5431]]]])
rectangle = tensor([[[14,  8, 15, 11],
         [ 1,  4, 10,  6],
         [14,  5, 18,  8],
         [ 6,  4, 12, 12],
         [... 11, 15],
         [17,  4, 19, 15],
         [ 1,  1,  6, 10],
         [16,  4, 19, 15],
         [ 4,  8, 18,  9]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: The expanded size of the tensor (1) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 1].  Tensor sizes: [3]

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_____________ TestDrawRectangle.test_n_rectangles[cpu-False-12-6] ______________

self = <test_draw.TestDrawRectangle object at 0x751004718d60>
device = device(type='cpu'), batch = 6, N = 12, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1.3416e-01, 7.2024e-01, 5.2568e-01,  ..., 7.2435e-01,
           3.7531e-01, 1.8876e-01],
          [6.5929...2, 9.7263e-01],
          [9.4908e-01, 8.9714e-01, 3.5443e-01,  ..., 9.6159e-01,
           9.4988e-01, 5.6157e-01]]]])
rectangle = tensor([[[ 5, 11, 12, 15],
         [12,  3, 19,  4],
         [18, 13, 19, 18],
         [13, 11, 18, 14],
         [... 11, 17],
         [11, 10, 17, 18],
         [ 7, 16, 19, 19],
         [ 9,  4, 11, 10],
         [ 8, 13, 15, 17]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: The expanded size of the tensor (7) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 7].  Tensor sizes: [3]

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_____________ TestDrawRectangle.test_color_background[cpu-color0] ______________

self = <test_draw.TestDrawRectangle object at 0x751004719060>
device = device(type='cpu'), color = tensor([0.5000, 0.3000, 0.1500])

    @pytest.mark.parametrize("color", (torch.tensor([0.5, 0.3, 0.15]), torch.tensor([0.23, 0.33, 0.8])))
    def test_color_background(self, device, color):
        image = torch.zeros(1, 3, 40, 40, device=device)
        image[:, 0, :, :] = color[0]
        image[:, 1, :, :] = color[1]
        image[:, 2, :, :] = color[2]
        image_w_rectangle = image.clone()
        p1 = (1, 5)
        p2 = (30, 39)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=torch.tensor([1.0]))

../publishablew/kornia/kornia/tests/utils/test_draw.py:394: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],
          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5...00, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],
          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500]]]])
rectangle = tensor([[[ 5,  1, 39, 30]]]), color = tensor([[[1.]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_____________ TestDrawRectangle.test_color_background[cpu-color1] ______________

self = <test_draw.TestDrawRectangle object at 0x751004718fd0>
device = device(type='cpu'), color = tensor([0.2300, 0.3300, 0.8000])

    @pytest.mark.parametrize("color", (torch.tensor([0.5, 0.3, 0.15]), torch.tensor([0.23, 0.33, 0.8])))
    def test_color_background(self, device, color):
        image = torch.zeros(1, 3, 40, 40, device=device)
        image[:, 0, :, :] = color[0]
        image[:, 1, :, :] = color[1]
        image[:, 2, :, :] = color[2]
        image_w_rectangle = image.clone()
        p1 = (1, 5)
        p2 = (30, 39)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=torch.tensor([1.0]))

../publishablew/kornia/kornia/tests/utils/test_draw.py:394: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],
          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2...00, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],
          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000]]]])
rectangle = tensor([[[ 5,  1, 39, 30]]]), color = tensor([[[1.]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: shape '[3]' is invalid for input of size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_____________ TestDrawRectangle.test_color_foreground[cpu-color0] ______________

self = <test_draw.TestDrawRectangle object at 0x751004719480>
device = device(type='cpu'), color = tensor([0.3400, 0.6300, 0.1600])

    @pytest.mark.parametrize("color", (torch.tensor([0.34, 0.63, 0.16]), torch.tensor([0.29, 0.13, 0.48])))
    def test_color_foreground(self, device, color):
        image = torch.zeros(1, 3, 50, 40, device=device)
        image_w_rectangle = image.clone()
        p1 = (10, 4)
        p2 = (11, 40)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 4, 10, 40, 11]]])
color = tensor([[[0.3400, 0.6300, 0.1600]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: The expanded size of the tensor (36) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 36].  Tensor sizes: [3]

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
_____________ TestDrawRectangle.test_color_foreground[cpu-color1] ______________

self = <test_draw.TestDrawRectangle object at 0x7510047193f0>
device = device(type='cpu'), color = tensor([0.2900, 0.1300, 0.4800])

    @pytest.mark.parametrize("color", (torch.tensor([0.34, 0.63, 0.16]), torch.tensor([0.29, 0.13, 0.48])))
    def test_color_foreground(self, device, color):
        image = torch.zeros(1, 3, 50, 40, device=device)
        image_w_rectangle = image.clone()
        p1 = (10, 4)
        p2 = (11, 40)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
>       draw_rectangle(image_w_rectangle, points, color=color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:413: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 4, 10, 40, 11]]])
color = tensor([[[0.2900, 0.1300, 0.4800]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        """
        Draws one or more rectangles on a batch of image tensors.
    
        Parameters:
        - image: A tensor of shape (B, C, H, W).
        - rectangle: A tensor of shape (B, N, 4).
        - color: An optional tensor specifying the color of the rectangles.
        - fill: An optional boolean flag indicating whether to fill the rectangles with color (True) or just draw the borders (False). Defaults to False.
    
        Returns:
        - The modified image tensor.
        """
        B, C, H, W = image.shape
        B_rect, N, points = rectangle.shape
        assert B == B_rect, 'Batch size of image tensor and rectangle tensor must match.'
        assert points == 4, 'Each rectangle must be defined by four coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        else:
            color = color.to(image.dtype).to(image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, N, -1)
        elif color.dim() == 3:
            color = color.view(B, N, C)
        for b in range(B):
            for n in range(N):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
                if fill:
                    image[b, :, y1:y2, x1:x2] = color[b, n].view(C, 1, 1)
                else:
>                   image[b, :, y1, x1:x2] = color[b, n].view(C)
E                   RuntimeError: The expanded size of the tensor (36) must match the existing size (3) at non-singleton dimension 1.  Target sizes: [3, 36].  Tensor sizes: [3]

../publishablew/kornia/kornia/kornia/utils/temp.py:41: RuntimeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1]
============================== 52 failed in 1.69s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'onnxrt', 'openxla', 'tvm', 'inductor', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 52 items

../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED

============================== 52 passed in 0.30s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'onnxrt', 'tvm', 'cudagraphs', 'inductor', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 52 items

../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED

============================== 52 passed in 0.27s ==============================
