output file:
processed_korniadraw_rectangle105.json
function:
draw_rectangle
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8]', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11]', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] FAILED', '../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'cudagraphs', 'onnxrt', 'tvm', 'jit', 'inductor', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 52 items

../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] FAILED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] FAILED

=================================== FAILURES ===================================
__________________ TestDrawRectangle.test_smoke[cpu-color0-4] __________________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e5480>
device = device(type='cpu'), batch = 4, color = tensor([1.])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[1.]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
_________________ TestDrawRectangle.test_smoke[cpu-color0-17] __________________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e5330>
device = device(type='cpu'), batch = 17, color = tensor([1.])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

  ...],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[1.]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________________ TestDrawRectangle.test_smoke[cpu-color1-4] __________________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e5660>
device = device(type='cpu'), batch = 4, color = tensor([0.5000])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[0.5000]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
_________________ TestDrawRectangle.test_smoke[cpu-color1-17] __________________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e5720>
device = device(type='cpu'), batch = 17, color = tensor([0.5000])

    @pytest.mark.parametrize("batch", (4, 17))
    @pytest.mark.parametrize("color", (torch.Tensor([1.0]), torch.Tensor([0.5])))
    def test_smoke(self, device, batch, color):
        black_image = torch.zeros(batch, 1, 3, 3, device=device)  # 1 channel 3x3 black_image
        points = torch.tensor([1.0, 1.0, 1.0, 1.0]).to(device).expand(batch, 1, 4)  # single pixel rectangle
    
>       draw_rectangle(black_image, points, color=color)

../publishablew/kornia/kornia/tests/utils/test_draw.py:296: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0.,...   [0., 0., 0.],
          [0., 0., 0.]]],


        [[[0., 0., 0.],
          [0., 0., 0.],
          [0., 0., 0.]]]])
rectangle = tensor([[[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

  ...],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]],

        [[1., 1., 1., 1.]]])
color = tensor([[[0.5000]]]), fill = None

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
____________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e6470>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-True-11] ____________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e5990>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

  ...],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-False-8] ____________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e5fc0>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-12-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e5ff0>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

  ...],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]],

        [[ 0,  0,  7, 12]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e60b0>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e6170>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e6230>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-7-106-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e62f0>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,...0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]],

        [[  0,   0,   7, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-True-8] ____________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e63b0>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e5c00>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e6f80>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-7-298-False-11] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7040>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 7

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,...0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]],

        [[  0,   0,   7, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7100>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e71c0>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7280>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-12-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7340>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0,...0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]],

        [[  0,   0, 123,  12]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7400>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e74c0>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7580>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
_________ TestDrawRectangle.test_fill_and_edges[cpu-123-106-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7640>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0,...0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]],

        [[  0,   0, 123, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7700>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e77c0>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7880>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
_________ TestDrawRectangle.test_fill_and_edges[cpu-123-298-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7940>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 123

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0,...0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]],

        [[  0,   0, 123, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
___________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7a00>
device = device(type='cpu'), batch = 8, fill = True, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-True-11] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7ac0>
device = device(type='cpu'), batch = 11, fill = True, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-False-8] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7b80>
device = device(type='cpu'), batch = 8, fill = False, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-12-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7c40>
device = device(type='cpu'), batch = 11, fill = False, height = 12, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0,...0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]],

        [[  0,   0, 537,  12]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7d00>
device = device(type='cpu'), batch = 8, fill = True, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7dc0>
device = device(type='cpu'), batch = 11, fill = True, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7e80>
device = device(type='cpu'), batch = 8, fill = False, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
_________ TestDrawRectangle.test_fill_and_edges[cpu-537-106-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x76e3c40e7f40>
device = device(type='cpu'), batch = 11, fill = False, height = 106, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0,...0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]],

        [[  0,   0, 537, 106]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-True-8] ___________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f24040>
device = device(type='cpu'), batch = 8, fill = True, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-True-11] __________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f24100>
device = device(type='cpu'), batch = 11, fill = True, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1., 1.],
          [1., 1., 1.,  ..., 1., 1... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
__________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-False-8] __________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f241c0>
device = device(type='cpu'), batch = 8, fill = False, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
_________ TestDrawRectangle.test_fill_and_edges[cpu-537-298-False-11] __________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f24280>
device = device(type='cpu'), batch = 11, fill = False, height = 298, width = 537

    @pytest.mark.parametrize("batch", (8, 11))
    @pytest.mark.parametrize("fill", (True, False))
    @pytest.mark.parametrize("height", (12, 106, 298))
    @pytest.mark.parametrize("width", (7, 123, 537))
    def test_fill_and_edges(self, device, batch, fill, height, width):
        black_image = torch.zeros(batch, 3, height, width, device=device)
        # we should pass height - 1 and width - 1 but rectangle should clip correctly
        points = torch.tensor([0, 0, width, height]).to(device).expand(batch, 1, 4)
    
>       image_w_rectangle = draw_rectangle(black_image, points, color=torch.tensor([1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1.,  ..., 1., 1., 1.],
          [1., 0., 0.,  ..., 0., 0., 1.],
          [1., 0., 0.,  ..., 0., 0... [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])
rectangle = tensor([[[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0,...0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]],

        [[  0,   0, 537, 298]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 0 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-5-4] _______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f247f0>
device = device(type='cpu'), batch = 4, N = 5, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[8.1949e-01, 8.4602e-01, 2.7120e-01,  ..., 4.8222e-01,
           3.3593e-01, 3.7314e-01],
          [5.0368...2, 3.4610e-01],
          [5.0685e-01, 2.8189e-01, 6.9461e-01,  ..., 5.6601e-01,
           7.6607e-01, 7.9251e-01]]]])
rectangle = tensor([[[16,  6, 18,  7],
         [13, 12, 17, 17],
         [ 1, 13,  3, 18],
         [16, 13, 19, 15],
         [... 19, 16],
         [10,  1, 15,  4],
         [ 3,  1, 19,  2],
         [ 3, 15, 15, 17],
         [ 6,  3, 19, 11]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-5-6] _______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f24730>
device = device(type='cpu'), batch = 6, N = 5, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.6691, 0.5567, 0.5021,  ..., 0.9091, 0.1763, 0.6385],
          [0.9273, 0.7566, 0.0954,  ..., 0.0710, 0.2...00, 0.1345, 0.0989,  ..., 0.5819, 0.8115, 0.7799],
          [0.6267, 0.9439, 0.5428,  ..., 0.3980, 0.3054, 0.4845]]]])
rectangle = tensor([[[13, 15, 16, 19],
         [10,  7, 13,  8],
         [14, 13, 19, 18],
         [ 3,  7, 14, 17],
         [... 14, 17],
         [18, 15, 19, 19],
         [17, 16, 18, 17],
         [ 7, 15, 14, 18],
         [16, 11, 17, 16]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-12-4] ______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f24610>
device = device(type='cpu'), batch = 4, N = 12, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.7632, 0.9661, 0.0240,  ..., 0.2362, 0.7693, 0.4587],
          [0.5629, 0.2891, 0.7161,  ..., 0.1187, 0.6...87, 0.4967, 0.7074,  ..., 0.0225, 0.6483, 0.8523],
          [0.9435, 0.2818, 0.8296,  ..., 0.8136, 0.3779, 0.2313]]]])
rectangle = tensor([[[17, 17, 18, 18],
         [17, 12, 18, 17],
         [ 2,  5,  5, 19],
         [14, 15, 19, 18],
         [...  5, 15],
         [ 2,  6, 16,  7],
         [ 2, 12, 17, 17],
         [12, 10, 13, 16],
         [ 9,  3, 15, 16]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-True-12-6] ______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f24b20>
device = device(type='cpu'), batch = 6, N = 12, fill = True

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[4.8163e-01, 8.0751e-02, 9.7515e-01,  ..., 9.0314e-02,
           4.9378e-01, 9.7190e-01],
          [2.1775...1, 4.1032e-01],
          [6.4387e-01, 9.9909e-01, 9.8946e-01,  ..., 1.3558e-01,
           9.1841e-01, 4.1497e-02]]]])
rectangle = tensor([[[ 4,  1,  5, 17],
         [ 7,  1, 16,  4],
         [17,  8, 19, 13],
         [14,  0, 15,  5],
         [... 19,  7],
         [14, 16, 18, 18],
         [18,  4, 19, 14],
         [13, 17, 17, 18],
         [ 7, 11, 15, 14]]])
color = tensor([[[1., 1., 1.]]]), fill = True

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-False-5-4] ______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f24be0>
device = device(type='cpu'), batch = 4, N = 5, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.3391, 0.5011, 0.8750,  ..., 0.3880, 0.9070, 0.4506],
          [0.9346, 0.2860, 0.4613,  ..., 0.0524, 0.3...66, 0.5921, 0.6568,  ..., 0.8139, 0.2649, 0.1828],
          [0.7680, 0.0212, 0.6363,  ..., 0.3515, 0.7015, 0.0514]]]])
rectangle = tensor([[[ 0, 14, 17, 19],
         [ 1,  4, 17, 12],
         [ 5, 13, 10, 16],
         [12,  1, 19,  6],
         [... 18, 16],
         [13,  3, 19,  7],
         [ 2, 14, 10, 18],
         [ 5,  3, 11, 15],
         [ 9,  3, 10,  9]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
______________ TestDrawRectangle.test_n_rectangles[cpu-False-5-6] ______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f24ca0>
device = device(type='cpu'), batch = 6, N = 5, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1.7852e-01, 3.5813e-01, 1.7771e-01,  ..., 7.6609e-02,
           5.4191e-01, 2.4753e-01],
          [5.1581...1, 7.6516e-01],
          [5.4248e-01, 9.8711e-01, 3.1358e-01,  ..., 5.7717e-01,
           8.7217e-01, 4.3744e-01]]]])
rectangle = tensor([[[12, 11, 13, 12],
         [15, 12, 16, 18],
         [ 1, 14, 11, 19],
         [16, 17, 17, 19],
         [... 15, 15],
         [ 8, 11, 13, 12],
         [ 5, 14, 17, 19],
         [ 1, 13, 13, 18],
         [18, 15, 19, 19]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
_____________ TestDrawRectangle.test_n_rectangles[cpu-False-12-4] ______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f24d60>
device = device(type='cpu'), batch = 4, N = 12, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[2.7524e-01, 4.1351e-01, 3.9603e-01,  ..., 1.2061e-01,
           6.8606e-01, 7.0420e-01],
          [2.7703...1, 8.8203e-01],
          [3.8203e-01, 9.9576e-01, 9.9797e-01,  ..., 2.8043e-01,
           1.2720e-01, 7.9192e-01]]]])
rectangle = tensor([[[14,  9, 19, 11],
         [ 9, 12, 18, 14],
         [ 4, 14, 14, 15],
         [ 0,  0,  9,  9],
         [... 19, 16],
         [ 0, 11, 12, 18],
         [ 9, 14, 17, 17],
         [ 1,  3,  4, 18],
         [ 2,  7, 16, 17]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
_____________ TestDrawRectangle.test_n_rectangles[cpu-False-12-6] ______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f24e20>
device = device(type='cpu'), batch = 6, N = 12, fill = False

    @pytest.mark.parametrize("batch", (4, 6))
    @pytest.mark.parametrize("N", (5, 12))
    @pytest.mark.parametrize("fill", (True, False))
    def test_n_rectangles(self, device, batch, N, fill):
        points_list = []
        h, w = 20, 20
        for b in range(batch):
            points_list.append([])
            for n in range(N):
                points_list[b].append([])
                points_list[b][n].append(int(torch.randint(0, w - 1, (1,))))
                points_list[b][n].append(int(torch.randint(0, h - 1, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, w, (1,))))
                points_list[b][n].append(int(torch.randint(points_list[b][n][-2] + 1, h, (1,))))
    
        points = torch.tensor(points_list, device=device)
    
        random_background = torch.rand(batch, 3, h, w, device=device)
        random_w_rectangle = random_background.clone()
    
>       draw_rectangle(random_w_rectangle, points, color=torch.tensor([1.0, 1.0, 1.0]), fill=fill)

../publishablew/kornia/kornia/tests/utils/test_draw.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/utils/draw.py:113: in draw_rectangle
    return draw_rectangle(image, rectangle, color, fill)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[0.1700, 0.3922, 0.5742,  ..., 0.5748, 0.4760, 0.7494],
          [0.2676, 0.8684, 0.1419,  ..., 0.8960, 0.8...24, 0.9063, 0.5528,  ..., 0.3757, 0.7547, 0.0558],
          [0.5236, 0.1360, 0.7267,  ..., 0.4811, 0.4577, 0.0821]]]])
rectangle = tensor([[[15, 16, 18, 18],
         [ 5,  7, 17, 17],
         [ 5,  0, 12,  6],
         [ 2,  6, 10, 14],
         [... 17,  6],
         [ 0, 13, 19, 17],
         [ 5,  1, 15, 12],
         [ 4,  0, 14,  9],
         [ 5, 18, 16, 19]]])
color = tensor([[[1., 1., 1.]]]), fill = False

    def draw_rectangle(image, rectangle, color=None, fill=False):
        B, C, H, W = image.shape
        assert rectangle.shape[0] == B, 'Batch size of image and rectangle must match.'
        assert rectangle.shape[2] == 4, 'Each rectangle must be defined by 4 coordinates (x1, y1, x2, y2).'
        if color is None:
            color = torch.tensor([255] * C, dtype=image.dtype, device=image.device)
        if color.dim() == 1:
            color = color.view(1, 1, -1)
        elif color.dim() == 2:
            color = color.view(B, -1, 1)
        elif color.dim() == 3:
            pass
        else:
            raise ValueError('Color tensor has an invalid shape.')
        if color.shape[-1] == 1 and C == 3:
            color = color.expand(-1, -1, 3)
        for b in range(B):
            for n in range(rectangle.shape[1]):
                x1, y1, x2, y2 = rectangle[b, n]
                x1, y1, x2, y2 = (int(x1), int(y1), int(x2), int(y2))
>               rect_color = color[b, n]
E               IndexError: index 1 is out of bounds for dimension 1 with size 1

../publishablew/kornia/kornia/kornia/utils/temp.py:27: IndexError
_____________ TestDrawRectangle.test_color_background[cpu-color0] ______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f25120>
device = device(type='cpu'), color = tensor([0.5000, 0.3000, 0.1500])

    @pytest.mark.parametrize("color", (torch.tensor([0.5, 0.3, 0.15]), torch.tensor([0.23, 0.33, 0.8])))
    def test_color_background(self, device, color):
        image = torch.zeros(1, 3, 40, 40, device=device)
        image[:, 0, :, :] = color[0]
        image[:, 1, :, :] = color[1]
        image[:, 2, :, :] = color[2]
        image_w_rectangle = image.clone()
        p1 = (1, 5)
        p2 = (30, 39)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
        draw_rectangle(image_w_rectangle, points, color=torch.tensor([1.0]))
>       assert (
            torch.abs(
                (image_w_rectangle - image).sum()
                - (1 - color[0]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[1]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[2]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
            )
            <= 0.0001
        )
E       assert tensor(8.2000) <= 0.0001
E        +  where tensor(8.2000) = <built-in method abs of type object at 0x76e48ecbf1c0>((((tensor(250.1000) - ((1 - tensor(0.5000)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.3000)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.1500)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))))
E        +    where <built-in method abs of type object at 0x76e48ecbf1c0> = torch.abs
E        +    and   tensor(250.1000) = <built-in method sum of Tensor object at 0x76e3b99e04f0>()
E        +      where <built-in method sum of Tensor object at 0x76e3b99e04f0> = (tensor([[[[0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 1.0000, 1.0000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 1.0000, 0.5000],\n          ...,\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000]],\n\n         [[0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 1.0000, 1.0000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 1.0000, 0.3000],\n          ...,\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000]],\n\n         [[0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 1.0000, 1.0000, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 1.0000, 0.1500],\n          ...,\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500]]]]) - tensor([[[[0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          ...,\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000],\n          [0.5000, 0.5000, 0.5000,  ..., 0.5000, 0.5000, 0.5000]],\n\n         [[0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          ...,\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000],\n          [0.3000, 0.3000, 0.3000,  ..., 0.3000, 0.3000, 0.3000]],\n\n         [[0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          ...,\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500],\n          [0.1500, 0.1500, 0.1500,  ..., 0.1500, 0.1500, 0.1500]]]])).sum

../publishablew/kornia/kornia/tests/utils/test_draw.py:395: AssertionError
_____________ TestDrawRectangle.test_color_background[cpu-color1] ______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f25090>
device = device(type='cpu'), color = tensor([0.2300, 0.3300, 0.8000])

    @pytest.mark.parametrize("color", (torch.tensor([0.5, 0.3, 0.15]), torch.tensor([0.23, 0.33, 0.8])))
    def test_color_background(self, device, color):
        image = torch.zeros(1, 3, 40, 40, device=device)
        image[:, 0, :, :] = color[0]
        image[:, 1, :, :] = color[1]
        image[:, 2, :, :] = color[2]
        image_w_rectangle = image.clone()
        p1 = (1, 5)
        p2 = (30, 39)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
        draw_rectangle(image_w_rectangle, points, color=torch.tensor([1.0]))
>       assert (
            torch.abs(
                (image_w_rectangle - image).sum()
                - (1 - color[0]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[1]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
                - (1 - color[2]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1] + 1) - 4)
            )
            <= 0.0001
        )
E       assert tensor(6.5600) <= 0.0001
E        +  where tensor(6.5600) = <built-in method abs of type object at 0x76e48ecbf1c0>((((tensor(200.0800) - ((1 - tensor(0.2300)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.3300)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))) - ((1 - tensor(0.8000)) * (((2 * ((30 - 1) + 1)) + (2 * ((39 - 5) + 1))) - 4))))
E        +    where <built-in method abs of type object at 0x76e48ecbf1c0> = torch.abs
E        +    and   tensor(200.0800) = <built-in method sum of Tensor object at 0x76e3b99881d0>()
E        +      where <built-in method sum of Tensor object at 0x76e3b99881d0> = (tensor([[[[0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 1.0000, 1.0000, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 1.0000, 0.2300],\n          ...,\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300]],\n\n         [[0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 1.0000, 1.0000, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 1.0000, 0.3300],\n          ...,\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300]],\n\n         [[0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 1.0000, 1.0000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 1.0000, 0.8000],\n          ...,\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000]]]]) - tensor([[[[0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          ...,\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300],\n          [0.2300, 0.2300, 0.2300,  ..., 0.2300, 0.2300, 0.2300]],\n\n         [[0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          ...,\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300],\n          [0.3300, 0.3300, 0.3300,  ..., 0.3300, 0.3300, 0.3300]],\n\n         [[0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          ...,\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000],\n          [0.8000, 0.8000, 0.8000,  ..., 0.8000, 0.8000, 0.8000]]]])).sum

../publishablew/kornia/kornia/tests/utils/test_draw.py:395: AssertionError
_____________ TestDrawRectangle.test_color_foreground[cpu-color0] ______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f25540>
device = device(type='cpu'), color = tensor([0.3400, 0.6300, 0.1600])

    @pytest.mark.parametrize("color", (torch.tensor([0.34, 0.63, 0.16]), torch.tensor([0.29, 0.13, 0.48])))
    def test_color_foreground(self, device, color):
        image = torch.zeros(1, 3, 50, 40, device=device)
        image_w_rectangle = image.clone()
        p1 = (10, 4)
        p2 = (11, 40)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
        draw_rectangle(image_w_rectangle, points, color=color)
    
        # corners are double counted, no plus 1 for y since p2[1] of 40 already lies outside of the image
>       assert (
            torch.abs(
                (image_w_rectangle - image).sum()
                - (color[0]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1]) - 4)
                - (color[1]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1]) - 4)
                - (color[2]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1]) - 4)
            )
            <= 0.0001
        )
E       assert tensor(40.6800) <= 0.0001
E        +  where tensor(40.6800) = <built-in method abs of type object at 0x76e48ecbf1c0>((((tensor(40.6800) - (tensor(0.3400) * (((2 * ((11 - 10) + 1)) + (2 * (40 - 4))) - 4))) - (tensor(0.6300) * (((2 * ((11 - 10) + 1)) + (2 * (40 - 4))) - 4))) - (tensor(0.1600) * (((2 * ((11 - 10) + 1)) + (2 * (40 - 4))) - 4))))
E        +    where <built-in method abs of type object at 0x76e48ecbf1c0> = torch.abs
E        +    and   tensor(40.6800) = <built-in method sum of Tensor object at 0x76e3b99a04a0>()
E        +      where <built-in method sum of Tensor object at 0x76e3b99a04a0> = (tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]],\n\n         [[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]],\n\n         [[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]]]]) - tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]],\n\n         [[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]],\n\n         [[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]]]])).sum

../publishablew/kornia/kornia/tests/utils/test_draw.py:416: AssertionError
_____________ TestDrawRectangle.test_color_foreground[cpu-color1] ______________

self = <test_draw.TestDrawRectangle object at 0x76e3b9f254b0>
device = device(type='cpu'), color = tensor([0.2900, 0.1300, 0.4800])

    @pytest.mark.parametrize("color", (torch.tensor([0.34, 0.63, 0.16]), torch.tensor([0.29, 0.13, 0.48])))
    def test_color_foreground(self, device, color):
        image = torch.zeros(1, 3, 50, 40, device=device)
        image_w_rectangle = image.clone()
        p1 = (10, 4)
        p2 = (11, 40)
        points = torch.tensor([[[p1[1], p1[0], p2[1], p2[0]]]], device=device)
    
        draw_rectangle(image_w_rectangle, points, color=color)
    
        # corners are double counted, no plus 1 for y since p2[1] of 40 already lies outside of the image
>       assert (
            torch.abs(
                (image_w_rectangle - image).sum()
                - (color[0]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1]) - 4)
                - (color[1]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1]) - 4)
                - (color[2]) * (2 * (p2[0] - p1[0] + 1) + 2 * (p2[1] - p1[1]) - 4)
            )
            <= 0.0001
        )
E       assert tensor(32.4000) <= 0.0001
E        +  where tensor(32.4000) = <built-in method abs of type object at 0x76e48ecbf1c0>((((tensor(32.4000) - (tensor(0.2900) * (((2 * ((11 - 10) + 1)) + (2 * (40 - 4))) - 4))) - (tensor(0.1300) * (((2 * ((11 - 10) + 1)) + (2 * (40 - 4))) - 4))) - (tensor(0.4800) * (((2 * ((11 - 10) + 1)) + (2 * (40 - 4))) - 4))))
E        +    where <built-in method abs of type object at 0x76e48ecbf1c0> = torch.abs
E        +    and   tensor(32.4000) = <built-in method sum of Tensor object at 0x76e3b99398a0>()
E        +      where <built-in method sum of Tensor object at 0x76e3b99398a0> = (tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]],\n\n         [[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]],\n\n         [[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]]]]) - tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]],\n\n         [[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]],\n\n         [[0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          ...,\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.],\n          [0., 0., 0.,  ..., 0., 0., 0.]]]])).sum

../publishablew/kornia/kornia/tests/utils/test_draw.py:416: AssertionError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0]
FAILED ../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1]
============================== 52 failed in 1.56s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'tvm', 'onnxrt', 'inductor', 'openxla', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 52 items

../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED

============================== 52 passed in 0.28s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'openxla', 'jit', 'tvm', 'inductor', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 52 items

../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color0-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_smoke[cpu-color1-17] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-7-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-123-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-12-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-106-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-True-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-8] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_fill_and_edges[cpu-537-298-False-11] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-True-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-5-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-4] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_n_rectangles[cpu-False-12-6] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_background[cpu-color1] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color0] PASSED
../publishablew/kornia/kornia/tests/utils/test_draw.py::TestDrawRectangle::test_color_foreground[cpu-color1] PASSED

============================== 52 passed in 0.31s ==============================
