output file:
processed_korniarun_8point223.json
function:
run_8point
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'tvm', 'onnxrt', 'inductor', 'openxla', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 16 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
__________ TestFindFundamental.test_shape_noweights[cpu-float32-1-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x782c687e6d10>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_8point
    return run_8point(points1, points2, weights)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.6339, 0.0752],
         [0.8314, 0.9191],
         [0.9309, 0.4065],
         [0.1426, 0.0718],
         [0.2935, 0.6728],
         [0.6630, 0.1714],
         [0.9788, 0.1777],
         [0.9064, 0.0614]]])
points2 = tensor([[[0.6698, 0.0095],
         [0.6533, 0.0285],
         [0.6855, 0.2571],
         [0.6518, 0.7186],
         [0.2677, 0.1335],
         [0.9005, 0.4015],
         [0.1079, 0.5274],
         [0.9539, 0.7866]]])
weights = None

    def run_8point(points1, points2, weights):
        """
        Compute the fundamental matrix using the DLT formulation with weighted least squares.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
    
        Returns:
            The computed fundamental matrix with shape (B, 3, 3).
        """
        B, N, _ = points1.shape
        points1_normalized, T1 = normalize_points(points1)
        points2_normalized, T2 = normalize_points(points2)
        x1, y1 = (points1_normalized[..., 0], points1_normalized[..., 1])
        x2, y2 = (points2_normalized[..., 0], points2_normalized[..., 1])
        A = torch.stack([x2 * x1, x2 * y1, x2, y2 * x1, y2 * y1, y2, x1, y1, torch.ones_like(x1)], dim=-1)
>       W = torch.diag_embed(weights)
E       TypeError: diag_embed(): argument 'input' (position 1) must be Tensor, not NoneType

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:41: TypeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-2-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x782c687e6c50>
batch_size = 2, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_8point
    return run_8point(points1, points2, weights)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.8989, 0.7989],
         [0.5864, 0.4016],
         [0.0316, 0.0764],
         [0.8476, 0.8844],
         [... 0.7650],
         [0.8512, 0.4305],
         [0.9442, 0.7782],
         [0.1085, 0.9305],
         [0.3724, 0.8276]]])
points2 = tensor([[[0.9335, 0.1687],
         [0.8169, 0.1346],
         [0.5517, 0.9826],
         [0.9274, 0.5794],
         [... 0.0773],
         [0.0125, 0.8570],
         [0.2257, 0.7426],
         [0.2443, 0.0990],
         [0.0545, 0.5348]]])
weights = None

    def run_8point(points1, points2, weights):
        """
        Compute the fundamental matrix using the DLT formulation with weighted least squares.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
    
        Returns:
            The computed fundamental matrix with shape (B, 3, 3).
        """
        B, N, _ = points1.shape
        points1_normalized, T1 = normalize_points(points1)
        points2_normalized, T2 = normalize_points(points2)
        x1, y1 = (points1_normalized[..., 0], points1_normalized[..., 1])
        x2, y2 = (points2_normalized[..., 0], points2_normalized[..., 1])
        A = torch.stack([x2 * x1, x2 * y1, x2, y2 * x1, y2 * y1, y2, x1, y1, torch.ones_like(x1)], dim=-1)
>       W = torch.diag_embed(weights)
E       TypeError: diag_embed(): argument 'input' (position 1) must be Tensor, not NoneType

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:41: TypeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-3-10] __________

self = <test_fundamental.TestFindFundamental object at 0x782c687e6fb0>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_8point
    return run_8point(points1, points2, weights)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.2520, 0.9529],
         [0.3348, 0.3775],
         [0.0087, 0.8412],
         [0.6943, 0.4732],
         [... 0.7024],
         [0.0793, 0.7738],
         [0.7390, 0.1558],
         [0.7065, 0.8958],
         [0.3146, 0.4327]]])
points2 = tensor([[[0.4500, 0.4824],
         [0.2833, 0.8630],
         [0.6754, 0.3896],
         [0.4513, 0.7242],
         [... 0.1836],
         [0.7935, 0.2446],
         [0.0606, 0.7393],
         [0.6899, 0.4408],
         [0.5487, 0.2920]]])
weights = None

    def run_8point(points1, points2, weights):
        """
        Compute the fundamental matrix using the DLT formulation with weighted least squares.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
    
        Returns:
            The computed fundamental matrix with shape (B, 3, 3).
        """
        B, N, _ = points1.shape
        points1_normalized, T1 = normalize_points(points1)
        points2_normalized, T2 = normalize_points(points2)
        x1, y1 = (points1_normalized[..., 0], points1_normalized[..., 1])
        x2, y2 = (points2_normalized[..., 0], points2_normalized[..., 1])
        A = torch.stack([x2 * x1, x2 * y1, x2, y2 * x1, y2 * y1, y2, x1, y1, torch.ones_like(x1)], dim=-1)
>       W = torch.diag_embed(weights)
E       TypeError: diag_embed(): argument 'input' (position 1) must be Tensor, not NoneType

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:41: TypeError
_______________ TestFindFundamental.test_opencv_svd[cpu-float32] _______________

self = <test_fundamental.TestFindFundamental object at 0x782c687e7850>
device = device(type='cpu'), dtype = torch.float32

    def test_opencv_svd(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                    [0.2645, 0.8882],
                    [0.2411, 0.3045],
                    [0.8199, 0.4107],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                    [0.8908, 0.1233],
                    [0.2338, 0.7663],
                    [0.4466, 0.5696],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        weights = torch.ones(1, 10, device=device, dtype=dtype)
    
        # generated with OpenCV using above points
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_8POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [-0.47408533, 0.22033807, -0.00346677],
                    [0.54935973, 1.31080955, -1.25028275],
                    [-0.36690215, -1.08143769, 1.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        F_mat = epi.find_fundamental(points1, points2, weights)
>       self.assert_close(F_mat, Fm_expected, rtol=1e-4, atol=1e-4)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[-2.8870,  1.2038,  0.1289],
         [ 3.1410,  7.3296, -7.1741],
         [-2.0755, -6.0453,  5.7193]]])
expected = tensor([[[-0.4741,  0.2203, -0.0035],
         [ 0.5494,  1.3108, -1.2503],
         [-0.3669, -1.0814,  1.0000]]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 9 / 9 (100.0%)
E       Greatest absolute difference: 6.018754005432129 at index (0, 1, 1) (up to 0.0001 allowed)
E       Greatest relative difference: 38.16921615600586 at index (0, 0, 2) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___________ TestFindFundamental.test_synthetic_sampson[cpu-float32] ____________

self = <test_fundamental.TestFindFundamental object at 0x782c687e6aa0>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson(self, device, dtype):
        scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)
    
        x1 = scene["x1"]
        x2 = scene["x2"]
    
        weights = torch.ones_like(x1)[..., 0]
        F_est = epi.find_fundamental(x1, x2, weights)
    
        error = epi.sampson_epipolar_distance(x1, x2, F_est)
>       self.assert_close(error, torch.zeros((x1.shape[:2]), device=device, dtype=dtype), atol=1e-4, rtol=1e-4)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[2.0946e+02, 8.0542e+01, 7.9751e+01, 1.6649e+02, 2.0032e+02, 8.7970e+01,
         4.0034e+01, 2.7567e+02, 1.77... 1.7948e+02, 4.0737e-02, 2.1374e+02,
         1.3898e+02, 5.2095e+02, 1.5506e+02, 5.2391e+01, 9.0287e+01, 5.0762e+01]])
expected = tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0.]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 30 / 30 (100.0%)
E       Greatest absolute difference: 520.9514770507812 at index (0, 25) (up to 0.0001 allowed)
E       Greatest relative difference: inf at index (0, 0) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___________________ TestFindFundamental.test_gradcheck[cpu] ____________________

self = <test_fundamental.TestFindFundamental object at 0x782c681244c0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        points1 = torch.rand(1, 10, 2, device=device, dtype=torch.float64, requires_grad=True)
        points2 = torch.rand(1, 10, 2, device=device, dtype=torch.float64)
        weights = torch.ones(1, 10, device=device, dtype=torch.float64)
>       self.gradcheck(epi.find_fundamental, (points1, points2, weights))

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_8point
    return run_8point(points1, points2, weights)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points1 = tensor([[[0.7925, 0.5431],
         [0.8514, 0.2734],
         [0.2131, 0.1521],
         [0.8230, 0.8637],
         [...     [0.1507, 0.6169],
         [0.4194, 0.4794],
         [0.0773, 0.9049]]], dtype=torch.float64, requires_grad=True)
points2 = tensor([[[0.8419, 0.4867],
         [0.6821, 0.0512],
         [0.7997, 0.8116],
         [0.4389, 0.5094],
         [...     [0.4813, 0.4277],
         [0.4051, 0.9100],
         [0.0719, 0.3119]]], dtype=torch.float64, requires_grad=True)
weights = tensor([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]], dtype=torch.float64,
       requires_grad=True)

    def run_8point(points1, points2, weights):
        """
        Compute the fundamental matrix using the DLT formulation with weighted least squares.
    
        Args:
            points1: A set of points in the first image with a tensor shape (B, N, 2), N>=8.
            points2: A set of points in the second image with a tensor shape (B, N, 2), N>=8.
            weights: Tensor containing the weights per point correspondence with a shape of (B, N).
    
        Returns:
            The computed fundamental matrix with shape (B, 3, 3).
        """
        B, N, _ = points1.shape
        points1_normalized, T1 = normalize_points(points1)
        points2_normalized, T2 = normalize_points(points2)
        x1, y1 = (points1_normalized[..., 0], points1_normalized[..., 1])
        x2, y2 = (points2_normalized[..., 0], points2_normalized[..., 1])
        A = torch.stack([x2 * x1, x2 * y1, x2, y2 * x1, y2 * y1, y2, x1, y1, torch.ones_like(x1)], dim=-1)
        W = torch.diag_embed(weights)
        AW = torch.matmul(W, A)
        _, _, V = torch.svd(AW)
        F = V[..., -1].view(B, 3, 3)
        U, S, Vt = torch.svd(F)
        S[..., -1] = 0
        F_rank2 = torch.matmul(U, torch.matmul(torch.diag_embed(S), Vt))
>       F_denormalized = torch.matmul(T2.transpose(1, 2), torch.matmul(F_rank2, T1))
E       RuntimeError: expected scalar type Double but found Float

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:48: RuntimeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]
==================== 6 failed, 9 passed, 1 xpassed in 0.42s ====================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'inductor', 'jit', 'onnxrt', 'tvm', 'openxla', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 16 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.23s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'openxla', 'onnxrt', 'inductor', 'jit', None, 'cudagraphs'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 16 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED

======================== 15 passed, 1 xpassed in 0.21s =========================
