output file:
processed_inferenceconvert_gray_image_to_bgr130.json
function:
convert_gray_image_to_bgr
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_base64_encoded_pickled_bytes-True]', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_buffer-ImageType.MULTIPART-True]', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_bytes-True] FAILED', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_gray_buffer-ImageType.MULTIPART-True] FAILED', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_gray_buffer-ImageType.MULTIPART-True]', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_string-True] FAILED', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pickled_bytes-ImageType.NUMPY-True]', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_buffer-True] FAILED', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pillow-False] FAILED', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes-True] FAILED', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_string-ImageType.BASE64-True]', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_gray_buffer-True]', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_rgba_buffer-ImageType.MULTIPART-True]', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_three_chanel_input_submitted', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_string-True]', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_local_path-ImageType.FILE-True]', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_rgba_buffer-True] FAILED', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pillow-ImageType.PILLOW-False]', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_rgba_buffer-ImageType.MULTIPART-True] FAILED', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_local_path-True] FAILED', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_base64_encoded_pickled_bytes-True] FAILED', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_local_path-True]', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_bytes-ImageType.BASE64-True] FAILED', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_bytes-ImageType.BASE64-True]', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes-True]', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pickled_bytes-ImageType.NUMPY-True] FAILED', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pillow-ImageType.PILLOW-False] FAILED', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_buffer-ImageType.MULTIPART-True] FAILED', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_buffer-True]', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_rgba_buffer-True]', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_bytes-True]', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_local_path-ImageType.FILE-True] FAILED', 'FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pillow-False]', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_gray_buffer-True] FAILED', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_string-ImageType.BASE64-True] FAILED', '../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_three_chanel_input_submitted FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/inference/inference/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/inference/inference
configfile: pytest.ini
plugins: anyio-4.8.0, requests-mock-1.11.0, timeout-2.3.1, retry-1.6.3, asyncio-0.21.1
asyncio: mode=Mode.STRICT
collecting ... [01/16/25 20:41:15] WARNING  Your inference package version 0.31.1 is out of date! Please upgrade to version 0.33.0 of inference for the latest features and bug fixes by running `pip install --upgrade inference`.    __init__.py:41
collected 152 items

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[400] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[401] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[403] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[404] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[500] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[501] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[502] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[503] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[504] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_payload_does_not_contain_image PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_jpeg_image_should_be_successfully_decoded PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_png_image_should_be_successfully_decoded PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_url_loading_not_allowed PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://google.com/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://subdomain.google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://subdomain.google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_empty_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_arbitrary_object_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_string_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_non_object_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_non_array_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_invalid_shape_array_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_array_with_non_standard_channels_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_valid_image_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_valid_image_given_but_not_allowed_to_unpickle PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_buffer_when_valid_input_provided PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_buffer_when_non_image_input_provided PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_valid_string_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_valid_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_valid_bytes_given_with_type_preamble PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_invalid_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_np_array PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_pillow_image PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_url[http://some/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_url[https://some/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_local_image_path PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[aaa] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[value2] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[value3] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_encoded_bytes_when_decoding_should_succeed[image_as_png_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_encoded_bytes_when_decoding_should_succeed[image_as_jpeg_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_encoded_bytes_when_decoding_should_fail PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_jpeg_base64_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_jpeg_base64_string] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_png_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_jpeg_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_base64_encoded_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_fail_due_to_unpickling_being_prohibited[image_as_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_fail_due_to_unpickling_being_prohibited[image_as_base64_encoded_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[some0] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[some1] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[1] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[value3] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[value4] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_choose_image_decoding_flags_when_disabled_auto_orient PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_choose_image_decoding_flags_when_enabled_auto_orient PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_type_cannot_be_inferred PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[base64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[file-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[multipart-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[numpy-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[pil-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[url-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[BASE64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[FILE-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[MULTIPART-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[NUMPY-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[PIL-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[URL-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[base64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[file-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[multipart-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[numpy-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[pil-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[url-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[BASE64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[FILE-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[MULTIPART-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[NUMPY-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[PIL-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[URL-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_not_recognised PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_not_recognised PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_jpeg_base64_bytes-ImageType.BASE64-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_jpeg_base64_string-ImageType.BASE64-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_local_path-ImageType.FILE-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_buffer-ImageType.MULTIPART-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_pickled_bytes-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_base64_encoded_pickled_bytes-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_pillow-ImageType.PILLOW-False] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_from_url_succeeds PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_from_url_fails PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_numpy_load_disabled_and_numpy_value_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_three_chanel_input_submitted FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_single_chanel_input_submitted PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_2d_input_submitted PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_bytes-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_string-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_local_path-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_buffer-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_rgba_buffer-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_gray_buffer-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_base64_encoded_pickled_bytes-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes_gray-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pillow-False] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_rgba_numpy_input PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_not_allowed_input PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[0] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[1] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[NOT AN IMAGE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[value3] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[value4] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_bytes-ImageType.BASE64-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_string-ImageType.BASE64-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_local_path-ImageType.FILE-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_buffer-ImageType.MULTIPART-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_rgba_buffer-ImageType.MULTIPART-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_gray_buffer-ImageType.MULTIPART-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pickled_bytes-ImageType.NUMPY-True] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pickled_bytes_gray-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pillow-ImageType.PILLOW-False] FAILED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_from_known_type_due_to_numpy_unpickling_forbidden PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_rgb_on_bgr_image PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_rgb_on_rgb_image PASSED

=================================== FAILURES ===================================
_______ test_convert_gray_image_to_bgr_when_three_chanel_input_submitted _______

image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def test_convert_gray_image_to_bgr_when_three_chanel_input_submitted(
        image_as_numpy: np.ndarray,
    ) -> None:
        # when
>       result = convert_gray_image_to_bgr(image=image_as_numpy)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:776: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_bytes-True] _

fixture_name = 'image_as_jpeg_base64_bytes', is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = <FixtureRequest for <Function test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_bytes-True]>>

    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    @pytest.mark.parametrize(
        "fixture_name, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", True),
            ("image_as_jpeg_base64_string", True),
            ("image_as_local_path", True),
            ("image_as_buffer", True),
            ("image_as_rgba_buffer", True),  # works due to cv load flags
            ("image_as_gray_buffer", True),
            ("image_as_pickled_bytes", True),
            ("image_as_base64_encoded_pickled_bytes", True),
            ("image_as_pickled_bytes_gray", True),
            ("image_as_pillow", False),
        ],
    )
    def test_load_image_when_load_should_succeed_from_inferred_type(
        fixture_name: str,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
    
        # when
>       result = load_image(value=value)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_string-True] _

fixture_name = 'image_as_jpeg_base64_string', is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = <FixtureRequest for <Function test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_string-True]>>

    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    @pytest.mark.parametrize(
        "fixture_name, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", True),
            ("image_as_jpeg_base64_string", True),
            ("image_as_local_path", True),
            ("image_as_buffer", True),
            ("image_as_rgba_buffer", True),  # works due to cv load flags
            ("image_as_gray_buffer", True),
            ("image_as_pickled_bytes", True),
            ("image_as_base64_encoded_pickled_bytes", True),
            ("image_as_pickled_bytes_gray", True),
            ("image_as_pillow", False),
        ],
    )
    def test_load_image_when_load_should_succeed_from_inferred_type(
        fixture_name: str,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
    
        # when
>       result = load_image(value=value)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_inferred_type[image_as_local_path-True] _

fixture_name = 'image_as_local_path', is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = <FixtureRequest for <Function test_load_image_when_load_should_succeed_from_inferred_type[image_as_local_path-True]>>

    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    @pytest.mark.parametrize(
        "fixture_name, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", True),
            ("image_as_jpeg_base64_string", True),
            ("image_as_local_path", True),
            ("image_as_buffer", True),
            ("image_as_rgba_buffer", True),  # works due to cv load flags
            ("image_as_gray_buffer", True),
            ("image_as_pickled_bytes", True),
            ("image_as_base64_encoded_pickled_bytes", True),
            ("image_as_pickled_bytes_gray", True),
            ("image_as_pillow", False),
        ],
    )
    def test_load_image_when_load_should_succeed_from_inferred_type(
        fixture_name: str,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
    
        # when
>       result = load_image(value=value)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_inferred_type[image_as_buffer-True] _

fixture_name = 'image_as_buffer', is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = <FixtureRequest for <Function test_load_image_when_load_should_succeed_from_inferred_type[image_as_buffer-True]>>

    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    @pytest.mark.parametrize(
        "fixture_name, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", True),
            ("image_as_jpeg_base64_string", True),
            ("image_as_local_path", True),
            ("image_as_buffer", True),
            ("image_as_rgba_buffer", True),  # works due to cv load flags
            ("image_as_gray_buffer", True),
            ("image_as_pickled_bytes", True),
            ("image_as_base64_encoded_pickled_bytes", True),
            ("image_as_pickled_bytes_gray", True),
            ("image_as_pillow", False),
        ],
    )
    def test_load_image_when_load_should_succeed_from_inferred_type(
        fixture_name: str,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
    
        # when
>       result = load_image(value=value)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_inferred_type[image_as_rgba_buffer-True] _

fixture_name = 'image_as_rgba_buffer', is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = <FixtureRequest for <Function test_load_image_when_load_should_succeed_from_inferred_type[image_as_rgba_buffer-True]>>

    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    @pytest.mark.parametrize(
        "fixture_name, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", True),
            ("image_as_jpeg_base64_string", True),
            ("image_as_local_path", True),
            ("image_as_buffer", True),
            ("image_as_rgba_buffer", True),  # works due to cv load flags
            ("image_as_gray_buffer", True),
            ("image_as_pickled_bytes", True),
            ("image_as_base64_encoded_pickled_bytes", True),
            ("image_as_pickled_bytes_gray", True),
            ("image_as_pillow", False),
        ],
    )
    def test_load_image_when_load_should_succeed_from_inferred_type(
        fixture_name: str,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
    
        # when
>       result = load_image(value=value)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_inferred_type[image_as_gray_buffer-True] _

fixture_name = 'image_as_gray_buffer', is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = <FixtureRequest for <Function test_load_image_when_load_should_succeed_from_inferred_type[image_as_gray_buffer-True]>>

    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    @pytest.mark.parametrize(
        "fixture_name, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", True),
            ("image_as_jpeg_base64_string", True),
            ("image_as_local_path", True),
            ("image_as_buffer", True),
            ("image_as_rgba_buffer", True),  # works due to cv load flags
            ("image_as_gray_buffer", True),
            ("image_as_pickled_bytes", True),
            ("image_as_base64_encoded_pickled_bytes", True),
            ("image_as_pickled_bytes_gray", True),
            ("image_as_pillow", False),
        ],
    )
    def test_load_image_when_load_should_succeed_from_inferred_type(
        fixture_name: str,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
    
        # when
>       result = load_image(value=value)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes-True] _

fixture_name = 'image_as_pickled_bytes', is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = <FixtureRequest for <Function test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes-True]>>

    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    @pytest.mark.parametrize(
        "fixture_name, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", True),
            ("image_as_jpeg_base64_string", True),
            ("image_as_local_path", True),
            ("image_as_buffer", True),
            ("image_as_rgba_buffer", True),  # works due to cv load flags
            ("image_as_gray_buffer", True),
            ("image_as_pickled_bytes", True),
            ("image_as_base64_encoded_pickled_bytes", True),
            ("image_as_pickled_bytes_gray", True),
            ("image_as_pillow", False),
        ],
    )
    def test_load_image_when_load_should_succeed_from_inferred_type(
        fixture_name: str,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
    
        # when
>       result = load_image(value=value)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_inferred_type[image_as_base64_encoded_pickled_bytes-True] _

fixture_name = 'image_as_base64_encoded_pickled_bytes', is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = <FixtureRequest for <Function test_load_image_when_load_should_succeed_from_inferred_type[image_as_base64_encoded_pickled_bytes-True]>>

    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    @pytest.mark.parametrize(
        "fixture_name, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", True),
            ("image_as_jpeg_base64_string", True),
            ("image_as_local_path", True),
            ("image_as_buffer", True),
            ("image_as_rgba_buffer", True),  # works due to cv load flags
            ("image_as_gray_buffer", True),
            ("image_as_pickled_bytes", True),
            ("image_as_base64_encoded_pickled_bytes", True),
            ("image_as_pickled_bytes_gray", True),
            ("image_as_pillow", False),
        ],
    )
    def test_load_image_when_load_should_succeed_from_inferred_type(
        fixture_name: str,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
    
        # when
>       result = load_image(value=value)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_inferred_type[image_as_pillow-False] _

fixture_name = 'image_as_pillow', is_bgr = False
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = <FixtureRequest for <Function test_load_image_when_load_should_succeed_from_inferred_type[image_as_pillow-False]>>

    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    @pytest.mark.parametrize(
        "fixture_name, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", True),
            ("image_as_jpeg_base64_string", True),
            ("image_as_local_path", True),
            ("image_as_buffer", True),
            ("image_as_rgba_buffer", True),  # works due to cv load flags
            ("image_as_gray_buffer", True),
            ("image_as_pickled_bytes", True),
            ("image_as_base64_encoded_pickled_bytes", True),
            ("image_as_pickled_bytes_gray", True),
            ("image_as_pillow", False),
        ],
    )
    def test_load_image_when_load_should_succeed_from_inferred_type(
        fixture_name: str,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
    
        # when
>       result = load_image(value=value)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_bytes-ImageType.BASE64-True] _

fixture_name = 'image_as_jpeg_base64_bytes'
image_type = <ImageType.BASE64: 'base64'>, is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = InferenceRequestImage(type='base64', value=b'/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAMEBgUGB...ooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD/2Q==')

    @pytest.mark.parametrize(
        "fixture_name, image_type, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", ImageType.BASE64, True),
            ("image_as_jpeg_base64_string", ImageType.BASE64, True),
            ("image_as_local_path", ImageType.FILE, True),
            ("image_as_buffer", ImageType.MULTIPART, True),
            (
                "image_as_rgba_buffer",
                ImageType.MULTIPART,
                True,
            ),  # works due to cv load flags
            ("image_as_gray_buffer", ImageType.MULTIPART, True),
            ("image_as_pickled_bytes", ImageType.NUMPY, True),
            ("image_as_pickled_bytes_gray", ImageType.NUMPY, True),
            ("image_as_pillow", ImageType.PILLOW, False),
        ],
    )
    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    def test_load_image_when_load_should_succeed_from_known_type(
        fixture_name: str,
        image_type: ImageType,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
        request = InferenceRequestImage(value=value, type=image_type.value)
    
        # when
>       result = load_image(value=request)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:902: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_string-ImageType.BASE64-True] _

fixture_name = 'image_as_jpeg_base64_string'
image_type = <ImageType.BASE64: 'base64'>, is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = InferenceRequestImage(type='base64', value='/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAMEBgUGBg...ooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD/2Q==')

    @pytest.mark.parametrize(
        "fixture_name, image_type, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", ImageType.BASE64, True),
            ("image_as_jpeg_base64_string", ImageType.BASE64, True),
            ("image_as_local_path", ImageType.FILE, True),
            ("image_as_buffer", ImageType.MULTIPART, True),
            (
                "image_as_rgba_buffer",
                ImageType.MULTIPART,
                True,
            ),  # works due to cv load flags
            ("image_as_gray_buffer", ImageType.MULTIPART, True),
            ("image_as_pickled_bytes", ImageType.NUMPY, True),
            ("image_as_pickled_bytes_gray", ImageType.NUMPY, True),
            ("image_as_pillow", ImageType.PILLOW, False),
        ],
    )
    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    def test_load_image_when_load_should_succeed_from_known_type(
        fixture_name: str,
        image_type: ImageType,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
        request = InferenceRequestImage(value=value, type=image_type.value)
    
        # when
>       result = load_image(value=request)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:902: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_known_type[image_as_local_path-ImageType.FILE-True] _

fixture_name = 'image_as_local_path', image_type = <ImageType.FILE: 'file'>
is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = InferenceRequestImage(type='file', value='/tmp/tmpuvgcmczn/some_image.jpg')

    @pytest.mark.parametrize(
        "fixture_name, image_type, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", ImageType.BASE64, True),
            ("image_as_jpeg_base64_string", ImageType.BASE64, True),
            ("image_as_local_path", ImageType.FILE, True),
            ("image_as_buffer", ImageType.MULTIPART, True),
            (
                "image_as_rgba_buffer",
                ImageType.MULTIPART,
                True,
            ),  # works due to cv load flags
            ("image_as_gray_buffer", ImageType.MULTIPART, True),
            ("image_as_pickled_bytes", ImageType.NUMPY, True),
            ("image_as_pickled_bytes_gray", ImageType.NUMPY, True),
            ("image_as_pillow", ImageType.PILLOW, False),
        ],
    )
    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    def test_load_image_when_load_should_succeed_from_known_type(
        fixture_name: str,
        image_type: ImageType,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
        request = InferenceRequestImage(value=value, type=image_type.value)
    
        # when
>       result = load_image(value=request)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:902: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_known_type[image_as_buffer-ImageType.MULTIPART-True] _

fixture_name = 'image_as_buffer'
image_type = <ImageType.MULTIPART: 'multipart'>, is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = InferenceRequestImage(type='multipart', value=<_io.BytesIO object at 0x77afbf8c6930>)

    @pytest.mark.parametrize(
        "fixture_name, image_type, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", ImageType.BASE64, True),
            ("image_as_jpeg_base64_string", ImageType.BASE64, True),
            ("image_as_local_path", ImageType.FILE, True),
            ("image_as_buffer", ImageType.MULTIPART, True),
            (
                "image_as_rgba_buffer",
                ImageType.MULTIPART,
                True,
            ),  # works due to cv load flags
            ("image_as_gray_buffer", ImageType.MULTIPART, True),
            ("image_as_pickled_bytes", ImageType.NUMPY, True),
            ("image_as_pickled_bytes_gray", ImageType.NUMPY, True),
            ("image_as_pillow", ImageType.PILLOW, False),
        ],
    )
    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    def test_load_image_when_load_should_succeed_from_known_type(
        fixture_name: str,
        image_type: ImageType,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
        request = InferenceRequestImage(value=value, type=image_type.value)
    
        # when
>       result = load_image(value=request)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:902: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_known_type[image_as_rgba_buffer-ImageType.MULTIPART-True] _

fixture_name = 'image_as_rgba_buffer'
image_type = <ImageType.MULTIPART: 'multipart'>, is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = InferenceRequestImage(type='multipart', value=<_io.BytesIO object at 0x77afbf680cc0>)

    @pytest.mark.parametrize(
        "fixture_name, image_type, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", ImageType.BASE64, True),
            ("image_as_jpeg_base64_string", ImageType.BASE64, True),
            ("image_as_local_path", ImageType.FILE, True),
            ("image_as_buffer", ImageType.MULTIPART, True),
            (
                "image_as_rgba_buffer",
                ImageType.MULTIPART,
                True,
            ),  # works due to cv load flags
            ("image_as_gray_buffer", ImageType.MULTIPART, True),
            ("image_as_pickled_bytes", ImageType.NUMPY, True),
            ("image_as_pickled_bytes_gray", ImageType.NUMPY, True),
            ("image_as_pillow", ImageType.PILLOW, False),
        ],
    )
    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    def test_load_image_when_load_should_succeed_from_known_type(
        fixture_name: str,
        image_type: ImageType,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
        request = InferenceRequestImage(value=value, type=image_type.value)
    
        # when
>       result = load_image(value=request)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:902: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_known_type[image_as_gray_buffer-ImageType.MULTIPART-True] _

fixture_name = 'image_as_gray_buffer'
image_type = <ImageType.MULTIPART: 'multipart'>, is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = InferenceRequestImage(type='multipart', value=<_io.BytesIO object at 0x77afbf682980>)

    @pytest.mark.parametrize(
        "fixture_name, image_type, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", ImageType.BASE64, True),
            ("image_as_jpeg_base64_string", ImageType.BASE64, True),
            ("image_as_local_path", ImageType.FILE, True),
            ("image_as_buffer", ImageType.MULTIPART, True),
            (
                "image_as_rgba_buffer",
                ImageType.MULTIPART,
                True,
            ),  # works due to cv load flags
            ("image_as_gray_buffer", ImageType.MULTIPART, True),
            ("image_as_pickled_bytes", ImageType.NUMPY, True),
            ("image_as_pickled_bytes_gray", ImageType.NUMPY, True),
            ("image_as_pillow", ImageType.PILLOW, False),
        ],
    )
    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    def test_load_image_when_load_should_succeed_from_known_type(
        fixture_name: str,
        image_type: ImageType,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
        request = InferenceRequestImage(value=value, type=image_type.value)
    
        # when
>       result = load_image(value=request)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:902: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_known_type[image_as_pickled_bytes-ImageType.NUMPY-True] _

fixture_name = 'image_as_pickled_bytes', image_type = <ImageType.NUMPY: 'numpy'>
is_bgr = True
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = InferenceRequestImage(type='numpy', value=b'\x80\x04\x95\x8f\xc0\x00\x00\x00\x00\x00\x00\x8c\x15numpy.core.multiarray\...00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x94t\x94b.')

    @pytest.mark.parametrize(
        "fixture_name, image_type, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", ImageType.BASE64, True),
            ("image_as_jpeg_base64_string", ImageType.BASE64, True),
            ("image_as_local_path", ImageType.FILE, True),
            ("image_as_buffer", ImageType.MULTIPART, True),
            (
                "image_as_rgba_buffer",
                ImageType.MULTIPART,
                True,
            ),  # works due to cv load flags
            ("image_as_gray_buffer", ImageType.MULTIPART, True),
            ("image_as_pickled_bytes", ImageType.NUMPY, True),
            ("image_as_pickled_bytes_gray", ImageType.NUMPY, True),
            ("image_as_pillow", ImageType.PILLOW, False),
        ],
    )
    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    def test_load_image_when_load_should_succeed_from_known_type(
        fixture_name: str,
        image_type: ImageType,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
        request = InferenceRequestImage(value=value, type=image_type.value)
    
        # when
>       result = load_image(value=request)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:902: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
_ test_load_image_when_load_should_succeed_from_known_type[image_as_pillow-ImageType.PILLOW-False] _

fixture_name = 'image_as_pillow', image_type = <ImageType.PILLOW: 'pil'>
is_bgr = False
image_as_numpy = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)
request = InferenceRequestImage(type='pil', value=<PIL.Image.Image image mode=RGB size=128x128 at 0x77AFBF5FA6D0>)

    @pytest.mark.parametrize(
        "fixture_name, image_type, is_bgr",
        [
            ("image_as_jpeg_base64_bytes", ImageType.BASE64, True),
            ("image_as_jpeg_base64_string", ImageType.BASE64, True),
            ("image_as_local_path", ImageType.FILE, True),
            ("image_as_buffer", ImageType.MULTIPART, True),
            (
                "image_as_rgba_buffer",
                ImageType.MULTIPART,
                True,
            ),  # works due to cv load flags
            ("image_as_gray_buffer", ImageType.MULTIPART, True),
            ("image_as_pickled_bytes", ImageType.NUMPY, True),
            ("image_as_pickled_bytes_gray", ImageType.NUMPY, True),
            ("image_as_pillow", ImageType.PILLOW, False),
        ],
    )
    @mock.patch.object(image_utils, "ALLOW_NUMPY_INPUT", True)
    def test_load_image_when_load_should_succeed_from_known_type(
        fixture_name: str,
        image_type: ImageType,
        is_bgr: bool,
        image_as_numpy: np.ndarray,
        request: FixtureRequest,
    ) -> None:
        # given
        value = request.getfixturevalue(fixture_name)
        request = InferenceRequestImage(value=value, type=image_type.value)
    
        # when
>       result = load_image(value=request)

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py:902: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/inference/inference/inference/core/utils/image_utils.py:67: in load_image
    np_image = convert_gray_image_to_bgr(image=np_image)
../publishablew/inference/inference/inference/core/utils/image_utils.py:358: in convert_gray_image_to_bgr
    return convert_gray_image_to_bgr(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

gray_image = array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0...     [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], dtype=uint8)

    def convert_gray_image_to_bgr(gray_image):
        """
        Convert a grayscale image to BGR format.
    
        Parameters:
        gray_image (numpy.ndarray): Input grayscale image.
    
        Returns:
        numpy.ndarray: BGR image.
        """
        if len(gray_image.shape) == 2 or (len(gray_image.shape) == 3 and gray_image.shape[2] == 1):
            bgr_image = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
            return bgr_image
        else:
>           raise ValueError('Input image is not a valid grayscale image.')
E           ValueError: Input image is not a valid grayscale image.

../publishablew/inference/inference/inference/core/utils/temp.py:41: ValueError
=============================== warnings summary ===============================
../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'field'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/starlette/formparsers.py:12
  PendingDeprecationWarning: Please use `import python_multipart` instead.

../publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1137
../publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1150
../publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1166
  PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/inference/core/entities/requests/clip.py:29
../publishablew/inference/inference/inference/core/entities/requests/gaze.py:40
../publishablew/inference/inference/inference/core/entities/requests/cogvlm.py:41
../publishablew/inference/inference/inference/core/entities/requests/trocr.py:25
  PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
  PydanticDeprecatedSince20: `allow_reuse` is deprecated and will be ignored; it should no longer be necessary. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/timm/models/layers/__init__.py:48
  FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_three_chanel_input_submitted
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_bytes-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_string-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_local_path-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_buffer-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_rgba_buffer-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_gray_buffer-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_base64_encoded_pickled_bytes-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pillow-False]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_bytes-ImageType.BASE64-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_string-ImageType.BASE64-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_local_path-ImageType.FILE-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_buffer-ImageType.MULTIPART-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_rgba_buffer-ImageType.MULTIPART-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_gray_buffer-ImageType.MULTIPART-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pickled_bytes-ImageType.NUMPY-True]
FAILED ../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pillow-ImageType.PILLOW-False]
================= 18 failed, 134 passed, 13 warnings in 5.22s ==================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/inference/inference/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/inference/inference
configfile: pytest.ini
plugins: anyio-4.8.0, requests-mock-1.11.0, timeout-2.3.1, retry-1.6.3, asyncio-0.21.1
asyncio: mode=Mode.STRICT
collecting ... [01/16/25 20:41:21] WARNING  Your inference package version 0.31.1 is out of date! Please upgrade to version 0.33.0 of inference for the latest features and bug fixes by running `pip install --upgrade inference`.    __init__.py:41
collected 152 items

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[400] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[401] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[403] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[404] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[500] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[501] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[502] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[503] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[504] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_payload_does_not_contain_image PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_jpeg_image_should_be_successfully_decoded PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_png_image_should_be_successfully_decoded PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_url_loading_not_allowed PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://google.com/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://subdomain.google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://subdomain.google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_empty_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_arbitrary_object_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_string_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_non_object_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_non_array_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_invalid_shape_array_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_array_with_non_standard_channels_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_valid_image_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_valid_image_given_but_not_allowed_to_unpickle PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_buffer_when_valid_input_provided PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_buffer_when_non_image_input_provided PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_valid_string_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_valid_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_valid_bytes_given_with_type_preamble PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_invalid_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_np_array PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_pillow_image PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_url[http://some/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_url[https://some/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_local_image_path PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[aaa] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[value2] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[value3] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_encoded_bytes_when_decoding_should_succeed[image_as_png_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_encoded_bytes_when_decoding_should_succeed[image_as_jpeg_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_encoded_bytes_when_decoding_should_fail PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_jpeg_base64_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_jpeg_base64_string] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_png_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_jpeg_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_base64_encoded_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_fail_due_to_unpickling_being_prohibited[image_as_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_fail_due_to_unpickling_being_prohibited[image_as_base64_encoded_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[some0] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[some1] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[1] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[value3] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[value4] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_choose_image_decoding_flags_when_disabled_auto_orient PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_choose_image_decoding_flags_when_enabled_auto_orient PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_type_cannot_be_inferred PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[base64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[file-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[multipart-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[numpy-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[pil-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[url-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[BASE64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[FILE-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[MULTIPART-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[NUMPY-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[PIL-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[URL-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[base64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[file-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[multipart-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[numpy-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[pil-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[url-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[BASE64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[FILE-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[MULTIPART-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[NUMPY-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[PIL-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[URL-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_not_recognised PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_not_recognised PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_jpeg_base64_bytes-ImageType.BASE64-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_jpeg_base64_string-ImageType.BASE64-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_local_path-ImageType.FILE-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_buffer-ImageType.MULTIPART-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_pickled_bytes-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_base64_encoded_pickled_bytes-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_pillow-ImageType.PILLOW-False] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_from_url_succeeds PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_from_url_fails PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_numpy_load_disabled_and_numpy_value_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_three_chanel_input_submitted PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_single_chanel_input_submitted PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_2d_input_submitted PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_bytes-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_string-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_local_path-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_buffer-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_rgba_buffer-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_gray_buffer-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_base64_encoded_pickled_bytes-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes_gray-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pillow-False] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_rgba_numpy_input PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_not_allowed_input PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[0] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[1] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[NOT AN IMAGE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[value3] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[value4] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_bytes-ImageType.BASE64-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_string-ImageType.BASE64-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_local_path-ImageType.FILE-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_buffer-ImageType.MULTIPART-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_rgba_buffer-ImageType.MULTIPART-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_gray_buffer-ImageType.MULTIPART-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pickled_bytes-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pickled_bytes_gray-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pillow-ImageType.PILLOW-False] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_from_known_type_due_to_numpy_unpickling_forbidden PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_rgb_on_bgr_image PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_rgb_on_rgb_image PASSED

=============================== warnings summary ===============================
../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'field'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/starlette/formparsers.py:12
  PendingDeprecationWarning: Please use `import python_multipart` instead.

../publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1137
../publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1150
../publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1166
  PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/inference/core/entities/requests/clip.py:29
../publishablew/inference/inference/inference/core/entities/requests/gaze.py:40
../publishablew/inference/inference/inference/core/entities/requests/cogvlm.py:41
../publishablew/inference/inference/inference/core/entities/requests/trocr.py:25
  PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
  PydanticDeprecatedSince20: `allow_reuse` is deprecated and will be ignored; it should no longer be necessary. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/timm/models/layers/__init__.py:48
  FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 152 passed, 13 warnings in 4.77s =======================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/inference/inference/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/inference/inference
configfile: pytest.ini
plugins: anyio-4.8.0, requests-mock-1.11.0, timeout-2.3.1, retry-1.6.3, asyncio-0.21.1
asyncio: mode=Mode.STRICT
collecting ... [01/16/25 20:41:08] WARNING  Your inference package version 0.31.1 is out of date! Please upgrade to version 0.33.0 of inference for the latest features and bug fixes by running `pip install --upgrade inference`.    __init__.py:41
collected 152 items

../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[400] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[401] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[403] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[404] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[500] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[501] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[502] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[503] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_request_not_succeeded[504] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_payload_does_not_contain_image PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_jpeg_image_should_be_successfully_decoded PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_png_image_should_be_successfully_decoded PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_url_loading_not_allowed PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://google.com/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_https_is_enforced_and_provided_urls_with_http_schema[http://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_fqdns_are_enforced_and_urls_based_on_ips_provided[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_not_whitelisted[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://subdomain.google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_whitelisted[https://google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://127.0.0.1/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://127.0.0.1:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://[fe80::1ff:fe23:4567:890a%25eth0]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://[fe80::1ff:fe23:4567:890a%25eth0]:90/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://subdomain.google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_url_when_locations_blacklisted[https://google.com/image.jpg?param=some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_empty_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_arbitrary_object_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_string_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_non_object_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_non_array_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_invalid_shape_array_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_array_with_non_standard_channels_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_valid_image_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_numpy_str_when_valid_image_given_but_not_allowed_to_unpickle PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_buffer_when_valid_input_provided PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_buffer_when_non_image_input_provided PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_valid_string_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_valid_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_valid_bytes_given_with_type_preamble PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_base64_when_invalid_bytes_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_np_array PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_pillow_image PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_url[http://some/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_url[https://some/image.jpg] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_local_image_path PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[aaa] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[some] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[value2] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_inferred_type_when_value_is_unknown_and_should_be_tried_against_set_of_methods[value3] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_encoded_bytes_when_decoding_should_succeed[image_as_png_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_encoded_bytes_when_decoding_should_succeed[image_as_jpeg_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_from_encoded_bytes_when_decoding_should_fail PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_jpeg_base64_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_jpeg_base64_string] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_png_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_jpeg_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_successful[image_as_base64_encoded_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_fail_due_to_unpickling_being_prohibited[image_as_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_be_fail_due_to_unpickling_being_prohibited[image_as_base64_encoded_pickled_bytes] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[some0] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[some1] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[1] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[value3] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_attempt_loading_image_from_string_when_parsing_should_fail[value4] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_choose_image_decoding_flags_when_disabled_auto_orient PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_choose_image_decoding_flags_when_enabled_auto_orient PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_type_cannot_be_inferred PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[base64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[file-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[multipart-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[numpy-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[pil-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[url-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[BASE64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[FILE-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[MULTIPART-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[NUMPY-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[PIL-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_recognised[URL-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[base64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[file-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[multipart-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[numpy-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[pil-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[url-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[BASE64-ImageType.BASE64] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[FILE-ImageType.FILE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[MULTIPART-ImageType.MULTIPART] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[NUMPY-ImageType.NUMPY] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[PIL-ImageType.PILLOW] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_recognised[URL-ImageType.URL] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_dict_and_type_is_not_recognised PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_extract_image_payload_and_type_when_value_is_request_and_type_is_not_recognised PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_jpeg_base64_bytes-ImageType.BASE64-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_jpeg_base64_string-ImageType.BASE64-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_local_path-ImageType.FILE-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_buffer-ImageType.MULTIPART-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_pickled_bytes-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_base64_encoded_pickled_bytes-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_should_succeed[image_as_pillow-ImageType.PILLOW-False] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_from_url_succeeds PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_load_from_url_fails PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_with_known_type_when_numpy_load_disabled_and_numpy_value_given PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_three_chanel_input_submitted PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_single_chanel_input_submitted PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_convert_gray_image_to_bgr_when_2d_input_submitted PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_bytes-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_jpeg_base64_string-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_local_path-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_buffer-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_rgba_buffer-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_gray_buffer-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_base64_encoded_pickled_bytes-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pickled_bytes_gray-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_inferred_type[image_as_pillow-False] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_rgba_numpy_input PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_not_allowed_input PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[0] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[1] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[NOT AN IMAGE] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[value3] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_on_invalid_input[value4] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_bytes-ImageType.BASE64-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_jpeg_base64_string-ImageType.BASE64-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_local_path-ImageType.FILE-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_buffer-ImageType.MULTIPART-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_rgba_buffer-ImageType.MULTIPART-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_gray_buffer-ImageType.MULTIPART-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pickled_bytes-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pickled_bytes_gray-ImageType.NUMPY-True] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_succeed_from_known_type[image_as_pillow-ImageType.PILLOW-False] PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_when_load_should_fail_from_known_type_due_to_numpy_unpickling_forbidden PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_rgb_on_bgr_image PASSED
../publishablew/inference/inference/tests/inference/unit_tests/core/utils/test_image_utils.py::test_load_image_rgb_on_rgb_image PASSED

=============================== warnings summary ===============================
../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'example'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/fields.py:1042
  PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'field'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/starlette/formparsers.py:12
  PendingDeprecationWarning: Please use `import python_multipart` instead.

../publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1137
../publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1150
../publishablew/inference/inference/inference/core/workflows/execution_engine/entities/types.py:1166
  PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/inference/core/entities/requests/clip.py:29
../publishablew/inference/inference/inference/core/entities/requests/gaze.py:40
../publishablew/inference/inference/inference/core/entities/requests/cogvlm.py:41
../publishablew/inference/inference/inference/core/entities/requests/trocr.py:25
  PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
../publishablew/inference/inference/venv/lib/python3.11/site-packages/pydantic/deprecated/class_validators.py:121
  PydanticDeprecatedSince20: `allow_reuse` is deprecated and will be ignored; it should no longer be necessary. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/

../publishablew/inference/inference/venv/lib/python3.11/site-packages/timm/models/layers/__init__.py:48
  FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 152 passed, 13 warnings in 5.30s =======================
