output file:
processed_scikit-learnlars_path40.json
function:
lars_path
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsIC-False-args2]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_gives_lstsq_solution FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsCV-True-args4] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_estimatorclasses_positive_constraint', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_precomputed', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsCV-True-args4] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_add_features', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsCV-True-args4]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_all_precomputed FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[True] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_copy_X_with_auto_gram FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_positive FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lasso] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsIC-False-args2] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[True] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_multitarget', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[Lars] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_R_implementation', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_positive_constraint FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_lstsq FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsIC-False-args2]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LarsCV-True-args3] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsCV-True-args4]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLars-True-args1] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est0] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsCV-True-args4]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_early_stopping FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_ic FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_collinearity', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[False]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[True]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_gives_lstsq_solution', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_all_precomputed', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_copy_X_with_auto_gram', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_positive', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est1] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple_precomputed', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LarsCV-True-args3] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_n_nonzero_coefs', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_path_length FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned2 FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_lstsq', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[aic]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-Lars-True-args0]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[False]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_early_stopping', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LarsCV] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lasso]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_positive_constraint', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lasso]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLars-True-args1]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[False] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned2', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[Lars]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LarsCV-True-args3]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_precomputed FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv_max_iter', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lar] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est1]', 'FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple_precomputed FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_multitarget FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-Lars-True-args0]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsIC-False-args2] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[True]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_rank_deficient_design', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[False] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[False]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_readonly_data FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lar] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[True]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est0]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[Lars-True-args0] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsIC-False-args2]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lar]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LarsCV-True-args3]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_R_implementation FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_all_precomputed', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LarsCV-True-args3] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[bic] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLars-True-args1]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[True] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_all_precomputed FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[aic] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[bic]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_add_features FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_rank_deficient_design FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lar]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLars-True-args1] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_readonly_data', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[Lars-True-args0]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsIC-False-args2] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LarsCV]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_singular_matrix', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLars-True-args1]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_collinearity FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_path_length', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_x_none_gram_none_raises_value_error', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lasso] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsCV-True-args4] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_X_none_gram_not_none FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LarsCV-True-args3]', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_n_nonzero_coefs FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_singular_matrix FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[False] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-Lars-True-args0] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_ic', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_estimatorclasses_positive_constraint FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_X_none_gram_not_none', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_x_none_gram_none_raises_value_error FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLars-True-args1] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv_max_iter FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-Lars-True-args0] FAILED'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 62 items

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple I: Seeding RNGs with 1226422311
FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple_precomputed FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lar] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lasso] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lar] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lasso] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_x_none_gram_none_raises_value_error FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_all_precomputed FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_lstsq FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_gives_lstsq_solution FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_collinearity FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_precomputed FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_all_precomputed FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[Lars] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LarsCV] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_singular_matrix FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_rank_deficient_design FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_early_stopping FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_path_length FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned2 FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_add_features FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_n_nonzero_coefs FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_multitarget FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv_max_iter FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_ic FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_readonly_data FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_positive_constraint FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_estimatorclasses_positive_constraint FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_positive FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_R_implementation FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[True] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[False] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[True] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[False] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est0] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est1] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_X_none_gram_not_none FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_copy_X_with_auto_gram FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-Lars-True-args0] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLars-True-args1] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsIC-False-args2] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LarsCV-True-args3] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsCV-True-args4] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-Lars-True-args0] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLars-True-args1] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsIC-False-args2] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LarsCV-True-args3] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsCV-True-args4] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[Lars-True-args0] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLars-True-args1] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsIC-False-args2] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LarsCV-True-args3] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsCV-True-args4] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[aic] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[bic] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[True] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[False] FAILED

=================================== FAILURES ===================================
_________________________________ test_simple __________________________________

    def test_simple():
        # Principle of Lars is to keep covariances tied and decreasing
    
        # also test verbose output
        import sys
        from io import StringIO
    
        old_stdout = sys.stdout
        try:
            sys.stdout = StringIO()
    
>           _, _, coef_path_ = linear_model.lars_path(X, y, method="lar", verbose=10)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
___________________________ test_simple_precomputed ____________________________

    def test_simple_precomputed():
        # The same, with precomputed Gram matrix
    
>       _, _, coef_path_ = linear_model.lars_path(X, y, Gram=G, method="lar")

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
___________________ test_lars_path_gram_equivalent[True-lar] ___________________

method = 'lar', return_path = True

    @pytest.mark.parametrize("method", ["lar", "lasso"])
    @pytest.mark.parametrize("return_path", [True, False])
    def test_lars_path_gram_equivalent(method, return_path):
        _assert_same_lars_path_result(
            linear_model.lars_path_gram(
                Xy=Xy, Gram=G, n_samples=n_samples, method=method, return_path=return_path
            ),
>           linear_model.lars_path(X, y, Gram=G, method=method, return_path=return_path),
        )

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________ test_lars_path_gram_equivalent[True-lasso] __________________

method = 'lasso', return_path = True

    @pytest.mark.parametrize("method", ["lar", "lasso"])
    @pytest.mark.parametrize("return_path", [True, False])
    def test_lars_path_gram_equivalent(method, return_path):
        _assert_same_lars_path_result(
            linear_model.lars_path_gram(
                Xy=Xy, Gram=G, n_samples=n_samples, method=method, return_path=return_path
            ),
>           linear_model.lars_path(X, y, Gram=G, method=method, return_path=return_path),
        )

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________ test_lars_path_gram_equivalent[False-lar] ___________________

method = 'lar', return_path = False

    @pytest.mark.parametrize("method", ["lar", "lasso"])
    @pytest.mark.parametrize("return_path", [True, False])
    def test_lars_path_gram_equivalent(method, return_path):
        _assert_same_lars_path_result(
            linear_model.lars_path_gram(
                Xy=Xy, Gram=G, n_samples=n_samples, method=method, return_path=return_path
            ),
>           linear_model.lars_path(X, y, Gram=G, method=method, return_path=return_path),
        )

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________ test_lars_path_gram_equivalent[False-lasso] __________________

method = 'lasso', return_path = False

    @pytest.mark.parametrize("method", ["lar", "lasso"])
    @pytest.mark.parametrize("return_path", [True, False])
    def test_lars_path_gram_equivalent(method, return_path):
        _assert_same_lars_path_result(
            linear_model.lars_path_gram(
                Xy=Xy, Gram=G, n_samples=n_samples, method=method, return_path=return_path
            ),
>           linear_model.lars_path(X, y, Gram=G, method=method, return_path=return_path),
        )

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
___________________ test_x_none_gram_none_raises_value_error ___________________

    def test_x_none_gram_none_raises_value_error():
        # Test that lars_path with no X and Gram raises exception
        Xy = np.dot(X.T, y)
        with pytest.raises(ValueError, match="X and Gram cannot both be unspecified"):
>           linear_model.lars_path(None, y, Gram=None, Xy=Xy)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_____________________________ test_all_precomputed _____________________________

    def test_all_precomputed():
        # Test that lars_path with precomputed Gram and Xy gives the right answer
        G = np.dot(X.T, X)
        Xy = np.dot(X.T, y)
        for method in "lar", "lasso":
>           output = linear_model.lars_path(X, y, method=method)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_______________________________ test_lars_lstsq ________________________________

    @pytest.mark.filterwarnings("ignore: `rcond` parameter will change")
    def test_lars_lstsq():
        # Test that Lars gives least square solution at the end
        # of the path
        X1 = 3 * X  # use un-normalized dataset
        clf = linear_model.LassoLars(alpha=0.0)
>       clf.fit(X1, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_______________________ test_lasso_gives_lstsq_solution ________________________

    @pytest.mark.filterwarnings("ignore: `rcond` parameter will change")
    def test_lasso_gives_lstsq_solution():
        # Test that Lars Lasso gives least square solution at the end
        # of the path
>       _, _, coef_path_ = linear_model.lars_path(X, y, method="lasso")

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
______________________________ test_collinearity _______________________________

    def test_collinearity():
        # Check that lars_path is robust to collinearity in input
        X = np.array([[3.0, 3.0, 1.0], [2.0, 2.0, 0.0], [1.0, 1.0, 0]])
        y = np.array([1.0, 0.0, 0])
        rng = np.random.RandomState(0)
    
        f = ignore_warnings
>       _, _, coef_path_ = f(linear_model.lars_path)(X, y, alpha_min=0.01)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_testing.py:147: in wrapper
    return fn(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________________________ test_no_path _________________________________

    def test_no_path():
        # Test that the ``return_path=False`` option returns the correct output
>       alphas_, _, coef_path_ = linear_model.lars_path(X, y, method="lar")

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
___________________________ test_no_path_precomputed ___________________________

    def test_no_path_precomputed():
        # Test that the ``return_path=False`` option with Gram remains correct
>       alphas_, _, coef_path_ = linear_model.lars_path(X, y, method="lar", Gram=G)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________________ test_no_path_all_precomputed _________________________

    def test_no_path_all_precomputed():
        # Test that the ``return_path=False`` option with Gram and Xy remains
        # correct
        X, y = 3 * diabetes.data, diabetes.target
        G = np.dot(X.T, X)
        Xy = np.dot(X.T, y)
>       alphas_, _, coef_path_ = linear_model.lars_path(
            X, y, method="lasso", Xy=Xy, Gram=G, alpha_min=0.9
        )

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________________ test_lars_precompute[Lars] __________________________

classifier = <class 'sklearn.linear_model._least_angle.Lars'>

    @pytest.mark.parametrize(
        "classifier", [linear_model.Lars, linear_model.LarsCV, linear_model.LassoLarsIC]
    )
    def test_lars_precompute(classifier):
        # Check for different values of precompute
        G = np.dot(X.T, X)
    
        clf = classifier(precompute=G)
>       output_1 = ignore_warnings(clf.fit)(X, y).coef_

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_testing.py:147: in wrapper
    return fn(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________________ test_lars_precompute[LarsCV] _________________________

classifier = <class 'sklearn.linear_model._least_angle.LarsCV'>

    @pytest.mark.parametrize(
        "classifier", [linear_model.Lars, linear_model.LarsCV, linear_model.LassoLarsIC]
    )
    def test_lars_precompute(classifier):
        # Check for different values of precompute
        G = np.dot(X.T, X)
    
        clf = classifier(precompute=G)
>       output_1 = ignore_warnings(clf.fit)(X, y).coef_

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_testing.py:147: in wrapper
    return fn(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1268: in fit
    cv_paths = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_lars_path_residues)(X[train], y[train], X[test], y[test], Gram=Gram, copy=False, method=self.method, verbose=max(0, self.verbose - 1), fit_intercept=self.fit_intercept, max_iter=self.max_iter, eps=self.eps, positive=self.positive) for train, test in cv.split(X, y, **routed_params.splitter.split)))
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:77: in __call__
    return super().__call__(iterable_with_config)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1918: in __call__
    return output if self.return_generator else list(output)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1847: in _get_sequential_output
    res = func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:139: in __call__
    return self.function(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1071: in _lars_path_residues
    alphas, active, coefs = lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps, positive=positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
______________________ test_lars_precompute[LassoLarsIC] _______________________

classifier = <class 'sklearn.linear_model._least_angle.LassoLarsIC'>

    @pytest.mark.parametrize(
        "classifier", [linear_model.Lars, linear_model.LarsCV, linear_model.LassoLarsIC]
    )
    def test_lars_precompute(classifier):
        # Check for different values of precompute
        G = np.dot(X.T, X)
    
        clf = classifier(precompute=G)
>       output_1 = ignore_warnings(clf.fit)(X, y).coef_

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_testing.py:147: in wrapper
    return fn(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_____________________________ test_singular_matrix _____________________________

    def test_singular_matrix():
        # Test when input is a singular matrix
        X1 = np.array([[1, 1.0], [1.0, 1.0]])
        y1 = np.array([1, 1])
>       _, _, coef_path = linear_model.lars_path(X1, y1)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________________ test_rank_deficient_design __________________________

    def test_rank_deficient_design():
        # consistency test that checks that LARS Lasso is handling rank
        # deficient input data (with n_features < rank) in the same way
        # as coordinate descent Lasso
        y = [5, 0, 5]
        for X in ([[5, 0], [0, 5], [10, 10]], [[10, 10, 0], [1e-32, 0, 0], [0, 0, 1]]):
            # To be able to use the coefs to compute the objective function,
            # we need to turn off normalization
            lars = linear_model.LassoLars(0.1)
>           coef_lars_ = lars.fit(X, y).coef_

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________________ test_lasso_lars_vs_lasso_cd __________________________

    def test_lasso_lars_vs_lasso_cd():
        # Test that LassoLars and Lasso using coordinate descent give the
        # same results.
        X = 3 * diabetes.data
    
>       alphas, _, lasso_path = linear_model.lars_path(X, y, method="lasso")

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________ test_lasso_lars_vs_lasso_cd_early_stopping __________________

    def test_lasso_lars_vs_lasso_cd_early_stopping():
        # Test that LassoLars and Lasso using coordinate descent give the
        # same results when early stopping is used.
        # (test : before, in the middle, and in the last part of the path)
        alphas_min = [10, 0.9, 1e-4]
    
        X = diabetes.data
    
        for alpha_min in alphas_min:
>           alphas, _, lasso_path = linear_model.lars_path(
                X, y, method="lasso", alpha_min=alpha_min
            )

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________________ test_lasso_lars_path_length __________________________

    def test_lasso_lars_path_length():
        # Test that the path length of the LassoLars is right
        lasso = linear_model.LassoLars()
>       lasso.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:325: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________ test_lasso_lars_vs_lasso_cd_ill_conditioned __________________

    def test_lasso_lars_vs_lasso_cd_ill_conditioned():
        # Test lasso lars on a very ill-conditioned design, and check that
        # it does not blow up, and stays somewhat close to a solution given
        # by the coordinate descent solver
        # Also test that lasso_path (using lars_path output style) gives
        # the same result as lars_path and previous lasso output style
        # under these conditions.
        rng = np.random.RandomState(42)
    
        # Generate data
        n, m = 70, 100
        k = 5
        X = rng.randn(n, m)
        w = np.zeros((m, 1))
        i = np.arange(0, m)
        rng.shuffle(i)
        supp = i[:k]
        w[supp] = np.sign(rng.randn(k, 1)) * (rng.rand(k, 1) + 1)
        y = np.dot(X, w)
        sigma = 0.2
        y += sigma * rng.rand(*y.shape)
        y = y.squeeze()
>       lars_alphas, _, lars_coef = linear_model.lars_path(X, y, method="lasso")

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:355: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________ test_lasso_lars_vs_lasso_cd_ill_conditioned2 _________________

    def test_lasso_lars_vs_lasso_cd_ill_conditioned2():
        # Create an ill-conditioned situation in which the LARS has to go
        # far in the path to converge, and check that LARS and coordinate
        # descent give the same answers
        # Note it used to be the case that Lars had to use the drop for good
        # strategy for this but this is no longer the case with the
        # equality_tolerance checks
        X = [[1e20, 1e20, 0], [-1e-32, 0, 0], [1, 1, 1]]
        y = [10, 10, 1]
        alpha = 0.0001
    
        def objective_function(coef):
            return 1.0 / (2.0 * len(X)) * linalg.norm(
                y - np.dot(X, coef)
            ) ** 2 + alpha * linalg.norm(coef, 1)
    
        lars = linear_model.LassoLars(alpha=alpha)
        warning_message = "Regressors in active set degenerate."
        with pytest.warns(ConvergenceWarning, match=warning_message):
>           lars.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError

During handling of the above exception, another exception occurred:

    def test_lasso_lars_vs_lasso_cd_ill_conditioned2():
        # Create an ill-conditioned situation in which the LARS has to go
        # far in the path to converge, and check that LARS and coordinate
        # descent give the same answers
        # Note it used to be the case that Lars had to use the drop for good
        # strategy for this but this is no longer the case with the
        # equality_tolerance checks
        X = [[1e20, 1e20, 0], [-1e-32, 0, 0], [1, 1, 1]]
        y = [10, 10, 1]
        alpha = 0.0001
    
        def objective_function(coef):
            return 1.0 / (2.0 * len(X)) * linalg.norm(
                y - np.dot(X, coef)
            ) ** 2 + alpha * linalg.norm(coef, 1)
    
        lars = linear_model.LassoLars(alpha=alpha)
        warning_message = "Regressors in active set degenerate."
        with pytest.warns(ConvergenceWarning, match=warning_message):
>           lars.fit(X, y)
E           Failed: DID NOT WARN. No warnings of type (<class 'sklearn.exceptions.ConvergenceWarning'>,) were emitted.
E            Emitted warnings: [].

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:381: Failed
____________________________ test_lars_add_features ____________________________

    def test_lars_add_features():
        # assure that at least some features get added if necessary
        # test for 6d2b4c
        # Hilbert matrix
        n = 5
        H = 1.0 / (np.arange(1, n + 1) + np.arange(n)[:, np.newaxis])
>       clf = linear_model.Lars(fit_intercept=False).fit(H, np.arange(n))

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________________ test_lars_n_nonzero_coefs ___________________________

verbose = False

    def test_lars_n_nonzero_coefs(verbose=False):
        lars = linear_model.Lars(n_nonzero_coefs=6, verbose=verbose)
>       lars.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_______________________________ test_multitarget _______________________________

    def test_multitarget():
        # Assure that estimators receiving multidimensional y do the right thing
        Y = np.vstack([y, y**2]).T
        n_targets = Y.shape[1]
        estimators = [
            linear_model.LassoLars(),
            linear_model.Lars(),
            # regression test for gh-1615
            linear_model.LassoLars(fit_intercept=False),
            linear_model.Lars(fit_intercept=False),
        ]
    
        for estimator in estimators:
>           estimator.fit(X, Y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:424: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________________________ test_lars_cv _________________________________

    def test_lars_cv():
        # Test the LassoLarsCV object by checking that the optimal alpha
        # increases as the number of samples increases.
        # This property is not actually guaranteed in general and is just a
        # property of the given dataset, with the given steps chosen.
        old_alpha = 0
        lars_cv = linear_model.LassoLarsCV()
        for length in (400, 200, 100):
            X = diabetes.data[:length]
            y = diabetes.target[:length]
>           lars_cv.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:452: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1268: in fit
    cv_paths = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_lars_path_residues)(X[train], y[train], X[test], y[test], Gram=Gram, copy=False, method=self.method, verbose=max(0, self.verbose - 1), fit_intercept=self.fit_intercept, max_iter=self.max_iter, eps=self.eps, positive=self.positive) for train, test in cv.split(X, y, **routed_params.splitter.split)))
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:77: in __call__
    return super().__call__(iterable_with_config)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1918: in __call__
    return output if self.return_generator else list(output)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1847: in _get_sequential_output
    res = func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:139: in __call__
    return self.function(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1071: in _lars_path_residues
    alphas, active, coefs = lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps, positive=positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________________________ test_lars_cv_max_iter _____________________________

recwarn = WarningsRecorder(record=True)

    def test_lars_cv_max_iter(recwarn):
        warnings.simplefilter("always")
        with np.errstate(divide="raise", invalid="raise"):
            X = diabetes.data
            y = diabetes.target
            rng = np.random.RandomState(42)
            x = rng.randn(len(y))
            X = diabetes.data
            X = np.c_[X, x, x]  # add correlated features
            X = StandardScaler().fit_transform(X)
            lars_cv = linear_model.LassoLarsCV(max_iter=5, cv=5)
>           lars_cv.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:469: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1268: in fit
    cv_paths = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_lars_path_residues)(X[train], y[train], X[test], y[test], Gram=Gram, copy=False, method=self.method, verbose=max(0, self.verbose - 1), fit_intercept=self.fit_intercept, max_iter=self.max_iter, eps=self.eps, positive=self.positive) for train, test in cv.split(X, y, **routed_params.splitter.split)))
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:77: in __call__
    return super().__call__(iterable_with_config)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1918: in __call__
    return output if self.return_generator else list(output)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1847: in _get_sequential_output
    res = func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:139: in __call__
    return self.function(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1071: in _lars_path_residues
    alphas, active, coefs = lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps, positive=positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
______________________________ test_lasso_lars_ic ______________________________

    def test_lasso_lars_ic():
        # Test the LassoLarsIC object by checking that
        # - some good features are selected.
        # - alpha_bic > alpha_aic
        # - n_nonzero_bic < n_nonzero_aic
        lars_bic = linear_model.LassoLarsIC("bic")
        lars_aic = linear_model.LassoLarsIC("aic")
        rng = np.random.RandomState(42)
        X = diabetes.data
        X = np.c_[X, rng.randn(X.shape[0], 5)]  # add 5 bad features
        X = StandardScaler().fit_transform(X)
>       lars_bic.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:490: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________________ test_lars_path_readonly_data _________________________

    def test_lars_path_readonly_data():
        # When using automated memory mapping on large input, the
        # fold data is in read-only mode
        # This is a non-regression test for:
        # https://github.com/scikit-learn/scikit-learn/issues/4597
        splitted_data = train_test_split(X, y, random_state=42)
        with TempMemmap(splitted_data) as (X_train, X_test, y_train, y_test):
            # The following should not fail despite copy=False
>           _lars_path_residues(X_train, y_train, X_test, y_test, copy=False)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:507: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1071: in _lars_path_residues
    alphas, active, coefs = lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps, positive=positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
______________________ test_lars_path_positive_constraint ______________________

    def test_lars_path_positive_constraint():
        # this is the main test for the positive parameter on the lars_path method
        # the estimator classes just make use of this function
    
        # we do the test on the diabetes dataset
    
        # ensure that we get negative coefficients when positive=False
        # and all positive when positive=True
        # for method 'lar' (default) and lasso
    
        err_msg = "Positive constraint not supported for 'lar' coding method."
        with pytest.raises(ValueError, match=err_msg):
>           linear_model.lars_path(
                diabetes["data"], diabetes["target"], method="lar", positive=True
            )

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:522: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________ test_estimatorclasses_positive_constraint ___________________

    def test_estimatorclasses_positive_constraint():
        # testing the transmissibility for the positive option of all estimator
        # classes in this same function here
        default_parameter = {"fit_intercept": False}
    
        estimator_parameter_map = {
            "LassoLars": {"alpha": 0.1},
            "LassoLarsCV": {},
            "LassoLarsIC": {},
        }
        for estname in estimator_parameter_map:
            params = default_parameter.copy()
            params.update(estimator_parameter_map[estname])
            estimator = getattr(linear_model, estname)(positive=False, **params)
>           estimator.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_____________________ test_lasso_lars_vs_lasso_cd_positive _____________________

    def test_lasso_lars_vs_lasso_cd_positive():
        # Test that LassoLars and Lasso using coordinate descent give the
        # same results when using the positive option
    
        # This test is basically a copy of the above with additional positive
        # option. However for the middle part, the comparison of coefficient values
        # for a range of alphas, we had to make an adaptations. See below.
    
        # not normalized data
        X = 3 * diabetes.data
    
>       alphas, _, lasso_path = linear_model.lars_path(X, y, method="lasso", positive=True)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:581: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_____________________ test_lasso_lars_vs_R_implementation ______________________

    def test_lasso_lars_vs_R_implementation():
        # Test that sklearn LassoLars implementation agrees with the LassoLars
        # implementation available in R (lars library) when fit_intercept=False.
    
        # Let's generate the data used in the bug report 7778
        y = np.array([-6.45006793, -3.51251449, -8.52445396, 6.12277822, -19.42109366])
        x = np.array(
            [
                [0.47299829, 0, 0, 0, 0],
                [0.08239882, 0.85784863, 0, 0, 0],
                [0.30114139, -0.07501577, 0.80895216, 0, 0],
                [-0.01460346, -0.1015233, 0.0407278, 0.80338378, 0],
                [-0.69363927, 0.06754067, 0.18064514, -0.0803561, 0.40427291],
            ]
        )
    
        X = x.T
    
        # The R result was obtained using the following code:
        #
        # library(lars)
        # model_lasso_lars = lars(X, t(y), type="lasso", intercept=FALSE,
        #                         trace=TRUE, normalize=FALSE)
        # r = t(model_lasso_lars$beta)
        #
    
        r = np.array(
            [
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    -79.810362809499026,
                    -83.528788732782829,
                    -83.777653739190711,
                    -83.784156932888934,
                    -84.033390591756657,
                ],
                [0, 0, 0, 0, -0.476624256777266, 0, 0, 0, 0, 0.025219751009936],
                [
                    0,
                    -3.577397088285891,
                    -4.702795355871871,
                    -7.016748621359461,
                    -7.614898471899412,
                    -0.336938391359179,
                    0,
                    0,
                    0.001213370600853,
                    0.048162321585148,
                ],
                [
                    0,
                    0,
                    0,
                    2.231558436628169,
                    2.723267514525966,
                    2.811549786389614,
                    2.813766976061531,
                    2.817462468949557,
                    2.817368178703816,
                    2.816221090636795,
                ],
                [
                    0,
                    0,
                    -1.218422599914637,
                    -3.457726183014808,
                    -4.021304522060710,
                    -45.827461592423745,
                    -47.776608869312305,
                    -47.911561610746404,
                    -47.914845922736234,
                    -48.039562334265717,
                ],
            ]
        )
    
        model_lasso_lars = linear_model.LassoLars(alpha=0, fit_intercept=False)
>       model_lasso_lars.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:703: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________________ test_lasso_lars_copyX_behaviour[True] _____________________

copy_X = True

    @pytest.mark.parametrize("copy_X", [True, False])
    def test_lasso_lars_copyX_behaviour(copy_X):
        """
        Test that user input regarding copy_X is not being overridden (it was until
        at least version 0.21)
    
        """
        lasso_lars = LassoLarsIC(copy_X=copy_X, precompute=False)
        rng = np.random.RandomState(0)
        X = rng.normal(0, 1, (100, 5))
        X_copy = X.copy()
        y = X[:, 2]
>       lasso_lars.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:721: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________________ test_lasso_lars_copyX_behaviour[False] ____________________

copy_X = False

    @pytest.mark.parametrize("copy_X", [True, False])
    def test_lasso_lars_copyX_behaviour(copy_X):
        """
        Test that user input regarding copy_X is not being overridden (it was until
        at least version 0.21)
    
        """
        lasso_lars = LassoLarsIC(copy_X=copy_X, precompute=False)
        rng = np.random.RandomState(0)
        X = rng.normal(0, 1, (100, 5))
        X_copy = X.copy()
        y = X[:, 2]
>       lasso_lars.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:721: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________ test_lasso_lars_fit_copyX_behaviour[True] ___________________

copy_X = True

    @pytest.mark.parametrize("copy_X", [True, False])
    def test_lasso_lars_fit_copyX_behaviour(copy_X):
        """
        Test that user input to .fit for copy_X overrides default __init__ value
    
        """
        lasso_lars = LassoLarsIC(precompute=False)
        rng = np.random.RandomState(0)
        X = rng.normal(0, 1, (100, 5))
        X_copy = X.copy()
        y = X[:, 2]
>       lasso_lars.fit(X, y, copy_X=copy_X)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:736: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________ test_lasso_lars_fit_copyX_behaviour[False] __________________

copy_X = False

    @pytest.mark.parametrize("copy_X", [True, False])
    def test_lasso_lars_fit_copyX_behaviour(copy_X):
        """
        Test that user input to .fit for copy_X overrides default __init__ value
    
        """
        lasso_lars = LassoLarsIC(precompute=False)
        rng = np.random.RandomState(0)
        X = rng.normal(0, 1, (100, 5))
        X_copy = X.copy()
        y = X[:, 2]
>       lasso_lars.fit(X, y, copy_X=copy_X)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:736: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________________ test_lars_with_jitter[est0] __________________________

est = LassoLars(alpha=0.001, fit_intercept=False)

    @pytest.mark.parametrize("est", (LassoLars(alpha=1e-3), Lars()))
    def test_lars_with_jitter(est):
        # Test that a small amount of jitter helps stability,
        # using example provided in issue #2746
    
        X = np.array([[0.0, 0.0, 0.0, -1.0, 0.0], [0.0, -1.0, 0.0, 0.0, 0.0]])
        y = [-2.5, -2.5]
        expected_coef = [0, 2.5, 0, 2.5, 0]
    
        # set to fit_intercept to False since target is constant and we want check
        # the value of coef. coef would be all zeros otherwise.
        est.set_params(fit_intercept=False)
        est_jitter = clone(est).set_params(jitter=10e-8, random_state=0)
    
>       est.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:754: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_________________________ test_lars_with_jitter[est1] __________________________

est = Lars(fit_intercept=False)

    @pytest.mark.parametrize("est", (LassoLars(alpha=1e-3), Lars()))
    def test_lars_with_jitter(est):
        # Test that a small amount of jitter helps stability,
        # using example provided in issue #2746
    
        X = np.array([[0.0, 0.0, 0.0, -1.0, 0.0], [0.0, -1.0, 0.0, 0.0, 0.0]])
        y = [-2.5, -2.5]
        expected_coef = [0, 2.5, 0, 2.5, 0]
    
        # set to fit_intercept to False since target is constant and we want check
        # the value of coef. coef would be all zeros otherwise.
        est.set_params(fit_intercept=False)
        est_jitter = clone(est).set_params(jitter=10e-8, random_state=0)
    
>       est.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:754: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________________ test_X_none_gram_not_none ___________________________

    def test_X_none_gram_not_none():
        with pytest.raises(ValueError, match="X cannot be None if Gram is not None"):
>           lars_path(X=None, y=np.array([1]), Gram=True)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:763: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
__________________________ test_copy_X_with_auto_gram __________________________

    def test_copy_X_with_auto_gram():
        # Non-regression test for #17789, `copy_X=True` and Gram='auto' does not
        # overwrite X
        rng = np.random.RandomState(42)
        X = rng.rand(6, 6)
        y = rng.rand(6)
    
        X_before = X.copy()
>       linear_model.lars_path(X, y, Gram="auto", copy_X=True, method="lasso")

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:774: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
________________ test_lars_dtype_match[float32-Lars-True-args0] ________________

LARS = <class 'sklearn.linear_model._least_angle.Lars'>, has_coef_path = True
args = {}, dtype = <class 'numpy.float32'>

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    @pytest.mark.parametrize("dtype", (np.float32, np.float64))
    def test_lars_dtype_match(LARS, has_coef_path, args, dtype):
        # The test ensures that the fit method preserves input dtype
        rng = np.random.RandomState(0)
        X = rng.rand(20, 6).astype(dtype)
        y = rng.rand(20).astype(dtype)
    
        model = LARS(**args)
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_____________ test_lars_dtype_match[float32-LassoLars-True-args1] ______________

LARS = <class 'sklearn.linear_model._least_angle.LassoLars'>
has_coef_path = True, args = {}, dtype = <class 'numpy.float32'>

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    @pytest.mark.parametrize("dtype", (np.float32, np.float64))
    def test_lars_dtype_match(LARS, has_coef_path, args, dtype):
        # The test ensures that the fit method preserves input dtype
        rng = np.random.RandomState(0)
        X = rng.rand(20, 6).astype(dtype)
        y = rng.rand(20).astype(dtype)
    
        model = LARS(**args)
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________ test_lars_dtype_match[float32-LassoLarsIC-False-args2] ____________

LARS = <class 'sklearn.linear_model._least_angle.LassoLarsIC'>
has_coef_path = False, args = {}, dtype = <class 'numpy.float32'>

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    @pytest.mark.parametrize("dtype", (np.float32, np.float64))
    def test_lars_dtype_match(LARS, has_coef_path, args, dtype):
        # The test ensures that the fit method preserves input dtype
        rng = np.random.RandomState(0)
        X = rng.rand(20, 6).astype(dtype)
        y = rng.rand(20).astype(dtype)
    
        model = LARS(**args)
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_______________ test_lars_dtype_match[float32-LarsCV-True-args3] _______________

LARS = <class 'sklearn.linear_model._least_angle.LarsCV'>, has_coef_path = True
args = {}, dtype = <class 'numpy.float32'>

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    @pytest.mark.parametrize("dtype", (np.float32, np.float64))
    def test_lars_dtype_match(LARS, has_coef_path, args, dtype):
        # The test ensures that the fit method preserves input dtype
        rng = np.random.RandomState(0)
        X = rng.rand(20, 6).astype(dtype)
        y = rng.rand(20).astype(dtype)
    
        model = LARS(**args)
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1268: in fit
    cv_paths = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_lars_path_residues)(X[train], y[train], X[test], y[test], Gram=Gram, copy=False, method=self.method, verbose=max(0, self.verbose - 1), fit_intercept=self.fit_intercept, max_iter=self.max_iter, eps=self.eps, positive=self.positive) for train, test in cv.split(X, y, **routed_params.splitter.split)))
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:77: in __call__
    return super().__call__(iterable_with_config)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1918: in __call__
    return output if self.return_generator else list(output)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1847: in _get_sequential_output
    res = func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:139: in __call__
    return self.function(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1071: in _lars_path_residues
    alphas, active, coefs = lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps, positive=positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________ test_lars_dtype_match[float32-LassoLarsCV-True-args4] _____________

LARS = <class 'sklearn.linear_model._least_angle.LassoLarsCV'>
has_coef_path = True, args = {'max_iter': 5}, dtype = <class 'numpy.float32'>

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    @pytest.mark.parametrize("dtype", (np.float32, np.float64))
    def test_lars_dtype_match(LARS, has_coef_path, args, dtype):
        # The test ensures that the fit method preserves input dtype
        rng = np.random.RandomState(0)
        X = rng.rand(20, 6).astype(dtype)
        y = rng.rand(20).astype(dtype)
    
        model = LARS(**args)
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1268: in fit
    cv_paths = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_lars_path_residues)(X[train], y[train], X[test], y[test], Gram=Gram, copy=False, method=self.method, verbose=max(0, self.verbose - 1), fit_intercept=self.fit_intercept, max_iter=self.max_iter, eps=self.eps, positive=self.positive) for train, test in cv.split(X, y, **routed_params.splitter.split)))
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:77: in __call__
    return super().__call__(iterable_with_config)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1918: in __call__
    return output if self.return_generator else list(output)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1847: in _get_sequential_output
    res = func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:139: in __call__
    return self.function(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1071: in _lars_path_residues
    alphas, active, coefs = lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps, positive=positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
________________ test_lars_dtype_match[float64-Lars-True-args0] ________________

LARS = <class 'sklearn.linear_model._least_angle.Lars'>, has_coef_path = True
args = {}, dtype = <class 'numpy.float64'>

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    @pytest.mark.parametrize("dtype", (np.float32, np.float64))
    def test_lars_dtype_match(LARS, has_coef_path, args, dtype):
        # The test ensures that the fit method preserves input dtype
        rng = np.random.RandomState(0)
        X = rng.rand(20, 6).astype(dtype)
        y = rng.rand(20).astype(dtype)
    
        model = LARS(**args)
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_____________ test_lars_dtype_match[float64-LassoLars-True-args1] ______________

LARS = <class 'sklearn.linear_model._least_angle.LassoLars'>
has_coef_path = True, args = {}, dtype = <class 'numpy.float64'>

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    @pytest.mark.parametrize("dtype", (np.float32, np.float64))
    def test_lars_dtype_match(LARS, has_coef_path, args, dtype):
        # The test ensures that the fit method preserves input dtype
        rng = np.random.RandomState(0)
        X = rng.rand(20, 6).astype(dtype)
        y = rng.rand(20).astype(dtype)
    
        model = LARS(**args)
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________ test_lars_dtype_match[float64-LassoLarsIC-False-args2] ____________

LARS = <class 'sklearn.linear_model._least_angle.LassoLarsIC'>
has_coef_path = False, args = {}, dtype = <class 'numpy.float64'>

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    @pytest.mark.parametrize("dtype", (np.float32, np.float64))
    def test_lars_dtype_match(LARS, has_coef_path, args, dtype):
        # The test ensures that the fit method preserves input dtype
        rng = np.random.RandomState(0)
        X = rng.rand(20, 6).astype(dtype)
        y = rng.rand(20).astype(dtype)
    
        model = LARS(**args)
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_______________ test_lars_dtype_match[float64-LarsCV-True-args3] _______________

LARS = <class 'sklearn.linear_model._least_angle.LarsCV'>, has_coef_path = True
args = {}, dtype = <class 'numpy.float64'>

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    @pytest.mark.parametrize("dtype", (np.float32, np.float64))
    def test_lars_dtype_match(LARS, has_coef_path, args, dtype):
        # The test ensures that the fit method preserves input dtype
        rng = np.random.RandomState(0)
        X = rng.rand(20, 6).astype(dtype)
        y = rng.rand(20).astype(dtype)
    
        model = LARS(**args)
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1268: in fit
    cv_paths = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_lars_path_residues)(X[train], y[train], X[test], y[test], Gram=Gram, copy=False, method=self.method, verbose=max(0, self.verbose - 1), fit_intercept=self.fit_intercept, max_iter=self.max_iter, eps=self.eps, positive=self.positive) for train, test in cv.split(X, y, **routed_params.splitter.split)))
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:77: in __call__
    return super().__call__(iterable_with_config)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1918: in __call__
    return output if self.return_generator else list(output)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1847: in _get_sequential_output
    res = func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:139: in __call__
    return self.function(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1071: in _lars_path_residues
    alphas, active, coefs = lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps, positive=positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________ test_lars_dtype_match[float64-LassoLarsCV-True-args4] _____________

LARS = <class 'sklearn.linear_model._least_angle.LassoLarsCV'>
has_coef_path = True, args = {'max_iter': 5}, dtype = <class 'numpy.float64'>

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    @pytest.mark.parametrize("dtype", (np.float32, np.float64))
    def test_lars_dtype_match(LARS, has_coef_path, args, dtype):
        # The test ensures that the fit method preserves input dtype
        rng = np.random.RandomState(0)
        X = rng.rand(20, 6).astype(dtype)
        y = rng.rand(20).astype(dtype)
    
        model = LARS(**args)
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1268: in fit
    cv_paths = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_lars_path_residues)(X[train], y[train], X[test], y[test], Gram=Gram, copy=False, method=self.method, verbose=max(0, self.verbose - 1), fit_intercept=self.fit_intercept, max_iter=self.max_iter, eps=self.eps, positive=self.positive) for train, test in cv.split(X, y, **routed_params.splitter.split)))
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:77: in __call__
    return super().__call__(iterable_with_config)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1918: in __call__
    return output if self.return_generator else list(output)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1847: in _get_sequential_output
    res = func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:139: in __call__
    return self.function(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1071: in _lars_path_residues
    alphas, active, coefs = lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps, positive=positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
________________ test_lars_numeric_consistency[Lars-True-args0] ________________

LARS = <class 'sklearn.linear_model._least_angle.Lars'>, has_coef_path = True
args = {}

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    def test_lars_numeric_consistency(LARS, has_coef_path, args):
        # The test ensures numerical consistency between trained coefficients
        # of float32 and float64.
        rtol = 1e-5
        atol = 1e-5
    
        rng = np.random.RandomState(0)
        X_64 = rng.rand(10, 6)
        y_64 = rng.rand(10)
    
>       model_64 = LARS(**args).fit(X_64, y_64)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:826: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_____________ test_lars_numeric_consistency[LassoLars-True-args1] ______________

LARS = <class 'sklearn.linear_model._least_angle.LassoLars'>
has_coef_path = True, args = {}

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    def test_lars_numeric_consistency(LARS, has_coef_path, args):
        # The test ensures numerical consistency between trained coefficients
        # of float32 and float64.
        rtol = 1e-5
        atol = 1e-5
    
        rng = np.random.RandomState(0)
        X_64 = rng.rand(10, 6)
        y_64 = rng.rand(10)
    
>       model_64 = LARS(**args).fit(X_64, y_64)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:826: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:823: in fit
    self._fit(X, y, max_iter=max_iter, alpha=alpha, fit_path=self.fit_path, Xy=Xy)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:770: in _fit
    alphas, active, coef_path, n_iter_ = lars_path(X, y[:, k], Gram=Gram, Xy=this_Xy, copy_X=self.copy_X, copy_Gram=True, alpha_min=alpha, method=self.method, verbose=max(0, self.verbose - 1), max_iter=max_iter, eps=self.eps, return_path=True, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________ test_lars_numeric_consistency[LassoLarsIC-False-args2] ____________

LARS = <class 'sklearn.linear_model._least_angle.LassoLarsIC'>
has_coef_path = False, args = {}

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    def test_lars_numeric_consistency(LARS, has_coef_path, args):
        # The test ensures numerical consistency between trained coefficients
        # of float32 and float64.
        rtol = 1e-5
        atol = 1e-5
    
        rng = np.random.RandomState(0)
        X_64 = rng.rand(10, 6)
        y_64 = rng.rand(10)
    
>       model_64 = LARS(**args).fit(X_64, y_64)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:826: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
_______________ test_lars_numeric_consistency[LarsCV-True-args3] _______________

LARS = <class 'sklearn.linear_model._least_angle.LarsCV'>, has_coef_path = True
args = {}

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    def test_lars_numeric_consistency(LARS, has_coef_path, args):
        # The test ensures numerical consistency between trained coefficients
        # of float32 and float64.
        rtol = 1e-5
        atol = 1e-5
    
        rng = np.random.RandomState(0)
        X_64 = rng.rand(10, 6)
        y_64 = rng.rand(10)
    
>       model_64 = LARS(**args).fit(X_64, y_64)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:826: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1268: in fit
    cv_paths = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_lars_path_residues)(X[train], y[train], X[test], y[test], Gram=Gram, copy=False, method=self.method, verbose=max(0, self.verbose - 1), fit_intercept=self.fit_intercept, max_iter=self.max_iter, eps=self.eps, positive=self.positive) for train, test in cv.split(X, y, **routed_params.splitter.split)))
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:77: in __call__
    return super().__call__(iterable_with_config)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1918: in __call__
    return output if self.return_generator else list(output)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1847: in _get_sequential_output
    res = func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:139: in __call__
    return self.function(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1071: in _lars_path_residues
    alphas, active, coefs = lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps, positive=positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________ test_lars_numeric_consistency[LassoLarsCV-True-args4] _____________

LARS = <class 'sklearn.linear_model._least_angle.LassoLarsCV'>
has_coef_path = True, args = {'max_iter': 5}

    @pytest.mark.parametrize(
        "LARS, has_coef_path, args",
        (
            (Lars, True, {}),
            (LassoLars, True, {}),
            (LassoLarsIC, False, {}),
            (LarsCV, True, {}),
            # max_iter=5 is for avoiding ConvergenceWarning
            (LassoLarsCV, True, {"max_iter": 5}),
        ),
    )
    def test_lars_numeric_consistency(LARS, has_coef_path, args):
        # The test ensures numerical consistency between trained coefficients
        # of float32 and float64.
        rtol = 1e-5
        atol = 1e-5
    
        rng = np.random.RandomState(0)
        X_64 = rng.rand(10, 6)
        y_64 = rng.rand(10)
    
>       model_64 = LARS(**args).fit(X_64, y_64)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:826: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1268: in fit
    cv_paths = Parallel(n_jobs=self.n_jobs, verbose=self.verbose)((delayed(_lars_path_residues)(X[train], y[train], X[test], y[test], Gram=Gram, copy=False, method=self.method, verbose=max(0, self.verbose - 1), fit_intercept=self.fit_intercept, max_iter=self.max_iter, eps=self.eps, positive=self.positive) for train, test in cv.split(X, y, **routed_params.splitter.split)))
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:77: in __call__
    return super().__call__(iterable_with_config)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1918: in __call__
    return output if self.return_generator else list(output)
../publishablew/scikit-learn/scikit-learn/venv/lib/python3.9/site-packages/joblib/parallel.py:1847: in _get_sequential_output
    res = func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/parallel.py:139: in __call__
    return self.function(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1071: in _lars_path_residues
    alphas, active, coefs = lars_path(X_train, y_train, Gram=Gram, copy_X=False, copy_Gram=False, method=method, verbose=max(0, verbose - 1), max_iter=max_iter, eps=eps, positive=positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________________ test_lassolarsic_alpha_selection[aic] _____________________

criterion = 'aic'

    @pytest.mark.parametrize("criterion", ["aic", "bic"])
    def test_lassolarsic_alpha_selection(criterion):
        """Check that we properly compute the AIC and BIC score.
    
        In this test, we reproduce the example of the Fig. 2 of Zou et al.
        (reference [1] in LassoLarsIC) In this example, only 7 features should be
        selected.
        """
        model = make_pipeline(StandardScaler(), LassoLarsIC(criterion=criterion))
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:844: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/pipeline.py:660: in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________________ test_lassolarsic_alpha_selection[bic] _____________________

criterion = 'bic'

    @pytest.mark.parametrize("criterion", ["aic", "bic"])
    def test_lassolarsic_alpha_selection(criterion):
        """Check that we properly compute the AIC and BIC score.
    
        In this test, we reproduce the example of the Fig. 2 of Zou et al.
        (reference [1] in LassoLarsIC) In this example, only 7 features should be
        selected.
        """
        model = make_pipeline(StandardScaler(), LassoLarsIC(criterion=criterion))
>       model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:844: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/pipeline.py:660: in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________________ test_lassolarsic_noise_variance[True] _____________________

fit_intercept = True

    @pytest.mark.parametrize("fit_intercept", [True, False])
    def test_lassolarsic_noise_variance(fit_intercept):
        """Check the behaviour when `n_samples` < `n_features` and that one needs
        to provide the noise variance."""
        rng = np.random.RandomState(0)
        X, y = datasets.make_regression(
            n_samples=10, n_features=11 - fit_intercept, random_state=rng
        )
    
        model = make_pipeline(StandardScaler(), LassoLarsIC(fit_intercept=fit_intercept))
    
        err_msg = (
            "You are using LassoLarsIC in the case where the number of samples is smaller"
            " than the number of features"
        )
        with pytest.raises(ValueError, match=err_msg):
>           model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:866: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/pipeline.py:660: in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
____________________ test_lassolarsic_noise_variance[False] ____________________

fit_intercept = False

    @pytest.mark.parametrize("fit_intercept", [True, False])
    def test_lassolarsic_noise_variance(fit_intercept):
        """Check the behaviour when `n_samples` < `n_features` and that one needs
        to provide the noise variance."""
        rng = np.random.RandomState(0)
        X, y = datasets.make_regression(
            n_samples=10, n_features=11 - fit_intercept, random_state=rng
        )
    
        model = make_pipeline(StandardScaler(), LassoLarsIC(fit_intercept=fit_intercept))
    
        err_msg = (
            "You are using LassoLarsIC in the case where the number of samples is smaller"
            " than the number of features"
        )
        with pytest.raises(ValueError, match=err_msg):
>           model.fit(X, y)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py:866: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/pipeline.py:660: in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
../publishablew/scikit-learn/scikit-learn/sklearn/base.py:1330: in wrapper
    return fit_method(estimator, *args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:1692: in fit
    alphas_, _, coef_path_, self.n_iter_ = lars_path(X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0, method='lasso', verbose=self.verbose, max_iter=self.max_iter, eps=self.eps, return_n_iter=True, positive=self.positive)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/_least_angle.py:25: in lars_path
    from .temp import lars_path
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    import sys
    import warnings
    from math import log
    from numbers import Integral, Real
    import numpy as np
    from scipy import interpolate, linalg
    from scipy.linalg.lapack import get_lapack_funcs
    from ..base import MultiOutputMixin, RegressorMixin, _fit_context
    from ..exceptions import ConvergenceWarning
    from ..model_selection import check_cv
    from ..utils import Bunch, arrayfuncs, as_float_array, check_random_state
    from ..utils._metadata_requests import MetadataRouter, MethodMapping, _raise_for_params, _routing_enabled, process_routing
    from ..utils._param_validation import Hidden, Interval, StrOptions, validate_params
    from ..utils.parallel import Parallel, delayed
    from ..utils.validation import validate_data
    from ._base import LinearModel, LinearRegression, _preprocess_data
    import numpy as np
    from sklearn.utils import check_array
    from sklearn.utils.extmath import safe_sparse_dot
>   from sklearn.linear_model import lars_path1 as sklearn_lars_path
E   ImportError: cannot import name 'lars_path1' from 'sklearn.linear_model' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/linear_model/__init__.py)

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/temp.py:20: ImportError
=========================== short test summary info ============================
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple_precomputed
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lar]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lasso]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lar]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lasso]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_x_none_gram_none_raises_value_error
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_all_precomputed
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_lstsq
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_gives_lstsq_solution
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_collinearity
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_precomputed
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_all_precomputed
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[Lars]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LarsCV]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_singular_matrix
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_rank_deficient_design
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_early_stopping
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_path_length
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned2
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_add_features
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_n_nonzero_coefs
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_multitarget
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv_max_iter
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_ic
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_readonly_data
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_positive_constraint
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_estimatorclasses_positive_constraint
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_positive
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_R_implementation
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[True]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[False]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[True]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[False]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est0]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est1]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_X_none_gram_not_none
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_copy_X_with_auto_gram
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-Lars-True-args0]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLars-True-args1]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsIC-False-args2]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LarsCV-True-args3]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsCV-True-args4]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-Lars-True-args0]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLars-True-args1]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsIC-False-args2]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LarsCV-True-args3]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsCV-True-args4]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[Lars-True-args0]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLars-True-args1]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsIC-False-args2]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LarsCV-True-args3]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsCV-True-args4]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[aic]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[bic]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[True]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[False]
============================== 62 failed in 3.49s ==============================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 62 items

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple I: Seeding RNGs with 1276293625
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple_precomputed PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lar] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lasso] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lar] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lasso] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_x_none_gram_none_raises_value_error PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_all_precomputed PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_lstsq PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_gives_lstsq_solution PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_collinearity PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_precomputed PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_all_precomputed PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[Lars] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LarsCV] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_singular_matrix PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_rank_deficient_design PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_early_stopping PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_path_length PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned2 PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_add_features PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_n_nonzero_coefs PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_multitarget PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv_max_iter PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_ic PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_readonly_data PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_positive_constraint PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_estimatorclasses_positive_constraint PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_positive PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_R_implementation PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[True] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[False] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[True] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[False] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_X_none_gram_not_none PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_copy_X_with_auto_gram PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-Lars-True-args0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLars-True-args1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsIC-False-args2] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LarsCV-True-args3] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsCV-True-args4] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-Lars-True-args0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLars-True-args1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsIC-False-args2] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LarsCV-True-args3] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsCV-True-args4] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[Lars-True-args0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLars-True-args1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsIC-False-args2] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LarsCV-True-args3] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsCV-True-args4] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[aic] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[bic] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[True] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[False] PASSED

============================== 62 passed in 0.55s ==============================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 62 items

../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple I: Seeding RNGs with 1763396659
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_simple_precomputed PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lar] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[True-lasso] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lar] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_gram_equivalent[False-lasso] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_x_none_gram_none_raises_value_error PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_all_precomputed PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_lstsq PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_gives_lstsq_solution PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_collinearity PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_precomputed PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_no_path_all_precomputed PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[Lars] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LarsCV] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_precompute[LassoLarsIC] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_singular_matrix PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_rank_deficient_design PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_early_stopping PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_path_length PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_ill_conditioned2 PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_add_features PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_n_nonzero_coefs PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_multitarget PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_cv_max_iter PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_ic PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_readonly_data PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_path_positive_constraint PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_estimatorclasses_positive_constraint PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_lasso_cd_positive PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_vs_R_implementation PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[True] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_copyX_behaviour[False] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[True] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lasso_lars_fit_copyX_behaviour[False] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_with_jitter[est1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_X_none_gram_not_none PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_copy_X_with_auto_gram PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-Lars-True-args0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLars-True-args1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsIC-False-args2] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LarsCV-True-args3] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float32-LassoLarsCV-True-args4] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-Lars-True-args0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLars-True-args1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsIC-False-args2] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LarsCV-True-args3] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_dtype_match[float64-LassoLarsCV-True-args4] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[Lars-True-args0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLars-True-args1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsIC-False-args2] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LarsCV-True-args3] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lars_numeric_consistency[LassoLarsCV-True-args4] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[aic] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_alpha_selection[bic] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[True] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/linear_model/tests/test_least_angle.py::test_lassolarsic_noise_variance[False] PASSED

============================== 62 passed in 0.61s ==============================
