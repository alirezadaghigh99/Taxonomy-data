output file:
processed_korniargb_to_rgba352.json
function:
rgb_to_rgba
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck_th[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck[cpu-float32]', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-0.4] FAILED', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_exception[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-45.0] FAILED', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-45.0] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_rgb[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-45.0]', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_smoke[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-0.4] FAILED', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_smoke[cpu-float32]', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape3] FAILED', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_rgb[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape3]', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-45.0]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape0]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck_th[cpu-float32]', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape0] FAILED', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgr[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_bgr[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_exception[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-0.4]', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module[cpu-float32]', '../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape2]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgr[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape1]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_bgr[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-0.4]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'tvm', 'onnxrt', 'openxla', 'inductor', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 19 items

../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_smoke[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape0] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape1] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape2] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape3] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_exception[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_rgb[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_bgr[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-0.4] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-45.0] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-0.4] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-45.0] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck_th[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_jit[cpu-float32] SKIPPED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgr[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgra2rgb[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgra2bgr[cpu-float32] PASSED

=================================== FAILURES ===================================
____________________ TestRgbToRgba.test_smoke[cpu-float32] _____________________

self = <test_rgb.TestRgbToRgba object at 0x72d92f1054e0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        C, H, W = 3, 4, 5
        img = torch.rand(C, H, W, device=device, dtype=dtype)
>       assert isinstance(kornia.color.rgb_to_rgba(img, 0.0), torch.Tensor)

../publishablew/kornia/kornia/tests/color/test_rgb.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0.8826, 0.4759, 0.3082, 0.2493, 0.2936],
         [0.9454, 0.6731, 0.9400, 0.7166, 0.6593],
         [0.2724....0581, 0.8222],
         [0.1211, 0.8328, 0.9976, 0.0628, 0.6620],
         [0.7912, 0.5779, 0.3323, 0.2198, 0.3554]]])
alpha_val = 0.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
>       if image.shape[-4] != 3:
E       IndexError: tuple index out of range

../publishablew/kornia/kornia/kornia/color/temp.py:21: IndexError
______________ TestRgbToRgba.test_cardinality[cpu-float32-shape0] ______________

self = <test_rgb.TestRgbToRgba object at 0x72d92f105990>
device = device(type='cpu'), dtype = torch.float32, shape = (1, 3, 4, 4)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 1), (3, 2, 1)])
    def test_cardinality(self, device, dtype, shape):
        out_shape = list(shape)
        out_shape[-3] += 1
        img = torch.ones(shape, device=device, dtype=dtype)
>       assert kornia.color.rgb_to_rgba(img, 0.0).shape == tuple(out_shape)

../publishablew/kornia/kornia/tests/color/test_rgb.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]],

    ...]],

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]]]])
alpha_val = 0.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
>           raise ValueError('Input image must have 3 channels in the last dimension')
E           ValueError: Input image must have 3 channels in the last dimension

../publishablew/kornia/kornia/kornia/color/temp.py:22: ValueError
______________ TestRgbToRgba.test_cardinality[cpu-float32-shape1] ______________

self = <test_rgb.TestRgbToRgba object at 0x72d92f1058d0>
device = device(type='cpu'), dtype = torch.float32, shape = (2, 3, 2, 4)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 1), (3, 2, 1)])
    def test_cardinality(self, device, dtype, shape):
        out_shape = list(shape)
        out_shape[-3] += 1
        img = torch.ones(shape, device=device, dtype=dtype)
>       assert kornia.color.rgb_to_rgba(img, 0.0).shape == tuple(out_shape)

../publishablew/kornia/kornia/tests/color/test_rgb.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1.],
          [1., 1., 1., 1.]],

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.]],

  ...,

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.]],

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.]]]])
alpha_val = 0.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
>           raise ValueError('Input image must have 3 channels in the last dimension')
E           ValueError: Input image must have 3 channels in the last dimension

../publishablew/kornia/kornia/kornia/color/temp.py:22: ValueError
______________ TestRgbToRgba.test_cardinality[cpu-float32-shape2] ______________

self = <test_rgb.TestRgbToRgba object at 0x72d92f105c30>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 3, 4, 1)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 1), (3, 2, 1)])
    def test_cardinality(self, device, dtype, shape):
        out_shape = list(shape)
        out_shape[-3] += 1
        img = torch.ones(shape, device=device, dtype=dtype)
>       assert kornia.color.rgb_to_rgba(img, 0.0).shape == tuple(out_shape)

../publishablew/kornia/kornia/tests/color/test_rgb.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1.],
          [1.],
          [1.],
          [1.]],

         [[1.],
          [1.],
          [1.],
    ...],
          [1.],
          [1.],
          [1.]],

         [[1.],
          [1.],
          [1.],
          [1.]]]])
alpha_val = 0.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
            raise ValueError('Input image must have 3 channels in the last dimension')
        if isinstance(alpha_val, float):
            alpha_channel = torch.full_like(image[:, :1, :, :], alpha_val)
        elif isinstance(alpha_val, torch.Tensor):
            if alpha_val.shape != image[:, :1, :, :].shape:
                raise ValueError("Alpha tensor must have the same shape as the input image's single channel")
            alpha_channel = alpha_val
        else:
            raise TypeError('alpha_val must be either a float or a torch.Tensor')
>       rgba_image = torch.cat((image, alpha_channel), dim=-4)
E       RuntimeError: Sizes of tensors must match except in dimension 0. Expected size 3 but got size 1 for tensor number 1 in the list.

../publishablew/kornia/kornia/kornia/color/temp.py:31: RuntimeError
______________ TestRgbToRgba.test_cardinality[cpu-float32-shape3] ______________

self = <test_rgb.TestRgbToRgba object at 0x72d92f105cf0>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 2, 1)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 1), (3, 2, 1)])
    def test_cardinality(self, device, dtype, shape):
        out_shape = list(shape)
        out_shape[-3] += 1
        img = torch.ones(shape, device=device, dtype=dtype)
>       assert kornia.color.rgb_to_rgba(img, 0.0).shape == tuple(out_shape)

../publishablew/kornia/kornia/tests/color/test_rgb.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1.],
         [1.]],

        [[1.],
         [1.]],

        [[1.],
         [1.]]])
alpha_val = 0.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
>       if image.shape[-4] != 3:
E       IndexError: tuple index out of range

../publishablew/kornia/kornia/kornia/color/temp.py:21: IndexError
__________________ TestRgbToRgba.test_exception[cpu-float32] ___________________

self = <test_rgb.TestRgbToRgba object at 0x72d92f105fc0>
device = device(type='cpu'), dtype = torch.float32

    def test_exception(self, device, dtype):
        # rgb to rgba
        with pytest.raises(TypeError):
>           assert kornia.color.rgb_to_rgba([0.0], 0.0)

../publishablew/kornia/kornia/tests/color/test_rgb.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = [0.0], alpha_val = 0.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
>       if image.shape[-4] != 3:
E       AttributeError: 'list' object has no attribute 'shape'

../publishablew/kornia/kornia/kornia/color/temp.py:21: AttributeError
______________ TestRgbToRgba.test_back_and_forth_rgb[cpu-float32] ______________

self = <test_rgb.TestRgbToRgba object at 0x72d92f105360>
device = device(type='cpu'), dtype = torch.float32

    def test_back_and_forth_rgb(self, device, dtype):
        a_val: float = 1.0
        x_rgb = torch.ones(3, 4, 4, device=device, dtype=dtype)
>       x_rgba = kornia.color.rgb_to_rgba(x_rgb, a_val)

../publishablew/kornia/kornia/tests/color/test_rgb.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.]],

        ...., 1.]],

        [[1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.]]])
alpha_val = 1.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
>       if image.shape[-4] != 3:
E       IndexError: tuple index out of range

../publishablew/kornia/kornia/kornia/color/temp.py:21: IndexError
______________ TestRgbToRgba.test_back_and_forth_bgr[cpu-float32] ______________

self = <test_rgb.TestRgbToRgba object at 0x72d92f106470>
device = device(type='cpu'), dtype = torch.float32

    def test_back_and_forth_bgr(self, device, dtype):
        a_val: float = 1.0
        x_bgr = torch.ones(3, 4, 4, device=device, dtype=dtype)
>       x_rgba = kornia.color.bgr_to_rgba(x_bgr, a_val)

../publishablew/kornia/kornia/tests/color/test_rgb.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:106: in bgr_to_rgba
    return rgb_to_rgba(x_rgb, alpha_val)
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.]],

        ...., 1.]],

        [[1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.]]])
alpha_val = 1.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
>       if image.shape[-4] != 3:
E       IndexError: tuple index out of range

../publishablew/kornia/kornia/kornia/color/temp.py:21: IndexError
___________________ TestRgbToRgba.test_unit[cpu-float32-0.4] ___________________

self = <test_rgb.TestRgbToRgba object at 0x72d92f106860>
device = device(type='cpu'), dtype = torch.float32, aval = 0.4

    @pytest.mark.parametrize("aval", [0.4, 45.0])
    def test_unit(self, device, dtype, aval):
        data = torch.tensor(
            [
                [
                    [[1.0, 1.0], [1.0, 1.0]],
                    [[2.0, 2.0], [2.0, 2.0]],
                    [[3.0, 3.0], [3.0, 3.0]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # Bx3x2x2
    
        expected = torch.tensor(
            [
                [
                    [[1.0, 1.0], [1.0, 1.0]],
                    [[2.0, 2.0], [2.0, 2.0]],
                    [[3.0, 3.0], [3.0, 3.0]],
                    [[aval, aval], [aval, aval]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # Bx4x2x2
    
>       self.assert_close(kornia.color.rgb_to_rgba(data, aval), expected)

../publishablew/kornia/kornia/tests/color/test_rgb.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1.],
          [1., 1.]],

         [[2., 2.],
          [2., 2.]],

         [[3., 3.],
          [3., 3.]]]])
alpha_val = 0.4

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
>           raise ValueError('Input image must have 3 channels in the last dimension')
E           ValueError: Input image must have 3 channels in the last dimension

../publishablew/kornia/kornia/kornia/color/temp.py:22: ValueError
__________________ TestRgbToRgba.test_unit[cpu-float32-45.0] ___________________

self = <test_rgb.TestRgbToRgba object at 0x72d92f1067a0>
device = device(type='cpu'), dtype = torch.float32, aval = 45.0

    @pytest.mark.parametrize("aval", [0.4, 45.0])
    def test_unit(self, device, dtype, aval):
        data = torch.tensor(
            [
                [
                    [[1.0, 1.0], [1.0, 1.0]],
                    [[2.0, 2.0], [2.0, 2.0]],
                    [[3.0, 3.0], [3.0, 3.0]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # Bx3x2x2
    
        expected = torch.tensor(
            [
                [
                    [[1.0, 1.0], [1.0, 1.0]],
                    [[2.0, 2.0], [2.0, 2.0]],
                    [[3.0, 3.0], [3.0, 3.0]],
                    [[aval, aval], [aval, aval]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # Bx4x2x2
    
>       self.assert_close(kornia.color.rgb_to_rgba(data, aval), expected)

../publishablew/kornia/kornia/tests/color/test_rgb.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1.],
          [1., 1.]],

         [[2., 2.],
          [2., 2.]],

         [[3., 3.],
          [3., 3.]]]])
alpha_val = 45.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
>           raise ValueError('Input image must have 3 channels in the last dimension')
E           ValueError: Input image must have 3 channels in the last dimension

../publishablew/kornia/kornia/kornia/color/temp.py:22: ValueError
_______________ TestRgbToRgba.test_unit_aval_th[cpu-float32-0.4] _______________

self = <test_rgb.TestRgbToRgba object at 0x72d92f106d10>
device = device(type='cpu'), dtype = torch.float32
aval = tensor([[[[0.4000, 0.4000],
          [0.4000, 0.4000]]]])

    @pytest.mark.parametrize("aval", [0.4, 45.0])
    def test_unit_aval_th(self, device, dtype, aval):
        data = torch.tensor(
            [
                [
                    [[1.0, 1.0], [1.0, 1.0]],
                    [[2.0, 2.0], [2.0, 2.0]],
                    [[3.0, 3.0], [3.0, 3.0]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # Bx3x2x2
    
        expected = torch.tensor(
            [
                [
                    [[1.0, 1.0], [1.0, 1.0]],
                    [[2.0, 2.0], [2.0, 2.0]],
                    [[3.0, 3.0], [3.0, 3.0]],
                    [[aval, aval], [aval, aval]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # Bx4x2x2
    
        aval = torch.full_like(data[:, :1], aval)  # Bx1xHxW
>       self.assert_close(kornia.color.rgb_to_rgba(data, aval), expected)

../publishablew/kornia/kornia/tests/color/test_rgb.py:220: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1.],
          [1., 1.]],

         [[2., 2.],
          [2., 2.]],

         [[3., 3.],
          [3., 3.]]]])
alpha_val = tensor([[[[0.4000, 0.4000],
          [0.4000, 0.4000]]]])

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
>           raise ValueError('Input image must have 3 channels in the last dimension')
E           ValueError: Input image must have 3 channels in the last dimension

../publishablew/kornia/kornia/kornia/color/temp.py:22: ValueError
______________ TestRgbToRgba.test_unit_aval_th[cpu-float32-45.0] _______________

self = <test_rgb.TestRgbToRgba object at 0x72d92f106c50>
device = device(type='cpu'), dtype = torch.float32
aval = tensor([[[[45., 45.],
          [45., 45.]]]])

    @pytest.mark.parametrize("aval", [0.4, 45.0])
    def test_unit_aval_th(self, device, dtype, aval):
        data = torch.tensor(
            [
                [
                    [[1.0, 1.0], [1.0, 1.0]],
                    [[2.0, 2.0], [2.0, 2.0]],
                    [[3.0, 3.0], [3.0, 3.0]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # Bx3x2x2
    
        expected = torch.tensor(
            [
                [
                    [[1.0, 1.0], [1.0, 1.0]],
                    [[2.0, 2.0], [2.0, 2.0]],
                    [[3.0, 3.0], [3.0, 3.0]],
                    [[aval, aval], [aval, aval]],
                ]
            ],
            device=device,
            dtype=dtype,
        )  # Bx4x2x2
    
        aval = torch.full_like(data[:, :1], aval)  # Bx1xHxW
>       self.assert_close(kornia.color.rgb_to_rgba(data, aval), expected)

../publishablew/kornia/kornia/tests/color/test_rgb.py:220: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1.],
          [1., 1.]],

         [[2., 2.],
          [2., 2.]],

         [[3., 3.],
          [3., 3.]]]])
alpha_val = tensor([[[[45., 45.],
          [45., 45.]]]])

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
>           raise ValueError('Input image must have 3 channels in the last dimension')
E           ValueError: Input image must have 3 channels in the last dimension

../publishablew/kornia/kornia/kornia/color/temp.py:22: ValueError
__________________ TestRgbToRgba.test_gradcheck[cpu-float32] ___________________

self = <test_rgb.TestRgbToRgba object at 0x72d92f107100>
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.grad()
    def test_gradcheck(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.ones(B, C, H, W, device=device, dtype=torch.float64, requires_grad=True)
>       assert gradcheck(kornia.color.rgb_to_rgba, (img, 1.0), raise_exception=True, fast_mode=True)

../publishablew/kornia/kornia/tests/color/test_rgb.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]],

    ...  [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]]]], dtype=torch.float64, requires_grad=True)
alpha_val = 1.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
>           raise ValueError('Input image must have 3 channels in the last dimension')
E           ValueError: Input image must have 3 channels in the last dimension

../publishablew/kornia/kornia/kornia/color/temp.py:22: ValueError
_________________ TestRgbToRgba.test_gradcheck_th[cpu-float32] _________________

self = <test_rgb.TestRgbToRgba object at 0x72d92f107430>
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.grad()
    def test_gradcheck_th(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.ones(B, C, H, W, device=device, dtype=torch.float64, requires_grad=True)
        aval = torch.ones(B, 1, H, W, device=device, dtype=torch.float64, requires_grad=True)
>       assert gradcheck(kornia.color.rgb_to_rgba, (img, aval), raise_exception=True, fast_mode=True)

../publishablew/kornia/kornia/tests/color/test_rgb.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]],

    ...  [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]]]], dtype=torch.float64, requires_grad=True)
alpha_val = tensor([[[[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]]],


  ...  [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]]]], dtype=torch.float64, requires_grad=True)

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
>           raise ValueError('Input image must have 3 channels in the last dimension')
E           ValueError: Input image must have 3 channels in the last dimension

../publishablew/kornia/kornia/kornia/color/temp.py:22: ValueError
____________________ TestRgbToRgba.test_module[cpu-float32] ____________________

self = <test_rgb.TestRgbToRgba object at 0x72d92f107a90>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.ones(B, C, H, W, device=device, dtype=dtype)
        ops = kornia.color.RgbToRgba(1.0).to(device, dtype)
        fcn = kornia.color.rgb_to_rgba
>       self.assert_close(ops(img), fcn(img, 1.0))

../publishablew/kornia/kornia/tests/color/test_rgb.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/color/rgb.py:340: in forward
    return rgb_to_rgba(image, self.alpha_val)
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]],

    ...]],

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]]]])
alpha_val = 1.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
>           raise ValueError('Input image must have 3 channels in the last dimension')
E           ValueError: Input image must have 3 channels in the last dimension

../publishablew/kornia/kornia/kornia/color/temp.py:22: ValueError
__________________ TestRgbToRgba.test_module_bgr[cpu-float32] __________________

self = <test_rgb.TestRgbToRgba object at 0x72d92f107dc0>
device = device(type='cpu'), dtype = torch.float32

    def test_module_bgr(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.ones(B, C, H, W, device=device, dtype=dtype)
        ops = kornia.color.BgrToRgba(1.0).to(device, dtype)
        fcn = kornia.color.bgr_to_rgba
>       self.assert_close(ops(img), fcn(img, 1.0))

../publishablew/kornia/kornia/tests/color/test_rgb.py:258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/color/rgb.py:373: in forward
    return rgb_to_rgba(image, self.alpha_val)
../publishablew/kornia/kornia/kornia/color/rgb.py:51: in rgb_to_rgba
    return rgb_to_rgba(image, alpha_val)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]],

    ...]],

         [[1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.],
          [1., 1., 1., 1.]]]])
alpha_val = 1.0

    def rgb_to_rgba(image: torch.Tensor, alpha_val: float or torch.Tensor) -> torch.Tensor:
        """
        Convert an image from RGB to RGBA.
    
        Args:
            image (torch.Tensor): RGB Image to be converted to RGBA of shape :math:`(*,3,H,W)`.
            alpha_val (float or torch.Tensor): A float number for the alpha value or a tensor
              of shape :math:`(*,1,H,W)`.
    
        Returns:
            torch.Tensor: RGBA version of the image with shape :math:`(*,4,H,W)`.
        """
        if image.shape[-4] != 3:
>           raise ValueError('Input image must have 3 channels in the last dimension')
E           ValueError: Input image must have 3 channels in the last dimension

../publishablew/kornia/kornia/kornia/color/temp.py:22: ValueError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_smoke[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape0]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape1]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape2]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape3]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_exception[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_rgb[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_bgr[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-0.4]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-45.0]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-0.4]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-45.0]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck_th[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgr[cpu-float32]
=================== 16 failed, 2 passed, 1 skipped in 0.63s ====================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'cudagraphs', 'openxla', 'onnxrt', None, 'jit'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 19 items

../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape3] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_rgb[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_bgr[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-0.4] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-45.0] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-0.4] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-45.0] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck_th[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_jit[cpu-float32] SKIPPED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgr[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgra2rgb[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgra2bgr[cpu-float32] PASSED

======================== 18 passed, 1 skipped in 0.16s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', None, 'onnxrt', 'cudagraphs', 'tvm', 'openxla', 'jit', 'inductor'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 19 items

../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_cardinality[cpu-float32-shape3] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_rgb[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_back_and_forth_bgr[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-0.4] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit[cpu-float32-45.0] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-0.4] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_unit_aval_th[cpu-float32-45.0] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_gradcheck_th[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_jit[cpu-float32] SKIPPED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgr[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgra2rgb[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_rgb.py::TestRgbToRgba::test_module_bgra2bgr[cpu-float32] PASSED

======================== 18 passed, 1 skipped in 0.17s =========================
