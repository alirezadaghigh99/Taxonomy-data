output file:
processed_korniamatch_fginn195.json
function:
match_fginn
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] FAILED', '../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128]', '../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32]', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4]', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32]', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32]', '../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128]', '../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] FAILED', '../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] FAILED', '../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] FAILED', '../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4]', '../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'onnxrt', 'tvm', 'cudagraphs', 'inductor', 'openxla', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 12 items

../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] FAILED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

=================================== FAILURES ===================================
_________________ TestMatchFGINN.test_shape_one_way[cpu-2-4-4] _________________

self = <test_matching.TestMatchFGINN object at 0x74f6c2ee2cb0>, num_desc1 = 2
num_desc2 = 4, dim = 4, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

../publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.5763, 0.6328, 0.4942, 0.3194],
        [0.2552, 0.8702, 0.3210, 0.5327]])
desc2 = tensor([[0.9324, 0.9182, 0.8520, 0.4009],
        [0.2949, 0.4468, 0.0685, 0.6080],
        [0.2601, 0.5713, 0.6943, 0.5887],
        [0.4288, 0.1448, 0.1263, 0.8973]])
lafs1 = tensor([[[[0.1898, 0.7574, 0.4685],
          [0.3898, 0.6777, 0.1382]],

         [[0.0264, 0.2078, 0.9041],
          [0.3868, 0.3735, 0.8383]]]])
lafs2 = tensor([[[[0.2733, 0.1725, 0.0336],
          [0.3545, 0.3491, 0.2783]],

         [[0.9682, 0.3807, 0.7857],
        ...2529],
          [0.7602, 0.0821, 0.6296]],

         [[0.3632, 0.2199, 0.2764],
          [0.9787, 0.7389, 0.1784]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[0.5856, 0.6150, 0.4651, 0.8539],
        [0.8719, 0.5003, 0.4815, 0.8527]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
>       lafs1_matched = lafs1[mask]
E       IndexError: The shape of the mask [2] at index 0 does not match the shape of the indexed tensor [1, 2, 2, 3] at index 0

../publishablew/kornia/kornia/kornia/feature/temp.py:20: IndexError
________________ TestMatchFGINN.test_shape_one_way[cpu-2-5-128] ________________

self = <test_matching.TestMatchFGINN object at 0x74f6c2ee2bf0>, num_desc1 = 2
num_desc2 = 5, dim = 128, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

../publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[5.1572e-01, 9.3286e-01, 1.1642e-01, 9.9707e-01, 4.0603e-01, 6.2571e-02,
         6.9817e-01, 6.4147e-01, 1.28...01,
         3.7952e-01, 4.5092e-01, 8.2059e-01, 9.9707e-02, 5.7519e-02, 2.0043e-01,
         8.6802e-01, 3.2506e-01]])
desc2 = tensor([[0.7962, 0.4622, 0.2959, 0.1869, 0.9339, 0.2734, 0.1574, 0.8801, 0.0382,
         0.5414, 0.1198, 0.2891, 0.74...77, 0.5855,
         0.2529, 0.2665, 0.7484, 0.8783, 0.1563, 0.5566, 0.7109, 0.7602, 0.3339,
         0.8740, 0.8858]])
lafs1 = tensor([[[[0.8324, 0.6578, 0.3155],
          [0.6196, 0.3940, 0.1538]],

         [[0.8459, 0.0996, 0.0481],
          [0.2480, 0.7487, 0.1167]]]])
lafs2 = tensor([[[[0.0024, 0.0336, 0.7833],
          [0.9126, 0.1873, 0.1473]],

         [[0.1549, 0.2980, 0.9984],
        ...6257],
          [0.0103, 0.2182, 0.9887]],

         [[0.6484, 0.0560, 0.5513],
          [0.2536, 0.5706, 0.5603]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[4.2747, 4.6766, 4.6202, 4.6395, 4.7593],
        [4.4320, 4.9369, 4.5895, 4.7966, 5.1032]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
>       lafs1_matched = lafs1[mask]
E       IndexError: The shape of the mask [2] at index 0 does not match the shape of the indexed tensor [1, 2, 2, 3] at index 0

../publishablew/kornia/kornia/kornia/feature/temp.py:20: IndexError
________________ TestMatchFGINN.test_shape_one_way[cpu-6-2-32] _________________

self = <test_matching.TestMatchFGINN object at 0x74f6c2ee2f80>, num_desc1 = 6
num_desc2 = 2, dim = 32, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_one_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000)

../publishablew/kornia/kornia/tests/feature/test_matching.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.6125, 0.9240, 0.5957, 0.4938, 0.7999, 0.8116, 0.6543, 0.1243, 0.7974,
         0.5531, 0.4217, 0.4637, 0.93...392, 0.2573, 0.7549, 0.3781, 0.4120, 0.9645, 0.7974, 0.3710, 0.1879,
         0.5330, 0.8803, 0.4786, 0.1906, 0.1343]])
desc2 = tensor([[0.9936, 0.4268, 0.4538, 0.3503, 0.9717, 0.0873, 0.8853, 0.5932, 0.5605,
         0.0052, 0.5539, 0.0050, 0.38...081, 0.4635, 0.1916, 0.3813, 0.1457, 0.6849, 0.1312, 0.7921, 0.6711,
         0.3638, 0.4177, 0.2308, 0.4579, 0.2476]])
lafs1 = tensor([[[[0.5827, 0.9447, 0.2934],
          [0.1076, 0.3514, 0.1413]],

         [[0.8962, 0.6150, 0.5637],
        ...0136],
          [0.5727, 0.0392, 0.6784]],

         [[0.3083, 0.6173, 0.3160],
          [0.9730, 0.2476, 0.9998]]]])
lafs2 = tensor([[[[0.9967, 0.9480, 0.9502],
          [0.4885, 0.4663, 0.8660]],

         [[0.9565, 0.2704, 0.5619],
          [0.0353, 0.6605, 0.8475]]]])
th = 0.9, spatial_th = 1000, mutual = False
dm = tensor([[2.0829, 1.8768],
        [2.3865, 2.0808],
        [2.3605, 2.5195],
        [2.5422, 2.2101],
        [2.3932, 1.7570],
        [2.4005, 2.0547]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
>       lafs1_matched = lafs1[mask]
E       IndexError: The shape of the mask [6] at index 0 does not match the shape of the indexed tensor [1, 6, 2, 3] at index 0

../publishablew/kornia/kornia/kornia/feature/temp.py:20: IndexError
_________________ TestMatchFGINN.test_shape_two_way[cpu-2-4-4] _________________

self = <test_matching.TestMatchFGINN object at 0x74f6c2ee3280>, num_desc1 = 2
num_desc2 = 4, dim = 4, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

../publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.1268, 0.8648, 0.1008, 0.0494],
        [0.6710, 0.3139, 0.5186, 0.9274]])
desc2 = tensor([[0.3679, 0.3993, 0.7038, 0.8455],
        [0.7463, 0.8216, 0.2545, 0.4523],
        [0.0200, 0.5287, 0.5219, 0.9946],
        [0.7963, 0.8871, 0.8514, 0.6920]])
lafs1 = tensor([[[[0.1156, 0.0656, 0.2629],
          [0.0064, 0.5725, 0.8622]],

         [[0.1531, 0.8721, 0.0603],
          [0.9076, 0.5881, 0.5210]]]])
lafs2 = tensor([[[[0.2539, 0.8252, 0.8942],
          [0.2377, 0.4653, 0.0319]],

         [[0.7506, 0.7859, 0.0700],
        ...4096],
          [0.5689, 0.7065, 0.4169]],

         [[0.3716, 0.8811, 0.0433],
          [0.8327, 0.6747, 0.0839]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[1.1280, 0.7561, 1.0932, 1.1937],
        [0.3744, 0.7476, 0.6889, 0.7144]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
>       lafs1_matched = lafs1[mask]
E       IndexError: The shape of the mask [2] at index 0 does not match the shape of the indexed tensor [1, 2, 2, 3] at index 0

../publishablew/kornia/kornia/kornia/feature/temp.py:20: IndexError
________________ TestMatchFGINN.test_shape_two_way[cpu-2-5-128] ________________

self = <test_matching.TestMatchFGINN object at 0x74f6c2ee31f0>, num_desc1 = 2
num_desc2 = 5, dim = 128, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

../publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.1236, 0.8235, 0.2326, 0.6603, 0.9234, 0.6152, 0.8555, 0.9681, 0.6814,
         0.3734, 0.7265, 0.6839, 0.83...04, 0.8418,
         0.8979, 0.1087, 0.1991, 0.1554, 0.6554, 0.0759, 0.4549, 0.3253, 0.8454,
         0.6599, 0.5377]])
desc2 = tensor([[2.2241e-02, 1.5848e-01, 2.1211e-01, 4.1939e-01, 7.6621e-02, 5.9248e-01,
         3.9315e-01, 3.0374e-01, 1.24...01,
         8.6069e-01, 3.2227e-01, 1.3341e-01, 8.6476e-01, 6.2742e-01, 2.0768e-01,
         6.1568e-01, 8.7139e-01]])
lafs1 = tensor([[[[0.0040, 0.2265, 0.5377],
          [0.2607, 0.2727, 0.0092]],

         [[0.7453, 0.4187, 0.8557],
          [0.1780, 0.9547, 0.1444]]]])
lafs2 = tensor([[[[0.4711, 0.8860, 0.1968],
          [0.1762, 0.1869, 0.5140]],

         [[0.6318, 0.4809, 0.2910],
        ...7174],
          [0.8444, 0.0470, 0.4183]],

         [[0.1866, 0.7818, 0.5936],
          [0.3959, 0.4510, 0.5722]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[4.7705, 4.5973, 4.3534, 4.7785, 4.7508],
        [4.3377, 4.6389, 4.4991, 4.5985, 4.3265]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
>       lafs1_matched = lafs1[mask]
E       IndexError: The shape of the mask [2] at index 0 does not match the shape of the indexed tensor [1, 2, 2, 3] at index 0

../publishablew/kornia/kornia/kornia/feature/temp.py:20: IndexError
________________ TestMatchFGINN.test_shape_two_way[cpu-6-2-32] _________________

self = <test_matching.TestMatchFGINN object at 0x74f6c2ee3580>, num_desc1 = 6
num_desc2 = 2, dim = 32, device = device(type='cpu')

    @pytest.mark.parametrize("num_desc1, num_desc2, dim", [(2, 4, 4), (2, 5, 128), (6, 2, 32)])
    def test_shape_two_way(self, num_desc1, num_desc2, dim, device):
        desc1 = torch.rand(num_desc1, dim, device=device)
        desc2 = torch.rand(num_desc2, dim, device=device)
        lafs1 = torch.rand(1, num_desc1, 2, 3, device=device)
        lafs2 = torch.rand(1, num_desc2, 2, 3, device=device)
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.9, 1000, mutual=True)

../publishablew/kornia/kornia/tests/feature/test_matching.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.8454, 0.2555, 0.7502, 0.6030, 0.4721, 0.2823, 0.8673, 0.7059, 0.0176,
         0.7738, 0.1260, 0.7524, 0.69...031, 0.9651, 0.9121, 0.0432, 0.0529, 0.9143, 0.2209, 0.1857, 0.4217,
         0.9491, 0.3633, 0.4469, 0.7530, 0.3120]])
desc2 = tensor([[0.0509, 0.3007, 0.3390, 0.8183, 0.0756, 0.3850, 0.1230, 0.5151, 0.5426,
         0.0903, 0.6433, 0.7598, 0.09...437, 0.0751, 0.4433, 0.9622, 0.8441, 0.8840, 0.2267, 0.7735, 0.8288,
         0.9212, 0.0511, 0.6861, 0.6883, 0.6285]])
lafs1 = tensor([[[[0.7519, 0.6128, 0.2207],
          [0.1753, 0.4542, 0.4263]],

         [[0.8664, 0.3763, 0.5974],
        ...3042],
          [0.4229, 0.0337, 0.6356]],

         [[0.0154, 0.2357, 0.8157],
          [0.0456, 0.1995, 0.4058]]]])
lafs2 = tensor([[[[0.8471, 0.3868, 0.8285],
          [0.7365, 0.8607, 0.0515]],

         [[0.8015, 0.5246, 0.7327],
          [0.9634, 0.7240, 0.3743]]]])
th = 0.9, spatial_th = 1000, mutual = True
dm = tensor([[2.6728, 2.6536],
        [2.1971, 1.9280],
        [2.5041, 2.1304],
        [2.5586, 2.4442],
        [2.4410, 2.3820],
        [2.2660, 2.3661]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
>       lafs1_matched = lafs1[mask]
E       IndexError: The shape of the mask [6] at index 0 does not match the shape of the indexed tensor [1, 6, 2, 3] at index 0

../publishablew/kornia/kornia/kornia/feature/temp.py:20: IndexError
__________________ TestMatchFGINN.test_matching1[cpu-float32] __________________

self = <test_matching.TestMatchFGINN object at 0x74f6c2ee3850>
device = device(type='cpu'), dtype = torch.float32

    def test_matching1(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 0.01)

../publishablew/kornia/kornia/tests/feature/test_matching.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.0000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 3.0000]],

         [[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 0.01, mutual = False
dm = tensor([[7.0711, 4.2426, 3.3242, 1.4149, 0.0000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 1.4135, 2.8284],
        [2.8284, 0.0000, 0.9220, 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
>       lafs1_matched = lafs1[mask]
E       IndexError: The shape of the mask [5] at index 0 does not match the shape of the indexed tensor [1, 5, 2, 3] at index 0

../publishablew/kornia/kornia/kornia/feature/temp.py:20: IndexError
_______________ TestMatchFGINN.test_matching_mutual[cpu-float32] _______________

self = <test_matching.TestMatchFGINN object at 0x74f6c2ee3b80>
device = device(type='cpu'), dtype = torch.float32

    def test_matching_mutual(self, device, dtype):
        desc1 = torch.tensor([[0, 0.1], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0], [0.0, 0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 2.0, mutual=True)

../publishablew/kornia/kornia/tests/feature/test_matching.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.1000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000],
        [0.0000, 0.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.1000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 2.0, mutual = True
dm = tensor([[7.0007, 4.1725, 3.2527, 1.3460, 0.1000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711],
        [7.0711, 4.2426, 3.3242, 1.4149, 0.0000]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
>       lafs1_matched = lafs1[mask]
E       IndexError: The shape of the mask [6] at index 0 does not match the shape of the indexed tensor [1, 6, 2, 3] at index 0

../publishablew/kornia/kornia/kornia/feature/temp.py:20: IndexError
___________________ TestMatchFGINN.test_nomatch[cpu-float32] ___________________

self = <test_matching.TestMatchFGINN object at 0x74f6c2ee3eb0>
device = device(type='cpu'), dtype = torch.float32

    def test_nomatch(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8)

../publishablew/kornia/kornia/tests/feature/test_matching.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0., 0.]]), desc2 = tensor([[5., 5.]])
lafs1 = tensor([[[[1., 0., 0.],
          [-0., 1., 0.]]]])
lafs2 = tensor([[[[1., 0., 5.],
          [-0., 1., 5.]]]]), th = 0.8
spatial_th = 10.0, mutual = False, dm = tensor([[7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
        lafs1_matched = lafs1[mask]
        lafs2_matched = lafs2[nn_idx]
>       spatial_dist = torch.norm(lafs1_matched[:, :2, 2] - lafs2_matched[:, :2, 2], dim=1)
E       IndexError: index 2 is out of bounds for dimension 2 with size 2

../publishablew/kornia/kornia/kornia/feature/temp.py:22: IndexError
__________________ TestMatchFGINN.test_matching2[cpu-float32] __________________

self = <test_matching.TestMatchFGINN object at 0x74f6c2d10220>
device = device(type='cpu'), dtype = torch.float32

    def test_matching2(self, device, dtype):
        desc1 = torch.tensor([[0, 0.0], [1, 1.001], [2, 2], [3, 3.0], [5, 5.0]], dtype=dtype, device=device)
        desc2 = torch.tensor([[5, 5.0], [3, 3.0], [2.3, 2.4], [1, 1.001], [0, 0.0]], dtype=dtype, device=device)
        lafs1 = laf_from_center_scale_ori(desc1[None])
        lafs2 = laf_from_center_scale_ori(desc2[None])
    
>       dists, idxs = match_fginn(desc1, desc2, lafs1, lafs2, 0.8, 2.0)

../publishablew/kornia/kornia/tests/feature/test_matching.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.0000, 0.0000],
        [1.0000, 1.0010],
        [2.0000, 2.0000],
        [3.0000, 3.0000],
        [5.0000, 5.0000]])
desc2 = tensor([[5.0000, 5.0000],
        [3.0000, 3.0000],
        [2.3000, 2.4000],
        [1.0000, 1.0010],
        [0.0000, 0.0000]])
lafs1 = tensor([[[[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]],

         [[1.0000, 0.0000, 1.0000],
       ...00],
          [-0.0000, 1.0000, 3.0000]],

         [[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]]]])
lafs2 = tensor([[[[1.0000, 0.0000, 5.0000],
          [-0.0000, 1.0000, 5.0000]],

         [[1.0000, 0.0000, 3.0000],
       ...00],
          [-0.0000, 1.0000, 1.0010]],

         [[1.0000, 0.0000, 0.0000],
          [-0.0000, 1.0000, 0.0000]]]])
th = 0.8, spatial_th = 2.0, mutual = False
dm = tensor([[7.0711, 4.2426, 3.3242, 1.4149, 0.0000],
        [5.6561, 2.8277, 1.9098, 0.0000, 1.4149],
        [4.2426, 1..., 1.4135, 2.8284],
        [2.8284, 0.0000, 0.9220, 2.8277, 4.2426],
        [0.0000, 2.8284, 3.7483, 5.6561, 7.0711]])

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
>       lafs1_matched = lafs1[mask]
E       IndexError: The shape of the mask [5] at index 0 does not match the shape of the indexed tensor [1, 5, 2, 3] at index 0

../publishablew/kornia/kornia/kornia/feature/temp.py:20: IndexError
______________________ TestMatchFGINN.test_gradcheck[cpu] ______________________

self = <test_matching.TestMatchFGINN object at 0x74f6c2d104f0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        desc1 = torch.rand(5, 8, device=device, dtype=torch.float64)
        desc2 = torch.rand(7, 8, device=device, dtype=torch.float64)
        center1 = torch.rand(1, 5, 2, device=device, dtype=torch.float64)
        center2 = torch.rand(1, 7, 2, device=device, dtype=torch.float64)
        lafs1 = laf_from_center_scale_ori(center1)
        lafs2 = laf_from_center_scale_ori(center2)
>       self.gradcheck(match_fginn, (desc1, desc2, lafs1, lafs2, 0.8, 0.05), nondet_tol=1e-4)

../publishablew/kornia/kornia/tests/feature/test_matching.py:325: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/feature/matching.py:199: in match_fginn
    return match_fginn(desc1, desc2, lafs1, lafs2, th, spatial_th, mutual, dm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

desc1 = tensor([[0.3875, 0.9577, 0.7180, 0.5900, 0.9299, 0.8911, 0.7788, 0.3398],
        [0.4027, 0.2069, 0.6476, 0.5310, 0.5...     [0.1552, 0.2237, 0.0628, 0.1193, 0.8589, 0.5844, 0.8832, 0.6861]],
       dtype=torch.float64, requires_grad=True)
desc2 = tensor([[0.9203, 0.4726, 0.0843, 0.1898, 0.3294, 0.3616, 0.8009, 0.4492],
        [0.7815, 0.5609, 0.6660, 0.4480, 0.5...     [0.4824, 0.9930, 0.6051, 0.1030, 0.0976, 0.8947, 0.8780, 0.8411]],
       dtype=torch.float64, requires_grad=True)
lafs1 = tensor([[[[1.0000, 0.0000, 0.4519],
          [-0.0000, 1.0000, 0.6771]],

         [[1.0000, 0.0000, 0.2328],
       ...     [[1.0000, 0.0000, 0.9091],
          [-0.0000, 1.0000, 0.0767]]]], dtype=torch.float64,
       requires_grad=True)
lafs2 = tensor([[[[1.0000, 0.0000, 0.3990],
          [-0.0000, 1.0000, 0.6373]],

         [[1.0000, 0.0000, 0.6696],
       ...     [[1.0000, 0.0000, 0.4978],
          [-0.0000, 1.0000, 0.0089]]]], dtype=torch.float64,
       requires_grad=True)
th = 0.8, spatial_th = 0.05, mutual = False
dm = tensor([[1.3169, 1.0468, 1.2457, 0.8586, 1.1238, 1.5205, 1.1018],
        [1.0233, 0.9828, 0.8773, 0.5121, 1.1092, 1.0...       [1.0226, 1.1053, 0.9835, 1.4012, 1.2677, 1.0548, 1.3012]],
       dtype=torch.float64, grad_fn=<CdistBackward0>)

    def match_fginn(desc1: Tensor, desc2: Tensor, lafs1: Tensor, lafs2: Tensor, th: float=0.8, spatial_th: float=10.0, mutual: bool=False, dm: Optional[Tensor]=None) -> Tuple[Tensor, Tensor, Tensor]:
        if dm is None:
            dm = torch.cdist(desc1, desc2, p=2)
        min_dist, nn_idx = torch.min(dm, dim=1)
        mask = min_dist <= th
        min_dist = min_dist[mask]
        nn_idx = nn_idx[mask]
>       lafs1_matched = lafs1[mask]
E       IndexError: The shape of the mask [5] at index 0 does not match the shape of the indexed tensor [1, 5, 2, 3] at index 0

../publishablew/kornia/kornia/kornia/feature/temp.py:20: IndexError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4]
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128]
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32]
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4]
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128]
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32]
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu]
======================== 11 failed, 1 skipped in 0.60s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'cudagraphs', 'jit', 'openxla', 'inductor', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 12 items

../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

======================== 11 passed, 1 skipped in 0.23s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'onnxrt', 'cudagraphs', 'openxla', 'tvm', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 12 items

../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-4-4] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-2-5-128] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_one_way[cpu-6-2-32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-4-4] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-2-5-128] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_shape_two_way[cpu-6-2-32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching_mutual[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_nomatch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_matching2[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_matching.py::TestMatchFGINN::test_jit[cpu-float32] SKIPPED

======================== 11 passed, 1 skipped in 0.19s =========================
