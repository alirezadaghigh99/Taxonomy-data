output file:
processed_scikit-learngrid_to_graph98.json
function:
grid_to_graph
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-None-0.5]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-10-None]', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-10-None] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-None-0.5]', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-None-0.5] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-ward]', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_array] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-complete] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_array]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-None-0.5]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_matrix]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-10-None]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_height_linkage_tree', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_height_linkage_tree FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-10-None] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-None-0.5]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-None-0.5]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_structured_linkage_tree', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-10-None] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_fixing_non_lil FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-10-None] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-10-None]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-average]', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-None-0.5] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-None-0.5] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-None-0.5] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-10-None] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-None-0.5] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-None-0.5] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-10-None] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_affinity_passed_to_fix_connectivity FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-average] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-ward] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-10-None]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-None-0.5]', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_agglomeration[42] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-10-None] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-10-None] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-10-None]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-complete]', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_matrix] FAILED', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_structured_linkage_tree FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_fixing_non_lil', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-None-0.5] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-10-None]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-None-0.5]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_affinity_passed_to_fix_connectivity', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-None-0.5]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-10-None]', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-10-None]', '../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-None-0.5] FAILED', 'FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_agglomeration[42]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 66 items

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_linkage_misc I: Seeding RNGs with 1800818989
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_structured_linkage_tree FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_unstructured_linkage_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_height_linkage_tree FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_zero_cosine_linkage_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-None-0.5] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-10-None] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-None-0.5] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-10-None] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-None-0.5] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-10-None] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-None-0.5] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-10-None] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-None-0.5] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-10-None] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-None-0.5] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-10-None] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-None-0.5] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-10-None] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-None-0.5] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-10-None] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_matrix] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_array] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_memory_mapped PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_agglomeration[42] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_single_linkage_clustering PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_sparse_scikit_vs_scipy[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_vector_scikit_single_vs_scipy_single[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid2] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid3] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid4] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid6] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid7] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid8] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid9] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_identical_points PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_propagation PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_tree_children_order[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_linkage_tree_return_distance[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_fixing_non_lil FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_int_float_dict PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_callable PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_ignores_diagonal PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_compute_full_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_n_components PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_affinity_passed_to_fix_connectivity FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-ward] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-complete] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-average] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_small_distance_threshold[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_cluster_distances_with_distance_threshold[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-ward] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-complete] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-average] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-ward] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-complete] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-average] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-ward] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-complete] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-average] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_dist_threshold_invalid_parameters PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_invalid_shape_precomputed_dist_matrix PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_precomputed_connectivity_metric_with_2_connected_components PASSED

=================================== FAILURES ===================================
_________________________ test_structured_linkage_tree _________________________

    def test_structured_linkage_tree():
        # Check that we obtain the correct solution for structured linkage trees.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        # Avoiding a mask with only 'True' entries
        mask[4:7, 4:7] = 0
        X = rng.randn(50, 100)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
___________________________ test_height_linkage_tree ___________________________

    def test_height_linkage_tree():
        # Check that the height of the results of linkage tree is sorted.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        X = rng.randn(50, 100)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_________ test_agglomerative_clustering_distances[ward-True-None-0.5] __________

n_clusters = None, compute_distances = True, distance_threshold = 0.5
linkage = 'ward'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
__________ test_agglomerative_clustering_distances[ward-True-10-None] __________

n_clusters = 10, compute_distances = True, distance_threshold = None
linkage = 'ward'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_________ test_agglomerative_clustering_distances[ward-False-None-0.5] _________

n_clusters = None, compute_distances = False, distance_threshold = 0.5
linkage = 'ward'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_________ test_agglomerative_clustering_distances[ward-False-10-None] __________

n_clusters = 10, compute_distances = False, distance_threshold = None
linkage = 'ward'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_______ test_agglomerative_clustering_distances[complete-True-None-0.5] ________

n_clusters = None, compute_distances = True, distance_threshold = 0.5
linkage = 'complete'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
________ test_agglomerative_clustering_distances[complete-True-10-None] ________

n_clusters = 10, compute_distances = True, distance_threshold = None
linkage = 'complete'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_______ test_agglomerative_clustering_distances[complete-False-None-0.5] _______

n_clusters = None, compute_distances = False, distance_threshold = 0.5
linkage = 'complete'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_______ test_agglomerative_clustering_distances[complete-False-10-None] ________

n_clusters = 10, compute_distances = False, distance_threshold = None
linkage = 'complete'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
________ test_agglomerative_clustering_distances[average-True-None-0.5] ________

n_clusters = None, compute_distances = True, distance_threshold = 0.5
linkage = 'average'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
________ test_agglomerative_clustering_distances[average-True-10-None] _________

n_clusters = 10, compute_distances = True, distance_threshold = None
linkage = 'average'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_______ test_agglomerative_clustering_distances[average-False-None-0.5] ________

n_clusters = None, compute_distances = False, distance_threshold = 0.5
linkage = 'average'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
________ test_agglomerative_clustering_distances[average-False-10-None] ________

n_clusters = 10, compute_distances = False, distance_threshold = None
linkage = 'average'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
________ test_agglomerative_clustering_distances[single-True-None-0.5] _________

n_clusters = None, compute_distances = True, distance_threshold = 0.5
linkage = 'single'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_________ test_agglomerative_clustering_distances[single-True-10-None] _________

n_clusters = 10, compute_distances = True, distance_threshold = None
linkage = 'single'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
________ test_agglomerative_clustering_distances[single-False-None-0.5] ________

n_clusters = None, compute_distances = False, distance_threshold = 0.5
linkage = 'single'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
________ test_agglomerative_clustering_distances[single-False-10-None] _________

n_clusters = 10, compute_distances = False, distance_threshold = None
linkage = 'single'

    @pytest.mark.parametrize("n_clusters, distance_threshold", [(None, 0.5), (10, None)])
    @pytest.mark.parametrize("compute_distances", [True, False])
    @pytest.mark.parametrize("linkage", ["ward", "complete", "average", "single"])
    def test_agglomerative_clustering_distances(
        n_clusters, compute_distances, distance_threshold, linkage
    ):
        # Check that when `compute_distances` is True or `distance_threshold` is
        # given, the fitted model has an attribute `distances_`.
        rng = np.random.RandomState(0)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_________________ test_agglomerative_clustering[42-lil_matrix] _________________

global_random_seed = 42, lil_container = <class 'scipy.sparse._lil.lil_matrix'>

    @pytest.mark.parametrize("lil_container", LIL_CONTAINERS)
    def test_agglomerative_clustering(global_random_seed, lil_container):
        # Check that we obtain the correct number of clusters with
        # agglomerative clustering.
        rng = np.random.RandomState(global_random_seed)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_________________ test_agglomerative_clustering[42-lil_array] __________________

global_random_seed = 42, lil_container = <class 'scipy.sparse._lil.lil_array'>

    @pytest.mark.parametrize("lil_container", LIL_CONTAINERS)
    def test_agglomerative_clustering(global_random_seed, lil_container):
        # Check that we obtain the correct number of clusters with
        # agglomerative clustering.
        rng = np.random.RandomState(global_random_seed)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_________________________ test_ward_agglomeration[42] __________________________

global_random_seed = 42

    def test_ward_agglomeration(global_random_seed):
        # Check that we obtain the correct solution in a simplistic case
        rng = np.random.RandomState(global_random_seed)
        mask = np.ones([10, 10], dtype=bool)
        X = rng.randn(50, 100)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_______________________ test_connectivity_fixing_non_lil _______________________

    def test_connectivity_fixing_non_lil():
        # Check non regression of a bug if a non item assignable connectivity is
        # provided with more than one component.
        # create dummy data
        x = np.array([[0, 0], [1, 1]])
        # create a mask with several components to force connectivity fixing
        m = np.array([[True, False], [False, True]])
>       c = grid_to_graph(n_x=2, n_y=2, mask=m)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:615: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 2, n_y = 2, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
___________________ test_affinity_passed_to_fix_connectivity ___________________

    def test_affinity_passed_to_fix_connectivity():
        # Test that the affinity parameter is actually passed to the pairwise
        # function
    
        size = 2
        rng = np.random.RandomState(0)
        X = rng.randn(size, size)
        mask = np.array([True, False, False, True])
    
>       connectivity = grid_to_graph(n_x=size, n_y=size, mask=mask, return_as=np.ndarray)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 2, n_y = 2, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
________ test_agglomerative_clustering_with_distance_threshold[42-ward] ________

linkage = 'ward', global_random_seed = 42

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    def test_agglomerative_clustering_with_distance_threshold(linkage, global_random_seed):
        # Check that we obtain the correct number of clusters with
        # agglomerative clustering with distance_threshold.
        rng = np.random.RandomState(global_random_seed)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
______ test_agglomerative_clustering_with_distance_threshold[42-complete] ______

linkage = 'complete', global_random_seed = 42

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    def test_agglomerative_clustering_with_distance_threshold(linkage, global_random_seed):
        # Check that we obtain the correct number of clusters with
        # agglomerative clustering with distance_threshold.
        rng = np.random.RandomState(global_random_seed)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
______ test_agglomerative_clustering_with_distance_threshold[42-average] _______

linkage = 'average', global_random_seed = 42

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    def test_agglomerative_clustering_with_distance_threshold(linkage, global_random_seed):
        # Check that we obtain the correct number of clusters with
        # agglomerative clustering with distance_threshold.
        rng = np.random.RandomState(global_random_seed)
        mask = np.ones([10, 10], dtype=bool)
        n_samples = 100
        X = rng.randn(n_samples, 50)
>       connectivity = grid_to_graph(*mask.shape)

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n_x = 10, n_y = 10, n_z = 1

    @validate_params({'n_x': [Interval(Integral, left=1, right=None, closed='left')], 'n_y': [Interval(Integral, left=1, right=None, closed='left')], 'n_z': [Interval(Integral, left=1, right=None, closed='left')], 'mask': [None, np.ndarray], 'return_as': [type], 'dtype': 'no_validation'}, prefer_skip_nested_validation=True)
    def grid_to_graph(n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int):
>       from .temp import grid_to_graph
E       ImportError: cannot import name 'grid_to_graph' from 'sklearn.feature_extraction.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/feature_extraction/image.py:133: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-ward] _

linkage = 'ward', threshold = 0.5, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-complete] _

linkage = 'complete', threshold = 0.5, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-average] _

linkage = 'average', threshold = 0.5, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-ward] _

linkage = 'ward', threshold = 1.0, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-complete] _

linkage = 'complete', threshold = 1.0, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-average] _

linkage = 'average', threshold = 1.0, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-ward] _

linkage = 'ward', threshold = 1.5, y_true = [0, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [0, 0], labels_pred = array([0, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-complete] _

linkage = 'complete', threshold = 1.5, y_true = [0, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [0, 0], labels_pred = array([0, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-average] _

linkage = 'average', threshold = 1.5, y_true = [0, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [0, 0], labels_pred = array([0, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
=========================== short test summary info ============================
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_structured_linkage_tree
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_height_linkage_tree
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-None-0.5]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-10-None]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-None-0.5]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-10-None]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-None-0.5]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-10-None]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-None-0.5]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-10-None]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-None-0.5]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-10-None]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-None-0.5]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-10-None]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-None-0.5]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-10-None]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-None-0.5]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-10-None]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_matrix]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_array]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_agglomeration[42]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_fixing_non_lil
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_affinity_passed_to_fix_connectivity
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-ward]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-complete]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-average]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-ward]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-complete]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-average]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-ward]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-complete]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-average]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-ward]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-complete]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-average]
======================== 35 failed, 31 passed in 1.33s =========================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 66 items

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_linkage_misc I: Seeding RNGs with 601796332
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_structured_linkage_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_unstructured_linkage_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_height_linkage_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_zero_cosine_linkage_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_matrix] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_array] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_memory_mapped PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_agglomeration[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_single_linkage_clustering PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_sparse_scikit_vs_scipy[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_vector_scikit_single_vs_scipy_single[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid2] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid3] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid4] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid6] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid7] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid8] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid9] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_identical_points PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_propagation PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_tree_children_order[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_linkage_tree_return_distance[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_fixing_non_lil PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_int_float_dict PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_callable PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_ignores_diagonal PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_compute_full_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_n_components PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_affinity_passed_to_fix_connectivity PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-ward] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-complete] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-average] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_small_distance_threshold[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_cluster_distances_with_distance_threshold[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-ward] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-complete] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-average] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-ward] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-complete] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-average] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-ward] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-complete] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-average] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_dist_threshold_invalid_parameters PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_invalid_shape_precomputed_dist_matrix PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_precomputed_connectivity_metric_with_2_connected_components PASSED

=================================== FAILURES ===================================
_ test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-ward] _

linkage = 'ward', threshold = 0.5, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-complete] _

linkage = 'complete', threshold = 0.5, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-average] _

linkage = 'average', threshold = 0.5, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-ward] _

linkage = 'ward', threshold = 1.0, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-complete] _

linkage = 'complete', threshold = 1.0, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-average] _

linkage = 'average', threshold = 1.0, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-ward] _

linkage = 'ward', threshold = 1.5, y_true = [0, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [0, 0], labels_pred = array([0, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-complete] _

linkage = 'complete', threshold = 1.5, y_true = [0, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [0, 0], labels_pred = array([0, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-average] _

linkage = 'average', threshold = 1.5, y_true = [0, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [0, 0], labels_pred = array([0, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
=========================== short test summary info ============================
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-ward]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-complete]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-average]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-ward]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-complete]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-average]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-ward]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-complete]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-average]
=================== 9 failed, 57 passed, 1 warning in 1.12s ====================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.9.0, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/scikit-learn/scikit-learn/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/scikit-learn/scikit-learn
configfile: setup.cfg
plugins: cov-6.0.0
collecting ... collected 66 items

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_linkage_misc I: Seeding RNGs with 1859396790
PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_structured_linkage_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_unstructured_linkage_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_height_linkage_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_zero_cosine_linkage_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-True-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[ward-False-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-True-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[complete-False-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-True-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[average-False-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-True-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-None-0.5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_distances[single-False-10-None] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_matrix] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering[42-lil_array] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_memory_mapped PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_agglomeration[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_single_linkage_clustering PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_sparse_scikit_vs_scipy[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_vector_scikit_single_vs_scipy_single[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid0] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid1] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid2] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid3] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid4] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid5] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid6] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid7] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid8] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_mst_linkage_core_memory_mapped[metric_param_grid9] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_identical_points PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_propagation PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_tree_children_order[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_ward_linkage_tree_return_distance[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_fixing_non_lil PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_int_float_dict PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_callable PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_connectivity_ignores_diagonal PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_compute_full_tree PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_n_components PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_affinity_passed_to_fix_connectivity PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-ward] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-complete] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold[42-average] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_small_distance_threshold[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_cluster_distances_with_distance_threshold[42] PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-ward] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-complete] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-average] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-ward] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-complete] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-average] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-ward] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-complete] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-average] FAILED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_dist_threshold_invalid_parameters PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_invalid_shape_precomputed_dist_matrix PASSED
../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_precomputed_connectivity_metric_with_2_connected_components PASSED

=================================== FAILURES ===================================
_ test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-ward] _

linkage = 'ward', threshold = 0.5, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-complete] _

linkage = 'complete', threshold = 0.5, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-average] _

linkage = 'average', threshold = 0.5, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-ward] _

linkage = 'ward', threshold = 1.0, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-complete] _

linkage = 'complete', threshold = 1.0, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-average] _

linkage = 'average', threshold = 1.0, y_true = [1, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [1, 0], labels_pred = array([1, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-ward] _

linkage = 'ward', threshold = 1.5, y_true = [0, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [0, 0], labels_pred = array([0, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-complete] _

linkage = 'complete', threshold = 1.5, y_true = [0, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [0, 0], labels_pred = array([0, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
_ test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-average] _

linkage = 'average', threshold = 1.5, y_true = [0, 0]

    @pytest.mark.parametrize("linkage", ["ward", "complete", "average"])
    @pytest.mark.parametrize(
        ("threshold", "y_true"), [(0.5, [1, 0]), (1.0, [1, 0]), (1.5, [0, 0])]
    )
    def test_agglomerative_clustering_with_distance_threshold_edge_case(
        linkage, threshold, y_true
    ):
        # test boundary case of distance_threshold matching the distance
        X = [[0], [1]]
        clusterer = AgglomerativeClustering(
            n_clusters=None, distance_threshold=threshold, linkage=linkage
        )
        y_pred = clusterer.fit_predict(X)
>       assert adjusted_rand_score(y_true, y_pred) == 1

../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:216: in wrapper
    return func(*args, **kwargs)
../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:361: in adjusted_rand_score
    ((tn, fp), (fn, tp)) = pair_confusion_matrix(labels_true, labels_pred)
../publishablew/scikit-learn/scikit-learn/sklearn/utils/_param_validation.py:189: in wrapper
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

labels_true = [0, 0], labels_pred = array([0, 0])

    @validate_params({'labels_true': ['array-like'], 'labels_pred': ['array-like']}, prefer_skip_nested_validation=True)
    def pair_confusion_matrix(labels_true, labels_pred):
>       from .temp import pair_confusion_matrix
E       ImportError: cannot import name 'pair_confusion_matrix' from 'sklearn.metrics.cluster.temp' (/local/data0/moved_data/publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/temp.py)

../publishablew/scikit-learn/scikit-learn/sklearn/metrics/cluster/_supervised.py:121: ImportError
=========================== short test summary info ============================
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-ward]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-complete]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[0.5-y_true0-average]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-ward]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-complete]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.0-y_true1-average]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-ward]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-complete]
FAILED ../publishablew/scikit-learn/scikit-learn/sklearn/cluster/tests/test_hierarchical.py::test_agglomerative_clustering_with_distance_threshold_edge_case[1.5-y_true2-average]
=================== 9 failed, 57 passed, 1 warning in 2.69s ====================
