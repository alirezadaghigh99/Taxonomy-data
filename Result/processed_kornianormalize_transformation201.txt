output file:
processed_kornianormalize_transformation201.json
function:
normalize_transformation
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'inductor', 'jit', 'openxla', 'tvm', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 67 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_mean_std[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XFAIL
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_result[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shift[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_gradcheck[cpu] PASSED

=================================== FAILURES ===================================
__________ TestNormalizeTransformation.test_shape[cpu-float32-1-2-2] ___________

self = <test_fundamental.TestNormalizeTransformation object at 0x7c9906eff670>
batch_size = 1, rows = 2, cols = 2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, rows, cols", [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 1, 2)])
    def test_shape(self, batch_size, rows, cols, device, dtype):
        B, N, M = batch_size, rows, cols
        trans = torch.rand(B, N, M, device=device, dtype=dtype)
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[0.14963228, 0.96517545],
        [0.5654824 , 0.30917293]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
__________ TestNormalizeTransformation.test_shape[cpu-float32-2-3-3] ___________

self = <test_fundamental.TestNormalizeTransformation object at 0x7c9906eff5b0>
batch_size = 2, rows = 3, cols = 3, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, rows, cols", [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 1, 2)])
    def test_shape(self, batch_size, rows, cols, device, dtype):
        B, N, M = batch_size, rows, cols
        trans = torch.rand(B, N, M, device=device, dtype=dtype)
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[0.15042973, 0.22039646, 0.12814862],
        [0.12797368, 0.13906884, 0.828252  ],
        [0.95336735, 0.737...32316   ],
        [0.18982899, 0.3149057 , 0.43239647],
        [0.259696  , 0.250202  , 0.19635355]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
__________ TestNormalizeTransformation.test_shape[cpu-float32-3-4-4] ___________

self = <test_fundamental.TestNormalizeTransformation object at 0x7c9906eff9d0>
batch_size = 3, rows = 4, cols = 4, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, rows, cols", [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 1, 2)])
    def test_shape(self, batch_size, rows, cols, device, dtype):
        B, N, M = batch_size, rows, cols
        trans = torch.rand(B, N, M, device=device, dtype=dtype)
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[0.03830522, 0.70068353, 0.99702543, 0.6403399 ],
        [0.9123978 , 0.77133185, 0.72317725, 0.06065536],
  ...983234, 0.9223241 , 0.09529603, 0.6937197 ],
        [0.33788788, 0.8339199 , 0.93124104, 0.9289829 ]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
__________ TestNormalizeTransformation.test_shape[cpu-float32-2-1-2] ___________

self = <test_fundamental.TestNormalizeTransformation object at 0x7c9906effa90>
batch_size = 2, rows = 1, cols = 2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, rows, cols", [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 1, 2)])
    def test_shape(self, batch_size, rows, cols, device, dtype):
        B, N, M = batch_size, rows, cols
        trans = torch.rand(B, N, M, device=device, dtype=dtype)
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[0.02287501, 0.43861437]],

       [[0.7923143 , 0.68973905]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_________ TestNormalizeTransformation.test_check_last_val[cpu-float32] _________

self = <test_fundamental.TestNormalizeTransformation object at 0x7c9906effd60>
device = device(type='cpu'), dtype = torch.float32

    def test_check_last_val(self, device, dtype):
        trans = torch.tensor([[[0.0, 0.0, 1.0], [0.0, 2.0, 0.0], [0.5, 0.0, 0.5]]], device=device, dtype=dtype)
    
        trans_expected = torch.tensor([[[0.0, 0.0, 2.0], [0.0, 4.0, 0.0], [1.0, 0.0, 1.0]]], device=device, dtype=dtype)
    
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[0. , 0. , 1. ],
        [0. , 2. , 0. ],
        [0.5, 0. , 0.5]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_______ TestNormalizeTransformation.test_check_corner_case[cpu-float32] ________

self = <test_fundamental.TestNormalizeTransformation object at 0x7c9906d3c0d0>
device = device(type='cpu'), dtype = torch.float32

    def test_check_corner_case(self, device, dtype):
        trans = torch.tensor([[[0.0, 0.0, 1.0], [0.0, 2.0, 0.0], [0.5, 0.0, 0.0]]], device=device, dtype=dtype)
    
        trans_expected = trans.clone()
    
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[0. , 0. , 1. ],
        [0. , 2. , 0. ],
        [0.5, 0. , 0. ]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_______________ TestNormalizeTransformation.test_gradcheck[cpu] ________________

self = <test_fundamental.TestNormalizeTransformation object at 0x7c9906eff0d0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        trans = torch.rand(2, 3, 3, device=device, requires_grad=True, dtype=torch.float64)
>       self.gradcheck(epi.normalize_transformation, (trans,))

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:12: in normalize_transformation
    M = np.array(M)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor([[[0.0200, 0.4774, 0.7796],
         [0.0259, 0.4350, 0.3764],
         [0.8509, 0.3423, 0.0010]],

        [[0...8991],
         [0.7494, 0.2543, 0.4824],
         [0.2799, 0.6672, 0.7250]]], dtype=torch.float64, requires_grad=True)
dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           RuntimeError: Can't call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead.

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/_tensor.py:1149: RuntimeError
_________________ TestFindFundamental.test_smoke[cpu-float32] __________________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3c370>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        points1 = torch.rand(1, 8, 2, device=device, dtype=dtype)
        points2 = torch.rand(1, 8, 2, device=device, dtype=dtype)
        weights = torch.ones(1, 8, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[ 0.3208503, -2.416198 ,  2.132782 ],
        [-7.470904 , 10.475151 , -5.7694287],
        [ 2.6601975, -4.6996355,  2.9839451]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_______________ TestFindFundamental.test_shape[cpu-float32-1-8] ________________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3c760>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[ 4.187426  ,  8.0413265 , -5.903508  ],
        [-1.0374508 ,  8.887739  , -1.5005541 ],
        [-0.16770399, -8.44983   ,  2.4500332 ]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_______________ TestFindFundamental.test_shape[cpu-float32-2-9] ________________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3c6a0>
batch_size = 2, num_points = 9, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[  6.5735736 ,   0.7242655 ,  -2.7568185 ],
        [ 10.470441  ,   7.268261  ,  -8.842713  ],
        [ -6.0...       [ 11.704312  , -12.116328  ,   0.26808834],
        [ -4.016042  ,   4.8224382 ,  -0.03467425]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_______________ TestFindFundamental.test_shape[cpu-float32-3-10] _______________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3ca00>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[-6.0439229e+00,  6.8311319e+00, -3.0678246e+00],
        [ 3.5420086e-03,  4.3087587e+00, -2.4898102e+00],
  ...833212e+00, -3.5909052e+00, -2.1984043e+00],
        [-2.8923194e+00, -1.6525344e+00,  1.5487568e+00]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-1-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3cd90>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[-0.485862  ,  0.23923302, -0.40071046],
        [-4.2204933 , -8.003027  ,  3.748029  ],
        [ 0.6662376 ,  0.56116724, -0.08815157]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-2-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3ccd0>
batch_size = 2, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[  3.3800972 ,   3.4979458 ,  -2.2557511 ],
        [ -5.2412457 ,   3.1232977 ,   2.337346  ],
        [  1.1...       [  1.9302785 ,  -0.2597972 ,  -0.44367224],
        [ -6.091899  ,   0.55290496,   3.8327584 ]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-3-10] __________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3d030>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[-1.8653878 , -3.506297  ,  4.3065085 ],
        [ 6.8339186 ,  0.13871086, -3.2352197 ],
        [-1.2850718 ...95],
        [ 9.028308  , -3.2389536 , -0.476515  ],
        [ 0.30497837, -0.7009936 ,  0.22069731]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-1] _____________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3d3c0>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_7point
    return normalize_transformation(fmatrix)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[[  75.701584 ,   49.56127  ,  -64.18957  ],
         [   1.1672798,  258.8889   , -170.52979  ],
         [  ...     [ 148.61394  ,  363.77167  , -383.66382  ],
         [-190.58142  , -551.587    ,  559.5598   ]]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-2] _____________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3d300>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_7point
    return normalize_transformation(fmatrix)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[[  5.180207  , -24.417755  ,   2.6287465 ],
         [ -6.6240582 ,  42.20882   ,  -6.509776  ],
         [ -...     [ -9.06333   ,  14.699534  ,  -0.4363169 ],
         [  1.9846864 ,  -5.11658   ,   1.2244449 ]]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-3] _____________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3d690>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_7point
    return normalize_transformation(fmatrix)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[[ -5.2783704 ,  10.763164  ,  -4.768965  ],
         [-17.913723  ,  -6.2208486 ,  19.525627  ],
         [  ...     [-16.825443  ,  25.207632  ,  -2.5543764 ],
         [  4.8758874 ,  -7.4028006 ,   0.79816633]]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_______________ TestFindFundamental.test_opencv_svd[cpu-float32] _______________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3d960>
device = device(type='cpu'), dtype = torch.float32

    def test_opencv_svd(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                    [0.2645, 0.8882],
                    [0.2411, 0.3045],
                    [0.8199, 0.4107],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                    [0.8908, 0.1233],
                    [0.2338, 0.7663],
                    [0.4466, 0.5696],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        weights = torch.ones(1, 10, device=device, dtype=dtype)
    
        # generated with OpenCV using above points
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_8POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [-0.47408533, 0.22033807, -0.00346677],
                    [0.54935973, 1.31080955, -1.25028275],
                    [-0.36690215, -1.08143769, 1.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[-2.9268544 ,  1.3597486 , -0.02103745],
        [ 3.3907907 ,  8.092072  , -7.717951  ],
        [-2.2645307 , -6.675893  ,  6.172822  ]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_____________ TestFindFundamental.test_7point_opencv[cpu-float32] ______________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3dc90>
device = device(type='cpu'), dtype = torch.float32

    def test_7point_opencv(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        # generated with OpenCV using above points
        # Fm_expected shape is 9x3
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_7POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [
                        [-2.87490907, 5.41934672, 0.73871396],
                        [0.34010174, 3.70371623, -4.65517276],
                        [-0.1809933, -0.56577107, 1.0],
                    ],
                    [
                        [0.14465888, 0.68711702, -0.65570944],
                        [0.53424758, 0.7988479, -0.75446946],
                        [-0.48201197, -1.05375511, 1.0],
                    ],
                    [
                        [-0.0901827, 1.05515785, -0.54726062],
                        [0.51914823, 1.02476892, -1.05783979],
                        [-0.45860077, -1.01580301, 1.0],
                    ],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_7point
    return normalize_transformation(fmatrix)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[[-17.824726 ,  33.600494 ,   4.5801015],
         [  2.1086724,  22.963398 , -28.862535 ],
         [ -1.1221...,
         [  9.957552 ,  19.65563  , -20.28995  ],
         [ -8.796218 , -19.483662 ,  19.180552 ]]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
________ TestFindFundamental.test_synthetic_sampson_7point[cpu-float32] ________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3dfc0>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson_7point(self, device, dtype):
>       scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/geometry/create.py:61: in generate_two_view_random_scene
    F_mat = epi.normalize_transformation(F_mat)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[ 1.3413206e+03,  5.0515686e+01,  2.3530186e+04],
        [ 3.2615359e+02, -4.1468237e+02,  3.5463032e+03],
        [ 3.8343994e+03,  3.1551035e+03,  8.2603734e+04]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
___________ TestFindFundamental.test_synthetic_sampson[cpu-float32] ____________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3e620>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson(self, device, dtype):
>       scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:264: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/geometry/create.py:61: in generate_two_view_random_scene
    F_mat = epi.normalize_transformation(F_mat)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[ 1.7282588e+02, -1.8431422e+03,  6.3974893e+03],
        [ 2.3093450e+03, -8.0604895e+02, -1.3303081e+05],
        [ 3.3835348e+04,  2.1144022e+05, -3.9968935e+06]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
___________________ TestFindFundamental.test_gradcheck[cpu] ____________________

self = <test_fundamental.TestFindFundamental object at 0x7c9906d3e140>
device = device(type='cpu')

    def test_gradcheck(self, device):
        points1 = torch.rand(1, 10, 2, device=device, dtype=torch.float64, requires_grad=True)
        points2 = torch.rand(1, 10, 2, device=device, dtype=torch.float64)
        weights = torch.ones(1, 10, device=device, dtype=torch.float64)
>       self.gradcheck(epi.find_fundamental, (points1, points2, weights))

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:12: in normalize_transformation
    M = np.array(M)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor([[[-9.0901, -8.4938,  7.4576],
         [-2.4468, -1.8620,  2.2652],
         [ 7.0881,  6.2171, -6.0619]]], dtype=torch.float64,
       grad_fn=<UnsafeViewBackward0>)
dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           RuntimeError: Can't call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead.

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/_tensor.py:1149: RuntimeError
_______ TestFundamentlFromEssential.test_from_to_essential[cpu-float32] ________

self = <test_fundamental.TestFundamentlFromEssential object at 0x7c9906d4cd90>
device = device(type='cpu'), dtype = torch.float32

    def test_from_to_essential(self, device, dtype):
>       scene = generate_two_view_random_scene(device, dtype)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:367: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/geometry/create.py:61: in generate_two_view_random_scene
    F_mat = epi.normalize_transformation(F_mat)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[ 3.2978242e+03, -1.9549114e+03,  9.1188273e+04],
        [ 3.2880667e+03, -1.6830450e+03,  6.7661023e+04],
        [-5.8945238e+05, -3.6203559e+05,  4.5887156e+07]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
_____ TestFundamentalFromProjections.test_from_to_projections[cpu-float32] _____

self = <test_fundamental.TestFundamentalFromProjections object at 0x7c9906d4e170>
device = device(type='cpu'), dtype = torch.float32

    def test_from_to_projections(self, device, dtype):
        P1 = torch.tensor(
            [[[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 1.0, 0.0]]], device=device, dtype=dtype
        )
    
        P2 = torch.tensor(
            [[[1.0, 1.0, 1.0, 3.0], [0.0, 2.0, 0.0, 3.0], [0.0, 1.0, 1.0, 0.0]]], device=device, dtype=dtype
        )
    
        F_mat = epi.fundamental_from_projections(P1, P2)
        P_mat = epi.projections_from_fundamental(F_mat)
        F_hat = epi.fundamental_from_projections(P_mat[..., 0], P_mat[..., 1])
    
>       F_mat_norm = epi.normalize_transformation(F_mat)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:418: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = array([[[ 3., -3., -3.],
        [-3.,  3.,  3.],
        [ 0., -3.,  3.]]], dtype=float32)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        M = np.array(M)
        assert M.ndim >= 2, 'Input matrix must have at least 2 dimensions'
>       rows, cols = M.shape
E       ValueError: too many values to unpack (expected 2)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:14: ValueError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32]
=================== 24 failed, 42 passed, 1 xfailed in 0.88s ===================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'openxla', 'inductor', 'onnxrt', 'jit', None, 'tvm'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 67 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_mean_std[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_result[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shift[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_gradcheck[cpu] PASSED

======================== 66 passed, 1 xpassed in 0.28s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'openxla', 'inductor', 'tvm', 'jit', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 67 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_mean_std[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_result[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shift[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_gradcheck[cpu] PASSED

======================== 66 passed, 1 xpassed in 0.26s =========================
