output file:
processed_kornianormalize_transformation201.json
function:
normalize_transformation
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'cudagraphs', 'jit', 'openxla', 'inductor', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 67 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_mean_std[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XFAIL
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_result[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shift[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_gradcheck[cpu] PASSED

=================================== FAILURES ===================================
__________ TestNormalizeTransformation.test_shape[cpu-float32-1-2-2] ___________

self = <test_fundamental.TestNormalizeTransformation object at 0x7b65d08ff760>
batch_size = 1, rows = 2, cols = 2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, rows, cols", [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 1, 2)])
    def test_shape(self, batch_size, rows, cols, device, dtype):
        B, N, M = batch_size, rows, cols
        trans = torch.rand(B, N, M, device=device, dtype=dtype)
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[0.2955, 0.6165],
         [0.0518, 0.3473]]]), eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
__________ TestNormalizeTransformation.test_shape[cpu-float32-2-3-3] ___________

self = <test_fundamental.TestNormalizeTransformation object at 0x7b65d08ff6a0>
batch_size = 2, rows = 3, cols = 3, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, rows, cols", [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 1, 2)])
    def test_shape(self, batch_size, rows, cols, device, dtype):
        B, N, M = batch_size, rows, cols
        trans = torch.rand(B, N, M, device=device, dtype=dtype)
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[0.0828, 0.3288, 0.9755],
         [0.9863, 0.8204, 0.5122],
         [0.8415, 0.3977, 0.4005]],

        [[0.2508, 0.3796, 0.1398],
         [0.9524, 0.8167, 0.7255],
         [0.6216, 0.9568, 0.1211]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
__________ TestNormalizeTransformation.test_shape[cpu-float32-3-4-4] ___________

self = <test_fundamental.TestNormalizeTransformation object at 0x7b65d08ffac0>
batch_size = 3, rows = 4, cols = 4, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, rows, cols", [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 1, 2)])
    def test_shape(self, batch_size, rows, cols, device, dtype):
        B, N, M = batch_size, rows, cols
        trans = torch.rand(B, N, M, device=device, dtype=dtype)
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[0.1930, 0.0602, 0.6273, 0.1936],
         [0.1133, 0.2622, 0.4511, 0.2561],
         [0.2050, 0.7605, 0.2556....2855, 0.7760, 0.9707, 0.8366],
         [0.7823, 0.1659, 0.1664, 0.8117],
         [0.8909, 0.3436, 0.8409, 0.9730]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
__________ TestNormalizeTransformation.test_shape[cpu-float32-2-1-2] ___________

self = <test_fundamental.TestNormalizeTransformation object at 0x7b65d08ffb80>
batch_size = 2, rows = 1, cols = 2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, rows, cols", [(1, 2, 2), (2, 3, 3), (3, 4, 4), (2, 1, 2)])
    def test_shape(self, batch_size, rows, cols, device, dtype):
        B, N, M = batch_size, rows, cols
        trans = torch.rand(B, N, M, device=device, dtype=dtype)
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[0.2504, 0.3512]],

        [[0.3178, 0.5114]]]), eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_________ TestNormalizeTransformation.test_check_last_val[cpu-float32] _________

self = <test_fundamental.TestNormalizeTransformation object at 0x7b65d08ffe50>
device = device(type='cpu'), dtype = torch.float32

    def test_check_last_val(self, device, dtype):
        trans = torch.tensor([[[0.0, 0.0, 1.0], [0.0, 2.0, 0.0], [0.5, 0.0, 0.5]]], device=device, dtype=dtype)
    
        trans_expected = torch.tensor([[[0.0, 0.0, 2.0], [0.0, 4.0, 0.0], [1.0, 0.0, 1.0]]], device=device, dtype=dtype)
    
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[0.0000, 0.0000, 1.0000],
         [0.0000, 2.0000, 0.0000],
         [0.5000, 0.0000, 0.5000]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_______ TestNormalizeTransformation.test_check_corner_case[cpu-float32] ________

self = <test_fundamental.TestNormalizeTransformation object at 0x7b65d073c1c0>
device = device(type='cpu'), dtype = torch.float32

    def test_check_corner_case(self, device, dtype):
        trans = torch.tensor([[[0.0, 0.0, 1.0], [0.0, 2.0, 0.0], [0.5, 0.0, 0.0]]], device=device, dtype=dtype)
    
        trans_expected = trans.clone()
    
>       trans_norm = epi.normalize_transformation(trans)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[0.0000, 0.0000, 1.0000],
         [0.0000, 2.0000, 0.0000],
         [0.5000, 0.0000, 0.0000]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_______________ TestNormalizeTransformation.test_gradcheck[cpu] ________________

self = <test_fundamental.TestNormalizeTransformation object at 0x7b65d08ff190>
device = device(type='cpu')

    def test_gradcheck(self, device):
        trans = torch.rand(2, 3, 3, device=device, requires_grad=True, dtype=torch.float64)
>       self.gradcheck(epi.normalize_transformation, (trans,))

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[0.6479, 0.8999, 0.2706],
         [0.8318, 0.5212, 0.0328],
         [0.5336, 0.2397, 0.6066]],

        [[0...8869],
         [0.6500, 0.2320, 0.4159],
         [0.3012, 0.2258, 0.4282]]], dtype=torch.float64, requires_grad=True)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_________________ TestFindFundamental.test_smoke[cpu-float32] __________________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073c460>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        points1 = torch.rand(1, 8, 2, device=device, dtype=dtype)
        points2 = torch.rand(1, 8, 2, device=device, dtype=dtype)
        weights = torch.ones(1, 8, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[ 5.5346,  2.2927, -2.7778],
         [-3.5284, -6.1965,  6.4610],
         [-0.7123,  3.2962, -3.1998]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_______________ TestFindFundamental.test_shape[cpu-float32-1-8] ________________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073c850>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[-8.2634, -2.2759,  7.4956],
         [ 1.5805,  5.0219, -2.4246],
         [ 2.9834, -2.7100, -1.9432]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_______________ TestFindFundamental.test_shape[cpu-float32-2-9] ________________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073c790>
batch_size = 2, num_points = 9, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[ -1.0287,  -2.3380,   2.1249],
         [ -4.0866, -10.2847,   9.0575],
         [  3.1567,   4.2053,  -4.68...   [[ -3.9857,   1.8673,   0.4512],
         [ -6.2959,   8.6540,  -1.2599],
         [  6.1527,  -6.2412,   0.4649]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_______________ TestFindFundamental.test_shape[cpu-float32-3-10] _______________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073caf0>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 9), (3, 10)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = torch.ones(B, N, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[ -7.9435,  -9.4673,   8.8085],
         [ -4.2059,   0.0161,   2.4739],
         [  4.0311,   2.3866,  -3.41...   [[ -1.4593,  -6.8165,   5.5844],
         [ -5.1404,  -7.7563,   5.7603],
         [  4.7224,   9.0736,  -6.9589]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-1-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073ce80>
batch_size = 1, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[ -2.0243,  -1.1140,   2.7227],
         [-10.5758,  -7.7538,  11.0100],
         [  5.7374,   4.1033,  -6.1444]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-2-8] ___________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073cdc0>
batch_size = 2, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[ 19.1652,  14.1248, -19.1496],
         [  6.1453,  -7.5832,   3.4235],
         [ -9.1686,   0.3407,   3.55...   [[  5.2140,   6.1307,  -7.4657],
         [  2.9220,   5.2552,  -3.3274],
         [ -2.4534,  -3.5586,   3.1957]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
__________ TestFindFundamental.test_shape_noweights[cpu-float32-3-10] __________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073d120>
batch_size = 3, num_points = 10, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 8), (2, 8), (3, 10)])
    def test_shape_noweights(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        points1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, N, 2, device=device, dtype=dtype)
        weights = None
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[ -3.0314,   8.9602,  -3.5830],
         [  1.3545,  -4.8095,   2.2359],
         [ -0.8356,   1.3453,  -0.10...   [[  4.1934, -10.4865,   0.8134],
         [ -9.0290,   4.0909,   5.5586],
         [  2.3658,   7.2218,  -4.7358]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-1] _____________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073d4b0>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_7point
    return normalize_transformation(fmatrix)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[[ -20.0182,   31.2797,   -6.5475],
          [ -38.1555,  -19.3836,   18.9461],
          [  36.8541,    5.2...65,   30.9086,    0.7636],
          [ -37.2270,   19.6237,    2.5452],
          [  38.5969,  -20.2912,   -2.6491]]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-2] _____________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073d3f0>
batch_size = 2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_7point
    return normalize_transformation(fmatrix)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[[-1.8982e+03, -2.8275e+03,  2.1394e+03],
          [-3.9103e+02, -3.3595e+02,  3.7652e+02],
          [ 8.71... -1.5226e+01],
          [ 1.4537e+00,  2.1558e+01, -1.6608e+01],
          [-4.5976e+00, -1.2912e+01,  9.1914e+00]]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_____________ TestFindFundamental.test_shape_7point[cpu-float32-3] _____________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073d780>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2, 3])
    def test_shape_7point(self, batch_size, device, dtype):
        B = batch_size
        points1 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        points2 = torch.rand(B, 7, 2, device=device, dtype=dtype)
        torch.ones(B, 7, device=device, dtype=dtype)
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_7point
    return normalize_transformation(fmatrix)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[[ 4.3798e+00, -9.5069e+00,  4.6579e-01],
          [ 4.8607e-01,  2.6536e+01, -9.6952e+00],
          [-1.94...  1.3040e+01],
          [-3.1930e+01,  7.6458e+00,  1.2706e+01],
          [ 2.0286e+01,  2.8680e-01, -8.5928e+00]]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_______________ TestFindFundamental.test_opencv_svd[cpu-float32] _______________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073da50>
device = device(type='cpu'), dtype = torch.float32

    def test_opencv_svd(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                    [0.2645, 0.8882],
                    [0.2411, 0.3045],
                    [0.8199, 0.4107],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                    [0.8908, 0.1233],
                    [0.2338, 0.7663],
                    [0.4466, 0.5696],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        weights = torch.ones(1, 10, device=device, dtype=dtype)
    
        # generated with OpenCV using above points
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_8POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [-0.47408533, 0.22033807, -0.00346677],
                    [0.54935973, 1.31080955, -1.25028275],
                    [-0.36690215, -1.08143769, 1.0],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       F_mat = epi.find_fundamental(points1, points2, weights)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[-2.9269,  1.3597, -0.0210],
         [ 3.3908,  8.0921, -7.7180],
         [-2.2645, -6.6759,  6.1728]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_____________ TestFindFundamental.test_7point_opencv[cpu-float32] ______________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073dd80>
device = device(type='cpu'), dtype = torch.float32

    def test_7point_opencv(self, device, dtype):
        points1 = torch.tensor(
            [
                [
                    [0.8569, 0.5982],
                    [0.0059, 0.9649],
                    [0.1968, 0.8846],
                    [0.6084, 0.3467],
                    [0.9633, 0.5274],
                    [0.8941, 0.8939],
                    [0.0863, 0.5133],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points2 = torch.tensor(
            [
                [
                    [0.0928, 0.3013],
                    [0.0989, 0.9649],
                    [0.0341, 0.4827],
                    [0.8294, 0.4469],
                    [0.2230, 0.2998],
                    [0.1722, 0.8182],
                    [0.5264, 0.8869],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        # generated with OpenCV using above points
        # Fm_expected shape is 9x3
        # import cv2
        # Fm_expected, _ = cv2.findFundamentalMat(
        #   points1.detach().numpy().reshape(-1, 1, 2),
        #   points2.detach().numpy().reshape(-1, 1, 2), cv2.FM_7POINT)
    
        Fm_expected = torch.tensor(
            [
                [
                    [
                        [-2.87490907, 5.41934672, 0.73871396],
                        [0.34010174, 3.70371623, -4.65517276],
                        [-0.1809933, -0.56577107, 1.0],
                    ],
                    [
                        [0.14465888, 0.68711702, -0.65570944],
                        [0.53424758, 0.7988479, -0.75446946],
                        [-0.48201197, -1.05375511, 1.0],
                    ],
                    [
                        [-0.0901827, 1.05515785, -0.54726062],
                        [0.51914823, 1.02476892, -1.05783979],
                        [-0.45860077, -1.01580301, 1.0],
                    ],
                ]
            ],
            device=device,
            dtype=dtype,
        )
>       F_mat = epi.find_fundamental(points1, points2, method="7POINT")

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:171: in find_fundamental
    result = run_7point(points1, points2)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:112: in run_7point
    return normalize_transformation(fmatrix)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[[-17.8247,  33.6005,   4.5801],
          [  2.1087,  22.9634, -28.8625],
          [ -1.1222,  -3.5078,   6...[[ -1.7298,  20.2385, -10.4968],
          [  9.9576,  19.6556, -20.2899],
          [ -8.7962, -19.4837,  19.1806]]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
________ TestFindFundamental.test_synthetic_sampson_7point[cpu-float32] ________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073e0b0>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson_7point(self, device, dtype):
>       scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/geometry/create.py:61: in generate_two_view_random_scene
    F_mat = epi.normalize_transformation(F_mat)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[ 1.9551e+03, -1.2173e+03,  9.8825e+04],
         [ 2.1203e+03,  2.0632e+03, -1.7177e+05],
         [-1.4057e+05,  5.0981e+04, -4.0926e+06]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
___________ TestFindFundamental.test_synthetic_sampson[cpu-float32] ____________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073e710>
device = device(type='cpu'), dtype = torch.float32

    def test_synthetic_sampson(self, device, dtype):
>       scene: Dict[str, torch.Tensor] = generate_two_view_random_scene(device, dtype)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:264: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/geometry/create.py:61: in generate_two_view_random_scene
    F_mat = epi.normalize_transformation(F_mat)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[ 5.3647e+02, -1.3894e+01, -2.0583e+04],
         [-9.3869e+02, -6.5282e+03,  1.6068e+05],
         [ 4.7021e+04,  1.0134e+05, -3.7554e+06]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
___________________ TestFindFundamental.test_gradcheck[cpu] ____________________

self = <test_fundamental.TestFindFundamental object at 0x7b65d073e230>
device = device(type='cpu')

    def test_gradcheck(self, device):
        points1 = torch.rand(1, 10, 2, device=device, dtype=torch.float64, requires_grad=True)
        points2 = torch.rand(1, 10, 2, device=device, dtype=torch.float64)
        weights = torch.ones(1, 10, device=device, dtype=torch.float64)
>       self.gradcheck(epi.find_fundamental, (points1, points2, weights))

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:173: in find_fundamental
    result = run_8point(points1, points2, weights)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:153: in run_8point
    return normalize_transformation(F_est)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[-6.6482,  5.8526, -2.6745],
         [-3.0420,  4.8268, -2.2654],
         [ 5.1335, -5.2949,  2.4412]]], dtype=torch.float64,
       grad_fn=<UnsafeViewBackward0>)
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_______ TestFundamentlFromEssential.test_from_to_essential[cpu-float32] ________

self = <test_fundamental.TestFundamentlFromEssential object at 0x7b65d074ce80>
device = device(type='cpu'), dtype = torch.float32

    def test_from_to_essential(self, device, dtype):
>       scene = generate_two_view_random_scene(device, dtype)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:367: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/geometry/create.py:61: in generate_two_view_random_scene
    F_mat = epi.normalize_transformation(F_mat)
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[ 2.9912e+02, -8.4616e+02,  6.9176e+04],
         [ 5.8240e+02, -3.3595e+01, -3.3058e+04],
         [-9.7469e+04,  4.2710e+04,  1.6778e+06]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
_____ TestFundamentalFromProjections.test_from_to_projections[cpu-float32] _____

self = <test_fundamental.TestFundamentalFromProjections object at 0x7b65d074e260>
device = device(type='cpu'), dtype = torch.float32

    def test_from_to_projections(self, device, dtype):
        P1 = torch.tensor(
            [[[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [1.0, 0.0, 1.0, 0.0]]], device=device, dtype=dtype
        )
    
        P2 = torch.tensor(
            [[[1.0, 1.0, 1.0, 3.0], [0.0, 2.0, 0.0, 3.0], [0.0, 1.0, 1.0, 0.0]]], device=device, dtype=dtype
        )
    
        F_mat = epi.fundamental_from_projections(P1, P2)
        P_mat = epi.projections_from_fundamental(F_mat)
        F_hat = epi.fundamental_from_projections(P_mat[..., 0], P_mat[..., 1])
    
>       F_mat_norm = epi.normalize_transformation(F_mat)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py:418: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/fundamental.py:44: in normalize_transformation
    return normalize_transformation(M, eps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

M = tensor([[[ 3., -3., -3.],
         [-3.,  3.,  3.],
         [ 0., -3.,  3.]]])
eps = 1e-08

    def normalize_transformation(M, eps=1e-08):
        assert M.ndim >= 2, 'Input matrix M must have at least 2 dimensions'
        shape = M.shape
        last_value = M[-1, -1]
>       if abs(last_value) < eps:
E       RuntimeError: Boolean value of Tensor with more than one value is ambiguous

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:15: RuntimeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32]
=================== 24 failed, 42 passed, 1 xfailed in 0.84s ===================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'onnxrt', 'openxla', 'jit', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 67 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_mean_std[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_result[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shift[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_gradcheck[cpu] PASSED

======================== 66 passed, 1 xpassed in 0.29s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'cudagraphs', 'jit', 'onnxrt', 'inductor', None, 'openxla'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 67 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_mean_std[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizePoints::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-1-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-3-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-3-4-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_shape[cpu-float32-2-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_last_val[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_check_corner_case[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestNormalizeTransformation::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-2-9] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-1-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-2-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_noweights[cpu-float32-3-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_shape_7point[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_opencv_svd[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_7point_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson_7point[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_epipolar_constraint_7point[cpu-float32] XPASS
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_synthetic_sampson[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFindFundamental::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-1-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-1-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_volumetric[cpu-float32-2-2-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_opencv[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestComputeCorrespondEpilines::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_from_to_essential[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentlFromEssential::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape[cpu-float32-7] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_shape_large[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_from_to_projections[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestFundamentalFromProjections::test_batch_support_check[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_result[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestPerpendicular::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shape[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_shift[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_fundamental.py::TestGetClosestPointOnEpipolarLine::test_gradcheck[cpu] PASSED

======================== 66 passed, 1 xpassed in 0.25s =========================
