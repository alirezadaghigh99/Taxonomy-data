output file:
processed_korniaright_jacobian349.json
function:
right_jacobian
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-1]', '../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-5] FAILED', '../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-None] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-None]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-None]', '../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-None] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-5]', '../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-2]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'cudagraphs', 'jit', 'onnxrt', 'openxla', None, 'inductor'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 97 items

../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_cardinality[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_jit[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_getitem[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_getitem[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_getitem[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-None] FAILED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-None] FAILED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-5] FAILED

=================================== FAILURES ===================================
________________ TestSo3.test_right_jacobian[cpu-float32-None] _________________

self = <test_so3.TestSo3 object at 0x79654373ee60>, device = device(type='cpu')
dtype = torch.float32, batch_size = None

    @pytest.mark.parametrize("batch_size", (None, 1, 2, 5))
    def test_right_jacobian(self, device, dtype, batch_size):
        vec = self._make_rand_data(device, dtype, batch_size, dims=3)
>       Jr = So3.right_jacobian(vec)

../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/liegroup/so3.py:321: in right_jacobian
    return right_jacobian(vec)
../publishablew/kornia/kornia/kornia/geometry/liegroup/temp.py:42: in right_jacobian
    norm_vec = torch.norm(vec, dim=1, keepdim=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([0.4145, 0.9038, 0.2072]), p = 'fro', dim = 1, keepdim = True
out = None, dtype = None

    def norm(  # noqa: F811
        input,
        p: Optional[Union[float, str]] = "fro",
        dim=None,
        keepdim=False,
        out=None,
        dtype=None,
    ):
        r"""Returns the matrix norm or vector norm of a given tensor.
    
        .. warning::
    
            torch.norm is deprecated and may be removed in a future PyTorch release.
            Its documentation and behavior may be incorrect, and it is no longer
            actively maintained.
    
            Use :func:`torch.linalg.vector_norm` when computing vector norms and
            :func:`torch.linalg.matrix_norm` when computing matrix norms.
            For a function with a similar behavior as this one see :func:`torch.linalg.norm`.
            Note, however, the signature for these functions is slightly different than the
            signature for ``torch.norm``.
    
        Args:
            input (Tensor): The input tensor. Its data type must be either a floating
                point or complex type. For complex inputs, the norm is calculated using the
                absolute value of each element. If the input is complex and neither
                :attr:`dtype` nor :attr:`out` is specified, the result's data type will
                be the corresponding floating point type (e.g. float if :attr:`input` is
                complexfloat).
    
            p (int, float, inf, -inf, 'fro', 'nuc', optional): the order of norm. Default: ``'fro'``
                The following norms can be calculated:
    
                ======  ==============  ==========================
                ord     matrix norm     vector norm
                ======  ==============  ==========================
                'fro'   Frobenius norm  --
                'nuc'   nuclear norm    --
                Number  --              sum(abs(x)**ord)**(1./ord)
                ======  ==============  ==========================
    
                The vector norm can be calculated across any number of dimensions.
                The corresponding dimensions of :attr:`input` are flattened into
                one dimension, and the norm is calculated on the flattened
                dimension.
    
                Frobenius norm produces the same result as ``p=2`` in all cases
                except when :attr:`dim` is a list of three or more dims, in which
                case Frobenius norm throws an error.
    
                Nuclear norm can only be calculated across exactly two dimensions.
    
            dim (int, tuple of ints, list of ints, optional):
                Specifies which dimension or dimensions of :attr:`input` to
                calculate the norm across. If :attr:`dim` is ``None``, the norm will
                be calculated across all dimensions of :attr:`input`. If the norm
                type indicated by :attr:`p` does not support the specified number of
                dimensions, an error will occur.
            keepdim (bool, optional): whether the output tensors have :attr:`dim`
                retained or not. Ignored if :attr:`dim` = ``None`` and
                :attr:`out` = ``None``. Default: ``False``
            out (Tensor, optional): the output tensor. Ignored if
                :attr:`dim` = ``None`` and :attr:`out` = ``None``.
            dtype (:class:`torch.dtype`, optional): the desired data type of
                returned tensor. If specified, the input tensor is casted to
                :attr:`dtype` while performing the operation. Default: None.
    
        .. note::
            Even though ``p='fro'`` supports any number of dimensions, the true
            mathematical definition of Frobenius norm only applies to tensors with
            exactly two dimensions. :func:`torch.linalg.matrix_norm` with ``ord='fro'``
            aligns with the mathematical definition, since it can only be applied across
            exactly two dimensions.
    
        Example::
    
            >>> import torch
            >>> a = torch.arange(9, dtype= torch.float) - 4
            >>> b = a.reshape((3, 3))
            >>> torch.norm(a)
            tensor(7.7460)
            >>> torch.norm(b)
            tensor(7.7460)
            >>> torch.norm(a, float('inf'))
            tensor(4.)
            >>> torch.norm(b, float('inf'))
            tensor(4.)
            >>> c = torch.tensor([[ 1, 2, 3], [-1, 1, 4]] , dtype=torch.float)
            >>> torch.norm(c, dim=0)
            tensor([1.4142, 2.2361, 5.0000])
            >>> torch.norm(c, dim=1)
            tensor([3.7417, 4.2426])
            >>> torch.norm(c, p=1, dim=1)
            tensor([6., 6.])
            >>> d = torch.arange(8, dtype=torch.float).reshape(2, 2, 2)
            >>> torch.norm(d, dim=(1, 2))
            tensor([ 3.7417, 11.2250])
            >>> torch.norm(d[0, :, :]), torch.norm(d[1, :, :])
            (tensor(3.7417), tensor(11.2250))
        """
    
        if has_torch_function_unary(input):
            return handle_torch_function(
                norm, (input,), input, p=p, dim=dim, keepdim=keepdim, out=out, dtype=dtype
            )
    
        # NB. All the repeated code and weird python is to please TorchScript.
        #     For a more compact implementation see the relevant function in `_refs/__init__.py`
    
        # We don't do this for MPS or sparse tensors
        if input.layout == torch.strided and input.device.type in (
            "cpu",
            "cuda",
            "meta",
            torch.utils.backend_registration._privateuse1_backend_name,
        ):
            if dim is not None:
                if isinstance(dim, (int, torch.SymInt)):
                    _dim = [dim]
                else:
                    _dim = dim
            else:
                _dim = None  # type: ignore[assignment]
    
            if isinstance(p, str):
                if p == "fro" and (
                    dim is None or isinstance(dim, (int, torch.SymInt)) or len(dim) <= 2
                ):
                    if out is None:
>                       return torch.linalg.vector_norm(
                            input, 2, _dim, keepdim, dtype=dtype
                        )
E                       IndexError: Dimension out of range (expected to be in range of [-1, 0], but got 1)

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:1800: IndexError
______________ TestSo3.test_right_left_jacobian[cpu-float32-None] ______________

self = <test_so3.TestSo3 object at 0x79654373fa00>, device = device(type='cpu')
dtype = torch.float32, batch_size = None

    @pytest.mark.parametrize("batch_size", (None, 1, 2, 5))
    def test_right_left_jacobian(self, device, dtype, batch_size):
        vec = self._make_rand_data(device, dtype, batch_size, dims=3)
>       Jr = So3.right_jacobian(vec)

../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py:267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/liegroup/so3.py:321: in right_jacobian
    return right_jacobian(vec)
../publishablew/kornia/kornia/kornia/geometry/liegroup/temp.py:42: in right_jacobian
    norm_vec = torch.norm(vec, dim=1, keepdim=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = tensor([0.2877, 0.7661, 0.0592]), p = 'fro', dim = 1, keepdim = True
out = None, dtype = None

    def norm(  # noqa: F811
        input,
        p: Optional[Union[float, str]] = "fro",
        dim=None,
        keepdim=False,
        out=None,
        dtype=None,
    ):
        r"""Returns the matrix norm or vector norm of a given tensor.
    
        .. warning::
    
            torch.norm is deprecated and may be removed in a future PyTorch release.
            Its documentation and behavior may be incorrect, and it is no longer
            actively maintained.
    
            Use :func:`torch.linalg.vector_norm` when computing vector norms and
            :func:`torch.linalg.matrix_norm` when computing matrix norms.
            For a function with a similar behavior as this one see :func:`torch.linalg.norm`.
            Note, however, the signature for these functions is slightly different than the
            signature for ``torch.norm``.
    
        Args:
            input (Tensor): The input tensor. Its data type must be either a floating
                point or complex type. For complex inputs, the norm is calculated using the
                absolute value of each element. If the input is complex and neither
                :attr:`dtype` nor :attr:`out` is specified, the result's data type will
                be the corresponding floating point type (e.g. float if :attr:`input` is
                complexfloat).
    
            p (int, float, inf, -inf, 'fro', 'nuc', optional): the order of norm. Default: ``'fro'``
                The following norms can be calculated:
    
                ======  ==============  ==========================
                ord     matrix norm     vector norm
                ======  ==============  ==========================
                'fro'   Frobenius norm  --
                'nuc'   nuclear norm    --
                Number  --              sum(abs(x)**ord)**(1./ord)
                ======  ==============  ==========================
    
                The vector norm can be calculated across any number of dimensions.
                The corresponding dimensions of :attr:`input` are flattened into
                one dimension, and the norm is calculated on the flattened
                dimension.
    
                Frobenius norm produces the same result as ``p=2`` in all cases
                except when :attr:`dim` is a list of three or more dims, in which
                case Frobenius norm throws an error.
    
                Nuclear norm can only be calculated across exactly two dimensions.
    
            dim (int, tuple of ints, list of ints, optional):
                Specifies which dimension or dimensions of :attr:`input` to
                calculate the norm across. If :attr:`dim` is ``None``, the norm will
                be calculated across all dimensions of :attr:`input`. If the norm
                type indicated by :attr:`p` does not support the specified number of
                dimensions, an error will occur.
            keepdim (bool, optional): whether the output tensors have :attr:`dim`
                retained or not. Ignored if :attr:`dim` = ``None`` and
                :attr:`out` = ``None``. Default: ``False``
            out (Tensor, optional): the output tensor. Ignored if
                :attr:`dim` = ``None`` and :attr:`out` = ``None``.
            dtype (:class:`torch.dtype`, optional): the desired data type of
                returned tensor. If specified, the input tensor is casted to
                :attr:`dtype` while performing the operation. Default: None.
    
        .. note::
            Even though ``p='fro'`` supports any number of dimensions, the true
            mathematical definition of Frobenius norm only applies to tensors with
            exactly two dimensions. :func:`torch.linalg.matrix_norm` with ``ord='fro'``
            aligns with the mathematical definition, since it can only be applied across
            exactly two dimensions.
    
        Example::
    
            >>> import torch
            >>> a = torch.arange(9, dtype= torch.float) - 4
            >>> b = a.reshape((3, 3))
            >>> torch.norm(a)
            tensor(7.7460)
            >>> torch.norm(b)
            tensor(7.7460)
            >>> torch.norm(a, float('inf'))
            tensor(4.)
            >>> torch.norm(b, float('inf'))
            tensor(4.)
            >>> c = torch.tensor([[ 1, 2, 3], [-1, 1, 4]] , dtype=torch.float)
            >>> torch.norm(c, dim=0)
            tensor([1.4142, 2.2361, 5.0000])
            >>> torch.norm(c, dim=1)
            tensor([3.7417, 4.2426])
            >>> torch.norm(c, p=1, dim=1)
            tensor([6., 6.])
            >>> d = torch.arange(8, dtype=torch.float).reshape(2, 2, 2)
            >>> torch.norm(d, dim=(1, 2))
            tensor([ 3.7417, 11.2250])
            >>> torch.norm(d[0, :, :]), torch.norm(d[1, :, :])
            (tensor(3.7417), tensor(11.2250))
        """
    
        if has_torch_function_unary(input):
            return handle_torch_function(
                norm, (input,), input, p=p, dim=dim, keepdim=keepdim, out=out, dtype=dtype
            )
    
        # NB. All the repeated code and weird python is to please TorchScript.
        #     For a more compact implementation see the relevant function in `_refs/__init__.py`
    
        # We don't do this for MPS or sparse tensors
        if input.layout == torch.strided and input.device.type in (
            "cpu",
            "cuda",
            "meta",
            torch.utils.backend_registration._privateuse1_backend_name,
        ):
            if dim is not None:
                if isinstance(dim, (int, torch.SymInt)):
                    _dim = [dim]
                else:
                    _dim = dim
            else:
                _dim = None  # type: ignore[assignment]
    
            if isinstance(p, str):
                if p == "fro" and (
                    dim is None or isinstance(dim, (int, torch.SymInt)) or len(dim) <= 2
                ):
                    if out is None:
>                       return torch.linalg.vector_norm(
                            input, 2, _dim, keepdim, dtype=dtype
                        )
E                       IndexError: Dimension out of range (expected to be in range of [-1, 0], but got 1)

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:1800: IndexError
_______________ TestSo3.test_right_left_jacobian[cpu-float32-1] ________________

self = <test_so3.TestSo3 object at 0x79654373f940>, device = device(type='cpu')
dtype = torch.float32, batch_size = 1

    @pytest.mark.parametrize("batch_size", (None, 1, 2, 5))
    def test_right_left_jacobian(self, device, dtype, batch_size):
        vec = self._make_rand_data(device, dtype, batch_size, dims=3)
        Jr = So3.right_jacobian(vec)
        Jl = So3.left_jacobian(vec)
>       self.assert_close(Jl, Jr.transpose(-1, -2))

../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py:269: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 0.8069, -0.3851,  0.3193],
         [ 0.3871,  0.8850,  0.0908],
         [-0.3170,  0.0987,  0.9219]]])
expected = tensor([[[ 0.8069,  0.3871, -0.3170],
         [-0.3851,  0.8850,  0.0987],
         [ 0.3193,  0.0908,  0.9219]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 6 / 9 (66.7%)
E       Greatest absolute difference: 0.7722389101982117 at index (0, 0, 1) (up to 1e-05 allowed)
E       Greatest relative difference: 2.0074477195739746 at index (0, 0, 2) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
_______________ TestSo3.test_right_left_jacobian[cpu-float32-2] ________________

self = <test_so3.TestSo3 object at 0x79654373fca0>, device = device(type='cpu')
dtype = torch.float32, batch_size = 2

    @pytest.mark.parametrize("batch_size", (None, 1, 2, 5))
    def test_right_left_jacobian(self, device, dtype, batch_size):
        vec = self._make_rand_data(device, dtype, batch_size, dims=3)
        Jr = So3.right_jacobian(vec)
        Jl = So3.left_jacobian(vec)
>       self.assert_close(Jl, Jr.transpose(-1, -2))

../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py:269: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 0.7530, -0.3477,  0.4304],
         [ 0.3516,  0.9013,  0.1153],
         [-0.4272,  0.1267,  0.8516]],

        [[ 0.7350, -0.3240,  0.4670],
         [ 0.4156,  0.8727,  0.0020],
         [-0.3878,  0.2602,  0.8346]]])
expected = tensor([[[ 0.7530,  0.3516, -0.4272],
         [-0.3477,  0.9013,  0.1267],
         [ 0.4304,  0.1153,  0.8516]],

        [[ 0.7350,  0.4156, -0.3878],
         [-0.3240,  0.8727,  0.2602],
         [ 0.4670,  0.0020,  0.8346]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 12 / 18 (66.7%)
E       Greatest absolute difference: 0.8576108813285828 at index (0, 0, 2) (up to 1e-05 allowed)
E       Greatest relative difference: 129.36248779296875 at index (1, 2, 1) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
_______________ TestSo3.test_right_left_jacobian[cpu-float32-5] ________________

self = <test_so3.TestSo3 object at 0x79654373fd60>, device = device(type='cpu')
dtype = torch.float32, batch_size = 5

    @pytest.mark.parametrize("batch_size", (None, 1, 2, 5))
    def test_right_left_jacobian(self, device, dtype, batch_size):
        vec = self._make_rand_data(device, dtype, batch_size, dims=3)
        Jr = So3.right_jacobian(vec)
        Jl = So3.left_jacobian(vec)
>       self.assert_close(Jl, Jr.transpose(-1, -2))

../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py:269: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 0.8341, -0.1175,  0.4524],
         [ 0.3735,  0.8056, -0.3330],
         [-0.2810,  0.4864,  0.7424]],

  ...],

        [[ 0.9366, -0.2872,  0.0910],
         [ 0.2999,  0.9236, -0.1362],
         [-0.0294,  0.1611,  0.9818]]])
expected = tensor([[[ 0.8341,  0.3735, -0.2810],
         [-0.1175,  0.8056,  0.4864],
         [ 0.4524, -0.3330,  0.7424]],

  ...],

        [[ 0.9366,  0.2999, -0.0294],
         [-0.2872,  0.9236,  0.1611],
         [ 0.0910, -0.1362,  0.9818]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 30 / 45 (66.7%)
E       Greatest absolute difference: 0.8193322420120239 at index (0, 1, 2) (up to 1e-05 allowed)
E       Greatest relative difference: 6.698412895202637 at index (2, 0, 2) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
=============================== warnings summary ===============================
tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-None]
  /local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/quaternion.py:129: UserWarning: Using torch.cross without specifying the dim arg is deprecated.
  Please either pass the dim explicitly or simply use torch.linalg.cross.
  The default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at ../aten/src/ATen/native/Cross.cpp:62.)
    new_vec = self.real[..., None] * right.vec + right.real[..., None] * self.vec + self.vec.cross(right.vec)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-None]
FAILED ../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-None]
FAILED ../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-5]
=================== 5 failed, 92 passed, 1 warning in 0.52s ====================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'onnxrt', 'jit', 'openxla', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 97 items

../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_cardinality[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_jit[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_getitem[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_getitem[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_getitem[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-5] PASSED

=============================== warnings summary ===============================
tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-None]
  /local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/quaternion.py:129: UserWarning: Using torch.cross without specifying the dim arg is deprecated.
  Please either pass the dim explicitly or simply use torch.linalg.cross.
  The default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at ../aten/src/ATen/native/Cross.cpp:62.)
    new_vec = self.real[..., None] * right.vec + right.real[..., None] * self.vec + self.vec.cross(right.vec)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 97 passed, 1 warning in 0.31s =========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', None, 'openxla', 'onnxrt', 'tvm', 'cudagraphs', 'jit', 'inductor'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 97 items

../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_cardinality[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_jit[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_init[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_getitem[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_getitem[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_getitem[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_mul_vec[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_unit_norm[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_log[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_exp_log[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_vee[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_hat_vee[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_matrix[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_from_wxyz[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_ortho[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_inverse[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_x[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_y[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_rot_z[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_adjoint[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_random[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_jacobian[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_left_jacobian[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/liegroup/test_so3.py::TestSo3::test_right_left_jacobian[cpu-float32-5] PASSED

=============================== warnings summary ===============================
tests/geometry/liegroup/test_so3.py::TestSo3::test_mul[cpu-float32-None]
  /local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/quaternion.py:129: UserWarning: Using torch.cross without specifying the dim arg is deprecated.
  Please either pass the dim explicitly or simply use torch.linalg.cross.
  The default value of dim will change to agree with that of linalg.cross in a future release. (Triggered internally at ../aten/src/ATen/native/Cross.cpp:62.)
    new_vec = self.real[..., None] * right.vec + right.real[..., None] * self.vec + self.vec.cross(right.vec)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 97 passed, 1 warning in 0.27s =========================
