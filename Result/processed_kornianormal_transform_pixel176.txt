output file:
processed_kornianormal_transform_pixel176.json
function:
normal_transform_pixel
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-1]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-3]', '../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-3] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-3] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-1]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-3]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-1]', '../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-3] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-3]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-1]', '../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-3] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-3]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'jit', 'cudagraphs', 'onnxrt', 'tvm', 'openxla', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 51 items

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-3] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-3] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-3] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-3] FAILED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_consistency[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_consistency[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape0-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape0-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape0-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape1-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape1-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape2-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape3-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape3-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape3-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity_resize[cpu-float32-batch_shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity_resize[cpu-float32-batch_shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity_resize[cpu-float32-batch_shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_rotation[cpu-float32-batch_shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_rotation[cpu-float32-batch_shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_rotation[cpu-float32-batch_shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_homography_warper[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_homography_warper[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_homography_warper[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_gradcheck[cpu-batch_shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_gradcheck[cpu-batch_shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_gradcheck[cpu-batch_shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-True-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-True-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-True-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-False-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-False-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-False-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-True-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-True-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-True-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-False-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-False-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-False-3] PASSED

=================================== FAILURES ===================================
____ TestHomographyWarper.test_normalize_homography_identity[cpu-float32-1] ____

self = <test_homography_warper.TestHomographyWarper object at 0x781735eea830>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 3])
    def test_normalize_homography_identity(self, batch_size, device, dtype):
        # create input data
        height, width = 2, 5
        res = torch.tensor([[[0.5, 0.0, -1.0], [0.0, 2.0, -1.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype)
        dst_homo_src = eye_like(3, res.expand(batch_size, -1, -1, -1))
    
>       self.assert_close(
            kornia.geometry.conversions.normal_transform_pixel(height, width, device=device, dtype=dtype), res
        )

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 0.4000,  0.0000, -1.0000],
         [ 0.0000,  1.0000, -1.0000],
         [ 0.0000,  0.0000,  1.0000]]])
expected = tensor([[[ 0.5000,  0.0000, -1.0000],
         [ 0.0000,  2.0000, -1.0000],
         [ 0.0000,  0.0000,  1.0000]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 2 / 9 (22.2%)
E       Greatest absolute difference: 1.0 at index (0, 1, 1) (up to 1e-05 allowed)
E       Greatest relative difference: 0.5 at index (0, 1, 1) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
____ TestHomographyWarper.test_normalize_homography_identity[cpu-float32-3] ____

self = <test_homography_warper.TestHomographyWarper object at 0x781735eea770>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 3])
    def test_normalize_homography_identity(self, batch_size, device, dtype):
        # create input data
        height, width = 2, 5
        res = torch.tensor([[[0.5, 0.0, -1.0], [0.0, 2.0, -1.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype)
        dst_homo_src = eye_like(3, res.expand(batch_size, -1, -1, -1))
    
>       self.assert_close(
            kornia.geometry.conversions.normal_transform_pixel(height, width, device=device, dtype=dtype), res
        )

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 0.4000,  0.0000, -1.0000],
         [ 0.0000,  1.0000, -1.0000],
         [ 0.0000,  0.0000,  1.0000]]])
expected = tensor([[[ 0.5000,  0.0000, -1.0000],
         [ 0.0000,  2.0000, -1.0000],
         [ 0.0000,  0.0000,  1.0000]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 2 / 9 (22.2%)
E       Greatest absolute difference: 1.0 at index (0, 1, 1) (up to 1e-05 allowed)
E       Greatest relative difference: 0.5 at index (0, 1, 1) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___ TestHomographyWarper.test_denormalize_homography_identity[cpu-float32-1] ___

self = <test_homography_warper.TestHomographyWarper object at 0x781735eeace0>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 3])
    def test_denormalize_homography_identity(self, batch_size, device, dtype):
        # create input data
        height, width = 2, 5
    
        res = torch.tensor([[[0.5, 0.0, -1.0], [0.0, 2.0, -1.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype)
        dst_homo_src = eye_like(3, res.expand(batch_size, -1, -1, -1))
    
>       self.assert_close(
            kornia.geometry.conversions.normal_transform_pixel(height, width, device=device, dtype=dtype), res
        )

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 0.4000,  0.0000, -1.0000],
         [ 0.0000,  1.0000, -1.0000],
         [ 0.0000,  0.0000,  1.0000]]])
expected = tensor([[[ 0.5000,  0.0000, -1.0000],
         [ 0.0000,  2.0000, -1.0000],
         [ 0.0000,  0.0000,  1.0000]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 2 / 9 (22.2%)
E       Greatest absolute difference: 1.0 at index (0, 1, 1) (up to 1e-05 allowed)
E       Greatest relative difference: 0.5 at index (0, 1, 1) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___ TestHomographyWarper.test_denormalize_homography_identity[cpu-float32-3] ___

self = <test_homography_warper.TestHomographyWarper object at 0x781735eeac20>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 3])
    def test_denormalize_homography_identity(self, batch_size, device, dtype):
        # create input data
        height, width = 2, 5
    
        res = torch.tensor([[[0.5, 0.0, -1.0], [0.0, 2.0, -1.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype)
        dst_homo_src = eye_like(3, res.expand(batch_size, -1, -1, -1))
    
>       self.assert_close(
            kornia.geometry.conversions.normal_transform_pixel(height, width, device=device, dtype=dtype), res
        )

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 0.4000,  0.0000, -1.0000],
         [ 0.0000,  1.0000, -1.0000],
         [ 0.0000,  0.0000,  1.0000]]])
expected = tensor([[[ 0.5000,  0.0000, -1.0000],
         [ 0.0000,  2.0000, -1.0000],
         [ 0.0000,  0.0000,  1.0000]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 2 / 9 (22.2%)
E       Greatest absolute difference: 1.0 at index (0, 1, 1) (up to 1e-05 allowed)
E       Greatest relative difference: 0.5 at index (0, 1, 1) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
____ TestHomographyWarper.test_normalize_homography_general[cpu-float32-1] _____

self = <test_homography_warper.TestHomographyWarper object at 0x781735eeb190>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 3])
    def test_normalize_homography_general(self, batch_size, device, dtype):
        # create input data
        height, width = 2, 5
        dst_homo_src = torch.eye(3, device=device, dtype=dtype)
        dst_homo_src[..., 0, 0] = 0.5
        dst_homo_src[..., 1, 1] = 2.0
        dst_homo_src[..., 0, 2] = 1.0
        dst_homo_src[..., 1, 2] = 2.0
        dst_homo_src = dst_homo_src.expand(batch_size, -1, -1)
    
        norm_homo = kornia.geometry.conversions.normalize_homography(dst_homo_src, (height, width), (height, width))
        res = torch.tensor([[[0.5, 0.0, 0.0], [0.0, 2.0, 5.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype).expand(
            batch_size, -1, -1
        )
>       self.assert_close(norm_homo, res)

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 0.5000,  0.0000, -0.1000],
         [ 0.0000,  2.0000,  3.0000],
         [ 0.0000,  0.0000,  1.0000]]])
expected = tensor([[[0.5000, 0.0000, 0.0000],
         [0.0000, 2.0000, 5.0000],
         [0.0000, 0.0000, 1.0000]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 2 / 9 (22.2%)
E       Greatest absolute difference: 2.0 at index (0, 1, 2) (up to 1e-05 allowed)
E       Greatest relative difference: inf at index (0, 0, 2) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
____ TestHomographyWarper.test_normalize_homography_general[cpu-float32-3] _____

self = <test_homography_warper.TestHomographyWarper object at 0x781735eeb0d0>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 3])
    def test_normalize_homography_general(self, batch_size, device, dtype):
        # create input data
        height, width = 2, 5
        dst_homo_src = torch.eye(3, device=device, dtype=dtype)
        dst_homo_src[..., 0, 0] = 0.5
        dst_homo_src[..., 1, 1] = 2.0
        dst_homo_src[..., 0, 2] = 1.0
        dst_homo_src[..., 1, 2] = 2.0
        dst_homo_src = dst_homo_src.expand(batch_size, -1, -1)
    
        norm_homo = kornia.geometry.conversions.normalize_homography(dst_homo_src, (height, width), (height, width))
        res = torch.tensor([[[0.5, 0.0, 0.0], [0.0, 2.0, 5.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype).expand(
            batch_size, -1, -1
        )
>       self.assert_close(norm_homo, res)

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[ 0.5000,  0.0000, -0.1000],
         [ 0.0000,  2.0000,  3.0000],
         [ 0.0000,  0.0000,  1.0000]],

  ...],

        [[ 0.5000,  0.0000, -0.1000],
         [ 0.0000,  2.0000,  3.0000],
         [ 0.0000,  0.0000,  1.0000]]])
expected = tensor([[[0.5000, 0.0000, 0.0000],
         [0.0000, 2.0000, 5.0000],
         [0.0000, 0.0000, 1.0000]],

        [[0..., 1.0000]],

        [[0.5000, 0.0000, 0.0000],
         [0.0000, 2.0000, 5.0000],
         [0.0000, 0.0000, 1.0000]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 6 / 27 (22.2%)
E       Greatest absolute difference: 2.0 at index (0, 1, 2) (up to 1e-05 allowed)
E       Greatest relative difference: inf at index (0, 0, 2) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___ TestHomographyWarper.test_denormalize_homography_general[cpu-float32-1] ____

self = <test_homography_warper.TestHomographyWarper object at 0x781735eeb640>
batch_size = 1, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 3])
    def test_denormalize_homography_general(self, batch_size, device, dtype):
        # create input data
        height, width = 2, 5
        dst_homo_src = torch.eye(3, device=device, dtype=dtype)
        dst_homo_src[..., 0, 0] = 0.5
        dst_homo_src[..., 1, 1] = 2.0
        dst_homo_src[..., 0, 2] = 1.0
        dst_homo_src[..., 1, 2] = 2.0
        dst_homo_src = dst_homo_src.expand(batch_size, -1, -1)
    
        denorm_homo = kornia.geometry.conversions.denormalize_homography(dst_homo_src, (height, width), (height, width))
        res = torch.tensor([[[0.5, 0.0, 3.0], [0.0, 2.0, 0.5], [0.0, 0.0, 1.0]]], device=device, dtype=dtype).expand(
            batch_size, -1, -1
        )
>       self.assert_close(denorm_homo, res)

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[0.5000, 0.0000, 3.7500],
         [0.0000, 2.0000, 1.0000],
         [0.0000, 0.0000, 1.0000]]])
expected = tensor([[[0.5000, 0.0000, 3.0000],
         [0.0000, 2.0000, 0.5000],
         [0.0000, 0.0000, 1.0000]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 2 / 9 (22.2%)
E       Greatest absolute difference: 0.75 at index (0, 0, 2) (up to 1e-05 allowed)
E       Greatest relative difference: 1.0 at index (0, 1, 2) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
___ TestHomographyWarper.test_denormalize_homography_general[cpu-float32-3] ____

self = <test_homography_warper.TestHomographyWarper object at 0x781735eeb580>
batch_size = 3, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 3])
    def test_denormalize_homography_general(self, batch_size, device, dtype):
        # create input data
        height, width = 2, 5
        dst_homo_src = torch.eye(3, device=device, dtype=dtype)
        dst_homo_src[..., 0, 0] = 0.5
        dst_homo_src[..., 1, 1] = 2.0
        dst_homo_src[..., 0, 2] = 1.0
        dst_homo_src[..., 1, 2] = 2.0
        dst_homo_src = dst_homo_src.expand(batch_size, -1, -1)
    
        denorm_homo = kornia.geometry.conversions.denormalize_homography(dst_homo_src, (height, width), (height, width))
        res = torch.tensor([[[0.5, 0.0, 3.0], [0.0, 2.0, 0.5], [0.0, 0.0, 1.0]]], device=device, dtype=dtype).expand(
            batch_size, -1, -1
        )
>       self.assert_close(denorm_homo, res)

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[0.5000, 0.0000, 3.7500],
         [0.0000, 2.0000, 1.0000],
         [0.0000, 0.0000, 1.0000]],

        [[0..., 1.0000]],

        [[0.5000, 0.0000, 3.7500],
         [0.0000, 2.0000, 1.0000],
         [0.0000, 0.0000, 1.0000]]])
expected = tensor([[[0.5000, 0.0000, 3.0000],
         [0.0000, 2.0000, 0.5000],
         [0.0000, 0.0000, 1.0000]],

        [[0..., 1.0000]],

        [[0.5000, 0.0000, 3.0000],
         [0.0000, 2.0000, 0.5000],
         [0.0000, 0.0000, 1.0000]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 6 / 27 (22.2%)
E       Greatest absolute difference: 0.75 at index (0, 0, 2) (up to 1e-05 allowed)
E       Greatest relative difference: 1.0 at index (0, 1, 2) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-3]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-3]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-3]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-3]
========================= 8 failed, 43 passed in 4.44s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'jit', 'inductor', 'openxla', 'tvm', None, 'onnxrt'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 51 items

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_consistency[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_consistency[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape0-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape0-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape0-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape1-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape1-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape2-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape3-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape3-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape3-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity_resize[cpu-float32-batch_shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity_resize[cpu-float32-batch_shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity_resize[cpu-float32-batch_shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_rotation[cpu-float32-batch_shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_rotation[cpu-float32-batch_shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_rotation[cpu-float32-batch_shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_homography_warper[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_homography_warper[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_homography_warper[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_gradcheck[cpu-batch_shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_gradcheck[cpu-batch_shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_gradcheck[cpu-batch_shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-True-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-True-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-True-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-False-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-False-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-False-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-True-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-True-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-True-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-False-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-False-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-False-3] PASSED

============================== 51 passed in 4.24s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'openxla', 'onnxrt', 'inductor', 'jit', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 51 items

../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_identity[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_identity[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_normalize_homography_general[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_denormalize_homography_general[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_consistency[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_consistency[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape0-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape0-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape0-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape1-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape1-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape1-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape2-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape2-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape3-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape3-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_warp_grid_translation[cpu-float32-shape3-7] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity_resize[cpu-float32-batch_shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity_resize[cpu-float32-batch_shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_identity_resize[cpu-float32-batch_shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_translation[cpu-float32-shape3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_rotation[cpu-float32-batch_shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_rotation[cpu-float32-batch_shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_rotation[cpu-float32-batch_shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_homography_warper[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_homography_warper[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_homography_warper[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_gradcheck[cpu-batch_shape0] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_gradcheck[cpu-batch_shape1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_gradcheck[cpu-batch_shape2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-True-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-True-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-True-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-False-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-False-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-True-False-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-True-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-True-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-True-3] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-False-1] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-False-2] PASSED
../publishablew/kornia/kornia/tests/geometry/transform/test_homography_warper.py::TestHomographyWarper::test_dynamo[cpu-float32-inductor-False-False-3] PASSED

============================== 51 passed in 4.26s ==============================
