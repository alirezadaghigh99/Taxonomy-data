output file:
processed_korniadepth_to_3d178.json
function:
depth_to_3d
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_normalized[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_normalized[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'tvm', 'cudagraphs', 'onnxrt', 'openxla', None, 'jit'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 14 items

../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_depth_to_3d_v2[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_meshgrid[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_denormalized[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_normalized[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_and_project[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu] PASSED

=================================== FAILURES ===================================
_____________ TestDepthTo3d.test_unproject_normalized[cpu-float32] _____________

self = <tests.geometry.test_depth.TestDepthTo3d object at 0x70abd3eef1c0>
device = device(type='cpu'), dtype = torch.float32

    def test_unproject_normalized(self, device, dtype):
        # this is for normalize_points=True
        depth = 2 * torch.tensor(
            [[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]], device=device, dtype=dtype
        )
    
        camera_matrix = torch.tensor([[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]], device=device, dtype=dtype)
    
        points3d_expected = torch.tensor(
            [
                [
                    [
                        [0.0000, 1.4142, 1.7889],
                        [0.0000, 1.1547, 1.6330],
                        [0.0000, 0.8165, 1.3333],
                        [0.0000, 0.6030, 1.0690],
                    ],
                    [
                        [0.0000, 0.0000, 0.0000],
                        [1.4142, 1.1547, 0.8165],
                        [1.7889, 1.6330, 1.3333],
                        [1.8974, 1.8091, 1.6036],
                    ],
                    [
                        [2.0000, 1.4142, 0.8944],
                        [1.4142, 1.1547, 0.8165],
                        [0.8944, 0.8165, 0.6667],
                        [0.6325, 0.6030, 0.5345],
                    ],
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix, normalize_points=True)
>       self.assert_close(points3d, points3d_expected, atol=1e-4, rtol=1e-4)

../publishablew/kornia/kornia/tests/geometry/test_depth.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0.0000, 0.7071, 0.8944],
          [0.0000, 0.5774, 0.8165],
          [0.0000, 0.4082, 0.6667],
          ...0.4472],
          [0.7071, 0.5774, 0.4082],
          [0.4472, 0.4082, 0.3333],
          [0.3162, 0.3015, 0.2673]]]])
expected = tensor([[[[0.0000, 1.4142, 1.7889],
          [0.0000, 1.1547, 1.6330],
          [0.0000, 0.8165, 1.3333],
          ...0.8944],
          [1.4142, 1.1547, 0.8165],
          [0.8944, 0.8165, 0.6667],
          [0.6325, 0.6030, 0.5345]]]])
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 29 / 36 (80.6%)
E       Greatest absolute difference: 1.0 at index (0, 2, 0, 0) (up to 0.0001 allowed)
E       Greatest relative difference: 0.5000351667404175 at index (0, 2, 3, 0) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
=============================== warnings summary ===============================
tests/geometry/test_depth.py::TestDepthTo3d::test_smoke[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:14: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:22: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_depth_to_3d_v2[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:37: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_denormalized[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:71: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)  # default is normalize_points=False

tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_normalized[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:109: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix, normalize_points=True)

tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_and_project[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:119: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    func_out = func(*tupled_inputs)

tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:624: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    return tuple(a.clone() for a in _as_tuple(fn(*inp)))

tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1337: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    for o in _differentiable_outputs(func(*inputs))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_normalized[cpu-float32]
================== 1 failed, 13 passed, 18 warnings in 0.30s ===================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'jit', 'tvm', 'inductor', 'openxla', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 14 items

../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_depth_to_3d_v2[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_meshgrid[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_denormalized[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_normalized[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_and_project[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/geometry/test_depth.py::TestDepthTo3d::test_smoke[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:14: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:22: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_depth_to_3d_v2[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:37: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_denormalized[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:71: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)  # default is normalize_points=False

tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_normalized[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:109: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix, normalize_points=True)

tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_and_project[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:119: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    func_out = func(*tupled_inputs)

tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:624: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    return tuple(a.clone() for a in _as_tuple(fn(*inp)))

tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1337: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    for o in _differentiable_outputs(func(*inputs))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 14 passed, 18 warnings in 0.22s ========================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'inductor', 'jit', 'cudagraphs', 'openxla', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 14 items

../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_depth_to_3d_v2[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_meshgrid[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_denormalized[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_normalized[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_and_project[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu] PASSED

=============================== warnings summary ===============================
tests/geometry/test_depth.py::TestDepthTo3d::test_smoke[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:14: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:22: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-1]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-2]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-4]
tests/geometry/test_depth.py::TestDepthTo3d::test_shapes_broadcast[cpu-float32-5]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:30: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_depth_to_3d_v2[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:37: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_denormalized[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:71: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)  # default is normalize_points=False

tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_normalized[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:109: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix, normalize_points=True)

tests/geometry/test_depth.py::TestDepthTo3d::test_unproject_and_project[cpu-float32]
  /local/data0/moved_data/publishablew/kornia/kornia/tests/geometry/test_depth.py:119: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    points3d = kornia.geometry.depth.depth_to_3d(depth, camera_matrix)

tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    func_out = func(*tupled_inputs)

tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:624: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    return tuple(a.clone() for a in _as_tuple(fn(*inp)))

tests/geometry/test_depth.py::TestDepthTo3d::test_gradcheck[cpu]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1337: DeprecationWarning: Since kornia 0.8.0 the `depth_to_3d` is deprecated in favor of `depth_to_3d_v2`. This function will be replaced with the `depth_to_3d_v2` behaviour, where the that does not require the creation of a meshgrid. The return shape can be not backward compatible between these implementations.
    for o in _differentiable_outputs(func(*inputs))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================= 14 passed, 18 warnings in 0.16s ========================
