output file:
processed_korniadepth_from_point312.json
function:
depth_from_point
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-1-3] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-15] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-10]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-15]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-1-3]', '../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-10] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'inductor', 'onnxrt', 'openxla', 'tvm', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 11 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-1-3] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-10] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-15] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
________ TestMotionFromEssentialChooseSolution.test_smoke[cpu-float32] _________

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f24d0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        E_mat = torch.rand(1, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(1, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(1, 3, 3, device=device, dtype=dtype)
        x1 = torch.rand(1, 1, 2, device=device, dtype=dtype)
        x2 = torch.rand(1, 1, 2, device=device, dtype=dtype)
        R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2)
>       assert R.shape == (1, 3, 3)
E       AssertionError: assert torch.Size([1, 1, 3, 3]) == (1, 3, 3)
E         
E         At index 1 diff: 1 != 3
E         Left contains one more item: 3
E         
E         Full diff:
E         + torch.Size([1, 1, 3, 3])
E         - (...
E         
E         ...Full output truncated (4 lines hidden), use '-vv' to show

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:418: AssertionError
______ TestMotionFromEssentialChooseSolution.test_shape[cpu-float32-1-3] _______

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f2980>
batch_size = 1, num_points = 3, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 3), (2, 3), (2, 8), (3, 2)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        E_mat = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(1, 3, 3, device=device, dtype=dtype)  # check for broadcasting
        x1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        x2 = torch.rand(B, 1, 2, device=device, dtype=dtype)  # check for broadcasting
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:522: in motion_from_essential_choose_solution
    d1 = depth_from_point(R1, t1, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:126: in depth_from_point
    return depth_from_point(R, t, X)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

R = tensor([[[[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0...     [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]]]])
t = tensor([[[[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]]]])
X = array([[[[[ -0.06605542],
          [  0.3485093 ],
          [ -1.267409  ]],

         [[ -8.0093565 ],
          [ ...     [ -0.8728523 ]],

         [[ -0.8088637 ],
          [  0.94074386],
          [ -0.6674548 ]]]]], dtype=float32)

    def depth_from_point(R, t, X):
        """
        Return the depth of a point transformed by a rigid transform.
    
        Args:
           R: The rotation matrix with shape (*, 3, 3).
           t: The translation vector with shape (*, 3, 1).
           X: The 3d points with shape (*, 3).
    
        Returns:
           The depth value per point with shape (*, 1).
        """
        X = np.expand_dims(X, axis=-1)
>       X_transformed = np.matmul(R, X) + t
E       ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (1,4,3,3)->(1,4,newaxis,newaxis) (1,4,3,3,1)->(1,4,3,newaxis,newaxis)  and requested shape (3,1)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:24: ValueError
______ TestMotionFromEssentialChooseSolution.test_shape[cpu-float32-2-3] _______

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f28c0>
batch_size = 2, num_points = 3, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 3), (2, 3), (2, 8), (3, 2)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        E_mat = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(1, 3, 3, device=device, dtype=dtype)  # check for broadcasting
        x1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        x2 = torch.rand(B, 1, 2, device=device, dtype=dtype)  # check for broadcasting
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:522: in motion_from_essential_choose_solution
    d1 = depth_from_point(R1, t1, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:126: in depth_from_point
    return depth_from_point(R, t, X)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

R = tensor([[[[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0...     [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]]]])
t = tensor([[[[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
  ...
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]]]])
X = array([[[[[ 0.9063417 ],
          [ 0.01063858],
          [-0.5277084 ]],

         [[ 0.98966265],
          [ 0.04...         [ 0.17363285]],

         [[-0.21348383],
          [ 0.35995626],
          [ 0.05082234]]]]], dtype=float32)

    def depth_from_point(R, t, X):
        """
        Return the depth of a point transformed by a rigid transform.
    
        Args:
           R: The rotation matrix with shape (*, 3, 3).
           t: The translation vector with shape (*, 3, 1).
           X: The 3d points with shape (*, 3).
    
        Returns:
           The depth value per point with shape (*, 1).
        """
        X = np.expand_dims(X, axis=-1)
>       X_transformed = np.matmul(R, X) + t
E       ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (2,4,3,3)->(2,4,newaxis,newaxis) (2,4,3,3,1)->(2,4,3,newaxis,newaxis)  and requested shape (3,1)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:24: ValueError
______ TestMotionFromEssentialChooseSolution.test_shape[cpu-float32-2-8] _______

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f2c80>
batch_size = 2, num_points = 8, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 3), (2, 3), (2, 8), (3, 2)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        E_mat = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(1, 3, 3, device=device, dtype=dtype)  # check for broadcasting
        x1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        x2 = torch.rand(B, 1, 2, device=device, dtype=dtype)  # check for broadcasting
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:522: in motion_from_essential_choose_solution
    d1 = depth_from_point(R1, t1, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:126: in depth_from_point
    return depth_from_point(R, t, X)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

R = tensor([[[[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0...     [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]]]])
t = tensor([[[[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
  ...
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]]]])
X = array([[[[[ 0.208365  ],
          [-1.0350285 ],
          [ 0.3815651 ]],

         [[ 0.2647027 ],
          [-1.02...         [ 0.28172135]],

         [[-0.21187915],
          [ 0.4057122 ],
          [ 0.37385565]]]]], dtype=float32)

    def depth_from_point(R, t, X):
        """
        Return the depth of a point transformed by a rigid transform.
    
        Args:
           R: The rotation matrix with shape (*, 3, 3).
           t: The translation vector with shape (*, 3, 1).
           X: The 3d points with shape (*, 3).
    
        Returns:
           The depth value per point with shape (*, 1).
        """
        X = np.expand_dims(X, axis=-1)
>       X_transformed = np.matmul(R, X) + t
E       ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (2,4,3,3)->(2,4,newaxis,newaxis) (2,4,8,3,1)->(2,4,8,newaxis,newaxis)  and requested shape (3,1)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:24: ValueError
______ TestMotionFromEssentialChooseSolution.test_shape[cpu-float32-3-2] _______

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f2d40>
batch_size = 3, num_points = 2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size, num_points", [(1, 3), (2, 3), (2, 8), (3, 2)])
    def test_shape(self, batch_size, num_points, device, dtype):
        B, N = batch_size, num_points
        E_mat = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(B, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(1, 3, 3, device=device, dtype=dtype)  # check for broadcasting
        x1 = torch.rand(B, N, 2, device=device, dtype=dtype)
        x2 = torch.rand(B, 1, 2, device=device, dtype=dtype)  # check for broadcasting
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1, x2)

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:522: in motion_from_essential_choose_solution
    d1 = depth_from_point(R1, t1, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:126: in depth_from_point
    return depth_from_point(R, t, X)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

R = tensor([[[[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0...     [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]]]])
t = tensor([[[[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
  ...
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]]]])
X = array([[[[[-0.9463044 ],
          [-6.769296  ],
          [ 5.121017  ]],

         [[-0.02172989],
          [-2.89...         [ 0.22474638]],

         [[-9.225813  ],
          [-1.7315308 ],
          [-2.7914867 ]]]]], dtype=float32)

    def depth_from_point(R, t, X):
        """
        Return the depth of a point transformed by a rigid transform.
    
        Args:
           R: The rotation matrix with shape (*, 3, 3).
           t: The translation vector with shape (*, 3, 1).
           X: The 3d points with shape (*, 3).
    
        Returns:
           The depth value per point with shape (*, 1).
        """
        X = np.expand_dims(X, axis=-1)
>       X_transformed = np.matmul(R, X) + t
E       ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (3,4,3,3)->(3,4,newaxis,newaxis) (3,4,2,3,1)->(3,4,2,newaxis,newaxis)  and requested shape (3,1)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:24: ValueError
_______ TestMotionFromEssentialChooseSolution.test_masking[cpu-float32] ________

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f3010>
device = device(type='cpu'), dtype = torch.float32

    def test_masking(self, device, dtype):
        E_mat = torch.rand(2, 3, 3, device=device, dtype=dtype)
        K1 = torch.rand(2, 3, 3, device=device, dtype=dtype)
        K2 = torch.rand(2, 3, 3, device=device, dtype=dtype)
        x1 = torch.rand(2, 10, 2, device=device, dtype=dtype)
        x2 = torch.rand(2, 10, 2, device=device, dtype=dtype)
    
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1[:, 1:-1, :], x2[:, 1:-1, :])

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:442: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:522: in motion_from_essential_choose_solution
    d1 = depth_from_point(R1, t1, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:126: in depth_from_point
    return depth_from_point(R, t, X)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

R = tensor([[[[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0...     [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]]]])
t = tensor([[[[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
  ...
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]]]])
X = array([[[[[ 0.58129865],
          [-0.37534916],
          [-0.7803847 ]],

         [[ 0.5188639 ],
          [-0.23...         [-0.05437129]],

         [[-0.08698814],
          [-0.49995184],
          [ 0.31149423]]]]], dtype=float32)

    def depth_from_point(R, t, X):
        """
        Return the depth of a point transformed by a rigid transform.
    
        Args:
           R: The rotation matrix with shape (*, 3, 3).
           t: The translation vector with shape (*, 3, 1).
           X: The 3d points with shape (*, 3).
    
        Returns:
           The depth value per point with shape (*, 1).
        """
        X = np.expand_dims(X, axis=-1)
>       X_transformed = np.matmul(R, X) + t
E       ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (2,4,3,3)->(2,4,newaxis,newaxis) (2,4,8,3,1)->(2,4,8,newaxis,newaxis)  and requested shape (3,1)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:24: ValueError
_____ TestMotionFromEssentialChooseSolution.test_unbatched[cpu-float32-10] _____

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f3400>
num_points = 10, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("num_points", [10, 15, 20])
    def test_unbatched(self, num_points, device, dtype):
        N = num_points
        E_mat = torch.rand(3, 3, device=device, dtype=dtype)
        K1 = torch.rand(3, 3, device=device, dtype=dtype)
        K2 = torch.rand(3, 3, device=device, dtype=dtype)
        x1 = torch.rand(N, 2, device=device, dtype=dtype)
        x2 = torch.rand(N, 2, device=device, dtype=dtype)
    
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1[1:-1, :], x2[1:-1, :])

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:461: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:522: in motion_from_essential_choose_solution
    d1 = depth_from_point(R1, t1, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:126: in depth_from_point
    return depth_from_point(R, t, X)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

R = tensor([[[[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0...     [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]]]])
t = tensor([[[[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]]]])
X = array([[[[[  1.4248698 ],
          [ -0.30343834],
          [ -1.5713323 ]],

         [[ 15.013305  ],
          [ ...     [  0.60039073]],

         [[ -0.4969718 ],
          [  0.10883202],
          [  0.51723826]]]]], dtype=float32)

    def depth_from_point(R, t, X):
        """
        Return the depth of a point transformed by a rigid transform.
    
        Args:
           R: The rotation matrix with shape (*, 3, 3).
           t: The translation vector with shape (*, 3, 1).
           X: The 3d points with shape (*, 3).
    
        Returns:
           The depth value per point with shape (*, 1).
        """
        X = np.expand_dims(X, axis=-1)
>       X_transformed = np.matmul(R, X) + t
E       ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (1,4,3,3)->(1,4,newaxis,newaxis) (1,4,8,3,1)->(1,4,8,newaxis,newaxis)  and requested shape (3,1)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:24: ValueError
_____ TestMotionFromEssentialChooseSolution.test_unbatched[cpu-float32-15] _____

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f3340>
num_points = 15, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("num_points", [10, 15, 20])
    def test_unbatched(self, num_points, device, dtype):
        N = num_points
        E_mat = torch.rand(3, 3, device=device, dtype=dtype)
        K1 = torch.rand(3, 3, device=device, dtype=dtype)
        K2 = torch.rand(3, 3, device=device, dtype=dtype)
        x1 = torch.rand(N, 2, device=device, dtype=dtype)
        x2 = torch.rand(N, 2, device=device, dtype=dtype)
    
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1[1:-1, :], x2[1:-1, :])

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:461: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:522: in motion_from_essential_choose_solution
    d1 = depth_from_point(R1, t1, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:126: in depth_from_point
    return depth_from_point(R, t, X)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

R = tensor([[[[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0...     [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]]]])
t = tensor([[[[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]]]])
X = array([[[[[ 0.20868325],
          [-1.083201  ],
          [ 0.7072519 ]],

         [[ 0.05583488],
          [-1.19...         [-0.42340842]],

         [[-0.32207108],
          [ 0.520166  ],
          [-0.6553815 ]]]]], dtype=float32)

    def depth_from_point(R, t, X):
        """
        Return the depth of a point transformed by a rigid transform.
    
        Args:
           R: The rotation matrix with shape (*, 3, 3).
           t: The translation vector with shape (*, 3, 1).
           X: The 3d points with shape (*, 3).
    
        Returns:
           The depth value per point with shape (*, 1).
        """
        X = np.expand_dims(X, axis=-1)
>       X_transformed = np.matmul(R, X) + t
E       ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (1,4,3,3)->(1,4,newaxis,newaxis) (1,4,13,3,1)->(1,4,13,newaxis,newaxis)  and requested shape (3,1)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:24: ValueError
_____ TestMotionFromEssentialChooseSolution.test_unbatched[cpu-float32-20] _____

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f3640>
num_points = 20, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("num_points", [10, 15, 20])
    def test_unbatched(self, num_points, device, dtype):
        N = num_points
        E_mat = torch.rand(3, 3, device=device, dtype=dtype)
        K1 = torch.rand(3, 3, device=device, dtype=dtype)
        K2 = torch.rand(3, 3, device=device, dtype=dtype)
        x1 = torch.rand(N, 2, device=device, dtype=dtype)
        x2 = torch.rand(N, 2, device=device, dtype=dtype)
    
>       R, t, X = epi.motion_from_essential_choose_solution(E_mat, K1, K2, x1[1:-1, :], x2[1:-1, :])

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:461: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:522: in motion_from_essential_choose_solution
    d1 = depth_from_point(R1, t1, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:126: in depth_from_point
    return depth_from_point(R, t, X)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

R = tensor([[[[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0...     [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]]]])
t = tensor([[[[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]]]])
X = array([[[[[-0.22125019],
          [ 0.81245697],
          [-0.40610966]],

         [[-0.15508844],
          [ 0.78...         [ 0.327356  ]],

         [[ 0.22993565],
          [-0.9904945 ],
          [ 0.4848766 ]]]]], dtype=float32)

    def depth_from_point(R, t, X):
        """
        Return the depth of a point transformed by a rigid transform.
    
        Args:
           R: The rotation matrix with shape (*, 3, 3).
           t: The translation vector with shape (*, 3, 1).
           X: The 3d points with shape (*, 3).
    
        Returns:
           The depth value per point with shape (*, 1).
        """
        X = np.expand_dims(X, axis=-1)
>       X_transformed = np.matmul(R, X) + t
E       ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (1,4,3,3)->(1,4,newaxis,newaxis) (1,4,18,3,1)->(1,4,18,newaxis,newaxis)  and requested shape (3,1)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:24: ValueError
_______ TestMotionFromEssentialChooseSolution.test_two_view[cpu-float32] _______

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f3910>
device = device(type='cpu'), dtype = torch.float32

    def test_two_view(self, device, dtype):
        scene = generate_two_view_random_scene(device, dtype)
    
        E_mat = epi.essential_from_Rt(scene["R1"], scene["t1"], scene["R2"], scene["t2"])
    
        R, t = epi.relative_camera_motion(scene["R1"], scene["t1"], scene["R2"], scene["t2"])
        t = torch.nn.functional.normalize(t, dim=1)
    
>       R_hat, t_hat, _ = epi.motion_from_essential_choose_solution(
            E_mat, scene["K1"], scene["K2"], scene["x1"], scene["x2"]
        )

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:482: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:522: in motion_from_essential_choose_solution
    d1 = depth_from_point(R1, t1, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:126: in depth_from_point
    return depth_from_point(R, t, X)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

R = tensor([[[[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0...     [0., 1., 0.],
          [0., 0., 1.]],

         [[1., 0., 0.],
          [0., 1., 0.],
          [0., 0., 1.]]]])
t = tensor([[[[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]],

         [[0.],
          [0.],
          [0.]]]])
X = array([[[[[-7.3380184e-01],
          [-1.0535442e+00],
          [-1.4454763e+00]],

         [[ 4.7288366e-02],
    ....9574711e+00]],

         [[-4.1402665e-01],
          [-1.5470488e+00],
          [-3.0804651e+00]]]]], dtype=float32)

    def depth_from_point(R, t, X):
        """
        Return the depth of a point transformed by a rigid transform.
    
        Args:
           R: The rotation matrix with shape (*, 3, 3).
           t: The translation vector with shape (*, 3, 1).
           X: The 3d points with shape (*, 3).
    
        Returns:
           The depth value per point with shape (*, 1).
        """
        X = np.expand_dims(X, axis=-1)
>       X_transformed = np.matmul(R, X) + t
E       ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (1,4,3,3)->(1,4,newaxis,newaxis) (1,4,30,3,1)->(1,4,30,newaxis,newaxis)  and requested shape (3,1)

../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:24: ValueError
__________ TestMotionFromEssentialChooseSolution.test_gradcheck[cpu] ___________

self = <test_essential.TestMotionFromEssentialChooseSolution object at 0x7274042f3be0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        E_mat = torch.rand(1, 3, 3, device=device, dtype=torch.float64, requires_grad=True)
        K1 = torch.rand(1, 3, 3, device=device, dtype=torch.float64)
        K2 = torch.rand(1, 3, 3, device=device, dtype=torch.float64)
        x1 = torch.rand(1, 2, 2, device=device, dtype=torch.float64)
        x2 = torch.rand(1, 2, 2, device=device, dtype=torch.float64)
    
>       self.gradcheck(
            epi.motion_from_essential_choose_solution,
            (E_mat, K1, K2, x1, x2),
            requires_grad=(True, False, False, False, False),
        )

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py:496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/geometry/epipolar/essential.py:522: in motion_from_essential_choose_solution
    d1 = depth_from_point(R1, t1, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/projection.py:126: in depth_from_point
    return depth_from_point(R, t, X)
../publishablew/kornia/kornia/kornia/geometry/epipolar/temp.py:23: in depth_from_point
    X = np.expand_dims(X, axis=-1)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/lib/shape_base.py:591: in expand_dims
    a = asanyarray(a)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = tensor([[[[-0.0369,  0.3785, -0.3802],
          [-0.6442,  0.3080,  0.9409]],

         [[ 0.0369, -0.3785,  0.3802],....1636, -0.4811,  0.2694],
          [-0.5149,  0.2324,  0.7653]]]], dtype=torch.float64,
       grad_fn=<MulBackward0>)
dtype = None

    def __array__(self, dtype=None):
        if has_torch_function_unary(self):
            return handle_torch_function(Tensor.__array__, (self,), self, dtype=dtype)
        if dtype is None:
>           return self.numpy()
E           RuntimeError: Can't call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead.

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/_tensor.py:1149: RuntimeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-1-3]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-10]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-15]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu]
============================== 11 failed in 0.64s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'jit', 'cudagraphs', 'tvm', 'inductor', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 11 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-1-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-15] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu] PASSED

============================== 11 passed in 0.21s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'jit', 'openxla', 'inductor', 'onnxrt', 'tvm', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 11 items

../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-1-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-3] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-2-8] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_shape[cpu-float32-3-2] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_masking[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-10] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-15] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_unbatched[cpu-float32-20] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_two_view[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/epipolar/test_essential.py::TestMotionFromEssentialChooseSolution::test_gradcheck[cpu] PASSED

============================== 11 passed in 0.25s ==============================
