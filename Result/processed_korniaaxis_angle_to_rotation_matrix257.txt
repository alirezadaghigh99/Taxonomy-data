output file:
processed_korniaaxis_angle_to_rotation_matrix257.json
function:
axis_angle_to_rotation_matrix
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-2]', '../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_axis_angle_to_rotation_matrix[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-1]', '../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-2] FAILED', '../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-5] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-5]', '../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_axis_angle_to_rotation_matrix[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'onnxrt', 'openxla', 'inductor', 'cudagraphs', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 4 items

../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-5] FAILED
../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_axis_angle_to_rotation_matrix[cpu-float32] FAILED

=================================== FAILURES ===================================
_ TestAngleAxisToRotationMatrix.test_rand_axis_angle_gradcheck[cpu-float32-1] __

self = <tests.geometry.test_conversions.TestAngleAxisToRotationMatrix object at 0x779bdcb2c1f0>
batch_size = 1, device = device(type='cpu'), atol = 0.0001, rtol = 0.0001

    @pytest.mark.parametrize("batch_size", (1, 2, 5))
    def test_rand_axis_angle_gradcheck(self, batch_size, device, atol, rtol):
        dtype = torch.float64
        # generate input data
        axis_angle = torch.rand(batch_size, 3, device=device, dtype=dtype)
        eye_batch = eye_like(3, axis_angle)
    
        # apply transform
        rotation_matrix = kornia.geometry.conversions.axis_angle_to_rotation_matrix(axis_angle)
    
        rotation_matrix_eye = torch.matmul(rotation_matrix, rotation_matrix.transpose(-2, -1))
>       self.assert_close(rotation_matrix_eye, eye_batch, atol=atol, rtol=rtol)

../publishablew/kornia/kornia/tests/geometry/test_conversions.py:428: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[1.0000e+00, 0.0000e+00, 7.4506e-09],
         [0.0000e+00, 1.0000e+00, 0.0000e+00],
         [7.4506e-09, 0.0000e+00, 1.0000e+00]]])
expected = tensor([[[1., 0., 0.],
         [0., 1., 0.],
         [0., 0., 1.]]], dtype=torch.float64)
rtol = 0.0001, atol = 0.0001, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: The values for attribute 'dtype' do not match: torch.float32 != torch.float64.

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
_ TestAngleAxisToRotationMatrix.test_rand_axis_angle_gradcheck[cpu-float32-2] __

self = <tests.geometry.test_conversions.TestAngleAxisToRotationMatrix object at 0x779bdcb2c130>
batch_size = 2, device = device(type='cpu'), atol = 0.0001, rtol = 0.0001

    @pytest.mark.parametrize("batch_size", (1, 2, 5))
    def test_rand_axis_angle_gradcheck(self, batch_size, device, atol, rtol):
        dtype = torch.float64
        # generate input data
        axis_angle = torch.rand(batch_size, 3, device=device, dtype=dtype)
        eye_batch = eye_like(3, axis_angle)
    
        # apply transform
>       rotation_matrix = kornia.geometry.conversions.axis_angle_to_rotation_matrix(axis_angle)

../publishablew/kornia/kornia/tests/geometry/test_conversions.py:425: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/conversions.py:192: in axis_angle_to_rotation_matrix
    return axis_angle_to_rotation_matrix(axis_angle)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

axis_angle = tensor([[0.4893, 0.6836, 0.9163],
        [0.9357, 0.4333, 0.2897]], dtype=torch.float64)

    def axis_angle_to_rotation_matrix(axis_angle):
        """
        Convert 3D vector of axis-angle rotation to 3x3 rotation matrix.
    
        Args:
            axis_angle: tensor of 3D vector of axis-angle rotations in radians with shape (N, 3).
    
        Returns:
            tensor of rotation matrices of shape (N, 3, 3).
        """
        if not isinstance(axis_angle, torch.Tensor):
            axis_angle = torch.tensor(axis_angle, dtype=torch.float32)
        angles = torch.norm(axis_angle, dim=1, keepdim=True)
        angles = angles + (angles == 0).float()
        axis = axis_angle / angles
        cos_angles = torch.cos(angles)
        sin_angles = torch.sin(angles)
        one_minus_cos = 1 - cos_angles
        x, y, z = (axis[:, 0], axis[:, 1], axis[:, 2])
        R = torch.zeros((axis_angle.shape[0], 3, 3), dtype=torch.float32)
>       R[:, 0, 0] = cos_angles + x * x * one_minus_cos
E       RuntimeError: expand(torch.DoubleTensor{[2, 2]}, size=[2]): the number of sizes provided (1) must be greater or equal to the number of dimensions in the tensor (2)

../publishablew/kornia/kornia/kornia/geometry/temp.py:32: RuntimeError
_ TestAngleAxisToRotationMatrix.test_rand_axis_angle_gradcheck[cpu-float32-5] __

self = <tests.geometry.test_conversions.TestAngleAxisToRotationMatrix object at 0x779bdcb2c430>
batch_size = 5, device = device(type='cpu'), atol = 0.0001, rtol = 0.0001

    @pytest.mark.parametrize("batch_size", (1, 2, 5))
    def test_rand_axis_angle_gradcheck(self, batch_size, device, atol, rtol):
        dtype = torch.float64
        # generate input data
        axis_angle = torch.rand(batch_size, 3, device=device, dtype=dtype)
        eye_batch = eye_like(3, axis_angle)
    
        # apply transform
>       rotation_matrix = kornia.geometry.conversions.axis_angle_to_rotation_matrix(axis_angle)

../publishablew/kornia/kornia/tests/geometry/test_conversions.py:425: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/conversions.py:192: in axis_angle_to_rotation_matrix
    return axis_angle_to_rotation_matrix(axis_angle)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

axis_angle = tensor([[1.0869e-04, 6.1371e-01, 1.4394e-01],
        [8.0097e-01, 5.2370e-01, 8.2546e-01],
        [2.3210e-01, 2.858...-01],
        [1.8017e-02, 3.7122e-01, 7.1807e-01],
        [8.0005e-01, 6.4890e-01, 6.1849e-01]], dtype=torch.float64)

    def axis_angle_to_rotation_matrix(axis_angle):
        """
        Convert 3D vector of axis-angle rotation to 3x3 rotation matrix.
    
        Args:
            axis_angle: tensor of 3D vector of axis-angle rotations in radians with shape (N, 3).
    
        Returns:
            tensor of rotation matrices of shape (N, 3, 3).
        """
        if not isinstance(axis_angle, torch.Tensor):
            axis_angle = torch.tensor(axis_angle, dtype=torch.float32)
        angles = torch.norm(axis_angle, dim=1, keepdim=True)
        angles = angles + (angles == 0).float()
        axis = axis_angle / angles
        cos_angles = torch.cos(angles)
        sin_angles = torch.sin(angles)
        one_minus_cos = 1 - cos_angles
        x, y, z = (axis[:, 0], axis[:, 1], axis[:, 2])
        R = torch.zeros((axis_angle.shape[0], 3, 3), dtype=torch.float32)
>       R[:, 0, 0] = cos_angles + x * x * one_minus_cos
E       RuntimeError: expand(torch.DoubleTensor{[5, 5]}, size=[5]): the number of sizes provided (1) must be greater or equal to the number of dimensions in the tensor (2)

../publishablew/kornia/kornia/kornia/geometry/temp.py:32: RuntimeError
_ TestAngleAxisToRotationMatrix.test_axis_angle_to_rotation_matrix[cpu-float32] _

self = <tests.geometry.test_conversions.TestAngleAxisToRotationMatrix object at 0x779bdcb2c760>
device = device(type='cpu'), dtype = torch.float32, atol = 0.0001, rtol = 0.0001

    def test_axis_angle_to_rotation_matrix(self, device, dtype, atol, rtol):
        rmat_1 = torch.tensor(
            (
                (-0.30382753, -0.95095137, -0.05814062),
                (-0.71581715, 0.26812278, -0.64476041),
                (0.62872461, -0.15427791, -0.76217038),
            ),
            device=device,
            dtype=dtype,
        )
        rvec_1 = torch.tensor((1.50485376, -2.10737739, 0.7214174), device=device, dtype=dtype)
    
        rmat_2 = torch.tensor(
            (
                (0.6027768, -0.79275544, -0.09054801),
                (-0.67915707, -0.56931658, 0.46327563),
                (-0.41881476, -0.21775548, -0.88157628),
            ),
            device=device,
            dtype=dtype,
        )
        rvec_2 = torch.tensor((-2.44916812, 1.18053411, 0.4085298), device=device, dtype=dtype)
        rmat = torch.stack((rmat_2, rmat_1), dim=0)
        rvec = torch.stack((rvec_2, rvec_1), dim=0)
    
>       self.assert_close(kornia.geometry.conversions.axis_angle_to_rotation_matrix(rvec), rmat, atol=atol, rtol=rtol)

../publishablew/kornia/kornia/tests/geometry/test_conversions.py:458: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/conversions.py:192: in axis_angle_to_rotation_matrix
    return axis_angle_to_rotation_matrix(axis_angle)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

axis_angle = tensor([[-2.4492,  1.1805,  0.4085],
        [ 1.5049, -2.1074,  0.7214]])

    def axis_angle_to_rotation_matrix(axis_angle):
        """
        Convert 3D vector of axis-angle rotation to 3x3 rotation matrix.
    
        Args:
            axis_angle: tensor of 3D vector of axis-angle rotations in radians with shape (N, 3).
    
        Returns:
            tensor of rotation matrices of shape (N, 3, 3).
        """
        if not isinstance(axis_angle, torch.Tensor):
            axis_angle = torch.tensor(axis_angle, dtype=torch.float32)
        angles = torch.norm(axis_angle, dim=1, keepdim=True)
        angles = angles + (angles == 0).float()
        axis = axis_angle / angles
        cos_angles = torch.cos(angles)
        sin_angles = torch.sin(angles)
        one_minus_cos = 1 - cos_angles
        x, y, z = (axis[:, 0], axis[:, 1], axis[:, 2])
        R = torch.zeros((axis_angle.shape[0], 3, 3), dtype=torch.float32)
>       R[:, 0, 0] = cos_angles + x * x * one_minus_cos
E       RuntimeError: expand(torch.FloatTensor{[2, 2]}, size=[2]): the number of sizes provided (1) must be greater or equal to the number of dimensions in the tensor (2)

../publishablew/kornia/kornia/kornia/geometry/temp.py:32: RuntimeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-5]
FAILED ../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_axis_angle_to_rotation_matrix[cpu-float32]
============================== 4 failed in 0.43s ===============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'onnxrt', 'jit', 'openxla', 'tvm', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 4 items

../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_axis_angle_to_rotation_matrix[cpu-float32] PASSED

============================== 4 passed in 0.19s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'onnxrt', 'openxla', 'cudagraphs', 'jit', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 4 items

../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_rand_axis_angle_gradcheck[cpu-float32-5] PASSED
../publishablew/kornia/kornia/tests/geometry/test_conversions.py::TestAngleAxisToRotationMatrix::test_axis_angle_to_rotation_matrix[cpu-float32] PASSED

============================== 4 passed in 0.15s ===============================
