output file:
processed_classes-pytorch3d_parse_auxiliary_input, 7.json
function:
_parse_auxiliary_input
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions FAILED [  3%]', 'FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error', '../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty FAILED [  7%]', 'FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty', 'FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty', 'FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions', '../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty FAILED [ 23%]', 'FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty - ...', '../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error FAILED [ 46%]', '../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty FAILED [ 57%]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 26 items

../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions FAILED [  3%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty FAILED [  7%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_list PASSED [ 11%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_tensor PASSED [ 15%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_detach PASSED [ 19%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty FAILED [ 23%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_estimate_normals PASSED [ 26%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list PASSED [ 30%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_bounding_boxes PASSED [ 34%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_cloud PASSED [ 38%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_getitem PASSED [ 42%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error FAILED [ 46%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_inside_box PASSED [ 50%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_join_pointclouds_as_batch PASSED [ 53%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty FAILED [ 57%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_offset PASSED [ 61%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_padded_to_packed_idx PASSED [ 65%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_scale PASSED [ 69%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple PASSED [ 73%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple_random_clouds PASSED [ 76%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_split PASSED [ 80%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_subsample PASSED [ 84%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to PASSED  [ 88%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list FAILED [ 92%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor FAILED [ 96%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_update_padded PASSED [100%]

=================================== FAILURES ===================================
____________________ TestPointclouds.test_all_constructions ____________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_all_constructions>

    def test_all_constructions(self):
        public_getters = [
            "points_list",
            "points_packed",
            "packed_to_cloud_idx",
            "cloud_to_packed_first_idx",
            "num_points_per_cloud",
            "points_padded",
            "padded_to_packed_idx",
        ]
        public_normals_getters = ["normals_list", "normals_packed", "normals_padded"]
        public_features_getters = [
            "features_list",
            "features_packed",
            "features_padded",
        ]
    
        lengths = [3, 4, 2]
        max_len = max(lengths)
        C = 4
    
        points_data = [torch.zeros((max_len, 3)).uniform_() for i in lengths]
        normals_data = [torch.zeros((max_len, 3)).uniform_() for i in lengths]
        features_data = [torch.zeros((max_len, C)).uniform_() for i in lengths]
        for length, p, n, f in zip(lengths, points_data, normals_data, features_data):
            p[length:] = 0.0
            n[length:] = 0.0
            f[length:] = 0.0
        points_list = [d[:length] for length, d in zip(lengths, points_data)]
        normals_list = [d[:length] for length, d in zip(lengths, normals_data)]
        features_list = [d[:length] for length, d in zip(lengths, features_data)]
        points_packed = torch.cat(points_data)
        normals_packed = torch.cat(normals_data)
        features_packed = torch.cat(features_data)
        test_cases_inputs = [
            ("list_0_0", points_list, None, None),
            ("list_1_0", points_list, normals_list, None),
            ("list_0_1", points_list, None, features_list),
            ("list_1_1", points_list, normals_list, features_list),
            ("padded_0_0", points_data, None, None),
            ("padded_1_0", points_data, normals_data, None),
            ("padded_0_1", points_data, None, features_data),
            ("padded_1_1", points_data, normals_data, features_data),
            ("emptylist_emptylist_emptylist", [], [], []),
        ]
        false_cases_inputs = [
            ("list_packed", points_list, normals_packed, features_packed, ValueError),
            ("packed_0", points_packed, None, None, ValueError),
        ]
    
        for name, points, normals, features in test_cases_inputs:
            with self.subTest(name=name):
>               p = Pointclouds(points, normals, features)

../pytorch3d/tests/test_pointclouds.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.structures.pointclouds.Pointclouds object at 0x71fb483e3be0>
points = [], normals = [], features = []

    def __init__(self, points, normals=None, features=None) -> None:
        """
        Args:
            points:
                Can be either
    
                - List where each element is a tensor of shape (num_points, 3)
                  containing the (x, y, z) coordinates of each point.
                - Padded float tensor with shape (num_clouds, num_points, 3).
            normals:
                Can be either
    
                - None
                - List where each element is a tensor of shape (num_points, 3)
                  containing the normal vector for each point.
                - Padded float tensor of shape (num_clouds, num_points, 3).
            features:
                Can be either
    
                - None
                - List where each element is a tensor of shape (num_points, C)
                  containing the features for the points in the cloud.
                - Padded float tensor of shape (num_clouds, num_points, C).
                where C is the number of channels in the features.
                For example 3 for RGB color.
    
        Refer to comments above for descriptions of List and Padded
        representations.
        """
        self.device = torch.device('cpu')
        self.equisized = False
        self.valid = None
        self._N = 0
        self._P = 0
        self._C = None
        self._points_list = None
        self._normals_list = None
        self._features_list = None
        self._num_points_per_cloud = None
        self._points_packed = None
        self._normals_packed = None
        self._features_packed = None
        self._packed_to_cloud_idx = None
        self._cloud_to_packed_first_idx = None
        self._points_padded = None
        self._normals_padded = None
        self._features_padded = None
        self._padded_to_packed_idx = None
        if isinstance(points, list):
            self._points_list = points
            self._N = len(self._points_list)
            self.valid = torch.zeros((self._N,), dtype=torch.bool, device=self.device)
            if self._N > 0:
                self.device = self._points_list[0].device
                for p in self._points_list:
                    if len(p) > 0 and (p.dim() != 2 or p.shape[1] != 3):
                        raise ValueError('Clouds in list must be of shape Px3 or empty')
                    if p.device != self.device:
                        raise ValueError('All points must be on the same device')
                num_points_per_cloud = torch.tensor([len(p) for p in self._points_list], device=self.device)
                self._P = int(num_points_per_cloud.max())
                self.valid = torch.tensor([len(p) > 0 for p in self._points_list], dtype=torch.bool, device=self.device)
                if len(num_points_per_cloud.unique()) == 1:
                    self.equisized = True
                self._num_points_per_cloud = num_points_per_cloud
            else:
                self._num_points_per_cloud = torch.tensor([], dtype=torch.int64)
        elif torch.is_tensor(points):
            if points.dim() != 3 or points.shape[2] != 3:
                raise ValueError('Points tensor has incorrect dimensions.')
            self._points_padded = points
            self._N = self._points_padded.shape[0]
            self._P = self._points_padded.shape[1]
            self.device = self._points_padded.device
            self.valid = torch.ones((self._N,), dtype=torch.bool, device=self.device)
            self._num_points_per_cloud = torch.tensor([self._P] * self._N, device=self.device)
            self.equisized = True
        else:
            raise ValueError('Points must be either a list or a tensor with                     shape (batch_size, P, 3) where P is the maximum number of                     points in a cloud.')
        normals_parsed = self._parse_auxiliary_input(normals)
        self._normals_list, self._normals_padded, normals_C = normals_parsed
        if normals_C is not None and normals_C != 3:
>           raise ValueError('Normals are expected to be 3-dimensional')
E           ValueError: Normals are expected to be 3-dimensional

../pytorch3d/pytorch3d/structures/pointclouds.py:174: ValueError
________________________ TestPointclouds.test_allempty _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_allempty>

    def test_allempty(self):
>       clouds = Pointclouds([], [])

../pytorch3d/tests/test_pointclouds.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.structures.pointclouds.Pointclouds object at 0x71fb47c6bdf0>
points = [], normals = [], features = None

    def __init__(self, points, normals=None, features=None) -> None:
        """
        Args:
            points:
                Can be either
    
                - List where each element is a tensor of shape (num_points, 3)
                  containing the (x, y, z) coordinates of each point.
                - Padded float tensor with shape (num_clouds, num_points, 3).
            normals:
                Can be either
    
                - None
                - List where each element is a tensor of shape (num_points, 3)
                  containing the normal vector for each point.
                - Padded float tensor of shape (num_clouds, num_points, 3).
            features:
                Can be either
    
                - None
                - List where each element is a tensor of shape (num_points, C)
                  containing the features for the points in the cloud.
                - Padded float tensor of shape (num_clouds, num_points, C).
                where C is the number of channels in the features.
                For example 3 for RGB color.
    
        Refer to comments above for descriptions of List and Padded
        representations.
        """
        self.device = torch.device('cpu')
        self.equisized = False
        self.valid = None
        self._N = 0
        self._P = 0
        self._C = None
        self._points_list = None
        self._normals_list = None
        self._features_list = None
        self._num_points_per_cloud = None
        self._points_packed = None
        self._normals_packed = None
        self._features_packed = None
        self._packed_to_cloud_idx = None
        self._cloud_to_packed_first_idx = None
        self._points_padded = None
        self._normals_padded = None
        self._features_padded = None
        self._padded_to_packed_idx = None
        if isinstance(points, list):
            self._points_list = points
            self._N = len(self._points_list)
            self.valid = torch.zeros((self._N,), dtype=torch.bool, device=self.device)
            if self._N > 0:
                self.device = self._points_list[0].device
                for p in self._points_list:
                    if len(p) > 0 and (p.dim() != 2 or p.shape[1] != 3):
                        raise ValueError('Clouds in list must be of shape Px3 or empty')
                    if p.device != self.device:
                        raise ValueError('All points must be on the same device')
                num_points_per_cloud = torch.tensor([len(p) for p in self._points_list], device=self.device)
                self._P = int(num_points_per_cloud.max())
                self.valid = torch.tensor([len(p) > 0 for p in self._points_list], dtype=torch.bool, device=self.device)
                if len(num_points_per_cloud.unique()) == 1:
                    self.equisized = True
                self._num_points_per_cloud = num_points_per_cloud
            else:
                self._num_points_per_cloud = torch.tensor([], dtype=torch.int64)
        elif torch.is_tensor(points):
            if points.dim() != 3 or points.shape[2] != 3:
                raise ValueError('Points tensor has incorrect dimensions.')
            self._points_padded = points
            self._N = self._points_padded.shape[0]
            self._P = self._points_padded.shape[1]
            self.device = self._points_padded.device
            self.valid = torch.ones((self._N,), dtype=torch.bool, device=self.device)
            self._num_points_per_cloud = torch.tensor([self._P] * self._N, device=self.device)
            self.equisized = True
        else:
            raise ValueError('Points must be either a list or a tensor with                     shape (batch_size, P, 3) where P is the maximum number of                     points in a cloud.')
        normals_parsed = self._parse_auxiliary_input(normals)
        self._normals_list, self._normals_padded, normals_C = normals_parsed
        if normals_C is not None and normals_C != 3:
>           raise ValueError('Normals are expected to be 3-dimensional')
E           ValueError: Normals are expected to be 3-dimensional

../pytorch3d/pytorch3d/structures/pointclouds.py:174: ValueError
__________________________ TestPointclouds.test_empty __________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_empty>

    def test_empty(self):
        N, P, C = 10, 100, 2
        device = torch.device("cuda:0")
        points_list = []
        normals_list = []
        features_list = []
        valid = torch.randint(2, size=(N,), dtype=torch.uint8, device=device)
        for n in range(N):
            if valid[n]:
                p = torch.randint(
                    3, high=P, size=(1,), dtype=torch.int32, device=device
                )[0]
                points = torch.rand((p, 3), dtype=torch.float32, device=device)
                normals = torch.rand((p, 3), dtype=torch.float32, device=device)
                features = torch.rand((p, C), dtype=torch.float32, device=device)
            else:
                points = torch.tensor([], dtype=torch.float32, device=device)
                normals = torch.tensor([], dtype=torch.float32, device=device)
                features = torch.tensor([], dtype=torch.int64, device=device)
            points_list.append(points)
            normals_list.append(normals)
            features_list.append(features)
    
        for with_normals in (False, True):
            for with_features in (False, True):
                this_features, this_normals = None, None
                if with_normals:
                    this_normals = normals_list
                if with_features:
                    this_features = features_list
>               clouds = Pointclouds(
                    points=points_list, normals=this_normals, features=this_features
                )

../pytorch3d/tests/test_pointclouds.py:359: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/structures/pointclouds.py:175: in __init__
    features_parsed = self._parse_auxiliary_input(features)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.structures.pointclouds.Pointclouds object at 0x71fb2e384d30>
aux_input = [tensor([[0.3264, 0.9967],
        [0.0706, 0.2893],
        [0.5037, 0.1414],
        [0.5756, 0.8315],
        [0.42...[0.9205, 0.0521],
        [0.2885, 0.7266],
        [0.0763, 0.6723],
        [0.9147, 0.6863]], device='cuda:0'), ...]

    def _parse_auxiliary_input(self, aux_input: Union[List[torch.Tensor], torch.Tensor]) -> Tuple[Optional[List[torch.Tensor]], Optional[torch.Tensor], Optional[int]]:
        if aux_input is None:
            return (None, None, None)
        if isinstance(aux_input, list):
            if len(aux_input) == 0:
                return ([], None, 0)
            num_channels = aux_input[0].shape[1]
            for tensor in aux_input:
>               if tensor.shape[1] != num_channels:
E               IndexError: tuple index out of range

../pytorch3d/pytorch3d/structures/pointclouds.py:188: IndexError
_______________________ TestPointclouds.test_init_error ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_init_error>

    def test_init_error(self):
        # Check if correct errors are raised when verts/faces are on
        # different devices
    
        clouds = self.init_cloud(10, 100, 5)
        points_list = clouds.points_list()  # all tensors on cuda:0
        points_list = [
            p.to("cpu") if random.uniform(0, 1) > 0.5 else p for p in points_list
        ]
        features_list = clouds.features_list()
        normals_list = clouds.normals_list()
    
        with self.assertRaisesRegex(ValueError, "same device"):
            Pointclouds(
                points=points_list, features=features_list, normals=normals_list
            )
    
        points_list = clouds.points_list()
        features_list = [
            f.to("cpu") if random.uniform(0, 1) > 0.2 else f for f in features_list
        ]
        with self.assertRaisesRegex(ValueError, "same device"):
>           Pointclouds(
                points=points_list, features=features_list, normals=normals_list
            )
E           AssertionError: ValueError not raised

../pytorch3d/tests/test_pointclouds.py:161: AssertionError
_____________________ TestPointclouds.test_list_someempty ______________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_list_someempty>

    def test_list_someempty(self):
        # We want
        #     point_cloud = Pointclouds(
        #         [pcl.points_packed() for pcl in point_clouds],
        #         features=[pcl.features_packed() for pcl in point_clouds],
        #     )
        # to work if point_clouds is a list of pointclouds with some empty and some not.
        points_list = [torch.rand(30, 3), torch.zeros(0, 3)]
        features_list = [torch.rand(30, 3), None]
>       pcls = Pointclouds(points=points_list, features=features_list)

../pytorch3d/tests/test_pointclouds.py:397: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/structures/pointclouds.py:175: in __init__
    features_parsed = self._parse_auxiliary_input(features)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pytorch3d.structures.pointclouds.Pointclouds object at 0x71fb2e3da3a0>
aux_input = [tensor([[0.6057, 0.3725, 0.7980],
        [0.8399, 0.1374, 0.2331],
        [0.9578, 0.3313, 0.3227],
        [0.0162... 0.2469],
        [0.4761, 0.7792, 0.3722],
        [0.2147, 0.3288, 0.1265],
        [0.6783, 0.8870, 0.0293]]), None]

    def _parse_auxiliary_input(self, aux_input: Union[List[torch.Tensor], torch.Tensor]) -> Tuple[Optional[List[torch.Tensor]], Optional[torch.Tensor], Optional[int]]:
        if aux_input is None:
            return (None, None, None)
        if isinstance(aux_input, list):
            if len(aux_input) == 0:
                return ([], None, 0)
            num_channels = aux_input[0].shape[1]
            for tensor in aux_input:
>               if tensor.shape[1] != num_channels:
E               AttributeError: 'NoneType' object has no attribute 'shape'

../pytorch3d/pytorch3d/structures/pointclouds.py:188: AttributeError
_________________________ TestPointclouds.test_to_list _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_list>

    def test_to_list(self):
        cloud = self.init_cloud(5, 100, 10)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

../pytorch3d/tests/test_pointclouds.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/structures/pointclouds.py:616: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x71faf8f661f0>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../pytorch3d/pytorch3d/structures/pointclouds.py:616: RuntimeError
________________________ TestPointclouds.test_to_tensor ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_tensor>

    def test_to_tensor(self):
        cloud = self.init_cloud(5, 100, 10, lists_to_tensors=True)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

../pytorch3d/tests/test_pointclouds.py:747: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/structures/pointclouds.py:616: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x71fb2e35aa60>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../pytorch3d/pytorch3d/structures/pointclouds.py:616: RuntimeError
=============================== warnings summary ===============================
tests/test_pointclouds.py::TestPointclouds::test_clone_list
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty - ...
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor
=================== 7 failed, 19 passed, 1 warning in 2.06s ====================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 26 items

../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions PASSED [  3%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty PASSED [  7%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_list PASSED [ 11%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_tensor PASSED [ 15%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_detach PASSED [ 19%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty PASSED [ 23%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_estimate_normals PASSED [ 26%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list PASSED [ 30%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_bounding_boxes PASSED [ 34%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_cloud PASSED [ 38%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_getitem PASSED [ 42%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error PASSED [ 46%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_inside_box PASSED [ 50%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_join_pointclouds_as_batch PASSED [ 53%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty PASSED [ 57%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_offset PASSED [ 61%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_padded_to_packed_idx PASSED [ 65%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_scale PASSED [ 69%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple PASSED [ 73%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple_random_clouds PASSED [ 76%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_split PASSED [ 80%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_subsample PASSED [ 84%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to PASSED  [ 88%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list FAILED [ 92%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor FAILED [ 96%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_update_padded PASSED [100%]

=================================== FAILURES ===================================
_________________________ TestPointclouds.test_to_list _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_list>

    def test_to_list(self):
        cloud = self.init_cloud(5, 100, 10)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

../pytorch3d/tests/test_pointclouds.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7e7b9c6e3e80>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
________________________ TestPointclouds.test_to_tensor ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_tensor>

    def test_to_tensor(self):
        cloud = self.init_cloud(5, 100, 10, lists_to_tensors=True)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

../pytorch3d/tests/test_pointclouds.py:747: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7e7b9c6e3a60>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
=============================== warnings summary ===============================
tests/test_pointclouds.py::TestPointclouds::test_clone_list
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor
=================== 2 failed, 24 passed, 1 warning in 1.89s ====================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.8.5, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/pytorch3d/venv/bin/python3
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/pytorch3d
collecting ... collected 26 items

../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_all_constructions PASSED [  3%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_allempty PASSED [  7%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_list PASSED [ 11%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_clone_tensor PASSED [ 15%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_detach PASSED [ 19%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_empty PASSED [ 23%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_estimate_normals PASSED [ 26%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_extend_list PASSED [ 30%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_bounding_boxes PASSED [ 34%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_get_cloud PASSED [ 38%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_getitem PASSED [ 42%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_init_error PASSED [ 46%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_inside_box PASSED [ 50%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_join_pointclouds_as_batch PASSED [ 53%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_list_someempty PASSED [ 57%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_offset PASSED [ 61%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_padded_to_packed_idx PASSED [ 65%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_scale PASSED [ 69%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple PASSED [ 73%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_simple_random_clouds PASSED [ 76%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_split PASSED [ 80%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_subsample PASSED [ 84%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to PASSED  [ 88%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list FAILED [ 92%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor FAILED [ 96%]
../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_update_padded PASSED [100%]

=================================== FAILURES ===================================
_________________________ TestPointclouds.test_to_list _________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_list>

    def test_to_list(self):
        cloud = self.init_cloud(5, 100, 10)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

../pytorch3d/tests/test_pointclouds.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7915675e4e50>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
________________________ TestPointclouds.test_to_tensor ________________________

self = <tests.test_pointclouds.TestPointclouds testMethod=test_to_tensor>

    def test_to_tensor(self):
        cloud = self.init_cloud(5, 100, 10, lists_to_tensors=True)
        device = torch.device("cuda:1")
    
>       new_cloud = cloud.to(device)

../pytorch3d/tests/test_pointclouds.py:747: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../pytorch3d/pytorch3d/structures/pointclouds.py:801: in to
    other._points_list = [v.to(device_) for v in other.points_list()]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7915675e4ee0>

>   other._points_list = [v.to(device_) for v in other.points_list()]
E   RuntimeError: CUDA error: invalid device ordinal
E   CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E   For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E   Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../pytorch3d/pytorch3d/structures/pointclouds.py:801: RuntimeError
=============================== warnings summary ===============================
tests/test_pointclouds.py::TestPointclouds::test_clone_list
  /local/data0/moved_data/pytorch3d/tests/common_testing.py:85: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
    self.assertNotEqual(tensor1.storage().data_ptr(), tensor2.storage().data_ptr())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_list
FAILED ../pytorch3d/tests/test_pointclouds.py::TestPointclouds::test_to_tensor
=================== 2 failed, 24 passed, 1 warning in 3.62s ====================
