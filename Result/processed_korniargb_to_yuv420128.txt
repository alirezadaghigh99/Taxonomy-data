output file:
processed_korniargb_to_yuv420128.json
function:
rgb_to_yuv420
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32]', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3]', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] FAILED', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4]', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32]', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'tvm', 'jit', 'cudagraphs', 'openxla', 'inductor', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 16 items

../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] PASSED

=================================== FAILURES ===================================
___________________ TestRgbToYuv420.test_smoke[cpu-float32] ____________________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502f96c0>
device = device(type='cpu'), dtype = torch.float32

    def test_smoke(self, device, dtype):
        C, H, W = 3, 4, 6
        img = torch.rand(C, H, W, device=device, dtype=dtype)
>       assert isinstance(kornia.color.rgb_to_yuv420(img)[0], torch.Tensor)

../publishablew/kornia/kornia/tests/color/test_yuv.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0.0209, 0.8112, 0.1350, 0.6465, 0.2640, 0.6293],
         [0.6890, 0.1235, 0.3085, 0.4399, 0.4769, 0.3667],
...         [0.6518, 0.6167, 0.1019, 0.1706, 0.2126, 0.5782],
         [0.6375, 0.0100, 0.6493, 0.7344, 0.9115, 0.9431]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        if image.dim() != 4 or image.size(1) != 3:
>           raise ValueError('Input image must have shape (*, 3, H, W)')
E           ValueError: Input image must have shape (*, 3, H, W)

../publishablew/kornia/kornia/kornia/color/temp.py:11: ValueError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape3] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502f9f30>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 2, 2)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

../publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 1.],
         [1., 1.]],

        [[1., 1.],
         [1., 1.]],

        [[1., 1.],
         [1., 1.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        if image.dim() != 4 or image.size(1) != 3:
>           raise ValueError('Input image must have shape (*, 3, H, W)')
E           ValueError: Input image must have shape (*, 3, H, W)

../publishablew/kornia/kornia/kornia/color/temp.py:11: ValueError
_____________ TestRgbToYuv420.test_cardinality[cpu-float32-shape4] _____________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502f9ff0>
device = device(type='cpu'), dtype = torch.float32, shape = (3, 3, 3, 4, 4)

    @pytest.mark.parametrize("shape", [(1, 3, 4, 4), (2, 3, 2, 4), (3, 3, 4, 2), (3, 2, 2), (3, 3, 3, 4, 4)])
    def test_cardinality(self, device, dtype, shape):
        img = torch.ones(shape, device=device, dtype=dtype)
        shapey = list(shape)
        shapey[-3] = 1
        shapeuv = list(shape)
        shapeuv[-3] = 2
        shapeuv[-2] /= 2
        shapeuv[-1] /= 2
>       assert kornia.color.rgb_to_yuv420(img)[0].shape == tuple(shapey)

../publishablew/kornia/kornia/tests/color/test_yuv.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[[[1., 1., 1., 1.],
           [1., 1., 1., 1.],
           [1., 1., 1., 1.],
           [1., 1., 1., 1.]],

...          [[1., 1., 1., 1.],
           [1., 1., 1., 1.],
           [1., 1., 1., 1.],
           [1., 1., 1., 1.]]]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        if image.dim() != 4 or image.size(1) != 3:
>           raise ValueError('Input image must have shape (*, 3, H, W)')
E           ValueError: Input image must have shape (*, 3, H, W)

../publishablew/kornia/kornia/kornia/color/temp.py:11: ValueError
_________________ TestRgbToYuv420.test_exception[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502fa1a0>
device = device(type='cpu'), dtype = torch.float32

    def test_exception(self, device, dtype):
        with pytest.raises(TypeError):
>           assert kornia.color.rgb_to_yuv420([0.0])

../publishablew/kornia/kornia/tests/color/test_yuv.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = [0.0]

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
>       if image.dim() != 4 or image.size(1) != 3:
E       AttributeError: 'list' object has no attribute 'dim'

../publishablew/kornia/kornia/kornia/color/temp.py:10: AttributeError
_________________ TestRgbToYuv420.test_unit_white[cpu-float32] _________________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502fa4d0>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_white(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[255, 255], [255, 255]], [[255, 255], [255, 255]], [[255, 255], [255, 255]]],
                device=device,
                dtype=torch.uint8,
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[255, 255], [255, 255]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[0]], [[0]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

../publishablew/kornia/kornia/tests/color/test_yuv.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 1.],
         [1., 1.]],

        [[1., 1.],
         [1., 1.]],

        [[1., 1.],
         [1., 1.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        if image.dim() != 4 or image.size(1) != 3:
>           raise ValueError('Input image must have shape (*, 3, H, W)')
E           ValueError: Input image must have shape (*, 3, H, W)

../publishablew/kornia/kornia/kornia/color/temp.py:11: ValueError
_________________ TestRgbToYuv420.test_unit_black[cpu-float32] _________________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502fa800>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_black(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor([[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], device=device, dtype=torch.uint8).type(
                dtype
            )
            / 255.0
        )
        refy = torch.tensor([[[0, 0], [0, 0]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[0]], [[0]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

../publishablew/kornia/kornia/tests/color/test_yuv.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0.],
         [0., 0.]],

        [[0., 0.],
         [0., 0.]],

        [[0., 0.],
         [0., 0.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        if image.dim() != 4 or image.size(1) != 3:
>           raise ValueError('Input image must have shape (*, 3, H, W)')
E           ValueError: Input image must have shape (*, 3, H, W)

../publishablew/kornia/kornia/kornia/color/temp.py:11: ValueError
_________________ TestRgbToYuv420.test_unit_gray[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502fab30>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_gray(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[127, 127], [127, 127]], [[127, 127], [127, 127]], [[127, 127], [127, 127]]],
                device=device,
                dtype=torch.uint8,
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[127, 127], [127, 127]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[0]], [[0]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

../publishablew/kornia/kornia/tests/color/test_yuv.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0.4980, 0.4980],
         [0.4980, 0.4980]],

        [[0.4980, 0.4980],
         [0.4980, 0.4980]],

        [[0.4980, 0.4980],
         [0.4980, 0.4980]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        if image.dim() != 4 or image.size(1) != 3:
>           raise ValueError('Input image must have shape (*, 3, H, W)')
E           ValueError: Input image must have shape (*, 3, H, W)

../publishablew/kornia/kornia/kornia/color/temp.py:11: ValueError
__________________ TestRgbToYuv420.test_unit_red[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502fae60>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_red(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[255, 255], [255, 255]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], device=device, dtype=torch.uint8
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[76, 76], [76, 76]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[-37]], [[127]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).round().type(torch.uint8)

../publishablew/kornia/kornia/tests/color/test_yuv.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[1., 1.],
         [1., 1.]],

        [[0., 0.],
         [0., 0.]],

        [[0., 0.],
         [0., 0.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        if image.dim() != 4 or image.size(1) != 3:
>           raise ValueError('Input image must have shape (*, 3, H, W)')
E           ValueError: Input image must have shape (*, 3, H, W)

../publishablew/kornia/kornia/kornia/color/temp.py:11: ValueError
_________________ TestRgbToYuv420.test_unit_blue[cpu-float32] __________________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502fb190>
device = device(type='cpu'), dtype = torch.float32

    def test_unit_blue(self, device, dtype):  # skipcq: PYL-R0201
        rgb = (
            torch.tensor(
                [[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[255, 255], [255, 255]]], device=device, dtype=torch.uint8
            ).type(dtype)
            / 255.0
        )
        refy = torch.tensor([[[29, 29], [29, 29]]], device=device, dtype=torch.uint8)
        refuv = torch.tensor([[[111]], [[-25]]], device=device, dtype=torch.int8)
    
>       resy = (kornia.color.rgb_to_yuv420(rgb)[0] * 255.0).type(torch.uint8)

../publishablew/kornia/kornia/tests/color/test_yuv.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0., 0.],
         [0., 0.]],

        [[0., 0.],
         [0., 0.]],

        [[1., 1.],
         [1., 1.]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        if image.dim() != 4 or image.size(1) != 3:
>           raise ValueError('Input image must have shape (*, 3, H, W)')
E           ValueError: Input image must have shape (*, 3, H, W)

../publishablew/kornia/kornia/kornia/color/temp.py:11: ValueError
_______________ TestRgbToYuv420.test_forth_and_back[cpu-float32] _______________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502fb4c0>
device = device(type='cpu'), dtype = torch.float32

    def test_forth_and_back(self, device, dtype):  # skipcq: PYL-R0201
        data = torch.rand(3, 4, 5, device=device, dtype=dtype).repeat_interleave(2, dim=2).repeat_interleave(2, dim=1)
    
        yuv = kornia.color.rgb_to_yuv420
        rgb = kornia.color.yuv420_to_rgb
>       (a, b) = yuv(data)

../publishablew/kornia/kornia/tests/color/test_yuv.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/color/yuv.py:45: in rgb_to_yuv420
    return rgb_to_yuv420(image)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

image = tensor([[[0.4228, 0.4228, 0.2543, 0.2543, 0.5241, 0.5241, 0.2334, 0.2334,
          0.0484, 0.0484],
         [0.4228,...0.2052, 0.2052],
         [0.0270, 0.0270, 0.6146, 0.6146, 0.9731, 0.9731, 0.1503, 0.1503,
          0.2052, 0.2052]]])

    def rgb_to_yuv420(image: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        if image.dim() != 4 or image.size(1) != 3:
>           raise ValueError('Input image must have shape (*, 3, H, W)')
E           ValueError: Input image must have shape (*, 3, H, W)

../publishablew/kornia/kornia/kornia/color/temp.py:11: ValueError
____________________ TestRgbToYuv420.test_jit[cpu-float32] _____________________

self = <test_yuv.TestRgbToYuv420 object at 0x7ef2502fbb20>
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.jit()
    def test_jit(self, device, dtype):
        B, C, H, W = 2, 3, 4, 4
        img = torch.ones(B, C, H, W, device=device, dtype=dtype)
        op = kornia.color.rgb_to_yuv420
>       op_jit = torch.jit.script(op)

../publishablew/kornia/kornia/tests/color/test_yuv.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1429: in script
    ret = _script_impl(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1202: in _script_impl
    ast = get_jit_def(obj, obj.__name__)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:383: in get_jit_def
    return build_def(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:444: in build_def
    return Def(Ident(r, def_name), decl, build_stmts(ctx, body))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in build_stmts
    stmts = [build_stmt(ctx, s) for s in stmts]
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in <listcomp>
    stmts = [build_stmt(ctx, s) for s in stmts]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.jit.frontend.StmtBuilder object at 0x7ef338dabc40>
ctx = <torch._sources.SourceContext object at 0x7ef25003d300>
node = <ast.ImportFrom object at 0x7ef25018f9a0>

    def __call__(self, ctx, node):
        method = getattr(self, "build_" + node.__class__.__name__, None)
        if method is None:
>           raise UnsupportedNodeError(ctx, node)
E           torch.jit.frontend.UnsupportedNodeError: import statements aren't supported:
E             File "/local/data0/moved_data/publishablew/kornia/kornia/kornia/color/yuv.py", line 44
E           def rgb_to_yuv420(image: Tensor) -> tuple[Tensor, Tensor]:
E               from .temp import rgb_to_yuv420
E               ~~~~ <--- HERE
E               return rgb_to_yuv420(image)

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:416: UnsupportedNodeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32]
========================= 11 failed, 5 passed in 0.45s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'tvm', 'openxla', 'inductor', 'jit', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 16 items

../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] PASSED

============================== 16 passed in 0.20s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'cudagraphs', 'jit', 'inductor', 'tvm', 'openxla', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 16 items

../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape0] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape1] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape2] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape3] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_cardinality[cpu-float32-shape4] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_white[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_black[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_gray[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_red[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_unit_blue[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_forth_and_back[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_gradcheck[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_jit[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/color/test_yuv.py::TestRgbToYuv420::test_module[cpu-float32] PASSED

============================== 16 passed in 0.20s ==============================
