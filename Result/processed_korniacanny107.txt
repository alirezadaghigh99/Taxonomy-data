output file:
processed_korniacanny107.json
function:
canny
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2]'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'cudagraphs', 'inductor', 'onnxrt', 'openxla', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 47 items

../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1] FAILED

=================================== FAILURES ===================================
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1] __________

self = <test_canny.TestCanny object at 0x73dd0c6e9d50>, batch_size = 1
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = False, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2] __________

self = <test_canny.TestCanny object at 0x73dd0c6e93c0>, batch_size = 2
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = False, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
____ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x73dd0c6e9900>, batch_size = 1
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = False
low_threshold = 0.1, high_threshold = 0.2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
____ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x73dd0c6e99f0>, batch_size = 2
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = False
low_threshold = 0.1, high_threshold = 0.2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1] __________

self = <test_canny.TestCanny object at 0x73dd0c6e9ae0>, batch_size = 1
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = False, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2] __________

self = <test_canny.TestCanny object at 0x73dd0c6e9bd0>, batch_size = 2
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = False, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
____ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x73dd0c6e9cc0>, batch_size = 1
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = False
low_threshold = 0.1, high_threshold = 0.2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
____ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x73dd0c6eace0>, batch_size = 2
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = False
low_threshold = 0.1, high_threshold = 0.2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1] ___________

self = <test_canny.TestCanny object at 0x73dd0c6eadd0>, batch_size = 1
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2] ___________

self = <test_canny.TestCanny object at 0x73dd0c6eaec0>, batch_size = 2
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x73dd0c6eafb0>, batch_size = 1
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x73dd0c6eb0a0>, batch_size = 2
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1] ___________

self = <test_canny.TestCanny object at 0x73dd0c6eb190>, batch_size = 1
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2] ___________

self = <test_canny.TestCanny object at 0x73dd0c6eb280>, batch_size = 2
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x73dd0c6eb370>, batch_size = 1
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x73dd0c6eb460>, batch_size = 2
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1] __________

self = <test_canny.TestCanny object at 0x73dd0c6eb550>, batch_size = 1
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = False, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2] __________

self = <test_canny.TestCanny object at 0x73dd0c6eb640>, batch_size = 2
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = False, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
____ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x73dd0c6eb730>, batch_size = 1
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = False
low_threshold = 0.3, high_threshold = 0.5, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
____ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x73dd0c6eb820>, batch_size = 2
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = False
low_threshold = 0.3, high_threshold = 0.5, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1] __________

self = <test_canny.TestCanny object at 0x73dd0c6eb910>, batch_size = 1
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = False, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2] __________

self = <test_canny.TestCanny object at 0x73dd0c6eba00>, batch_size = 2
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = False, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
____ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x73dd0c6ebaf0>, batch_size = 1
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = False
low_threshold = 0.3, high_threshold = 0.5, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
____ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x73dd0c6ebbe0>, batch_size = 2
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = False
low_threshold = 0.3, high_threshold = 0.5, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1] ___________

self = <test_canny.TestCanny object at 0x73dd0c6ebcd0>, batch_size = 1
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2] ___________

self = <test_canny.TestCanny object at 0x73dd0c6ebdc0>, batch_size = 2
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x73dd0c6ebeb0>, batch_size = 1
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x73dd0c6ebfa0>, batch_size = 2
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (1.5, 1.0)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1] ___________

self = <test_canny.TestCanny object at 0x73dd0c5180d0>, batch_size = 1
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2] ___________

self = <test_canny.TestCanny object at 0x73dd0c5181c0>, batch_size = 2
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 3, sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x73dd0c5182b0>, batch_size = 1
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x73dd0c5183a0>, batch_size = 2
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (2.5, 0.5)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
__________________ TestCanny.test_cardinality[cpu-float32-1] ___________________

self = <test_canny.TestCanny object at 0x73dd0c518760>, batch_size = 1
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_cardinality(self, batch_size, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny()
>       magnitude, edges = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 5), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
__________________ TestCanny.test_cardinality[cpu-float32-2] ___________________

self = <test_canny.TestCanny object at 0x73dd0c5186a0>, batch_size = 2
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_cardinality(self, batch_size, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny()
>       magnitude, edges = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 5), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
____________________ TestCanny.test_exception[cpu-float32] _____________________

self = <test_canny.TestCanny object at 0x73dd0c518b50>
device = device(type='cpu'), dtype = torch.float32

    def test_exception(self, device, dtype):
        with pytest.raises(Exception) as errinfo:
            Canny(0.3, 0.2)
        assert "low_threshold should be smaller than the high_threshold" in str(errinfo)
    
        with pytest.raises(Exception) as errinfo:
            Canny(-2, 0.3)
        assert "Invalid low threshold." in str(errinfo)
    
        with pytest.raises(Exception) as errinfo:
            Canny(0.1, 3)
        assert "Invalid high threshold." in str(errinfo)
    
        with pytest.raises(Exception) as errinfo:
            canny(1)
>       assert "Not a Tensor type" in str(errinfo)
E       assert 'Not a Tensor type' in "<ExceptionInfo TypeError('Input must be a torch.Tensor') tblen=3>"
E        +  where "<ExceptionInfo TypeError('Input must be a torch.Tensor') tblen=3>" = str(<ExceptionInfo TypeError('Input must be a torch.Tensor') tblen=3>)

../publishablew/kornia/kornia/tests/filters/test_canny.py:50: AssertionError
_________________ TestCanny.test_noncontiguous[cpu-float32-1] __________________

self = <test_canny.TestCanny object at 0x73dd0c518f40>, batch_size = 1
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_noncontiguous(self, batch_size, device, dtype):
        inp = torch.rand(batch_size, 3, 5, 5, device=device, dtype=dtype).expand(batch_size, -1, -1, -1)
    
>       magnitude, edges = canny(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 5), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
_________________ TestCanny.test_noncontiguous[cpu-float32-2] __________________

self = <test_canny.TestCanny object at 0x73dd0c518e80>, batch_size = 2
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_noncontiguous(self, batch_size, device, dtype):
        inp = torch.rand(batch_size, 3, 5, 5, device=device, dtype=dtype).expand(batch_size, -1, -1, -1)
    
>       magnitude, edges = canny(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 5), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
____________________ TestCanny.test_magnitude[cpu-float32] _____________________

self = <test_canny.TestCanny object at 0x73dd0c518490>
device = device(type='cpu'), dtype = torch.float32

    def test_magnitude(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_magnitude = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 1.2458, 0.9672, 1.2458, 0.0],
                        [0.0, 0.9672, 0.0, 0.9672, 0.0],
                        [0.0, 1.2458, 0.9672, 1.2458, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_edges = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 1.0, 0.0, 1.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       magnitude, edges = canny(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 5), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
__________________ TestCanny.test_magnitude_hyst[cpu-float32] __________________

self = <test_canny.TestCanny object at 0x73dd0c5194b0>
device = device(type='cpu'), dtype = torch.float32

    def test_magnitude_hyst(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.5, 0.4, 0.5, 0.45, 0.1],
                        [0.3, 0.2, 0.3, 0.0, 0.3],
                        [0.5, 1.0, 1.0, 0.6, 0.75],
                        [0.2, 0.4, 0.6, 0.0, 0.5],
                        [0.1, 0.35, 0.35, 0.26, 0.1],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_magnitude = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.4858, 0.5594, 0.6878, 0.6977, 0.5602],
                        [0.1129, 0.0000, 0.0000, 0.4531, 0.0000],
                        [0.6115, 0.5859, 0.6110, 0.6766, 0.5160],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_edges = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
                        [1.0000, 0.0000, 0.0000, 1.0000, 0.0000],
                        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       magnitude, edges = canny(inp, hysteresis=True)

../publishablew/kornia/kornia/tests/filters/test_canny.py:169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 5), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
_______________ TestCanny.test_magnitude_hyst_false[cpu-float32] _______________

self = <test_canny.TestCanny object at 0x73dd0c5197e0>
device = device(type='cpu'), dtype = torch.float32

    def test_magnitude_hyst_false(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.5, 0.4, 0.5, 0.45, 0.1],
                        [0.3, 0.2, 0.3, 0.0, 0.3],
                        [0.5, 1.0, 1.0, 0.6, 0.75],
                        [0.2, 0.4, 0.6, 0.0, 0.5],
                        [0.1, 0.35, 0.35, 0.26, 0.1],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_magnitude = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.4858, 0.5594, 0.6878, 0.6977, 0.5602],
                        [0.1129, 0.0000, 0.0000, 0.4531, 0.0000],
                        [0.6115, 0.5859, 0.6110, 0.6766, 0.5160],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_edges = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
                        [0.5000, 0.0000, 0.0000, 1.0000, 0.0000],
                        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       magnitude, edges = canny(inp, hysteresis=False)

../publishablew/kornia/kornia/tests/filters/test_canny.py:223: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 5), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
_______________ TestCanny.test_magnitude_threshold[cpu-float32] ________________

self = <test_canny.TestCanny object at 0x73dd0c519b10>
device = device(type='cpu'), dtype = torch.float32

    def test_magnitude_threshold(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.5, 0.4, 0.5, 0.45, 0.1],
                        [0.3, 0.2, 0.3, 0.0, 0.3],
                        [0.5, 1.0, 1.0, 0.6, 0.75],
                        [0.2, 0.4, 0.6, 0.0, 0.5],
                        [0.1, 0.35, 0.35, 0.26, 0.1],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_magnitude = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.4858, 0.5594, 0.6878, 0.6977, 0.5602],
                        [0.1129, 0.0000, 0.0000, 0.4531, 0.0000],
                        [0.6115, 0.5859, 0.6110, 0.6766, 0.5160],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_edges = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       magnitude, edges = canny(inp, low_threshold=0.3, high_threshold=0.9)

../publishablew/kornia/kornia/tests/filters/test_canny.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 5), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
________________________ TestCanny.test_gradcheck[cpu] _________________________

self = <test_canny.TestCanny object at 0x73dd0c519de0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        if "cuda" in str(device):
            pytest.skip("RuntimeError: Backward is not reentrant, i.e., running backward,")
        batch_size, channels, height, width = 1, 1, 3, 4
        img = torch.rand(batch_size, channels, height, width, device=device, dtype=torch.float64)
>       self.gradcheck(canny, img)

../publishablew/kornia/kornia/tests/filters/test_canny.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 5), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
______________________ TestCanny.test_module[cpu-float32] ______________________

self = <test_canny.TestCanny object at 0x73dd0c51a0e0>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype):
        img = torch.rand(2, 3, 4, 5, device=device, dtype=dtype)
        op = canny
        op_module = Canny()
>       expected_magnitude, expected_edges = op(img)

../publishablew/kornia/kornia/tests/filters/test_canny.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 5), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
_______________ TestCanny.test_dynamo[cpu-float32-inductor-1-5] ________________

self = <test_canny.TestCanny object at 0x73dd0c51a650>, batch_size = 1
kernel_size = 5, device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x73dde1bcd7e0>, backend='inductor')

    @pytest.mark.parametrize("kernel_size", [5, (5, 7)])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.skipif(torch_version() in {"2.0.0", "2.0.1"}, reason="Not working on 2.0")
    def test_dynamo(self, batch_size, kernel_size, device, dtype, torch_optimizer):
        if (
            torch_version() in {"2.1.1", "2.1.2", "2.2.2", "2.3.1"}
            and dtype == torch.float64
            and (isinstance(kernel_size, int) or kernel_size[0] == kernel_size[1])
        ):
            pytest.skip("Canny compiled failing into fp64 for kernel sizes where kx and ky are equals")
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        op = Canny(kernel_size=kernel_size)
        op_optimized = torch_optimizer(op)
    
>       expected_magnitude, expected_edges = op(data)

../publishablew/kornia/kornia/tests/filters/test_canny.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 5, sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
__________ TestCanny.test_dynamo[cpu-float32-inductor-1-kernel_size1] __________

self = <test_canny.TestCanny object at 0x73dd0c51a500>, batch_size = 1
kernel_size = (5, 7), device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x73dde1bcd7e0>, backend='inductor')

    @pytest.mark.parametrize("kernel_size", [5, (5, 7)])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.skipif(torch_version() in {"2.0.0", "2.0.1"}, reason="Not working on 2.0")
    def test_dynamo(self, batch_size, kernel_size, device, dtype, torch_optimizer):
        if (
            torch_version() in {"2.1.1", "2.1.2", "2.2.2", "2.3.1"}
            and dtype == torch.float64
            and (isinstance(kernel_size, int) or kernel_size[0] == kernel_size[1])
        ):
            pytest.skip("Canny compiled failing into fp64 for kernel sizes where kx and ky are equals")
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        op = Canny(kernel_size=kernel_size)
        op_optimized = torch_optimizer(op)
    
>       expected_magnitude, expected_edges = op(data)

../publishablew/kornia/kornia/tests/filters/test_canny.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
_______________ TestCanny.test_dynamo[cpu-float32-inductor-2-5] ________________

self = <test_canny.TestCanny object at 0x73dd0c51a860>, batch_size = 2
kernel_size = 5, device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x73dde1bcd7e0>, backend='inductor')

    @pytest.mark.parametrize("kernel_size", [5, (5, 7)])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.skipif(torch_version() in {"2.0.0", "2.0.1"}, reason="Not working on 2.0")
    def test_dynamo(self, batch_size, kernel_size, device, dtype, torch_optimizer):
        if (
            torch_version() in {"2.1.1", "2.1.2", "2.2.2", "2.3.1"}
            and dtype == torch.float64
            and (isinstance(kernel_size, int) or kernel_size[0] == kernel_size[1])
        ):
            pytest.skip("Canny compiled failing into fp64 for kernel sizes where kx and ky are equals")
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        op = Canny(kernel_size=kernel_size)
        op_optimized = torch_optimizer(op)
    
>       expected_magnitude, expected_edges = op(data)

../publishablew/kornia/kornia/tests/filters/test_canny.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = 5, sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
        ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
        xx, yy = torch.meshgrid(ax, ax)
>       kernel = torch.exp(-(xx ** 2 + yy ** 2) / (2.0 * sigma ** 2))
E       TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:31: TypeError
__________ TestCanny.test_dynamo[cpu-float32-inductor-2-kernel_size1] __________

self = <test_canny.TestCanny object at 0x73dd0c51a920>, batch_size = 2
kernel_size = (5, 7), device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x73dde1bcd7e0>, backend='inductor')

    @pytest.mark.parametrize("kernel_size", [5, (5, 7)])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.skipif(torch_version() in {"2.0.0", "2.0.1"}, reason="Not working on 2.0")
    def test_dynamo(self, batch_size, kernel_size, device, dtype, torch_optimizer):
        if (
            torch_version() in {"2.1.1", "2.1.2", "2.2.2", "2.3.1"}
            and dtype == torch.float64
            and (isinstance(kernel_size, int) or kernel_size[0] == kernel_size[1])
        ):
            pytest.skip("Canny compiled failing into fp64 for kernel sizes where kx and ky are equals")
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        op = Canny(kernel_size=kernel_size)
        op_optimized = torch_optimizer(op)
    
>       expected_magnitude, expected_edges = op(data)

../publishablew/kornia/kornia/tests/filters/test_canny.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:34: in canny
    kernel = gaussian_kernel(kernel_size, sigma).to(input.device)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

kernel_size = (5, 7), sigma = (1, 1)

    def gaussian_kernel(kernel_size, sigma):
>       ax = torch.arange(-kernel_size // 2 + 1.0, kernel_size // 2 + 1.0)
E       TypeError: bad operand type for unary -: 'tuple'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: TypeError
=============================== warnings summary ===============================
tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1]
  /local/data0/moved_data/publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
    return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1]
======================== 47 failed, 1 warning in 2.29s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'jit', 'cudagraphs', 'inductor', 'tvm', 'openxla', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 47 items

../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1] PASSED

============================== 47 passed in 5.13s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'tvm', 'inductor', 'onnxrt', 'jit', None, 'cudagraphs'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 47 items

../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1] PASSED

============================== 47 passed in 5.12s ==============================
