output file:
processed_korniacanny107.json
function:
canny
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2]', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'openxla', 'jit', 'tvm', 'cudagraphs', 'inductor', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 47 items

../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5] FAILED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1] FAILED

=================================== FAILURES ===================================
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1] __________

self = <test_canny.TestCanny object at 0x7d3713305e10>, batch_size = 1
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = False, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2] __________

self = <test_canny.TestCanny object at 0x7d3713305480>, batch_size = 2
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = False, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
____ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x7d37133059c0>, batch_size = 1
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = False
low_threshold = 0.1, high_threshold = 0.2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
____ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x7d3713305ab0>, batch_size = 2
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = False
low_threshold = 0.1, high_threshold = 0.2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1] __________

self = <test_canny.TestCanny object at 0x7d3713305ba0>, batch_size = 1
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = False, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2] __________

self = <test_canny.TestCanny object at 0x7d3713305c90>, batch_size = 2
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = False, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
____ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x7d3713305d80>, batch_size = 1
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = False
low_threshold = 0.1, high_threshold = 0.2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
____ TestCanny.test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x7d3713306da0>, batch_size = 2
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = False
low_threshold = 0.1, high_threshold = 0.2, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1] ___________

self = <test_canny.TestCanny object at 0x7d3713306e90>, batch_size = 1
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2] ___________

self = <test_canny.TestCanny object at 0x7d3713306f80>, batch_size = 2
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x7d3713307070>, batch_size = 1
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x7d3713307160>, batch_size = 2
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1] ___________

self = <test_canny.TestCanny object at 0x7d3713307250>, batch_size = 1
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2] ___________

self = <test_canny.TestCanny object at 0x7d3713307340>, batch_size = 2
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x7d3713307430>, batch_size = 1
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x7d3713307520>, batch_size = 2
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.1
high_threshold = 0.2, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1] __________

self = <test_canny.TestCanny object at 0x7d3713307610>, batch_size = 1
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = False, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2] __________

self = <test_canny.TestCanny object at 0x7d3713307700>, batch_size = 2
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = False, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
____ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x7d37133077f0>, batch_size = 1
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = False
low_threshold = 0.3, high_threshold = 0.5, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
____ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x7d37133078e0>, batch_size = 2
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = False
low_threshold = 0.3, high_threshold = 0.5, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1] __________

self = <test_canny.TestCanny object at 0x7d37133079d0>, batch_size = 1
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = False, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2] __________

self = <test_canny.TestCanny object at 0x7d3713307ac0>, batch_size = 2
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = False, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
____ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x7d3713307bb0>, batch_size = 1
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = False
low_threshold = 0.3, high_threshold = 0.5, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
____ TestCanny.test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x7d3713307ca0>, batch_size = 2
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = False
low_threshold = 0.3, high_threshold = 0.5, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1] ___________

self = <test_canny.TestCanny object at 0x7d3713307d90>, batch_size = 1
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2] ___________

self = <test_canny.TestCanny object at 0x7d3713307e80>, batch_size = 2
kernel_size = 3, sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x7d3713307f70>, batch_size = 1
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x7d37133380a0>, batch_size = 2
kernel_size = (5, 7), sigma = (1.5, 1.0), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1] ___________

self = <test_canny.TestCanny object at 0x7d3713338190>, batch_size = 1
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
__________ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2] ___________

self = <test_canny.TestCanny object at 0x7d3713338280>, batch_size = 2
kernel_size = 3, sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0.],
       [1., 1., 1.],
       [2., 2., 2.]])
y = array([[0., 1., 2.],
       [0., 1., 2.],
       [0., 1., 2.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1] _____

self = <test_canny.TestCanny object at 0x7d3713338370>, batch_size = 1
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
_____ TestCanny.test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2] _____

self = <test_canny.TestCanny object at 0x7d3713338460>, batch_size = 2
kernel_size = (5, 7), sigma = (2.5, 0.5), hysteresis = True, low_threshold = 0.3
high_threshold = 0.5, device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("kernel_size", [3, (5, 7)])
    @pytest.mark.parametrize("sigma", [(1.5, 1.0), (2.5, 0.5)])
    @pytest.mark.parametrize("hysteresis", [False, True])
    @pytest.mark.parametrize("low_threshold,high_threshold", [(0.1, 0.2), (0.3, 0.5)])
    def test_smoke(self, batch_size, kernel_size, sigma, hysteresis, low_threshold, high_threshold, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny(low_threshold, high_threshold, kernel_size, sigma, hysteresis)
>       actual = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
__________________ TestCanny.test_cardinality[cpu-float32-1] ___________________

self = <test_canny.TestCanny object at 0x7d3713338820>, batch_size = 1
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_cardinality(self, batch_size, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny()
>       magnitude, edges = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 5), (5, 5)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
__________________ TestCanny.test_cardinality[cpu-float32-2] ___________________

self = <test_canny.TestCanny object at 0x7d3713338760>, batch_size = 2
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_cardinality(self, batch_size, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
    
        op = Canny()
>       magnitude, edges = op(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 5), (5, 5)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
____________________ TestCanny.test_exception[cpu-float32] _____________________

self = <test_canny.TestCanny object at 0x7d3713338c10>
device = device(type='cpu'), dtype = torch.float32

    def test_exception(self, device, dtype):
        with pytest.raises(Exception) as errinfo:
            Canny(0.3, 0.2)
        assert "low_threshold should be smaller than the high_threshold" in str(errinfo)
    
        with pytest.raises(Exception) as errinfo:
            Canny(-2, 0.3)
        assert "Invalid low threshold." in str(errinfo)
    
        with pytest.raises(Exception) as errinfo:
            Canny(0.1, 3)
        assert "Invalid high threshold." in str(errinfo)
    
        with pytest.raises(Exception) as errinfo:
            canny(1)
>       assert "Not a Tensor type" in str(errinfo)
E       assert 'Not a Tensor type' in '<ExceptionInfo AttributeError("\'int\' object has no attribute \'shape\'") tblen=3>'
E        +  where '<ExceptionInfo AttributeError("\'int\' object has no attribute \'shape\'") tblen=3>' = str(<ExceptionInfo AttributeError("'int' object has no attribute 'shape'") tblen=3>)

../publishablew/kornia/kornia/tests/filters/test_canny.py:50: AssertionError
_________________ TestCanny.test_noncontiguous[cpu-float32-1] __________________

self = <test_canny.TestCanny object at 0x7d3713339000>, batch_size = 1
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_noncontiguous(self, batch_size, device, dtype):
        inp = torch.rand(batch_size, 3, 5, 5, device=device, dtype=dtype).expand(batch_size, -1, -1, -1)
    
>       magnitude, edges = canny(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 5), (5, 5)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
_________________ TestCanny.test_noncontiguous[cpu-float32-2] __________________

self = <test_canny.TestCanny object at 0x7d3713338f40>, batch_size = 2
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_noncontiguous(self, batch_size, device, dtype):
        inp = torch.rand(batch_size, 3, 5, 5, device=device, dtype=dtype).expand(batch_size, -1, -1, -1)
    
>       magnitude, edges = canny(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 5), (5, 5)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
____________________ TestCanny.test_magnitude[cpu-float32] _____________________

self = <test_canny.TestCanny object at 0x7d3713338550>
device = device(type='cpu'), dtype = torch.float32

    def test_magnitude(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_magnitude = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 1.2458, 0.9672, 1.2458, 0.0],
                        [0.0, 0.9672, 0.0, 0.9672, 0.0],
                        [0.0, 1.2458, 0.9672, 1.2458, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_edges = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 1.0, 0.0, 1.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       magnitude, edges = canny(inp)

../publishablew/kornia/kornia/tests/filters/test_canny.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 5), (5, 5)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
__________________ TestCanny.test_magnitude_hyst[cpu-float32] __________________

self = <test_canny.TestCanny object at 0x7d3713339570>
device = device(type='cpu'), dtype = torch.float32

    def test_magnitude_hyst(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.5, 0.4, 0.5, 0.45, 0.1],
                        [0.3, 0.2, 0.3, 0.0, 0.3],
                        [0.5, 1.0, 1.0, 0.6, 0.75],
                        [0.2, 0.4, 0.6, 0.0, 0.5],
                        [0.1, 0.35, 0.35, 0.26, 0.1],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_magnitude = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.4858, 0.5594, 0.6878, 0.6977, 0.5602],
                        [0.1129, 0.0000, 0.0000, 0.4531, 0.0000],
                        [0.6115, 0.5859, 0.6110, 0.6766, 0.5160],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_edges = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
                        [1.0000, 0.0000, 0.0000, 1.0000, 0.0000],
                        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       magnitude, edges = canny(inp, hysteresis=True)

../publishablew/kornia/kornia/tests/filters/test_canny.py:169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 5), (5, 5)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
_______________ TestCanny.test_magnitude_hyst_false[cpu-float32] _______________

self = <test_canny.TestCanny object at 0x7d37133398a0>
device = device(type='cpu'), dtype = torch.float32

    def test_magnitude_hyst_false(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.5, 0.4, 0.5, 0.45, 0.1],
                        [0.3, 0.2, 0.3, 0.0, 0.3],
                        [0.5, 1.0, 1.0, 0.6, 0.75],
                        [0.2, 0.4, 0.6, 0.0, 0.5],
                        [0.1, 0.35, 0.35, 0.26, 0.1],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_magnitude = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.4858, 0.5594, 0.6878, 0.6977, 0.5602],
                        [0.1129, 0.0000, 0.0000, 0.4531, 0.0000],
                        [0.6115, 0.5859, 0.6110, 0.6766, 0.5160],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_edges = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
                        [0.5000, 0.0000, 0.0000, 1.0000, 0.0000],
                        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       magnitude, edges = canny(inp, hysteresis=False)

../publishablew/kornia/kornia/tests/filters/test_canny.py:223: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 5), (5, 5)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
_______________ TestCanny.test_magnitude_threshold[cpu-float32] ________________

self = <test_canny.TestCanny object at 0x7d3713339bd0>
device = device(type='cpu'), dtype = torch.float32

    def test_magnitude_threshold(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.5, 0.4, 0.5, 0.45, 0.1],
                        [0.3, 0.2, 0.3, 0.0, 0.3],
                        [0.5, 1.0, 1.0, 0.6, 0.75],
                        [0.2, 0.4, 0.6, 0.0, 0.5],
                        [0.1, 0.35, 0.35, 0.26, 0.1],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_magnitude = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.4858, 0.5594, 0.6878, 0.6977, 0.5602],
                        [0.1129, 0.0000, 0.0000, 0.4531, 0.0000],
                        [0.6115, 0.5859, 0.6110, 0.6766, 0.5160],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected_edges = torch.tensor(
            [
                [
                    [
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
>       magnitude, edges = canny(inp, low_threshold=0.3, high_threshold=0.9)

../publishablew/kornia/kornia/tests/filters/test_canny.py:277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 5), (5, 5)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
________________________ TestCanny.test_gradcheck[cpu] _________________________

self = <test_canny.TestCanny object at 0x7d3713339ea0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        if "cuda" in str(device):
            pytest.skip("RuntimeError: Backward is not reentrant, i.e., running backward,")
        batch_size, channels, height, width = 1, 1, 3, 4
        img = torch.rand(batch_size, channels, height, width, device=device, dtype=torch.float64)
>       self.gradcheck(canny, img)

../publishablew/kornia/kornia/tests/filters/test_canny.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 5), (5, 5)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
______________________ TestCanny.test_module[cpu-float32] ______________________

self = <test_canny.TestCanny object at 0x7d371333a1a0>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype):
        img = torch.rand(2, 3, 4, 5, device=device, dtype=dtype)
        op = canny
        op_module = Canny()
>       expected_magnitude, expected_edges = op(img)

../publishablew/kornia/kornia/tests/filters/test_canny.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 5), (5, 5)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
_______________ TestCanny.test_dynamo[cpu-float32-inductor-1-5] ________________

self = <test_canny.TestCanny object at 0x7d371333a710>, batch_size = 1
kernel_size = 5, device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7d37e89e57e0>, backend='inductor')

    @pytest.mark.parametrize("kernel_size", [5, (5, 7)])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.skipif(torch_version() in {"2.0.0", "2.0.1"}, reason="Not working on 2.0")
    def test_dynamo(self, batch_size, kernel_size, device, dtype, torch_optimizer):
        if (
            torch_version() in {"2.1.1", "2.1.2", "2.2.2", "2.3.1"}
            and dtype == torch.float64
            and (isinstance(kernel_size, int) or kernel_size[0] == kernel_size[1])
        ):
            pytest.skip("Canny compiled failing into fp64 for kernel sizes where kx and ky are equals")
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        op = Canny(kernel_size=kernel_size)
        op_optimized = torch_optimizer(op)
    
>       expected_magnitude, expected_edges = op(data)

../publishablew/kornia/kornia/tests/filters/test_canny.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0., 0., 0.],
       [1., 1., 1., 1., 1.],
       [2., 2., 2., 2., 2.],
       [3., 3., 3., 3., 3.],
       [4., 4., 4., 4., 4.]])
y = array([[0., 1., 2., 3., 4.],
       [0., 1., 2., 3., 4.],
       [0., 1., 2., 3., 4.],
       [0., 1., 2., 3., 4.],
       [0., 1., 2., 3., 4.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
__________ TestCanny.test_dynamo[cpu-float32-inductor-1-kernel_size1] __________

self = <test_canny.TestCanny object at 0x7d371333a5c0>, batch_size = 1
kernel_size = (5, 7), device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7d37e89e57e0>, backend='inductor')

    @pytest.mark.parametrize("kernel_size", [5, (5, 7)])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.skipif(torch_version() in {"2.0.0", "2.0.1"}, reason="Not working on 2.0")
    def test_dynamo(self, batch_size, kernel_size, device, dtype, torch_optimizer):
        if (
            torch_version() in {"2.1.1", "2.1.2", "2.2.2", "2.3.1"}
            and dtype == torch.float64
            and (isinstance(kernel_size, int) or kernel_size[0] == kernel_size[1])
        ):
            pytest.skip("Canny compiled failing into fp64 for kernel sizes where kx and ky are equals")
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        op = Canny(kernel_size=kernel_size)
        op_optimized = torch_optimizer(op)
    
>       expected_magnitude, expected_edges = op(data)

../publishablew/kornia/kornia/tests/filters/test_canny.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
_______________ TestCanny.test_dynamo[cpu-float32-inductor-2-5] ________________

self = <test_canny.TestCanny object at 0x7d371333a920>, batch_size = 2
kernel_size = 5, device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7d37e89e57e0>, backend='inductor')

    @pytest.mark.parametrize("kernel_size", [5, (5, 7)])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.skipif(torch_version() in {"2.0.0", "2.0.1"}, reason="Not working on 2.0")
    def test_dynamo(self, batch_size, kernel_size, device, dtype, torch_optimizer):
        if (
            torch_version() in {"2.1.1", "2.1.2", "2.2.2", "2.3.1"}
            and dtype == torch.float64
            and (isinstance(kernel_size, int) or kernel_size[0] == kernel_size[1])
        ):
            pytest.skip("Canny compiled failing into fp64 for kernel sizes where kx and ky are equals")
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        op = Canny(kernel_size=kernel_size)
        op_optimized = torch_optimizer(op)
    
>       expected_magnitude, expected_edges = op(data)

../publishablew/kornia/kornia/tests/filters/test_canny.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1845: in fromfunction
    return function(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[0., 0., 0., 0., 0.],
       [1., 1., 1., 1., 1.],
       [2., 2., 2., 2., 2.],
       [3., 3., 3., 3., 3.],
       [4., 4., 4., 4., 4.]])
y = array([[0., 1., 2., 3., 4.],
       [0., 1., 2., 3., 4.],
       [0., 1., 2., 3., 4.],
       [0., 1., 2., 3., 4.],
       [0., 1., 2., 3., 4.]])

>   kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
E   TypeError: unsupported operand type(s) for ** or pow(): 'tuple' and 'int'

../publishablew/kornia/kornia/kornia/filters/temp.py:28: TypeError
__________ TestCanny.test_dynamo[cpu-float32-inductor-2-kernel_size1] __________

self = <test_canny.TestCanny object at 0x7d371333a9e0>, batch_size = 2
kernel_size = (5, 7), device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x7d37e89e57e0>, backend='inductor')

    @pytest.mark.parametrize("kernel_size", [5, (5, 7)])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.skipif(torch_version() in {"2.0.0", "2.0.1"}, reason="Not working on 2.0")
    def test_dynamo(self, batch_size, kernel_size, device, dtype, torch_optimizer):
        if (
            torch_version() in {"2.1.1", "2.1.2", "2.2.2", "2.3.1"}
            and dtype == torch.float64
            and (isinstance(kernel_size, int) or kernel_size[0] == kernel_size[1])
        ):
            pytest.skip("Canny compiled failing into fp64 for kernel sizes where kx and ky are equals")
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        op = Canny(kernel_size=kernel_size)
        op_optimized = torch_optimizer(op)
    
>       expected_magnitude, expected_edges = op(data)

../publishablew/kornia/kornia/tests/filters/test_canny.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/canny.py:136: in forward
    return canny(input, self.low_threshold, self.high_threshold, self.kernel_size, self.sigma, self.hysteresis, self.eps)
../publishablew/kornia/kornia/kornia/filters/canny.py:15: in canny
    return canny(input, low_threshold, high_threshold, kernel_size, sigma, hysteresis, eps)
../publishablew/kornia/kornia/kornia/filters/temp.py:30: in canny
    kernel = gaussian_kernel(kernel_size, sigma).unsqueeze(0).unsqueeze(0)
../publishablew/kornia/kornia/kornia/filters/temp.py:28: in gaussian_kernel
    kernel = np.fromfunction(lambda x, y: 1 / (2 * np.pi * sigma ** 2) * np.exp(-((x - (kernel_size - 1) / 2) ** 2 + (y - (kernel_size - 1) / 2) ** 2) / (2 * sigma ** 2)), (kernel_size, kernel_size))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1844: in fromfunction
    args = indices(shape, dtype=dtype)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = ((5, 7), (5, 7)), dtype = <class 'float'>, sparse = False

    @set_module('numpy')
    def indices(dimensions, dtype=int, sparse=False):
        """
        Return an array representing the indices of a grid.
    
        Compute an array where the subarrays contain index values 0, 1, ...
        varying only along the corresponding axis.
    
        Parameters
        ----------
        dimensions : sequence of ints
            The shape of the grid.
        dtype : dtype, optional
            Data type of the result.
        sparse : boolean, optional
            Return a sparse representation of the grid instead of a dense
            representation. Default is False.
    
            .. versionadded:: 1.17
    
        Returns
        -------
        grid : one ndarray or tuple of ndarrays
            If sparse is False:
                Returns one array of grid indices,
                ``grid.shape = (len(dimensions),) + tuple(dimensions)``.
            If sparse is True:
                Returns a tuple of arrays, with
                ``grid[i].shape = (1, ..., 1, dimensions[i], 1, ..., 1)`` with
                dimensions[i] in the ith place
    
        See Also
        --------
        mgrid, ogrid, meshgrid
    
        Notes
        -----
        The output shape in the dense case is obtained by prepending the number
        of dimensions in front of the tuple of dimensions, i.e. if `dimensions`
        is a tuple ``(r0, ..., rN-1)`` of length ``N``, the output shape is
        ``(N, r0, ..., rN-1)``.
    
        The subarrays ``grid[k]`` contains the N-D array of indices along the
        ``k-th`` axis. Explicitly::
    
            grid[k, i0, i1, ..., iN-1] = ik
    
        Examples
        --------
        >>> grid = np.indices((2, 3))
        >>> grid.shape
        (2, 2, 3)
        >>> grid[0]        # row indices
        array([[0, 0, 0],
               [1, 1, 1]])
        >>> grid[1]        # column indices
        array([[0, 1, 2],
               [0, 1, 2]])
    
        The indices can be used as an index into an array.
    
        >>> x = np.arange(20).reshape(5, 4)
        >>> row, col = np.indices((2, 3))
        >>> x[row, col]
        array([[0, 1, 2],
               [4, 5, 6]])
    
        Note that it would be more straightforward in the above example to
        extract the required elements directly with ``x[:2, :3]``.
    
        If sparse is set to true, the grid will be returned in a sparse
        representation.
    
        >>> i, j = np.indices((2, 3), sparse=True)
        >>> i.shape
        (2, 1)
        >>> j.shape
        (1, 3)
        >>> i        # row indices
        array([[0],
               [1]])
        >>> j        # column indices
        array([[0, 1, 2]])
    
        """
        dimensions = tuple(dimensions)
        N = len(dimensions)
        shape = (1,)*N
        if sparse:
            res = tuple()
        else:
>           res = empty((N,)+dimensions, dtype=dtype)
E           TypeError: 'tuple' object cannot be interpreted as an integer

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/numpy/core/numeric.py:1764: TypeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5]
FAILED ../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1]
============================== 47 failed in 2.93s ==============================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'inductor', 'openxla', 'tvm', 'jit', None, 'onnxrt'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 47 items

../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1] PASSED

============================== 47 passed in 5.20s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'onnxrt', 'tvm', 'jit', 'inductor', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 47 items

../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-False-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.1-0.2-True-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-False-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma0-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-3-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_smoke[cpu-float32-0.3-0.5-True-sigma1-kernel_size1-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_cardinality[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_noncontiguous[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_hyst_false[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_magnitude_threshold[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-5] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-1-kernel_size1] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-5] PASSED
../publishablew/kornia/kornia/tests/filters/test_canny.py::TestCanny::test_dynamo[cpu-float32-inductor-2-kernel_size1] PASSED

============================== 47 passed in 5.10s ==============================
