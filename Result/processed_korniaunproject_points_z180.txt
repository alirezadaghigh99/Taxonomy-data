output file:
processed_korniaunproject_points_z180.json
function:
unproject_points_z1
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_unproject[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_exception[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_jit[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_extension[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_batch_extension[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_batch_extension[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_jit[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_extension[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_unproject[cpu-float32]', '../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_exception[cpu-float32] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'onnxrt', 'inductor', 'jit', 'openxla', 'tvm', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 17 items

../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_points_z1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_points_z1_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_points_z1_invalid[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_unproject[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_extension[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_batch_extension[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_dx_proj_x[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_exception[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_jit[cpu-float32] FAILED

=================================== FAILURES ===================================
_____________ TestProjectionZ1.test_project_unproject[cpu-float32] _____________

self = <test_projections.TestProjectionZ1 object at 0x7381808fef80>
device = device(type='cpu'), dtype = torch.float32

    def test_project_unproject(self, device, dtype):
        points = torch.tensor([1.0, 2.0, 2.0], device=device, dtype=dtype)
        extension = torch.tensor([2.0], device=device, dtype=dtype)
>       self.assert_close(unproject_points_z1(project_points_z1(points), extension), points)

../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([0.5000, 1.0000, 2.0000]), expected = tensor([1., 2., 2.])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 2 / 3 (66.7%)
E       Greatest absolute difference: 1.0 at index (1,) (up to 1e-05 allowed)
E       Greatest relative difference: 0.5 at index (0,) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
_______ TestProjectionZ1.test_unproject_points_z1_extension[cpu-float32] _______

self = <test_projections.TestProjectionZ1 object at 0x7381808ff2b0>
device = device(type='cpu'), dtype = torch.float32

    def test_unproject_points_z1_extension(self, device, dtype):
        points = torch.tensor([1.0, 2.0], device=device, dtype=dtype)
        extension = torch.tensor([2.0], device=device, dtype=dtype)
        expected = torch.tensor([2.0, 4.0, 2.0], device=device, dtype=dtype)
>       self.assert_close(unproject_points_z1(points, extension), expected)

../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([1., 2., 2.]), expected = tensor([2., 4., 2.]), rtol = 0.0001
atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 2 / 3 (66.7%)
E       Greatest absolute difference: 2.0 at index (1,) (up to 1e-05 allowed)
E       Greatest relative difference: 0.5 at index (0,) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
____ TestProjectionZ1.test_unproject_points_z1_batch_extension[cpu-float32] ____

self = <test_projections.TestProjectionZ1 object at 0x7381808ff5e0>
device = device(type='cpu'), dtype = torch.float32

    def test_unproject_points_z1_batch_extension(self, device, dtype):
        points = torch.tensor([[1.0, 2.0], [3.0, 4.0]], device=device, dtype=dtype)
        extension = torch.tensor([2.0, 3.0], device=device, dtype=dtype)
        expected = torch.tensor([[2.0, 4.0, 2.0], [9.0, 12.0, 3.0]], device=device, dtype=dtype)
>       self.assert_close(unproject_points_z1(points, extension), expected)

../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/camera/projection_z1.py:38: in unproject_points_z1
    return unproject_points_z1(points_in_cam_canonical, extension)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points_in_cam_canonical = tensor([[1., 2.],
        [3., 4.]])
extension = tensor([2., 3.])

    def unproject_points_z1(points_in_cam_canonical, extension=None):
        """
        Unprojects points from the canonical z=1 plane into the camera frame.
    
        Args:
            points_in_cam_canonical (Tensor): A tensor of shape (..., 2) representing the points to unproject.
            extension (Tensor, optional): A tensor of shape (..., 1) representing the extension (depth) of the points.
    
        Returns:
            Tensor: A tensor of shape (..., 3) representing the unprojected points.
        """
        if not isinstance(points_in_cam_canonical, torch.Tensor):
            raise TypeError('points_in_cam_canonical must be a torch.Tensor')
        if points_in_cam_canonical.shape[-1] != 2:
            raise ValueError('points_in_cam_canonical must have shape (..., 2)')
        if extension is None:
            z = torch.ones_like(points_in_cam_canonical[..., :1])
        else:
            if not isinstance(extension, torch.Tensor):
                raise TypeError('extension must be a torch.Tensor')
            if extension.shape != points_in_cam_canonical.shape[:-1] + (1,):
>               raise ValueError('extension must have shape (..., 1) matching points_in_cam_canonical')
E               ValueError: extension must have shape (..., 1) matching points_in_cam_canonical

../publishablew/kornia/kornia/kornia/geometry/camera/temp.py:29: ValueError
_________________ TestProjectionZ1.test_exception[cpu-float32] _________________

self = <test_projections.TestProjectionZ1 object at 0x7381808ffc40>
device = device(type='cpu'), dtype = torch.float32

    def test_exception(self, device, dtype) -> None:
        points = torch.tensor([1.0, 2.0, 3.0], device=device, dtype=dtype)
        extension = torch.tensor([2.0], device=device, dtype=dtype)
        with pytest.raises(TypeError):
>           unproject_points_z1(points, extension)

../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/geometry/camera/projection_z1.py:38: in unproject_points_z1
    return unproject_points_z1(points_in_cam_canonical, extension)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

points_in_cam_canonical = tensor([1., 2., 3.]), extension = tensor([2.])

    def unproject_points_z1(points_in_cam_canonical, extension=None):
        """
        Unprojects points from the canonical z=1 plane into the camera frame.
    
        Args:
            points_in_cam_canonical (Tensor): A tensor of shape (..., 2) representing the points to unproject.
            extension (Tensor, optional): A tensor of shape (..., 1) representing the extension (depth) of the points.
    
        Returns:
            Tensor: A tensor of shape (..., 3) representing the unprojected points.
        """
        if not isinstance(points_in_cam_canonical, torch.Tensor):
            raise TypeError('points_in_cam_canonical must be a torch.Tensor')
        if points_in_cam_canonical.shape[-1] != 2:
>           raise ValueError('points_in_cam_canonical must have shape (..., 2)')
E           ValueError: points_in_cam_canonical must have shape (..., 2)

../publishablew/kornia/kornia/kornia/geometry/camera/temp.py:22: ValueError
____________________ TestProjectionZ1.test_jit[cpu-float32] ____________________

self = <test_projections.TestProjectionZ1 object at 0x73818072c250>
device = device(type='cpu'), dtype = torch.float32

    def test_jit(self, device, dtype) -> None:
        self._test_jit_project(device, dtype)
>       self._test_jit_unproject(device, dtype)

../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py:120: in _test_jit_unproject
    op_script = torch.jit.script(unproject_points_z1)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1429: in script
    ret = _script_impl(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/_script.py:1202: in _script_impl
    ast = get_jit_def(obj, obj.__name__)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:383: in get_jit_def
    return build_def(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:444: in build_def
    return Def(Ident(r, def_name), decl, build_stmts(ctx, body))
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in build_stmts
    stmts = [build_stmt(ctx, s) for s in stmts]
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:197: in <listcomp>
    stmts = [build_stmt(ctx, s) for s in stmts]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <torch.jit.frontend.StmtBuilder object at 0x73825b3abcd0>
ctx = <torch._sources.SourceContext object at 0x7381807c2d40>
node = <ast.ImportFrom object at 0x73818072d1e0>

    def __call__(self, ctx, node):
        method = getattr(self, "build_" + node.__class__.__name__, None)
        if method is None:
>           raise UnsupportedNodeError(ctx, node)
E           torch.jit.frontend.UnsupportedNodeError: import statements aren't supported:
E             File "/local/data0/moved_data/publishablew/kornia/kornia/kornia/geometry/camera/projection_z1.py", line 37
E           def unproject_points_z1(points_in_cam_canonical: Tensor, extension: Optional[Tensor]=None) -> Tensor:
E               from .temp import unproject_points_z1
E               ~~~~ <--- HERE
E               return unproject_points_z1(points_in_cam_canonical, extension)

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/jit/frontend.py:416: UnsupportedNodeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_unproject[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_extension[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_batch_extension[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_exception[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_jit[cpu-float32]
========================= 5 failed, 12 passed in 0.40s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', None, 'onnxrt', 'tvm', 'openxla', 'jit', 'inductor', 'cudagraphs'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 17 items

../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_points_z1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_points_z1_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_points_z1_invalid[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_unproject[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_extension[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_batch_extension[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_dx_proj_x[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_jit[cpu-float32] PASSED

============================== 17 passed in 0.22s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'openxla', 'jit', 'tvm', 'inductor', 'onnxrt', 'cudagraphs', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 17 items

../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_smoke[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-None] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_cardinality[cpu-float32-3] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_points_z1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_points_z1_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_points_z1_invalid[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_batch[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_project_unproject[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_extension[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_unproject_points_z1_batch_extension[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_dx_proj_x[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_exception[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/geometry/camera/test_projections.py::TestProjectionZ1::test_jit[cpu-float32] PASSED

============================== 17 passed in 0.25s ==============================
