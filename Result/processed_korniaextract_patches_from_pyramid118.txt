output file:
processed_korniaextract_patches_from_pyramid118.json
function:
extract_patches_from_pyramid
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu]', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32]', '../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu] FAILED', '../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu]', 'FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32]', '../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'tvm', 'jit', 'cudagraphs', 'inductor', 'onnxrt', 'openxla', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 5 items

../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_shape[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu] FAILED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu] FAILED

=================================== FAILURES ===================================
___________________ TestExtractPatchesPyr.test_non_zero[cpu] ___________________

self = <test_laf.TestExtractPatchesPyr object at 0x77bf03adf6d0>
device = device(type='cpu')

    def test_non_zero(self, device):
        img = torch.zeros(1, 1, 24, 24, device=device)
        img[:, :, 10:, 20:] = 1.0
        laf = torch.tensor([[8.0, 0, 14.0], [0, 8.0, 8.0]], device=device).reshape(1, 1, 2, 3)
    
        PS = 32
        patches = kornia.feature.extract_patches_from_pyramid(img, laf, PS)
>       assert patches.mean().item() > 0.01
E       assert 0.0 > 0.01
E        +  where 0.0 = <built-in method item of Tensor object at 0x77bf0390d710>()
E        +    where <built-in method item of Tensor object at 0x77bf0390d710> = tensor(0.).item
E        +      where tensor(0.) = <built-in method mean of Tensor object at 0x77bf0390d440>()
E        +        where <built-in method mean of Tensor object at 0x77bf0390d440> = tensor([[[[[0., 0., 0.,  ..., 0., 0., 0.],\n           [0., 0., 0.,  ..., 0., 0., 0.],\n           [0., 0., 0.,  ..., 0., 0., 0.],\n           ...,\n           [0., 0., 0.,  ..., 0., 0., 0.],\n           [0., 0., 0.,  ..., 0., 0., 0.],\n           [0., 0., 0.,  ..., 0., 0., 0.]]]]]).mean

../publishablew/kornia/kornia/tests/feature/test_laf.py:430: AssertionError
_______________ TestExtractPatchesPyr.test_same_odd[cpu-float32] _______________

self = <test_laf.TestExtractPatchesPyr object at 0x77bf03adf9d0>
device = device(type='cpu'), dtype = torch.float32

    def test_same_odd(self, device, dtype):
        img = torch.arange(5)[None].repeat(5, 1)[None, None].to(device, dtype)
        laf = torch.tensor([[2.0, 0, 2.0], [0, 2.0, 2.0]]).reshape(1, 1, 2, 3).to(device, dtype)
    
        patch = kornia.feature.extract_patches_from_pyramid(img, laf, 5, 1.0)
>       self.assert_close(img, patch[0])

../publishablew/kornia/kornia/tests/feature/test_laf.py:438: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0., 1., 2., 3., 4.],
          [0., 1., 2., 3., 4.],
          [0., 1., 2., 3., 4.],
          [0., 1., 2., 3., 4.],
          [0., 1., 2., 3., 4.]]]])
expected = tensor([[[[0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0.]]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 20 / 25 (80.0%)
E       Greatest absolute difference: 4.0 at index (0, 0, 0, 4) (up to 1e-05 allowed)
E       Greatest relative difference: inf at index (0, 0, 0, 1) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
______________ TestExtractPatchesPyr.test_same_even[cpu-float32] _______________

self = <test_laf.TestExtractPatchesPyr object at 0x77bf03adfd00>
device = device(type='cpu'), dtype = torch.float32

    def test_same_even(self, device, dtype):
        img = torch.arange(4)[None].repeat(4, 1)[None, None].to(device, dtype)
        laf = torch.tensor([[1.5, 0, 1.5], [0, 1.5, 1.5]]).reshape(1, 1, 2, 3).to(device, dtype)
    
        patch = kornia.feature.extract_patches_from_pyramid(img, laf, 4, 1.0)
>       self.assert_close(img, patch[0])

../publishablew/kornia/kornia/tests/feature/test_laf.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[0., 1., 2., 3.],
          [0., 1., 2., 3.],
          [0., 1., 2., 3.],
          [0., 1., 2., 3.]]]])
expected = tensor([[[[3., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 13 / 16 (81.2%)
E       Greatest absolute difference: 3.0 at index (0, 0, 0, 0) (up to 1e-05 allowed)
E       Greatest relative difference: inf at index (0, 0, 0, 1) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
__________________ TestExtractPatchesPyr.test_gradcheck[cpu] ___________________

self = <test_laf.TestExtractPatchesPyr object at 0x77bf03adffd0>
device = device(type='cpu')

    def test_gradcheck(self, device):
        nlaf = torch.tensor([[0.1, 0.001, 0.5], [0, 0.1, 0.5]], device=device, dtype=torch.float64)
        nlaf = nlaf.view(1, 1, 2, 3)
        img = torch.rand(1, 3, 20, 30, device=device, dtype=torch.float64)
        PS = 11
>       self.gradcheck(
            kornia.feature.extract_patches_from_pyramid,
            (img, nlaf, PS, False),
            nondet_tol=1e-8,
        )

../publishablew/kornia/kornia/tests/feature/test_laf.py:452: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2081: in _gradcheck_helper
    _gradcheck_real_imag(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1491: in _gradcheck_real_imag
    gradcheck_fn(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1925: in _fast_gradcheck
    _check_analytical_numerical_equal(
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1851: in _check_analytical_numerical_equal
    jacobians_str = _run_slow_mode_and_get_error(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

func = <function extract_patches_from_pyramid at 0x77bf6cf46c20>
tupled_inputs = (tensor([[[[0.7347, 0.3805, 0.7800,  ..., 0.0035, 0.4925, 0.5916],
          [0.6798, 0.3491, 0.8763,  ..., 0.6203, 0....[[[0.1000, 0.0010, 0.5000],
          [0.0000, 0.1000, 0.5000]]]], dtype=torch.float64, requires_grad=True), 11, False)
outputs = (tensor([[[[[0.7321, 0.7273, 0.7285, 0.7334, 0.7383, 0.7432, 0.6247, 0.4997,
            0.3747, 0.2710, 0.2212],
    ....9314, 0.8960, 0.7951, 0.6941, 0.5941, 0.5128, 0.4315,
            0.3502, 0.3231, 0.3831]]]]], grad_fn=<CopySlices>),)
input_idx = 0, output_idx = 0, rtol = 0.001, atol = 1e-05, eps = 1e-06
is_forward_ad = False

    def _run_slow_mode_and_get_error(
        func, tupled_inputs, outputs, input_idx, output_idx, rtol, atol, eps, is_forward_ad
    ):
        # Compute jacobians in slow mode for better error message
        slow_numerical = _get_numerical_jacobian(
            func, tupled_inputs, outputs, eps=eps, is_forward_ad=is_forward_ad
        )[input_idx][output_idx]
        if is_forward_ad:
    
            def new_fn(inp):
                new_inputs = list(tupled_inputs)
                new_inputs[input_idx] = inp
                return _as_tuple(func(*new_inputs))[output_idx]
    
            slow_analytical = _get_analytical_jacobian_forward_ad(
                new_fn, (tupled_inputs[input_idx],), (outputs[output_idx],)
            )[0][0]
        else:
            slow_analytical = _get_analytical_jacobian(
                tupled_inputs, outputs, input_idx, output_idx
            )
    
        # Assume jacobians are non-empty and have the same shape
        slow_max_diff = (slow_numerical - slow_analytical).abs().max()
    
>       slow_allclose = torch.allclose(slow_analytical, slow_numerical, rtol, atol)
E       RuntimeError: Double did not match Float

../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:1772: RuntimeError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu]
FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu]
========================= 4 failed, 1 passed in 1.56s ==========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'onnxrt', 'inductor', 'cudagraphs', 'openxla', 'tvm', None, 'jit'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 5 items

../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_shape[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu] PASSED

============================== 5 passed in 0.18s ===============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'openxla', 'onnxrt', 'jit', 'tvm', None, 'cudagraphs'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 5 items

../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_shape[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_non_zero[cpu] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_odd[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_same_even[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/feature/test_laf.py::TestExtractPatchesPyr::test_gradcheck[cpu] PASSED

============================== 5 passed in 0.22s ===============================
