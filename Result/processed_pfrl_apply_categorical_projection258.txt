output file:
processed_pfrl_apply_categorical_projection258.json
function:
_apply_categorical_projection
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7]', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] FAILED', '../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] FAILED', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7]', 'FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7]'}

All Test Cases On Generated code:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] FAILED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] FAILED

=================================== FAILURES ===================================
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988da9750>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988da9750>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0610>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0610>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0790>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0790>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range0-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0910>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0910>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0a90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0a90>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0c50>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0c50>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0f10>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db0f10>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range1-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db11d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db11d0>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db1490>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db1490>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db1710>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db1710>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db19d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db19d0>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range2-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db1c90>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db1c90>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db1f50>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db1f50>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db2250>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db2250>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db2590>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db2590>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range3-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db28d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db28d0>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db2c10>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db2c10>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db2f50>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db2f50>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db3290>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db3290>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_cpu[v_range4-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db35d0>

    def test_cpu(self):
>       self._test(device=torch.device("cpu"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988db35d0>
device = device(type='cpu')

    def _test(self, device):
        v_min, v_max = self.v_range
        z = np.linspace(v_min, v_max, num=self.n_atoms, dtype=np.float32)
        y = np.random.normal(size=(self.batch_size, self.n_atoms)).astype(np.float32)
        y_probs = np.asarray(
            np.random.dirichlet(
                alpha=np.ones(self.n_atoms), size=self.batch_size
            ).astype(np.float32)
        )
    
        # Naive implementation as ground truths
        proj_gt = _apply_categorical_projection_naive(y, y_probs, z)
        # Projected probabilities should sum to one
        np.testing.assert_allclose(
            proj_gt.sum(axis=1), np.ones(self.batch_size, dtype=np.float32), atol=1e-5
        )
    
        # Batch implementation to test
        proj = (
            categorical_dqn._apply_categorical_projection(
                torch.as_tensor(y, device=device),
                torch.as_tensor(y_probs, device=device),
                torch.as_tensor(z, device=device),
            )
>           .detach()
            .cpu()
            .numpy()
        )
E       AttributeError: 'numpy.ndarray' object has no attribute 'detach'

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:90: AttributeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dbcd10>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[2.1434, 0.0891]], device='cuda:0')
y_probs = tensor([[0.0720, 0.9280]], device='cuda:0')
z = tensor([-3., -1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dbd290>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.4372, -0.3985],
        [ 0.2699,  0.1268],
        [ 1.3174, -0.4961],
        [-0.7258, -1.5404],
        [ 0.8460, -0.2684],
        [-0.1300,  0.3673],
        [ 1.3402,  0.2434]], device='cuda:0')
y_probs = tensor([[0.9349, 0.0651],
        [0.4609, 0.5391],
        [0.5531, 0.4469],
        [0.8068, 0.1932],
        [0.3530, 0.6470],
        [0.9804, 0.0196],
        [0.5816, 0.4184]], device='cuda:0')
z = tensor([-3., -1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dbd810>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.2500,  1.7457,  0.2234,  0.8398, -0.0849]], device='cuda:0')
y_probs = tensor([[0.3663, 0.0303, 0.5279, 0.0541, 0.0214]], device='cuda:0')
z = tensor([-3.0000, -2.5000, -2.0000, -1.5000, -1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range0-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dbfb50>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.1559,  0.6197, -1.0671, -0.1881,  1.1994],
        [ 0.1034, -0.7937, -0.1133,  0.1039, -0.6664],
        ...[-1.5085, -1.3145,  0.9490, -0.4658, -0.3648],
        [ 0.4217,  0.5574,  1.1658, -1.4527, -0.2090]], device='cuda:0')
y_probs = tensor([[0.1123, 0.1435, 0.1990, 0.5322, 0.0130],
        [0.1816, 0.3787, 0.1059, 0.0176, 0.3161],
        [0.1934, 0...,
        [0.2483, 0.1168, 0.4115, 0.0680, 0.1554],
        [0.2626, 0.1300, 0.1816, 0.3711, 0.0546]], device='cuda:0')
z = tensor([-3.0000, -2.5000, -2.0000, -1.5000, -1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dbfcd0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.3526, -0.1118]], device='cuda:0')
y_probs = tensor([[0.3022, 0.6978]], device='cuda:0')
z = tensor([-2.,  0.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dbfe90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.5561,  1.4388],
        [-0.2292,  0.1076],
        [-0.2713,  0.9496],
        [-1.2933, -0.6299],
        [-0.1014, -0.1040],
        [ 1.8576, -0.0548],
        [ 0.5861, -2.4908]], device='cuda:0')
y_probs = tensor([[0.6709, 0.3291],
        [0.1066, 0.8934],
        [0.0746, 0.9254],
        [0.8458, 0.1542],
        [0.4184, 0.5816],
        [0.0109, 0.9891],
        [0.5218, 0.4782]], device='cuda:0')
z = tensor([-2.,  0.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd0190>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.3561, -0.8935,  0.8414, -1.7968,  1.7542]], device='cuda:0')
y_probs = tensor([[0.0691, 0.3538, 0.4338, 0.1121, 0.0312]], device='cuda:0')
z = tensor([-2.0000, -1.5000, -1.0000, -0.5000,  0.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range1-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd0450>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.5357, -2.3667, -2.6726,  0.5875, -2.3040],
        [ 0.0083,  0.3576,  0.6399, -1.1353,  1.5004],
        ...[ 0.4682, -0.4439, -0.2598,  0.9217, -0.6191],
        [ 0.3952,  0.8124, -0.7433, -0.4343,  0.6271]], device='cuda:0')
y_probs = tensor([[2.7879e-01, 5.8961e-03, 3.5255e-01, 1.5958e-01, 2.0319e-01],
        [4.9218e-01, 7.2462e-02, 1.8947e-01, 1.8...1.0977e-01, 4.0252e-01],
        [1.1219e-01, 1.7712e-01, 1.3098e-01, 1.6582e-02, 5.6313e-01]],
       device='cuda:0')
z = tensor([-2.0000, -1.5000, -1.0000, -0.5000,  0.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd0710>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.0554, -0.3674]], device='cuda:0')
y_probs = tensor([[0.9104, 0.0896]], device='cuda:0')
z = tensor([-2.,  1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd0990>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-2.2542, -0.4554],
        [-1.3739, -1.9060],
        [ 1.0654,  0.2154],
        [ 0.2163,  0.8345],
        [-1.3980, -0.6109],
        [ 0.0928, -0.6637],
        [ 0.5999,  0.2848]], device='cuda:0')
y_probs = tensor([[0.1459, 0.8541],
        [0.4574, 0.5426],
        [0.9210, 0.0790],
        [0.5602, 0.4398],
        [0.8374, 0.1626],
        [0.4251, 0.5749],
        [0.4794, 0.5206]], device='cuda:0')
z = tensor([-2.,  1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd0c50>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.0620, -0.8276,  0.7092,  1.0692,  1.5759]], device='cuda:0')
y_probs = tensor([[0.3272, 0.4588, 0.1548, 0.0120, 0.0473]], device='cuda:0')
z = tensor([-2.0000, -1.2500, -0.5000,  0.2500,  1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range2-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd0f10>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.7336,  1.1155, -0.2642, -0.4348, -0.7109],
        [-0.2139, -1.0951, -0.8462, -2.7159, -0.6766],
        ...[ 0.4350,  0.6217,  0.8909, -0.1193,  0.9373],
        [-0.1730,  0.6232, -0.7518,  3.0621, -0.0437]], device='cuda:0')
y_probs = tensor([[0.1887, 0.3337, 0.3452, 0.0806, 0.0518],
        [0.4445, 0.3057, 0.1535, 0.0440, 0.0523],
        [0.1538, 0...,
        [0.0973, 0.3843, 0.0037, 0.1588, 0.3558],
        [0.0124, 0.2391, 0.0316, 0.1109, 0.6060]], device='cuda:0')
z = tensor([-2.0000, -1.2500, -0.5000,  0.2500,  1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd11d0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.2400, -0.0443]], device='cuda:0')
y_probs = tensor([[0.8986, 0.1014]], device='cuda:0')
z = tensor([0., 1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd14d0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.2046,  0.9395],
        [ 1.7125, -1.2331],
        [-0.4210, -1.2199],
        [-0.8393, -1.8758],
        [-0.8965, -0.1341],
        [ 0.5950, -1.2504],
        [-0.6314,  0.3201]], device='cuda:0')
y_probs = tensor([[0.2171, 0.7829],
        [0.4824, 0.5176],
        [0.2170, 0.7830],
        [0.2050, 0.7950],
        [0.6595, 0.3405],
        [0.2396, 0.7604],
        [0.1493, 0.8507]], device='cuda:0')
z = tensor([0., 1.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd1810>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.5739,  0.3198, -0.1480, -0.8514, -0.4335]], device='cuda:0')
y_probs = tensor([[0.0051, 0.4239, 0.2890, 0.2620, 0.0200]], device='cuda:0')
z = tensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range3-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd1b50>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.7942, -0.0840,  1.8001,  0.6488, -1.4628],
        [ 1.3765, -0.8379, -0.7962,  0.9706,  1.5153],
        ...[ 0.9494,  1.5006, -0.3646, -1.7476, -0.4510],
        [ 0.4680,  0.7409, -0.4561, -0.1954,  0.7224]], device='cuda:0')
y_probs = tensor([[0.0541, 0.0373, 0.0802, 0.6938, 0.1347],
        [0.3428, 0.0328, 0.0526, 0.3425, 0.2292],
        [0.0816, 0...,
        [0.0435, 0.2461, 0.3142, 0.0028, 0.3934],
        [0.4434, 0.0079, 0.2129, 0.1871, 0.1487]], device='cuda:0')
z = tensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-2-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd1e90>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.0753, -0.7459]], device='cuda:0')
y_probs = tensor([[0.7438, 0.2562]], device='cuda:0')
z = tensor([1., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-2-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd21d0>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[ 0.0419, -0.0098],
        [-0.3672,  1.1865],
        [-0.4634, -1.7332],
        [ 0.6510,  0.1411],
        [-1.5197,  2.4053],
        [-2.1181,  0.2138],
        [ 0.8601, -0.9373]], device='cuda:0')
y_probs = tensor([[0.8791, 0.1209],
        [0.7765, 0.2235],
        [0.4773, 0.5227],
        [0.9504, 0.0496],
        [0.0751, 0.9249],
        [0.2265, 0.7735],
        [0.1919, 0.8081]], device='cuda:0')
z = tensor([1., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-5-1] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd2510>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-0.9095,  1.5304, -0.9912,  0.4292, -1.1907]], device='cuda:0')
y_probs = tensor([[0.3423, 0.4041, 0.1150, 0.0252, 0.1135]], device='cuda:0')
z = tensor([1., 2., 3., 4., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
______ TestApplyCategoricalProjectionToRandomCases.test_gpu[v_range4-5-7] ______

self = <test_categorical_dqn.TestApplyCategoricalProjectionToRandomCases object at 0x79c988dd2850>

    @pytest.mark.gpu
    def test_gpu(self):
>       self._test(device=torch.device("cuda"))

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py:85: in _test
    categorical_dqn._apply_categorical_projection(
../publishablew/pfrl/pfrl/pfrl/agents/categorical_dqn.py:7: in _apply_categorical_projection
    return _apply_categorical_projection(y, y_probs, z)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = tensor([[-1.1778, -1.3974,  0.3478, -0.6383, -0.1940],
        [-0.9389, -0.4877,  0.1452, -0.7874, -0.2475],
        ...[ 0.0485, -1.8220,  0.2769,  1.2898,  0.1696],
        [-0.2216,  0.6224,  0.3050, -0.3518, -0.6810]], device='cuda:0')
y_probs = tensor([[0.0303, 0.0823, 0.0736, 0.0625, 0.7512],
        [0.1913, 0.0456, 0.2982, 0.3215, 0.1434],
        [0.0635, 0...,
        [0.3666, 0.1252, 0.3289, 0.1165, 0.0628],
        [0.1059, 0.1365, 0.2262, 0.0042, 0.5273]], device='cuda:0')
z = tensor([1., 2., 3., 4., 5.], device='cuda:0')

    def _apply_categorical_projection(y, y_probs, z):
        y = torch.tensor(y, dtype=torch.float32)
        y_probs = torch.tensor(y_probs, dtype=torch.float32)
        z = torch.tensor(z, dtype=torch.float32)
        batch_size, n_atoms = y.shape
        assert y_probs.shape == (batch_size, n_atoms), 'y_probs must have the same shape as y'
        assert z.shape == (n_atoms,), 'z must have shape (n_atoms,)'
        delta_z = z[1] - z[0]
        projected_probs = torch.zeros_like(y_probs)
        for b in range(batch_size):
            y_clamped = torch.clamp(y[b], min=z[0], max=z[-1])
            bj = (y_clamped - z[0]) / delta_z
            l = torch.floor(bj).long()
            u = torch.ceil(bj).long()
            m_l = (u.float() - bj) * y_probs[b]
            m_u = (bj - l.float()) * y_probs[b]
            for j in range(n_atoms):
                if l[j] >= 0 and l[j] < n_atoms:
                    projected_probs[b, l[j]] += m_l[j]
                if u[j] >= 0 and u[j] < n_atoms:
                    projected_probs[b, u[j]] += m_u[j]
>       return projected_probs.numpy()
E       TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.

../publishablew/pfrl/pfrl/pfrl/agents/temp.py:27: TypeError
=============================== warnings summary ===============================
../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

tests/agents_tests/test_categorical_dqn.py: 40 warnings
  /local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:7: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    y = torch.tensor(y, dtype=torch.float32)

tests/agents_tests/test_categorical_dqn.py: 40 warnings
  /local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:8: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    y_probs = torch.tensor(y_probs, dtype=torch.float32)

tests/agents_tests/test_categorical_dqn.py: 40 warnings
  /local/data0/moved_data/publishablew/pfrl/pfrl/pfrl/agents/temp.py:9: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
    z = torch.tensor(z, dtype=torch.float32)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1]
FAILED ../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7]
======================= 40 failed, 124 warnings in 1.70s =======================


Final Test Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] PASSED

=============================== warnings summary ===============================
../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 40 passed, 4 warnings in 1.27s ========================


Initial Result:
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/pfrl/pfrl/venv/bin/python
cachedir: .pytest_cache
rootdir: /local/data0/moved_data/publishablew/pfrl/pfrl
configfile: pytest.ini
collecting ... collected 40 items

../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range0-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range1-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range2-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range3-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_cpu[v_range4-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range0-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range1-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range2-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range3-5-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-2-7] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-1] PASSED
../publishablew/pfrl/pfrl/tests/agents_tests/test_categorical_dqn.py::TestApplyCategoricalProjectionToRandomCases::test_gpu[v_range4-5-7] PASSED

=============================== warnings summary ===============================
../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:271: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:277: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:282: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

../publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287
  /local/data0/moved_data/publishablew/pfrl/pfrl/tests/agents_tests/basetest_training.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.async_ - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.async_

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================== 40 passed, 4 warnings in 1.45s ========================
