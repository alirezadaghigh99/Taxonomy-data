output file:
processed_korniaspatial_gradient127.json
function:
spatial_gradient
Error Cases:

Pass or Failed: 0

Related Failed Test Cases:
{'../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] FAILED', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] FAILED', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1]', 'FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel]', '../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] FAILED'}

All Test Cases On Generated code:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'onnxrt', None, 'jit', 'tvm', 'openxla', 'inductor'}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 34 items

../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] FAILED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] FAILED

=================================== FAILURES ===================================
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-sobel-1] __________

self = <test_sobel.TestSpatialGradient object at 0x758432afdf90>, batch_size = 1
mode = 'sobel', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-sobel-2] __________

self = <test_sobel.TestSpatialGradient object at 0x758432afdd20>, batch_size = 2
mode = 'sobel', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-diff-1] ___________

self = <test_sobel.TestSpatialGradient object at 0x758432afdde0>, batch_size = 1
mode = 'diff', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-1-diff-2] ___________

self = <test_sobel.TestSpatialGradient object at 0x758432afdea0>, batch_size = 2
mode = 'diff', order = 1, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-sobel-1] __________

self = <test_sobel.TestSpatialGradient object at 0x758432afdba0>, batch_size = 1
mode = 'sobel', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-sobel-2] __________

self = <test_sobel.TestSpatialGradient object at 0x758432afe4d0>, batch_size = 2
mode = 'sobel', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-diff-1] ___________

self = <test_sobel.TestSpatialGradient object at 0x758432afe590>, batch_size = 1
mode = 'diff', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-True-2-diff-2] ___________

self = <test_sobel.TestSpatialGradient object at 0x758432afe650>, batch_size = 2
mode = 'diff', order = 2, normalized = True, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
_________ TestSpatialGradient.test_smoke[cpu-float32-False-2-sobel-1] __________

self = <test_sobel.TestSpatialGradient object at 0x758432afea10>, batch_size = 1
mode = 'sobel', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = False

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
_________ TestSpatialGradient.test_smoke[cpu-float32-False-2-sobel-2] __________

self = <test_sobel.TestSpatialGradient object at 0x758432afead0>, batch_size = 2
mode = 'sobel', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 2, normalized = False

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-False-2-diff-1] __________

self = <test_sobel.TestSpatialGradient object at 0x758432afeb90>, batch_size = 1
mode = 'diff', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = False

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
__________ TestSpatialGradient.test_smoke[cpu-float32-False-2-diff-2] __________

self = <test_sobel.TestSpatialGradient object at 0x758432afec50>, batch_size = 2
mode = 'diff', order = 2, normalized = False, device = device(type='cpu')
dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("normalized", [True, False])
    def test_smoke(self, batch_size, mode, order, normalized, device, dtype):
        data = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       actual = SpatialGradient(mode, order, normalized)(data)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'diff', order = 2, normalized = False

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
_____________ TestSpatialGradient.test_cardinality[cpu-float32-1] ______________

self = <test_sobel.TestSpatialGradient object at 0x758432afefe0>, batch_size = 1
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_cardinality(self, batch_size, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       assert SpatialGradient()(inp).shape == (batch_size, 3, 2, 4, 4)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
_____________ TestSpatialGradient.test_cardinality[cpu-float32-2] ______________

self = <test_sobel.TestSpatialGradient object at 0x758432afef20>, batch_size = 2
device = device(type='cpu'), dtype = torch.float32

    @pytest.mark.parametrize("batch_size", [1, 2])
    def test_cardinality(self, batch_size, device, dtype):
        inp = torch.zeros(batch_size, 3, 4, 4, device=device, dtype=dtype)
>       assert SpatialGradient()(inp).shape == (batch_size, 3, 2, 4, 4)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]],

    ...]],

         [[0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.],
          [0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
______________________ TestSpatialGradient.test_exception ______________________

self = <test_sobel.TestSpatialGradient object at 0x758432aff2b0>

    def test_exception(self):
        with pytest.raises(TypeError) as errinfo:
>           spatial_gradient(1)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = 1, mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
>       B, C, H, W = input_image.shape
E       AttributeError: 'int' object has no attribute 'shape'

../publishablew/kornia/kornia/kornia/filters/temp.py:29: AttributeError
_________________ TestSpatialGradient.test_edges[cpu-float32] __________________

self = <test_sobel.TestSpatialGradient object at 0x758432aff5b0>
device = device(type='cpu'), dtype = torch.float32

    def test_edges(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = torch.tensor(
            [
                [
                    [
                        [
                            [0.0, 1.0, 0.0, -1.0, 0.0],
                            [1.0, 3.0, 0.0, -3.0, -1.0],
                            [2.0, 4.0, 0.0, -4.0, -2.0],
                            [1.0, 3.0, 0.0, -3.0, -1.0],
                            [0.0, 1.0, 0.0, -1.0, 0.0],
                        ],
                        [
                            [0.0, 1.0, 2.0, 1.0, 0.0],
                            [1.0, 3.0, 4.0, 3.0, 1.0],
                            [0.0, 0.0, 0.0, 0.0, 0],
                            [-1.0, -3.0, -4.0, -3.0, -1],
                            [0.0, -1.0, -2.0, -1.0, 0.0],
                        ],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        edges = spatial_gradient(inp, normalized=False)
>       self.assert_close(edges, expected)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:106: in assert_close
    return assert_close(actual, expected, rtol=rtol, atol=atol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

actual = tensor([[[[[ 0., -1.,  0.,  1.,  0.],
           [-1., -3.,  0.,  3.,  1.],
           [-2., -4.,  0.,  4.,  2.],
    ...,
           [ 0.,  0.,  0.,  0.,  0.],
           [ 1.,  3.,  4.,  3.,  1.],
           [ 0.,  1.,  2.,  1.,  0.]]]]])
expected = tensor([[[[[ 0.,  1.,  0., -1.,  0.],
           [ 1.,  3.,  0., -3., -1.],
           [ 2.,  4.,  0., -4., -2.],
    ...,
           [ 0.,  0.,  0.,  0.,  0.],
           [-1., -3., -4., -3., -1.],
           [ 0., -1., -2., -1.,  0.]]]]])
rtol = 0.0001, atol = 1e-05, kwargs = {}

    def assert_close(
        actual: Tensor, expected: Tensor, *, rtol: Optional[float] = None, atol: Optional[float] = None, **kwargs: Any
    ) -> None:
        if rtol is None and atol is None:
            # `torch.testing.assert_close` used different default tolerances than `torch.testing.assert_allclose`.
            # TODO: remove this special handling as soon as https://github.com/kornia/kornia/issues/1134 is resolved
            #  Basically, this whole wrapper function can be removed and `torch.testing.assert_close` can be used
            #  directly.
            rtol, atol = _default_tolerances(actual, expected)
    
>       return _assert_close(
            actual,
            expected,
            rtol=rtol,
            atol=atol,
            # this is the default value for torch>=1.10, but not for torch==1.9
            # TODO: remove this if kornia relies on torch>=1.10
            check_stride=False,
            equal_nan=False,
            **kwargs,
        )
E       AssertionError: Tensor-likes are not close!
E       
E       Mismatched elements: 32 / 50 (64.0%)
E       Greatest absolute difference: 8.0 at index (0, 0, 0, 2, 1) (up to 1e-05 allowed)
E       Greatest relative difference: 2.0 at index (0, 0, 0, 0, 1) (up to 0.0001 allowed)

../publishablew/kornia/kornia/testing/base.py:37: AssertionError
_______________ TestSpatialGradient.test_edges_norm[cpu-float32] _______________

self = <test_sobel.TestSpatialGradient object at 0x758432aff8e0>
device = device(type='cpu'), dtype = torch.float32

    def test_edges_norm(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = (
            torch.tensor(
                [
                    [
                        [
                            [
                                [0.0, 1.0, 0.0, -1.0, 0.0],
                                [1.0, 3.0, 0.0, -3.0, -1.0],
                                [2.0, 4.0, 0.0, -4.0, -2.0],
                                [1.0, 3.0, 0.0, -3.0, -1.0],
                                [0.0, 1.0, 0.0, -1.0, 0.0],
                            ],
                            [
                                [0.0, 1.0, 2.0, 1.0, 0.0],
                                [1.0, 3.0, 4.0, 3.0, 1.0],
                                [0.0, 0.0, 0.0, 0.0, 0],
                                [-1.0, -3.0, -4.0, -3.0, -1],
                                [0.0, -1.0, -2.0, -1.0, 0.0],
                            ],
                        ]
                    ]
                ],
                device=device,
                dtype=dtype,
            )
            / 8.0
        )
    
>       edges = spatial_gradient(inp, normalized=True)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0., 0.],
          [0., 0., 1., 0., 0.],
          [0., 1., 1., 1., 0.],
          [0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
_____________ TestSpatialGradient.test_edges_sep_norm[cpu-float32] _____________

self = <test_sobel.TestSpatialGradient object at 0x758432afff40>
device = device(type='cpu'), dtype = torch.float32

    def test_edges_sep_norm(self, device, dtype):
        inp = torch.tensor(
            [
                [
                    [
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 1.0, 1.0, 1.0, 0.0],
                        [0.0, 0.0, 1.0, 0.0, 0.0],
                        [0.0, 0.0, 0.0, 0.0, 0.0],
                    ]
                ]
            ],
            device=device,
            dtype=dtype,
        )
    
        expected = (
            torch.tensor(
                [
                    [
                        [
                            [
                                [0.0, 0.0, 0.0, 0.0, 0.0],
                                [0.0, 1.0, 0.0, -1.0, 0.0],
                                [1.0, 1.0, 0.0, -1.0, -1.0],
                                [0.0, 1.0, 0.0, -1.0, 0.0],
                                [0.0, 0.0, 0.0, 0.0, 0.0],
                            ],
                            [
                                [0.0, 0.0, 1.0, 0.0, 0.0],
                                [0.0, 1.0, 1.0, 1.0, 0.0],
                                [0.0, 0.0, 0.0, 0.0, 0.0],
                                [0.0, -1.0, -1.0, -1.0, 0.0],
                                [0.0, 0.0, -1.0, 0.0, 0.0],
                            ],
                        ]
                    ]
                ],
                device=device,
                dtype=dtype,
            )
            / 2.0
        )
    
>       edges = spatial_gradient(inp, "diff", normalized=True)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0., 0., 0., 0., 0.],
          [0., 0., 1., 0., 0.],
          [0., 1., 1., 1., 0.],
          [0., 0., 1., 0., 0.],
          [0., 0., 0., 0., 0.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
_____________ TestSpatialGradient.test_noncontiguous[cpu-float32] ______________

self = <test_sobel.TestSpatialGradient object at 0x7584329302b0>
device = device(type='cpu'), dtype = torch.float32

    def test_noncontiguous(self, device, dtype):
        batch_size = 3
        inp = torch.rand(3, 5, 5, device=device, dtype=dtype).expand(batch_size, -1, -1, -1)
    
>       actual = spatial_gradient(inp)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0.2343, 0.0660, 0.2990, 0.0806, 0.9487],
          [0.9358, 0.2627, 0.9214, 0.8811, 0.0141],
          [0.0...49, 0.9724],
          [0.7118, 0.4747, 0.0110, 0.2684, 0.9140],
          [0.4330, 0.7341, 0.6986, 0.6712, 0.6976]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
E           RuntimeError: view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.

../publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
___________________ TestSpatialGradient.test_gradcheck[cpu] ____________________

self = <test_sobel.TestSpatialGradient object at 0x758432930580>
device = device(type='cpu')

    def test_gradcheck(self, device):
        batch_size, channels, height, width = 1, 1, 3, 4
        img = torch.rand(batch_size, channels, height, width, device=device, dtype=torch.float64)
>       self.gradcheck(spatial_gradient, (img,))

../publishablew/kornia/kornia/tests/filters/test_sobel.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/testing/base.py:143: in gradcheck
    return gradcheck(func, inputs, raise_exception=raise_exception, fast_mode=fast_mode, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2052: in gradcheck
    return _gradcheck_helper(**args)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/autograd/gradcheck.py:2074: in _gradcheck_helper
    func_out = func(*tupled_inputs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[0.0336, 0.3194, 0.8134, 0.4476],
          [0.8918, 0.9026, 0.6584, 0.1049],
          [0.3130, 0.2274, 0.4233, 0.6409]]]], dtype=torch.float64,
       requires_grad=True)
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
>           grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
E           RuntimeError: expected scalar type Double but found Float

../publishablew/kornia/kornia/kornia/filters/temp.py:33: RuntimeError
_________________ TestSpatialGradient.test_module[cpu-float32] _________________

self = <test_sobel.TestSpatialGradient object at 0x758432affa30>
device = device(type='cpu'), dtype = torch.float32

    def test_module(self, device, dtype):
        img = torch.rand(2, 3, 4, 5, device=device, dtype=dtype)
        op = spatial_gradient
        op_module = SpatialGradient()
>       expected = op(img)

../publishablew/kornia/kornia/tests/filters/test_sobel.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[5.9327e-01, 7.6874e-01, 4.7398e-01, 7.6770e-03, 7.1609e-01],
          [6.0431e-01, 6.0419e-01, 2.6290e-01,...09e-02, 7.2008e-01, 1.9090e-01, 2.0679e-01],
          [2.6284e-01, 6.5889e-01, 2.2453e-01, 2.3472e-01, 7.8381e-01]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-1-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x758432930af0>, batch_size = 1
order = 1, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x758507fdd7e0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

../publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-1-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x758432930a30>, batch_size = 1
order = 1, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x758507fdd7e0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

../publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-2-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x758432930910>, batch_size = 1
order = 2, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x758507fdd7e0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

../publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-1-2-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x758432930e20>, batch_size = 1
order = 2, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x758507fdd7e0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

../publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-1-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x758432930ee0>, batch_size = 2
order = 1, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x758507fdd7e0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

../publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-1-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x758432930fa0>, batch_size = 2
order = 1, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x758507fdd7e0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

../publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 1, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
            raise ValueError('Only first-order derivatives are supported in this implementation.')
        if mode not in ['sobel', 'diff']:
            raise ValueError("Mode must be either 'sobel' or 'diff'.")
        B, C, H, W = input_image.shape
        if mode == 'sobel':
            sobel_x = torch.tensor([[1, 0, -1], [2, 0, -2], [1, 0, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            sobel_y = torch.tensor([[1, 2, 1], [0, 0, 0], [-1, -2, -1]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), sobel_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), sobel_y, padding=1)
        elif mode == 'diff':
            diff_x = torch.tensor([[0, 0, 0], [-1, 0, 1], [0, 0, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            diff_y = torch.tensor([[0, -1, 0], [0, 0, 0], [0, 1, 0]], dtype=torch.float32, device=input_image.device).view(1, 1, 3, 3)
            grad_x = F.conv2d(input_image.view(B * C, 1, H, W), diff_x, padding=1)
            grad_y = F.conv2d(input_image.view(B * C, 1, H, W), diff_y, padding=1)
        grad_x = grad_x.view(B, C, H, W)
        grad_y = grad_y.view(B, C, H, W)
        gradients = torch.stack((grad_x, grad_y), dim=2)
        if normalized:
>           gradients = gradients / (gradients.abs().max(dim=(2, 3, 4), keepdim=True)[0] + 1e-06)
E           TypeError: max() received an invalid combination of arguments - got (keepdim=bool, dim=tuple, ), but expected one of:
E            * ()
E            * (Tensor other)
E            * (int dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim
E            * (name dim, bool keepdim = False)
E                 didn't match because some of the keywords were incorrect: keepdim

../publishablew/kornia/kornia/kornia/filters/temp.py:44: TypeError
_______ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-2-sobel] ________

self = <test_sobel.TestSpatialGradient object at 0x758432931060>, batch_size = 2
order = 2, mode = 'sobel', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x758507fdd7e0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

../publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'sobel', order = 2, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
________ TestSpatialGradient.test_dynamo[cpu-float32-inductor-2-2-diff] ________

self = <test_sobel.TestSpatialGradient object at 0x758432931120>, batch_size = 2
order = 2, mode = 'diff', device = device(type='cpu'), dtype = torch.float32
torch_optimizer = functools.partial(<function compile at 0x758507fdd7e0>, backend='inductor')

    @pytest.mark.parametrize("mode", ["sobel", "diff"])
    @pytest.mark.parametrize("order", [1, 2])
    @pytest.mark.parametrize("batch_size", [1, 2])
    @pytest.mark.xfail(torch_version() in {"2.0.1"}, reason="random failing")
    def test_dynamo(self, batch_size, order, mode, device, dtype, torch_optimizer):
        data = torch.ones(batch_size, 3, 10, 10, device=device, dtype=dtype)
        if order == 1 and dtype == torch.float64:
            # TODO: FIX order 1 spatial gradient with fp64 on dynamo
            pytest.xfail(reason="Order 1 on spatial gradient may be wrong computed for float64 on dynamo")
        op = SpatialGradient(mode, order)
        op_optimized = torch_optimizer(op)
    
>       self.assert_close(op(data), op_optimized(data))

../publishablew/kornia/kornia/tests/filters/test_sobel.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../publishablew/kornia/kornia/kornia/core/module.py:274: in __call__
    _output_image = decorated_forward(*inputs, **kwargs)
../publishablew/kornia/kornia/kornia/core/module.py:63: in wrapper
    tensor_outputs = func(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1736: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
../publishablew/kornia/kornia/venv/lib/python3.10/site-packages/torch/nn/modules/module.py:1747: in _call_impl
    return forward_call(*args, **kwargs)
../publishablew/kornia/kornia/kornia/filters/sobel.py:154: in forward
    return spatial_gradient(input, self.mode, self.order, self.normalized)
../publishablew/kornia/kornia/kornia/filters/sobel.py:12: in spatial_gradient
    return spatial_gradient(input, mode, order, normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input_image = tensor([[[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1.,...1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
          [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]]])
mode = 'diff', order = 2, normalized = True

    def spatial_gradient(input_image, mode='sobel', order=1, normalized=False):
        """
        Computes the first-order image derivative in both x and y using a Sobel operator or simple difference.
    
        Parameters:
        - input_image: torch.Tensor of shape (B, C, H, W)
        - mode: str, either 'sobel' or 'diff'
        - order: int, the order of the derivatives (only 1 is supported in this implementation)
        - normalized: bool, whether to normalize the output
    
        Returns:
        - torch.Tensor of shape (B, C, 2, H, W) containing the derivatives
        """
        if order != 1:
>           raise ValueError('Only first-order derivatives are supported in this implementation.')
E           ValueError: Only first-order derivatives are supported in this implementation.

../publishablew/kornia/kornia/kornia/filters/temp.py:26: ValueError
=========================== short test summary info ============================
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel]
FAILED ../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff]
========================= 29 failed, 5 passed in 1.48s =========================


Final Test Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'inductor', 'openxla', 'onnxrt', 'cudagraphs', 'tvm', 'jit', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 34 items

../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] PASSED

============================== 34 passed in 2.59s ==============================


Initial Result:
Setting up torch compile...
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.3, pluggy-1.5.0 -- /local/data0/moved_data/publishablew/kornia/kornia/venv/bin/python
cachedir: .pytest_cache

cpu info:
	- Model name: AMD Ryzen 7 PRO 5845 8-Core Processor
	- Architecture: x86_64
	- CPU(s): 16
	- Thread(s) per core: 2
	- CPU max MHz: 4661.7178
	- CPU min MHz: 2200.0000
gpu info: {'GPU 0': 'NVIDIA GeForce RTX 3060'}
main deps:
    - kornia-0.7.4
    - torch-2.5.1+cu124
        - commit: a8d6afb511a69687bbb2b7e88a3cf67917e1697e
        - cuda: 12.4
        - nvidia-driver: 555.42.02
x deps:
    - accelerate-1.1.1
dev deps:
    - kornia_rs-0.1.7
    - onnx-1.17.0
gcc info: (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0
available optimizers: {'', 'cudagraphs', 'tvm', 'openxla', 'jit', 'inductor', 'onnxrt', None}
model weights cached: ['checkpoints']

rootdir: /local/data0/moved_data/publishablew/kornia/kornia
configfile: pyproject.toml
plugins: timeout-2.3.1
collecting ... collected 34 items

../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-sobel-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-1-diff-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-sobel-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-True-2-diff-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-sobel-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-1-diff-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-sobel-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_smoke[cpu-float32-False-2-diff-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-1] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_cardinality[cpu-float32-2] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_exception PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_norm[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_edges_sep_norm[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_noncontiguous[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_gradcheck[cpu] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_module[cpu-float32] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-sobel] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-1-diff] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-sobel] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-1-2-diff] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-sobel] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-1-diff] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-sobel] PASSED
../publishablew/kornia/kornia/tests/filters/test_sobel.py::TestSpatialGradient::test_dynamo[cpu-float32-inductor-2-2-diff] PASSED

============================== 34 passed in 2.92s ==============================
